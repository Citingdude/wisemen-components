const style$1 = "";
function makeMap$1(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map2[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
function normalizeStyle$1(value) {
  if (isArray$5(value)) {
    const res = {};
    for (let i2 = 0; i2 < value.length; i2++) {
      const item = value[i2];
      const normalized = isString$4(item) ? parseStringStyle$1(item) : normalizeStyle$1(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$4(value)) {
    return value;
  } else if (isObject$4(value)) {
    return value;
  }
}
const listDelimiterRE$1 = /;(?![^(]*\))/g;
const propertyDelimiterRE$1 = /:([^]+)/;
const styleCommentRE$1 = /\/\*.*?\*\//gs;
function parseStringStyle$1(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE$1, "").split(listDelimiterRE$1).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE$1);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass$1(value) {
  let res = "";
  if (isString$4(value)) {
    res = value;
  } else if (isArray$5(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      const normalized = normalizeClass$1(value[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$4(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps$1(props) {
  if (!props)
    return null;
  let { class: klass, style: style2 } = props;
  if (klass && !isString$4(klass)) {
    props.class = normalizeClass$1(klass);
  }
  if (style2) {
    props.style = normalizeStyle$1(style2);
  }
  return props;
}
const HTML_TAGS$1 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS$1 = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const isHTMLTag$1 = /* @__PURE__ */ makeMap$1(HTML_TAGS$1);
const isSVGTag$1 = /* @__PURE__ */ makeMap$1(SVG_TAGS$1);
const specialBooleanAttrs$1 = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr$1 = /* @__PURE__ */ makeMap$1(specialBooleanAttrs$1);
function includeBooleanAttr$1(value) {
  return !!value || value === "";
}
const toDisplayString$2 = (val) => {
  return isString$4(val) ? val : val == null ? "" : isArray$5(val) || isObject$4(val) && (val.toString === objectToString$2 || !isFunction$4(val.toString)) ? JSON.stringify(val, replacer$1, 2) : String(val);
};
const replacer$1 = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer$1(_key, val.value);
  } else if (isMap$1(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet$1(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$4(val) && !isArray$5(val) && !isPlainObject$6(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ$1 = Object.freeze({});
const EMPTY_ARR$1 = Object.freeze([]);
const NOOP$1 = () => {
};
const NO$1 = () => false;
const onRE$1 = /^on[^a-z]/;
const isOn$1 = (key) => onRE$1.test(key);
const isModelListener$1 = (key) => key.startsWith("onUpdate:");
const extend$2 = Object.assign;
const remove$1 = (arr, el2) => {
  const i2 = arr.indexOf(el2);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$1$1 = Object.prototype.hasOwnProperty;
const hasOwn$2 = (val, key) => hasOwnProperty$1$1.call(val, key);
const isArray$5 = Array.isArray;
const isMap$1 = (val) => toTypeString$2(val) === "[object Map]";
const isSet$1 = (val) => toTypeString$2(val) === "[object Set]";
const isFunction$4 = (val) => typeof val === "function";
const isString$4 = (val) => typeof val === "string";
const isSymbol$1 = (val) => typeof val === "symbol";
const isObject$4 = (val) => val !== null && typeof val === "object";
const isPromise$1 = (val) => {
  return isObject$4(val) && isFunction$4(val.then) && isFunction$4(val.catch);
};
const objectToString$2 = Object.prototype.toString;
const toTypeString$2 = (value) => objectToString$2.call(value);
const toRawType$1 = (value) => {
  return toTypeString$2(value).slice(8, -1);
};
const isPlainObject$6 = (val) => toTypeString$2(val) === "[object Object]";
const isIntegerKey$1 = (key) => isString$4(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp$1 = /* @__PURE__ */ makeMap$1(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective$1 = /* @__PURE__ */ makeMap$1("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction$1 = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE$1 = /-(\w)/g;
const camelize$1 = cacheStringFunction$1((str) => {
  return str.replace(camelizeRE$1, (_2, c2) => c2 ? c2.toUpperCase() : "");
});
const hyphenateRE$1 = /\B([A-Z])/g;
const hyphenate$1 = cacheStringFunction$1((str) => str.replace(hyphenateRE$1, "-$1").toLowerCase());
const capitalize$2 = cacheStringFunction$1((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey$1 = cacheStringFunction$1((str) => str ? `on${capitalize$2(str)}` : ``);
const hasChanged$1 = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns$1 = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def$1 = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber$1 = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber$1 = (val) => {
  const n2 = isString$4(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis$2;
const getGlobalThis$2 = () => {
  return _globalThis$2 || (_globalThis$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function warn$1$1(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope$1;
let EffectScope$1 = class EffectScope2 {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope$1;
    if (!detached && activeEffectScope$1) {
      this.index = (activeEffectScope$1.scopes || (activeEffectScope$1.scopes = [])).push(this) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope$1;
      try {
        activeEffectScope$1 = this;
        return fn2();
      } finally {
        activeEffectScope$1 = currentEffectScope;
      }
    } else {
      warn$1$1(`cannot run an inactive effect scope.`);
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope$1 = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope$1 = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i2, l2;
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].stop();
      }
      for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
        this.cleanups[i2]();
      }
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
};
function effectScope$1(detached) {
  return new EffectScope$1(detached);
}
function recordEffectScope$1(effect, scope = activeEffectScope$1) {
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
function getCurrentScope$1() {
  return activeEffectScope$1;
}
function onScopeDispose$1(fn2) {
  if (activeEffectScope$1) {
    activeEffectScope$1.cleanups.push(fn2);
  } else {
    warn$1$1(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
  }
}
const createDep$1 = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked$1 = (dep) => (dep.w & trackOpBit$1) > 0;
const newTracked$1 = (dep) => (dep.n & trackOpBit$1) > 0;
const initDepMarkers$1 = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit$1;
    }
  }
};
const finalizeDepMarkers$1 = (effect) => {
  const { deps } = effect;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked$1(dep) && !newTracked$1(dep)) {
        dep.delete(effect);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit$1;
      dep.n &= ~trackOpBit$1;
    }
    deps.length = ptr;
  }
};
const targetMap$1 = /* @__PURE__ */ new WeakMap();
let effectTrackDepth$1 = 0;
let trackOpBit$1 = 1;
const maxMarkerBits$1 = 30;
let activeEffect$1;
const ITERATE_KEY$1 = Symbol("iterate");
const MAP_KEY_ITERATE_KEY$1 = Symbol("Map key iterate");
let ReactiveEffect$1 = class ReactiveEffect2 {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope$1(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect$1;
    let lastShouldTrack = shouldTrack$1;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect$1;
      activeEffect$1 = this;
      shouldTrack$1 = true;
      trackOpBit$1 = 1 << ++effectTrackDepth$1;
      if (effectTrackDepth$1 <= maxMarkerBits$1) {
        initDepMarkers$1(this);
      } else {
        cleanupEffect$1(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth$1 <= maxMarkerBits$1) {
        finalizeDepMarkers$1(this);
      }
      trackOpBit$1 = 1 << --effectTrackDepth$1;
      activeEffect$1 = this.parent;
      shouldTrack$1 = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect$1 === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect$1(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
};
function cleanupEffect$1(effect) {
  const { deps } = effect;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect);
    }
    deps.length = 0;
  }
}
let shouldTrack$1 = true;
const trackStack$1 = [];
function pauseTracking$1() {
  trackStack$1.push(shouldTrack$1);
  shouldTrack$1 = false;
}
function resetTracking$1() {
  const last = trackStack$1.pop();
  shouldTrack$1 = last === void 0 ? true : last;
}
function track$1(target, type, key) {
  if (shouldTrack$1 && activeEffect$1) {
    let depsMap = targetMap$1.get(target);
    if (!depsMap) {
      targetMap$1.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep$1());
    }
    const eventInfo = { effect: activeEffect$1, target, type, key };
    trackEffects$1(dep, eventInfo);
  }
}
function trackEffects$1(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth$1 <= maxMarkerBits$1) {
    if (!newTracked$1(dep)) {
      dep.n |= trackOpBit$1;
      shouldTrack2 = !wasTracked$1(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect$1);
  }
  if (shouldTrack2) {
    dep.add(activeEffect$1);
    activeEffect$1.deps.push(dep);
    if (activeEffect$1.onTrack) {
      activeEffect$1.onTrack(Object.assign({ effect: activeEffect$1 }, debuggerEventExtraInfo));
    }
  }
}
function trigger$1(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap$1.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$5(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$5(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
          if (isMap$1(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY$1));
          }
        } else if (isIntegerKey$1(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$5(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
          if (isMap$1(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY$1));
          }
        }
        break;
      case "set":
        if (isMap$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
        }
        break;
    }
  }
  const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects$1(deps[0], eventInfo);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects$1(createDep$1(effects), eventInfo);
    }
  }
}
function triggerEffects$1(dep, debuggerEventExtraInfo) {
  const effects = isArray$5(dep) ? dep : [...dep];
  for (const effect of effects) {
    if (effect.computed) {
      triggerEffect$1(effect, debuggerEventExtraInfo);
    }
  }
  for (const effect of effects) {
    if (!effect.computed) {
      triggerEffect$1(effect, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect$1(effect, debuggerEventExtraInfo) {
  if (effect !== activeEffect$1 || effect.allowRecurse) {
    if (effect.onTrigger) {
      effect.onTrigger(extend$2({ effect }, debuggerEventExtraInfo));
    }
    if (effect.scheduler) {
      effect.scheduler();
    } else {
      effect.run();
    }
  }
}
function getDepFromReactive$1(object, key) {
  var _a2;
  return (_a2 = targetMap$1.get(object)) === null || _a2 === void 0 ? void 0 : _a2.get(key);
}
const isNonTrackableKeys$1 = /* @__PURE__ */ makeMap$1(`__proto__,__v_isRef,__isVue`);
const builtInSymbols$1 = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol$1)
);
const get$1$2 = /* @__PURE__ */ createGetter$1();
const shallowGet$1 = /* @__PURE__ */ createGetter$1(false, true);
const readonlyGet$1 = /* @__PURE__ */ createGetter$1(true);
const shallowReadonlyGet$1 = /* @__PURE__ */ createGetter$1(true, true);
const arrayInstrumentations$1 = /* @__PURE__ */ createArrayInstrumentations$1();
function createArrayInstrumentations$1() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw$1(this);
      for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
        track$1(arr, "get", i2 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw$1));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking$1();
      const res = toRaw$1(this)[key].apply(this, args);
      resetTracking$1();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty$4(key) {
  const obj = toRaw$1(this);
  track$1(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter$1(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap$1 : readonlyMap$1 : shallow ? shallowReactiveMap$1 : reactiveMap$1).get(target)) {
      return target;
    }
    const targetIsArray = isArray$5(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn$2(arrayInstrumentations$1, key)) {
        return Reflect.get(arrayInstrumentations$1, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty$4;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol$1(key) ? builtInSymbols$1.has(key) : isNonTrackableKeys$1(key)) {
      return res;
    }
    if (!isReadonly2) {
      track$1(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef$1(res)) {
      return targetIsArray && isIntegerKey$1(key) ? res : res.value;
    }
    if (isObject$4(res)) {
      return isReadonly2 ? readonly$1(res) : reactive$1(res);
    }
    return res;
  };
}
const set$1$1 = /* @__PURE__ */ createSetter$1();
const shallowSet$1 = /* @__PURE__ */ createSetter$1(true);
function createSetter$1(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly$1(oldValue) && isRef$1(oldValue) && !isRef$1(value)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow$1$1(value) && !isReadonly$1(value)) {
        oldValue = toRaw$1(oldValue);
        value = toRaw$1(value);
      }
      if (!isArray$5(target) && isRef$1(oldValue) && !isRef$1(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$5(target) && isIntegerKey$1(key) ? Number(key) < target.length : hasOwn$2(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw$1(receiver)) {
      if (!hadKey) {
        trigger$1(target, "add", key, value);
      } else if (hasChanged$1(value, oldValue)) {
        trigger$1(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty$1(target, key) {
  const hadKey = hasOwn$2(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger$1(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has$1$1(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol$1(key) || !builtInSymbols$1.has(key)) {
    track$1(target, "has", key);
  }
  return result;
}
function ownKeys$1(target) {
  track$1(target, "iterate", isArray$5(target) ? "length" : ITERATE_KEY$1);
  return Reflect.ownKeys(target);
}
const mutableHandlers$1 = {
  get: get$1$2,
  set: set$1$1,
  deleteProperty: deleteProperty$1,
  has: has$1$1,
  ownKeys: ownKeys$1
};
const readonlyHandlers$1 = {
  get: readonlyGet$1,
  set(target, key) {
    {
      warn$1$1(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    {
      warn$1$1(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  }
};
const shallowReactiveHandlers$1 = /* @__PURE__ */ extend$2({}, mutableHandlers$1, {
  get: shallowGet$1,
  set: shallowSet$1
});
const shallowReadonlyHandlers$1 = /* @__PURE__ */ extend$2({}, readonlyHandlers$1, {
  get: shallowReadonlyGet$1
});
const toShallow$1 = (value) => value;
const getProto$1 = (v3) => Reflect.getPrototypeOf(v3);
function get$3(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  const rawTarget = toRaw$1(target);
  const rawKey = toRaw$1(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track$1(rawTarget, "get", key);
    }
    track$1(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto$1(rawTarget);
  const wrap2 = isShallow2 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
  if (has2.call(rawTarget, key)) {
    return wrap2(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap2(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$2(key, isReadonly2 = false) {
  const target = this[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  const rawTarget = toRaw$1(target);
  const rawKey = toRaw$1(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track$1(rawTarget, "has", key);
    }
    track$1(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size$2(target, isReadonly2 = false) {
  target = target[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  !isReadonly2 && track$1(toRaw$1(target), "iterate", ITERATE_KEY$1);
  return Reflect.get(target, "size", target);
}
function add$1(value) {
  value = toRaw$1(value);
  const target = toRaw$1(this);
  const proto = getProto$1(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger$1(target, "add", value, value);
  }
  return this;
}
function set$4(key, value) {
  value = toRaw$1(value);
  const target = toRaw$1(this);
  const { has: has2, get: get2 } = getProto$1(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw$1(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys$1(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger$1(target, "add", key, value);
  } else if (hasChanged$1(value, oldValue)) {
    trigger$1(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry$1(key) {
  const target = toRaw$1(this);
  const { has: has2, get: get2 } = getProto$1(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw$1(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys$1(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger$1(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear$1() {
  const target = toRaw$1(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap$1(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger$1(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach$1(isReadonly2, isShallow2) {
  return function forEach2(callback, thisArg) {
    const observed = this;
    const target = observed[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ];
    const rawTarget = toRaw$1(target);
    const wrap2 = isShallow2 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
    !isReadonly2 && track$1(rawTarget, "iterate", ITERATE_KEY$1);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap2(value), wrap2(key), observed);
    });
  };
}
function createIterableMethod$1(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ];
    const rawTarget = toRaw$1(target);
    const targetIsMap = isMap$1(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap2 = isShallow2 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
    !isReadonly2 && track$1(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY$1 : ITERATE_KEY$1);
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod$1(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(`${capitalize$2(type)} operation ${key}failed: target is readonly.`, toRaw$1(this));
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations$1() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$3(this, key);
    },
    get size() {
      return size$2(this);
    },
    has: has$2,
    add: add$1,
    set: set$4,
    delete: deleteEntry$1,
    clear: clear$1,
    forEach: createForEach$1(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$3(this, key, false, true);
    },
    get size() {
      return size$2(this);
    },
    has: has$2,
    add: add$1,
    set: set$4,
    delete: deleteEntry$1,
    clear: clear$1,
    forEach: createForEach$1(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$3(this, key, true);
    },
    get size() {
      return size$2(this, true);
    },
    has(key) {
      return has$2.call(this, key, true);
    },
    add: createReadonlyMethod$1(
      "add"
      /* TriggerOpTypes.ADD */
    ),
    set: createReadonlyMethod$1(
      "set"
      /* TriggerOpTypes.SET */
    ),
    delete: createReadonlyMethod$1(
      "delete"
      /* TriggerOpTypes.DELETE */
    ),
    clear: createReadonlyMethod$1(
      "clear"
      /* TriggerOpTypes.CLEAR */
    ),
    forEach: createForEach$1(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$3(this, key, true, true);
    },
    get size() {
      return size$2(this, true);
    },
    has(key) {
      return has$2.call(this, key, true);
    },
    add: createReadonlyMethod$1(
      "add"
      /* TriggerOpTypes.ADD */
    ),
    set: createReadonlyMethod$1(
      "set"
      /* TriggerOpTypes.SET */
    ),
    delete: createReadonlyMethod$1(
      "delete"
      /* TriggerOpTypes.DELETE */
    ),
    clear: createReadonlyMethod$1(
      "clear"
      /* TriggerOpTypes.CLEAR */
    ),
    forEach: createForEach$1(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod$1(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod$1(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod$1(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod$1(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations$1, readonlyInstrumentations$1, shallowInstrumentations$1, shallowReadonlyInstrumentations$1] = /* @__PURE__ */ createInstrumentations$1();
function createInstrumentationGetter$1(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations$1 : shallowInstrumentations$1 : isReadonly2 ? readonlyInstrumentations$1 : mutableInstrumentations$1;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn$2(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(false, false)
};
const shallowCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(false, true)
};
const readonlyCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(true, false)
};
const shallowReadonlyCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(true, true)
};
function checkIdentityKeys$1(target, has2, key) {
  const rawKey = toRaw$1(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType$1(target);
    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
  }
}
const reactiveMap$1 = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap$1 = /* @__PURE__ */ new WeakMap();
const readonlyMap$1 = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap$1 = /* @__PURE__ */ new WeakMap();
function targetTypeMap$1(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType$1(value) {
  return value[
    "__v_skip"
    /* ReactiveFlags.SKIP */
  ] || !Object.isExtensible(value) ? 0 : targetTypeMap$1(toRawType$1(value));
}
function reactive$1(target) {
  if (isReadonly$1(target)) {
    return target;
  }
  return createReactiveObject$1(target, false, mutableHandlers$1, mutableCollectionHandlers$1, reactiveMap$1);
}
function shallowReactive$1(target) {
  return createReactiveObject$1(target, false, shallowReactiveHandlers$1, shallowCollectionHandlers$1, shallowReactiveMap$1);
}
function readonly$1(target) {
  return createReactiveObject$1(target, true, readonlyHandlers$1, readonlyCollectionHandlers$1, readonlyMap$1);
}
function shallowReadonly$1(target) {
  return createReactiveObject$1(target, true, shallowReadonlyHandlers$1, shallowReadonlyCollectionHandlers$1, shallowReadonlyMap$1);
}
function createReactiveObject$1(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$4(target)) {
    {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ] && !(isReadonly2 && target[
    "__v_isReactive"
    /* ReactiveFlags.IS_REACTIVE */
  ])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType$1(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive$1(value) {
  if (isReadonly$1(value)) {
    return isReactive$1(value[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ]);
  }
  return !!(value && value[
    "__v_isReactive"
    /* ReactiveFlags.IS_REACTIVE */
  ]);
}
function isReadonly$1(value) {
  return !!(value && value[
    "__v_isReadonly"
    /* ReactiveFlags.IS_READONLY */
  ]);
}
function isShallow$1$1(value) {
  return !!(value && value[
    "__v_isShallow"
    /* ReactiveFlags.IS_SHALLOW */
  ]);
}
function isProxy$1(value) {
  return isReactive$1(value) || isReadonly$1(value);
}
function toRaw$1(observed) {
  const raw = observed && observed[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  return raw ? toRaw$1(raw) : observed;
}
function markRaw$1(value) {
  def$1(value, "__v_skip", true);
  return value;
}
const toReactive$1 = (value) => isObject$4(value) ? reactive$1(value) : value;
const toReadonly$1 = (value) => isObject$4(value) ? readonly$1(value) : value;
function trackRefValue$1(ref2) {
  if (shouldTrack$1 && activeEffect$1) {
    ref2 = toRaw$1(ref2);
    {
      trackEffects$1(ref2.dep || (ref2.dep = createDep$1()), {
        target: ref2,
        type: "get",
        key: "value"
      });
    }
  }
}
function triggerRefValue$1(ref2, newVal) {
  ref2 = toRaw$1(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects$1(dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    }
  }
}
function isRef$1(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref$1(value) {
  return createRef$1(value, false);
}
function shallowRef$1(value) {
  return createRef$1(value, true);
}
function createRef$1(rawValue, shallow) {
  if (isRef$1(rawValue)) {
    return rawValue;
  }
  return new RefImpl$1(rawValue, shallow);
}
let RefImpl$1 = class RefImpl2 {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw$1(value);
    this._value = __v_isShallow ? value : toReactive$1(value);
  }
  get value() {
    trackRefValue$1(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow$1$1(newVal) || isReadonly$1(newVal);
    newVal = useDirectValue ? newVal : toRaw$1(newVal);
    if (hasChanged$1(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive$1(newVal);
      triggerRefValue$1(this, newVal);
    }
  }
};
function unref$1(ref2) {
  return isRef$1(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers$1 = {
  get: (target, key, receiver) => unref$1(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef$1(oldValue) && !isRef$1(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs$1(objectWithRefs) {
  return isReactive$1(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers$1);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(() => trackRefValue$1(this), () => triggerRefValue$1(this));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs$1(object) {
  if (!isProxy$1(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray$5(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef$1(object, key);
  }
  return ret;
}
let ObjectRefImpl$1 = class ObjectRefImpl2 {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive$1(toRaw$1(this._object), this._key);
  }
};
function toRef$1(object, key, defaultValue) {
  const val = object[key];
  return isRef$1(val) ? val : new ObjectRefImpl$1(object, key, defaultValue);
}
var _a$1$1;
let ComputedRefImpl$1 = class ComputedRefImpl2 {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this[_a$1$1] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect$1(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue$1(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this[
      "__v_isReadonly"
      /* ReactiveFlags.IS_READONLY */
    ] = isReadonly2;
  }
  get value() {
    const self2 = toRaw$1(this);
    trackRefValue$1(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
};
_a$1$1 = "__v_isReadonly";
function computed$1$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$4(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      console.warn("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl$1(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
const stack$1 = [];
function pushWarningContext$1(vnode) {
  stack$1.push(vnode);
}
function popWarningContext$1() {
  stack$1.pop();
}
function warn$5(msg, ...args) {
  pauseTracking$1();
  const instance = stack$1.length ? stack$1[stack$1.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace$1();
  if (appWarnHandler) {
    callWithErrorHandling$1(appWarnHandler, instance, 11, [
      msg + args.join(""),
      instance && instance.proxy,
      trace.map(({ vnode }) => `at <${formatComponentName$1(instance, vnode.type)}>`).join("\n"),
      trace
    ]);
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace$1(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking$1();
}
function getComponentTrace$1() {
  let currentVNode = stack$1[stack$1.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace$1(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry$1(entry));
  });
  return logs;
}
function formatTraceEntry$1({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName$1(vnode.component, vnode.type, isRoot)}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps$1(vnode.props), close] : [open2 + close];
}
function formatProps$1(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp$1(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp$1(key, value, raw) {
  if (isString$4(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef$1(value)) {
    value = formatProp$1(key, toRaw$1(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$4(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw$1(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber$1(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$5(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$5(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorTypeStrings$1 = {
  [
    "sp"
    /* LifecycleHooks.SERVER_PREFETCH */
  ]: "serverPrefetch hook",
  [
    "bc"
    /* LifecycleHooks.BEFORE_CREATE */
  ]: "beforeCreate hook",
  [
    "c"
    /* LifecycleHooks.CREATED */
  ]: "created hook",
  [
    "bm"
    /* LifecycleHooks.BEFORE_MOUNT */
  ]: "beforeMount hook",
  [
    "m"
    /* LifecycleHooks.MOUNTED */
  ]: "mounted hook",
  [
    "bu"
    /* LifecycleHooks.BEFORE_UPDATE */
  ]: "beforeUpdate hook",
  [
    "u"
    /* LifecycleHooks.UPDATED */
  ]: "updated",
  [
    "bum"
    /* LifecycleHooks.BEFORE_UNMOUNT */
  ]: "beforeUnmount hook",
  [
    "um"
    /* LifecycleHooks.UNMOUNTED */
  ]: "unmounted hook",
  [
    "a"
    /* LifecycleHooks.ACTIVATED */
  ]: "activated hook",
  [
    "da"
    /* LifecycleHooks.DEACTIVATED */
  ]: "deactivated hook",
  [
    "ec"
    /* LifecycleHooks.ERROR_CAPTURED */
  ]: "errorCaptured hook",
  [
    "rtc"
    /* LifecycleHooks.RENDER_TRACKED */
  ]: "renderTracked hook",
  [
    "rtg"
    /* LifecycleHooks.RENDER_TRIGGERED */
  ]: "renderTriggered hook",
  [
    0
    /* ErrorCodes.SETUP_FUNCTION */
  ]: "setup function",
  [
    1
    /* ErrorCodes.RENDER_FUNCTION */
  ]: "render function",
  [
    2
    /* ErrorCodes.WATCH_GETTER */
  ]: "watcher getter",
  [
    3
    /* ErrorCodes.WATCH_CALLBACK */
  ]: "watcher callback",
  [
    4
    /* ErrorCodes.WATCH_CLEANUP */
  ]: "watcher cleanup function",
  [
    5
    /* ErrorCodes.NATIVE_EVENT_HANDLER */
  ]: "native event handler",
  [
    6
    /* ErrorCodes.COMPONENT_EVENT_HANDLER */
  ]: "component event handler",
  [
    7
    /* ErrorCodes.VNODE_HOOK */
  ]: "vnode hook",
  [
    8
    /* ErrorCodes.DIRECTIVE_HOOK */
  ]: "directive hook",
  [
    9
    /* ErrorCodes.TRANSITION_HOOK */
  ]: "transition hook",
  [
    10
    /* ErrorCodes.APP_ERROR_HANDLER */
  ]: "app errorHandler",
  [
    11
    /* ErrorCodes.APP_WARN_HANDLER */
  ]: "app warnHandler",
  [
    12
    /* ErrorCodes.FUNCTION_REF */
  ]: "ref function",
  [
    13
    /* ErrorCodes.ASYNC_COMPONENT_LOADER */
  ]: "async component loader",
  [
    14
    /* ErrorCodes.SCHEDULER */
  ]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
};
function callWithErrorHandling$1(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError$1(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling$1(fn2, instance, type, args) {
  if (isFunction$4(fn2)) {
    const res = callWithErrorHandling$1(fn2, instance, type, args);
    if (res && isPromise$1(res)) {
      res.catch((err) => {
        handleError$1(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn2.length; i2++) {
    values.push(callWithAsyncErrorHandling$1(fn2[i2], instance, type, args));
  }
  return values;
}
function handleError$1(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings$1[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling$1(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError$1(err, type, contextVNode, throwInDev);
}
function logError$1(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings$1[type];
    if (contextVNode) {
      pushWarningContext$1(contextVNode);
    }
    warn$5(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext$1();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing$1 = false;
let isFlushPending$1 = false;
const queue$1 = [];
let flushIndex$1 = 0;
const pendingPostFlushCbs$1 = [];
let activePostFlushCbs$1 = null;
let postFlushIndex$1 = 0;
const resolvedPromise$1 = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise$1 = null;
const RECURSION_LIMIT$1 = 100;
function nextTick$1(fn2) {
  const p2 = currentFlushPromise$1 || resolvedPromise$1;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex$1(id2) {
  let start = flushIndex$1 + 1;
  let end = queue$1.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId$1(queue$1[middle]);
    middleJobId < id2 ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob$1(job) {
  if (!queue$1.length || !queue$1.includes(job, isFlushing$1 && job.allowRecurse ? flushIndex$1 + 1 : flushIndex$1)) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex$1(job.id), 0, job);
    }
    queueFlush$1();
  }
}
function queueFlush$1() {
  if (!isFlushing$1 && !isFlushPending$1) {
    isFlushPending$1 = true;
    currentFlushPromise$1 = resolvedPromise$1.then(flushJobs$1);
  }
}
function invalidateJob$1(job) {
  const i2 = queue$1.indexOf(job);
  if (i2 > flushIndex$1) {
    queue$1.splice(i2, 1);
  }
}
function queuePostFlushCb$1(cb) {
  if (!isArray$5(cb)) {
    if (!activePostFlushCbs$1 || !activePostFlushCbs$1.includes(cb, cb.allowRecurse ? postFlushIndex$1 + 1 : postFlushIndex$1)) {
      pendingPostFlushCbs$1.push(cb);
    }
  } else {
    pendingPostFlushCbs$1.push(...cb);
  }
  queueFlush$1();
}
function flushPreFlushCbs$1(seen2, i2 = isFlushing$1 ? flushIndex$1 + 1 : 0) {
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  for (; i2 < queue$1.length; i2++) {
    const cb = queue$1[i2];
    if (cb && cb.pre) {
      if (checkRecursiveUpdates$1(seen2, cb)) {
        continue;
      }
      queue$1.splice(i2, 1);
      i2--;
      cb();
    }
  }
}
function flushPostFlushCbs$1(seen2) {
  if (pendingPostFlushCbs$1.length) {
    const deduped = [...new Set(pendingPostFlushCbs$1)];
    pendingPostFlushCbs$1.length = 0;
    if (activePostFlushCbs$1) {
      activePostFlushCbs$1.push(...deduped);
      return;
    }
    activePostFlushCbs$1 = deduped;
    {
      seen2 = seen2 || /* @__PURE__ */ new Map();
    }
    activePostFlushCbs$1.sort((a2, b3) => getId$1(a2) - getId$1(b3));
    for (postFlushIndex$1 = 0; postFlushIndex$1 < activePostFlushCbs$1.length; postFlushIndex$1++) {
      if (checkRecursiveUpdates$1(seen2, activePostFlushCbs$1[postFlushIndex$1])) {
        continue;
      }
      activePostFlushCbs$1[postFlushIndex$1]();
    }
    activePostFlushCbs$1 = null;
    postFlushIndex$1 = 0;
  }
}
const getId$1 = (job) => job.id == null ? Infinity : job.id;
const comparator$1 = (a2, b3) => {
  const diff = getId$1(a2) - getId$1(b3);
  if (diff === 0) {
    if (a2.pre && !b3.pre)
      return -1;
    if (b3.pre && !a2.pre)
      return 1;
  }
  return diff;
};
function flushJobs$1(seen2) {
  isFlushPending$1 = false;
  isFlushing$1 = true;
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  queue$1.sort(comparator$1);
  const check = (job) => checkRecursiveUpdates$1(seen2, job);
  try {
    for (flushIndex$1 = 0; flushIndex$1 < queue$1.length; flushIndex$1++) {
      const job = queue$1[flushIndex$1];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling$1(
          job,
          null,
          14
          /* ErrorCodes.SCHEDULER */
        );
      }
    }
  } finally {
    flushIndex$1 = 0;
    queue$1.length = 0;
    flushPostFlushCbs$1(seen2);
    isFlushing$1 = false;
    currentFlushPromise$1 = null;
    if (queue$1.length || pendingPostFlushCbs$1.length) {
      flushJobs$1(seen2);
    }
  }
}
function checkRecursiveUpdates$1(seen2, fn2) {
  if (!seen2.has(fn2)) {
    seen2.set(fn2, 1);
  } else {
    const count2 = seen2.get(fn2);
    if (count2 > RECURSION_LIMIT$1) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName$1(instance.type);
      warn$5(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`);
      return true;
    } else {
      seen2.set(fn2, count2 + 1);
    }
  }
}
let isHmrUpdating$1 = false;
const hmrDirtyComponents$1 = /* @__PURE__ */ new Set();
{
  getGlobalThis$2().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap$1(createRecord$1),
    rerender: tryWrap$1(rerender$1),
    reload: tryWrap$1(reload$1)
  };
}
const map$1 = /* @__PURE__ */ new Map();
function registerHMR$1(instance) {
  const id2 = instance.type.__hmrId;
  let record = map$1.get(id2);
  if (!record) {
    createRecord$1(id2, instance.type);
    record = map$1.get(id2);
  }
  record.instances.add(instance);
}
function unregisterHMR$1(instance) {
  map$1.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord$1(id2, initialDef) {
  if (map$1.has(id2)) {
    return false;
  }
  map$1.set(id2, {
    initialDef: normalizeClassComponent$1(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent$1(component) {
  return isClassComponent$1(component) ? component.__vccOpts : component;
}
function rerender$1(id2, newRender) {
  const record = map$1.get(id2);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent$1(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating$1 = true;
    instance.update();
    isHmrUpdating$1 = false;
  });
}
function reload$1(id2, newComp) {
  const record = map$1.get(id2);
  if (!record)
    return;
  newComp = normalizeClassComponent$1(newComp);
  updateComponentDef$1(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent$1(instance.type);
    if (!hmrDirtyComponents$1.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef$1(oldComp, newComp);
      }
      hmrDirtyComponents$1.add(oldComp);
    }
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents$1.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents$1.delete(oldComp);
    } else if (instance.parent) {
      queueJob$1(instance.parent.update);
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
    }
  }
  queuePostFlushCb$1(() => {
    for (const instance of instances) {
      hmrDirtyComponents$1.delete(normalizeClassComponent$1(instance.type));
    }
  });
}
function updateComponentDef$1(oldComp, newComp) {
  extend$2(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap$1(fn2) {
  return (id2, arg) => {
    try {
      return fn2(id2, arg);
    } catch (e2) {
      console.error(e2);
      console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);
    }
  };
}
let devtools$2;
let buffer$1 = [];
let devtoolsNotInstalled$1 = false;
function emit$1$1(event, ...args) {
  if (devtools$2) {
    devtools$2.emit(event, ...args);
  } else if (!devtoolsNotInstalled$1) {
    buffer$1.push({ event, args });
  }
}
function setDevtoolsHook$1(hook, target) {
  var _a2, _b;
  devtools$2 = hook;
  if (devtools$2) {
    devtools$2.enabled = true;
    buffer$1.forEach(({ event, args }) => devtools$2.emit(event, ...args));
    buffer$1 = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a2 = window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) === null || _b === void 0 ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook$1(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$2) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled$1 = true;
        buffer$1 = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled$1 = true;
    buffer$1 = [];
  }
}
function devtoolsInitApp$1(app, version2) {
  emit$1$1("app:init", app, version2, {
    Fragment: Fragment$1,
    Text: Text$1,
    Comment: Comment$2,
    Static: Static$1
  });
}
function devtoolsUnmountApp$1(app) {
  emit$1$1("app:unmount", app);
}
const devtoolsComponentAdded$1 = /* @__PURE__ */ createDevtoolsComponentHook$1(
  "component:added"
  /* DevtoolsHooks.COMPONENT_ADDED */
);
const devtoolsComponentUpdated$1 = /* @__PURE__ */ createDevtoolsComponentHook$1(
  "component:updated"
  /* DevtoolsHooks.COMPONENT_UPDATED */
);
const _devtoolsComponentRemoved$1 = /* @__PURE__ */ createDevtoolsComponentHook$1(
  "component:removed"
  /* DevtoolsHooks.COMPONENT_REMOVED */
);
const devtoolsComponentRemoved$1 = (component) => {
  if (devtools$2 && typeof devtools$2.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools$2.cleanupBuffer(component)) {
    _devtoolsComponentRemoved$1(component);
  }
};
function createDevtoolsComponentHook$1(hook) {
  return (component) => {
    emit$1$1(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
  };
}
const devtoolsPerfStart$1 = /* @__PURE__ */ createDevtoolsPerformanceHook$1(
  "perf:start"
  /* DevtoolsHooks.PERFORMANCE_START */
);
const devtoolsPerfEnd$1 = /* @__PURE__ */ createDevtoolsPerformanceHook$1(
  "perf:end"
  /* DevtoolsHooks.PERFORMANCE_END */
);
function createDevtoolsPerformanceHook$1(hook) {
  return (component, type, time) => {
    emit$1$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit$1(component, event, params) {
  emit$1$1("component:emit", component.appContext.app, component, event, params);
}
function emit$2(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ$1;
  {
    const { emitsOptions, propsOptions: [propsOptions] } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey$1(event) in propsOptions)) {
          warn$5(`Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey$1(event)}" prop.`);
        }
      } else {
        const validator2 = emitsOptions[event];
        if (isFunction$4(validator2)) {
          const isValid2 = validator2(...rawArgs);
          if (!isValid2) {
            warn$5(`Invalid event arguments: event validation failed for event "${event}".`);
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number2, trim: trim2 } = props[modifiersKey] || EMPTY_OBJ$1;
    if (trim2) {
      args = rawArgs.map((a2) => isString$4(a2) ? a2.trim() : a2);
    }
    if (number2) {
      args = rawArgs.map(looseToNumber$1);
    }
  }
  {
    devtoolsComponentEmit$1(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey$1(lowerCaseEvent)]) {
      warn$5(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName$1(instance, instance.type)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate$1(event)}" instead of "${event}".`);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey$1(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey$1(camelize$1(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey$1(hyphenate$1(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling$1(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling$1(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions$1(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$4(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions$1(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$2(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$4(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$5(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$2(normalized, raw);
  }
  if (isObject$4(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener$1(options, key) {
  if (!options || !isOn$1(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$2(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$2(options, hyphenate$1(key)) || hasOwn$2(options, key);
}
let currentRenderingInstance$1 = null;
let currentScopeId$1 = null;
function setCurrentRenderingInstance$1(instance) {
  const prev = currentRenderingInstance$1;
  currentRenderingInstance$1 = instance;
  currentScopeId$1 = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId$1(id2) {
  currentScopeId$1 = id2;
}
function popScopeId$1() {
  currentScopeId$1 = null;
}
const withScopeId = (_id) => withCtx$1;
function withCtx$1(fn2, ctx = currentRenderingInstance$1, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking$1(-1);
    }
    const prevInstance = setCurrentRenderingInstance$1(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance$1(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking$1(1);
      }
    }
    {
      devtoolsComponentUpdated$1(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs$1 = false;
function markAttrsAccessed$1() {
  accessedAttrs$1 = true;
}
function renderComponentRoot$1(instance) {
  const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance$1(instance);
  {
    accessedAttrs$1 = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode$1(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render3 = Component;
      if (attrs === props) {
        markAttrsAccessed$1();
      }
      result = normalizeVNode$1(render3.length > 1 ? render3(props, true ? {
        get attrs() {
          markAttrsAccessed$1();
          return attrs;
        },
        slots,
        emit: emit2
      } : { attrs, slots, emit: emit2 }) : render3(
        props,
        null
        /* we know it doesn't need it */
      ));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough$1(attrs);
    }
  } catch (err) {
    blockStack$1.length = 0;
    handleError$1(
      err,
      instance,
      1
      /* ErrorCodes.RENDER_FUNCTION */
    );
    result = createVNode$1(Comment$2);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot$1(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener$1)) {
          fallthroughAttrs = filterModelListeners$1(fallthroughAttrs, propsOptions);
        }
        root = cloneVNode$1(root, fallthroughAttrs);
      } else if (!accessedAttrs$1 && root.type !== Comment$2) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i2 = 0, l2 = allAttrs.length; i2 < l2; i2++) {
          const key = allAttrs[i2];
          if (isOn$1(key)) {
            if (!isModelListener$1(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$5(`Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`);
        }
        if (eventAttrs.length) {
          warn$5(`Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot$1(root)) {
      warn$5(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);
    }
    root = cloneVNode$1(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot$1(root)) {
      warn$5(`Component inside <Transition> renders non-element root node that cannot be animated.`);
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance$1(prev);
  return result;
}
const getChildRoot$1 = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot$1(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode$1(childRoot), setRoot];
};
function filterSingleRoot$1(children) {
  let singleRoot;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (isVNode$2(child)) {
      if (child.type !== Comment$2 || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough$1 = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn$1(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners$1 = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener$1(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot$1 = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment$2;
};
function shouldUpdateComponent$1(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating$1) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged$1(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener$1(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged$1(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged$1(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener$1(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl$1({ vnode, parent }, el2) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el2;
    parent = parent.parent;
  }
}
const isSuspense$1 = (type) => type.__isSuspense;
function queueEffectWithSuspense$1(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$5(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb$1(fn2);
  }
}
function provide$1(key, value) {
  if (!currentInstance$1) {
    {
      warn$5(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance$1.provides;
    const parentProvides = currentInstance$1.parent && currentInstance$1.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance$1.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject$1(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance$1 || currentRenderingInstance$1;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$4(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else {
      warn$5(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$5(`inject() can only be used inside setup() or functional components.`);
  }
}
function watchEffect$1(effect, options) {
  return doWatch$1(effect, null, options);
}
function watchPostEffect$1(effect, options) {
  return doWatch$1(effect, null, Object.assign(Object.assign({}, options), { flush: "post" }));
}
const INITIAL_WATCHER_VALUE$1 = {};
function watch$1(source, cb, options) {
  if (!isFunction$4(cb)) {
    warn$5(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
  }
  return doWatch$1(source, cb, options);
}
function doWatch$1(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ$1) {
  if (!cb) {
    if (immediate !== void 0) {
      warn$5(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
    }
    if (deep !== void 0) {
      warn$5(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
    }
  }
  const warnInvalidSource = (s3) => {
    warn$5(`Invalid watch source: `, s3, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
  };
  const instance = getCurrentScope$1() === (currentInstance$1 === null || currentInstance$1 === void 0 ? void 0 : currentInstance$1.scope) ? currentInstance$1 : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef$1(source)) {
    getter = () => source.value;
    forceTrigger = isShallow$1$1(source);
  } else if (isReactive$1(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$5(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s3) => isReactive$1(s3) || isShallow$1$1(s3));
    getter = () => source.map((s3) => {
      if (isRef$1(s3)) {
        return s3.value;
      } else if (isReactive$1(s3)) {
        return traverse$1(s3);
      } else if (isFunction$4(s3)) {
        return callWithErrorHandling$1(
          s3,
          instance,
          2
          /* ErrorCodes.WATCH_GETTER */
        );
      } else {
        warnInvalidSource(s3);
      }
    });
  } else if (isFunction$4(source)) {
    if (cb) {
      getter = () => callWithErrorHandling$1(
        source,
        instance,
        2
        /* ErrorCodes.WATCH_GETTER */
      );
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling$1(source, instance, 3, [onCleanup]);
      };
    }
  } else {
    getter = NOOP$1;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse$1(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling$1(
        fn2,
        instance,
        4
        /* ErrorCodes.WATCH_CLEANUP */
      );
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup$1) {
    onCleanup = NOOP$1;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling$1(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext$1();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP$1;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE$1) : INITIAL_WATCHER_VALUE$1;
  const job = () => {
    if (!effect.active) {
      return;
    }
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v3, i2) => hasChanged$1(v3, oldValue[i2])) : hasChanged$1(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling$1(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE$1 ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE$1 ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect$1(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob$1(job);
  }
  const effect = new ReactiveEffect$1(getter, scheduler);
  {
    effect.onTrack = onTrack;
    effect.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect$1(effect.run.bind(effect), instance && instance.suspense);
  } else {
    effect.run();
  }
  const unwatch = () => {
    effect.stop();
    if (instance && instance.scope) {
      remove$1(instance.scope.effects, effect);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch$1(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$4(source) ? source.includes(".") ? createPathGetter$1(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$4(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance$1;
  setCurrentInstance$1(this);
  const res = doWatch$1(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance$1(cur);
  } else {
    unsetCurrentInstance$1();
  }
  return res;
}
function createPathGetter$1(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse$1(value, seen2) {
  if (!isObject$4(value) || value[
    "__v_skip"
    /* ReactiveFlags.SKIP */
  ]) {
    return value;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  if (isRef$1(value)) {
    traverse$1(value.value, seen2);
  } else if (isArray$5(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      traverse$1(value[i2], seen2);
    }
  } else if (isSet$1(value) || isMap$1(value)) {
    value.forEach((v3) => {
      traverse$1(v3, seen2);
    });
  } else if (isPlainObject$6(value)) {
    for (const key in value) {
      traverse$1(value[key], seen2);
    }
  }
  return value;
}
function useTransitionState$1() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted$1(() => {
    state.isMounted = true;
  });
  onBeforeUnmount$1(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator$1 = [Function, Array];
const BaseTransitionImpl$1 = {
  name: `BaseTransition`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    // enter
    onBeforeEnter: TransitionHookValidator$1,
    onEnter: TransitionHookValidator$1,
    onAfterEnter: TransitionHookValidator$1,
    onEnterCancelled: TransitionHookValidator$1,
    // leave
    onBeforeLeave: TransitionHookValidator$1,
    onLeave: TransitionHookValidator$1,
    onAfterLeave: TransitionHookValidator$1,
    onLeaveCancelled: TransitionHookValidator$1,
    // appear
    onBeforeAppear: TransitionHookValidator$1,
    onAppear: TransitionHookValidator$1,
    onAfterAppear: TransitionHookValidator$1,
    onAppearCancelled: TransitionHookValidator$1
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance$1();
    const state = useTransitionState$1();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren$1(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c2 of children) {
          if (c2.type !== Comment$2) {
            if (hasFound) {
              warn$5("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
              break;
            }
            child = c2;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw$1(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$5(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder$1(child);
      }
      const innerChild = getKeepAliveChild$1(child);
      if (!innerChild) {
        return emptyPlaceholder$1(child);
      }
      const enterHooks = resolveTransitionHooks$1(innerChild, rawProps, state, instance);
      setTransitionHooks$1(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild$1(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$2 && (!isSameVNodeType$1(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks$1(oldInnerChild, rawProps, state, instance);
        setTransitionHooks$1(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.update();
            }
          };
          return emptyPlaceholder$1(child);
        } else if (mode === "in-out" && innerChild.type !== Comment$2) {
          leavingHooks.delayLeave = (el2, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType$1(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el2._leaveCb = () => {
              earlyRemove();
              el2._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition$1 = BaseTransitionImpl$1;
function getLeavingNodesForType$1(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks$1(vnode, props, state, instance) {
  const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType$1(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling$1(hook, instance, 9, args);
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$5(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el2) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el2._leaveCb) {
        el2._leaveCb(
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType$1(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el2]);
    },
    enter(el2) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el2._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el2]);
        } else {
          callHook2(afterHook, [el2]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el2._enterCb = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el2, done]);
      } else {
        done();
      }
    },
    leave(el2, remove2) {
      const key2 = String(vnode.key);
      if (el2._enterCb) {
        el2._enterCb(
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el2]);
      let called = false;
      const done = el2._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el2]);
        } else {
          callHook2(onAfterLeave, [el2]);
        }
        el2._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el2, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks$1(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder$1(vnode) {
  if (isKeepAlive$1(vnode)) {
    vnode = cloneVNode$1(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild$1(vnode) {
  return isKeepAlive$1(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks$1(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks$1(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren$1(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    let child = children[i2];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
    if (child.type === Fragment$1) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren$1(child.children, keepComment, key));
    } else if (keepComment || child.type !== Comment$2) {
      ret.push(key != null ? cloneVNode$1(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent$1(options) {
  return isFunction$4(options) ? { setup: options, name: options.name } : options;
}
const isAsyncWrapper$1 = (i2) => !!i2.type.__asyncLoader;
function defineAsyncComponent$1(source) {
  if (isFunction$4(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$5(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject$4(comp) && !isFunction$4(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent$1({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance$1;
      if (resolvedComp) {
        return () => createInnerComp$1(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError$1(
          err,
          instance,
          13,
          !errorComponent
          /* do not throw in dev if user provided error component */
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup$1) {
        return load().then((comp) => {
          return () => createInnerComp$1(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode$1(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded2 = ref$1(false);
      const error = ref$1();
      const delayed = ref$1(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded2.value && !error.value) {
            const err = new Error(`Async component timed out after ${timeout}ms.`);
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded2.value = true;
        if (instance.parent && isKeepAlive$1(instance.parent.vnode)) {
          queueJob$1(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded2.value && resolvedComp) {
          return createInnerComp$1(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode$1(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode$1(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp$1(comp, parent) {
  const { ref: ref2, props, children, ce: ce3 } = parent.vnode;
  const vnode = createVNode$1(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce3;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive$1 = (vnode) => vnode.type.__isKeepAlive;
function onActivated$1(hook, target) {
  registerKeepAliveHook$1(hook, "a", target);
}
function onDeactivated$1(hook, target) {
  registerKeepAliveHook$1(hook, "da", target);
}
function registerKeepAliveHook$1(hook, type, target = currentInstance$1) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook$1(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive$1(current.parent.vnode)) {
        injectToKeepAliveRoot$1(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot$1(hook, type, target, keepAliveRoot) {
  const injected = injectHook$1(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted$1(() => {
    remove$1(keepAliveRoot[type], injected);
  }, target);
}
function injectHook$1(type, hook, target = currentInstance$1, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking$1();
      setCurrentInstance$1(target);
      const res = callWithAsyncErrorHandling$1(hook, target, type, args);
      unsetCurrentInstance$1();
      resetTracking$1();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey$1(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
    warn$5(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
  }
}
const createHook$1 = (lifecycle) => (hook, target = currentInstance$1) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup$1 || lifecycle === "sp") && injectHook$1(lifecycle, (...args) => hook(...args), target)
);
const onBeforeMount$1 = createHook$1(
  "bm"
  /* LifecycleHooks.BEFORE_MOUNT */
);
const onMounted$1 = createHook$1(
  "m"
  /* LifecycleHooks.MOUNTED */
);
const onBeforeUpdate$1 = createHook$1(
  "bu"
  /* LifecycleHooks.BEFORE_UPDATE */
);
const onUpdated$1 = createHook$1(
  "u"
  /* LifecycleHooks.UPDATED */
);
const onBeforeUnmount$1 = createHook$1(
  "bum"
  /* LifecycleHooks.BEFORE_UNMOUNT */
);
const onUnmounted$1 = createHook$1(
  "um"
  /* LifecycleHooks.UNMOUNTED */
);
const onServerPrefetch$1 = createHook$1(
  "sp"
  /* LifecycleHooks.SERVER_PREFETCH */
);
const onRenderTriggered$1 = createHook$1(
  "rtg"
  /* LifecycleHooks.RENDER_TRIGGERED */
);
const onRenderTracked$1 = createHook$1(
  "rtc"
  /* LifecycleHooks.RENDER_TRACKED */
);
function onErrorCaptured$1(hook, target = currentInstance$1) {
  injectHook$1("ec", hook, target);
}
function validateDirectiveName$1(name) {
  if (isBuiltInDirective$1(name)) {
    warn$5("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives$1(vnode, directives2) {
  const internalInstance = currentRenderingInstance$1;
  if (internalInstance === null) {
    warn$5(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getExposeProxy$1(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives2.length; i2++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ$1] = directives2[i2];
    if (dir) {
      if (isFunction$4(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse$1(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook$1(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking$1();
      callWithAsyncErrorHandling$1(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking$1();
    }
  }
}
const COMPONENTS$1 = "components";
const DIRECTIVES = "directives";
function resolveComponent$1(name, maybeSelfReference) {
  return resolveAsset$1(COMPONENTS$1, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT$1 = Symbol();
function resolveDynamicComponent$1(component) {
  if (isString$4(component)) {
    return resolveAsset$1(COMPONENTS$1, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT$1;
  }
}
function resolveDirective(name) {
  return resolveAsset$1(DIRECTIVES, name);
}
function resolveAsset$1(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance$1 || currentInstance$1;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS$1) {
      const selfName = getComponentName$1(
        Component,
        false
        /* do not include inferred name to avoid breaking existing code */
      );
      if (selfName && (selfName === name || selfName === camelize$1(name) || selfName === capitalize$2(camelize$1(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve$1(instance[type] || Component[type], name) || // global registration
      resolve$1(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS$1 ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$5(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$5(`resolve${capitalize$2(type.slice(0, -1))} can only be used in render() or setup().`);
  }
}
function resolve$1(registry, name) {
  return registry && (registry[name] || registry[camelize$1(name)] || registry[capitalize$2(camelize$1(name))]);
}
function renderList$1(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  if (isArray$5(source) || isString$4(source)) {
    ret = new Array(source.length);
    for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
      ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$5(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject$4(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i2) => renderItem(item, i2, void 0, cached && cached[i2]));
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
        const key = keys[i2];
        ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function renderSlot$1(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance$1.isCE || currentRenderingInstance$1.parent && isAsyncWrapper$1(currentRenderingInstance$1.parent) && currentRenderingInstance$1.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode$1("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$5(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock$1();
  const validSlotContent = slot && ensureValidVNode$1(slot(props));
  const rendered = createBlock$1(
    Fragment$1,
    {
      key: props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
    /* PatchFlags.BAIL */
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode$1(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode$2(child))
      return true;
    if (child.type === Comment$2)
      return false;
    if (child.type === Fragment$1 && !ensureValidVNode$1(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
const getPublicInstance$1 = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent$1(i2))
    return getExposeProxy$1(i2) || i2.proxy;
  return getPublicInstance$1(i2.parent);
};
const publicPropertiesMap$1 = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend$2(/* @__PURE__ */ Object.create(null), {
    $: (i2) => i2,
    $el: (i2) => i2.vnode.el,
    $data: (i2) => i2.data,
    $props: (i2) => shallowReadonly$1(i2.props),
    $attrs: (i2) => shallowReadonly$1(i2.attrs),
    $slots: (i2) => shallowReadonly$1(i2.slots),
    $refs: (i2) => shallowReadonly$1(i2.refs),
    $parent: (i2) => getPublicInstance$1(i2.parent),
    $root: (i2) => getPublicInstance$1(i2.root),
    $emit: (i2) => i2.emit,
    $options: (i2) => resolveMergedOptions$1(i2),
    $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob$1(i2.update)),
    $nextTick: (i2) => i2.n || (i2.n = nextTick$1.bind(i2.proxy)),
    $watch: (i2) => instanceWatch$1.bind(i2)
  })
);
const isReservedPrefix$1 = (key) => key === "_" || key === "$";
const hasSetupBinding$1 = (state, key) => state !== EMPTY_OBJ$1 && !state.__isScriptSetup && hasOwn$2(state, key);
const PublicInstanceProxyHandlers$1 = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding$1(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ$1 && hasOwn$2(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$2(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ$1 && hasOwn$2(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess$1) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap$1[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track$1(instance, "get", key);
        markAttrsAccessed$1();
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ$1 && hasOwn$2(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$2(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance$1 && (!isString$4(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
    // to infinite warning loop
    key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ$1 && isReservedPrefix$1(key[0]) && hasOwn$2(data, key)) {
        warn$5(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`);
      } else if (instance === currentRenderingInstance$1) {
        warn$5(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding$1(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn$2(setupState, key)) {
      warn$5(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ$1 && hasOwn$2(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$2(instance.props, key)) {
      warn$5(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$5(`Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`);
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ$1 && hasOwn$2(data, key) || hasSetupBinding$1(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$2(normalizedProps, key) || hasOwn$2(ctx, key) || hasOwn$2(publicPropertiesMap$1, key) || hasOwn$2(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$2(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers$1.ownKeys = (target) => {
    warn$5(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
  };
}
function createDevRenderContext$1(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap$1).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap$1[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP$1
    });
  });
  return target;
}
function exposePropsOnRenderContext$1(instance) {
  const { ctx, propsOptions: [propsOptions] } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP$1
      });
    });
  }
}
function exposeSetupStateOnRenderContext$1(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw$1(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix$1(key[0])) {
        warn$5(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP$1
      });
    }
  });
}
function createDuplicateChecker$1() {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache2[key]) {
      warn$5(`${type} property "${key}" is already defined in ${cache2[key]}.`);
    } else {
      cache2[key] = type;
    }
  };
}
let shouldCacheAccess$1 = true;
function applyOptions$1(instance) {
  const options = resolveMergedOptions$1(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess$1 = false;
  if (options.beforeCreate) {
    callHook$1$1(
      options.beforeCreate,
      instance,
      "bc"
      /* LifecycleHooks.BEFORE_CREATE */
    );
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives: directives2,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker$1();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections$1(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$4(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$5(`Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`);
      }
    }
  }
  if (dataOptions) {
    if (!isFunction$4(dataOptions)) {
      warn$5(`The data option must be a function. Plain object usage is no longer supported.`);
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise$1(data)) {
      warn$5(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);
    }
    if (!isObject$4(data)) {
      warn$5(`data() should return an object.`);
    } else {
      instance.data = reactive$1(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix$1(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP$1
            });
          }
        }
      }
    }
  }
  shouldCacheAccess$1 = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$4(opt) ? opt.bind(publicThis, publicThis) : isFunction$4(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP$1;
      if (get2 === NOOP$1) {
        warn$5(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction$4(opt) && isFunction$4(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$5(`Write operation failed: computed property "${key}" is readonly.`);
      };
      const c2 = computed$2({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v3) => c2.value = v3
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher$1(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$4(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide$1(key, provides[key]);
    });
  }
  if (created) {
    callHook$1$1(
      created,
      instance,
      "c"
      /* LifecycleHooks.CREATED */
    );
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$5(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount$1, beforeMount);
  registerLifecycleHook(onMounted$1, mounted);
  registerLifecycleHook(onBeforeUpdate$1, beforeUpdate);
  registerLifecycleHook(onUpdated$1, updated);
  registerLifecycleHook(onActivated$1, activated);
  registerLifecycleHook(onDeactivated$1, deactivated);
  registerLifecycleHook(onErrorCaptured$1, errorCaptured);
  registerLifecycleHook(onRenderTracked$1, renderTracked);
  registerLifecycleHook(onRenderTriggered$1, renderTriggered);
  registerLifecycleHook(onBeforeUnmount$1, beforeUnmount);
  registerLifecycleHook(onUnmounted$1, unmounted);
  registerLifecycleHook(onServerPrefetch$1, serverPrefetch);
  if (isArray$5(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP$1) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives2)
    instance.directives = directives2;
}
function resolveInjections$1(injectOptions, ctx, checkDuplicateProperties = NOOP$1, unwrapRef = false) {
  if (isArray$5(injectOptions)) {
    injectOptions = normalizeInject$1(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$4(opt)) {
      if ("default" in opt) {
        injected = inject$1(
          opt.from || key,
          opt.default,
          true
          /* treat default function as factory */
        );
      } else {
        injected = inject$1(opt.from || key);
      }
    } else {
      injected = inject$1(opt);
    }
    if (isRef$1(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v3) => injected.value = v3
        });
      } else {
        {
          warn$5(`injected property "${key}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`);
        }
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1$1(hook, instance, type) {
  callWithAsyncErrorHandling$1(isArray$5(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher$1(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter$1(publicThis, key) : () => publicThis[key];
  if (isString$4(raw)) {
    const handler = ctx[raw];
    if (isFunction$4(handler)) {
      watch$1(getter, handler);
    } else {
      warn$5(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction$4(raw)) {
    watch$1(getter, raw.bind(publicThis));
  } else if (isObject$4(raw)) {
    if (isArray$5(raw)) {
      raw.forEach((r2) => createWatcher$1(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction$4(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$4(handler)) {
        watch$1(getter, handler, raw);
      } else {
        warn$5(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$5(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions$1(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache2, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m2) => mergeOptions$3(resolved, m2, optionMergeStrategies, true));
    }
    mergeOptions$3(resolved, base, optionMergeStrategies);
  }
  if (isObject$4(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$3(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$3(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m2) => mergeOptions$3(to2, m2, strats, true));
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$5(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);
    } else {
      const strat = internalOptionMergeStrats$1[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats$1 = {
  data: mergeDataFn$1,
  props: mergeObjectOptions$1,
  emits: mergeObjectOptions$1,
  // objects
  methods: mergeObjectOptions$1,
  computed: mergeObjectOptions$1,
  // lifecycle
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  // assets
  components: mergeObjectOptions$1,
  directives: mergeObjectOptions$1,
  // watch
  watch: mergeWatchOptions$1,
  // provide / inject
  provide: mergeDataFn$1,
  inject: mergeInject$1
};
function mergeDataFn$1(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend$2(isFunction$4(to2) ? to2.call(this, this) : to2, isFunction$4(from) ? from.call(this, this) : from);
  };
}
function mergeInject$1(to2, from) {
  return mergeObjectOptions$1(normalizeInject$1(to2), normalizeInject$1(from));
}
function normalizeInject$1(raw) {
  if (isArray$5(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions$1(to2, from) {
  return to2 ? extend$2(extend$2(/* @__PURE__ */ Object.create(null), to2), from) : from;
}
function mergeWatchOptions$1(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend$2(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray$1(to2[key], from[key]);
  }
  return merged;
}
function initProps$1(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def$1(attrs, InternalObjectKey$1, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps$1(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps$1(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive$1(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext$1(instance) {
  while (instance) {
    if (instance.type.__hmrId)
      return true;
    instance = instance.parent;
  }
}
function updateProps$1(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw$1(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext$1(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        if (isEmitListener$1(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$2(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize$1(key);
            props[camelizedKey] = resolvePropValue$1(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
              /* isAbsent */
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps$1(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$2(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate$1(key)) === key || !hasOwn$2(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue$1(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
              /* isAbsent */
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$2(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger$1(instance, "set", "$attrs");
  }
  {
    validateProps$1(rawProps || {}, props, instance);
  }
}
function setFullProps$1(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp$1(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$2(options, camelKey = camelize$1(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener$1(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw$1(props);
    const castValues = rawCastValues || EMPTY_OBJ$1;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue$1(options, rawCurrentProps, key, castValues[key], instance, !hasOwn$2(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue$1(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$2(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$4(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance$1(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance$1();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* BooleanFlags.shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* BooleanFlags.shouldCastTrue */
      ] && (value === "" || value === hyphenate$1(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions$1(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$4(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions$1(raw2, appContext, true);
      extend$2(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$4(comp)) {
      cache2.set(comp, EMPTY_ARR$1);
    }
    return EMPTY_ARR$1;
  }
  if (isArray$5(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      if (!isString$4(raw[i2])) {
        warn$5(`props must be strings when using array syntax.`, raw[i2]);
      }
      const normalizedKey = camelize$1(raw[i2]);
      if (validatePropName$1(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ$1;
      }
    }
  } else if (raw) {
    if (!isObject$4(raw)) {
      warn$5(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize$1(key);
      if (validatePropName$1(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$5(opt) || isFunction$4(opt) ? { type: opt } : Object.assign({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex$1(Boolean, prop.type);
          const stringIndex = getTypeIndex$1(String, prop.type);
          prop[
            0
            /* BooleanFlags.shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* BooleanFlags.shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$2(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$4(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName$1(key) {
  if (key[0] !== "$") {
    return true;
  } else {
    warn$5(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType$1(ctor) {
  const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match ? match[2] : ctor === null ? "null" : "";
}
function isSameType$1(a2, b3) {
  return getType$1(a2) === getType$1(b3);
}
function getTypeIndex$1(type, expectedTypes) {
  if (isArray$5(expectedTypes)) {
    return expectedTypes.findIndex((t2) => isSameType$1(t2, type));
  } else if (isFunction$4(expectedTypes)) {
    return isSameType$1(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps$1(rawProps, props, instance) {
  const resolvedValues = toRaw$1(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp$1(key, resolvedValues[key], opt, !hasOwn$2(rawProps, key) && !hasOwn$2(rawProps, hyphenate$1(key)));
  }
}
function validateProp$1(name, value, prop, isAbsent) {
  const { type, required, validator: validator2 } = prop;
  if (required && isAbsent) {
    warn$5('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  if (type != null && type !== true) {
    let isValid2 = false;
    const types = isArray$5(type) ? type : [type];
    const expectedTypes = [];
    for (let i2 = 0; i2 < types.length && !isValid2; i2++) {
      const { valid, expectedType } = assertType$1(value, types[i2]);
      expectedTypes.push(expectedType || "");
      isValid2 = valid;
    }
    if (!isValid2) {
      warn$5(getInvalidTypeMessage$1(name, value, expectedTypes));
      return;
    }
  }
  if (validator2 && !validator2(value)) {
    warn$5('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType$1 = /* @__PURE__ */ makeMap$1("String,Number,Boolean,Function,Symbol,BigInt");
function assertType$1(value, type) {
  let valid;
  const expectedType = getType$1(type);
  if (isSimpleType$1(expectedType)) {
    const t2 = typeof value;
    valid = t2 === expectedType.toLowerCase();
    if (!valid && t2 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$4(value);
  } else if (expectedType === "Array") {
    valid = isArray$5(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage$1(name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize$2).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType$1(value);
  const expectedValue = styleValue$1(value, expectedType);
  const receivedValue = styleValue$1(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable$1(expectedType) && !isBoolean$3(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable$1(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue$1(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable$1(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean$3(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey$1 = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue$1 = (value) => isArray$5(value) ? value.map(normalizeVNode$1) : [normalizeVNode$1(value)];
const normalizeSlot$3 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx$1((...args) => {
    if (currentInstance$1) {
      warn$5(`Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);
    }
    return normalizeSlotValue$1(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots$1 = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey$1(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$4(value)) {
      slots[key] = normalizeSlot$3(key, value, ctx);
    } else if (value != null) {
      {
        warn$5(`Non-function value encountered for slot "${key}". Prefer function slots for better performance.`);
      }
      const normalized = normalizeSlotValue$1(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots$1 = (instance, children) => {
  if (!isKeepAlive$1(instance.vnode) && true) {
    warn$5(`Non-function value encountered for default slot. Prefer function slots for better performance.`);
  }
  const normalized = normalizeSlotValue$1(children);
  instance.slots.default = () => normalized;
};
const initSlots$1 = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw$1(children);
      def$1(children, "_", type);
    } else {
      normalizeObjectSlots$1(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots$1(instance, children);
    }
  }
  def$1(instance.slots, InternalObjectKey$1, 1);
};
const updateSlots$1 = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ$1;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating$1) {
        extend$2(slots, children);
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$2(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots$1(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots$1(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey$1(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function createAppContext$1() {
  return {
    app: null,
    config: {
      isNativeTag: NO$1,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1$1 = 0;
function createAppAPI$1(render2, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$4(rootComponent)) {
      rootComponent = Object.assign({}, rootComponent);
    }
    if (rootProps != null && !isObject$4(rootProps)) {
      warn$5(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext$1();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$2,
      get config() {
        return context.config;
      },
      set config(v3) {
        {
          warn$5(`app.config cannot be replaced. Modify individual options instead.`);
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$5(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction$4(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction$4(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$5(`A plugin must either be a function or an object with an "install" function.`);
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$5("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName$1(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$5(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName$1(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$5(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$5(`There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`);
          }
          const vnode = createVNode$1(rootComponent, rootProps);
          vnode.appContext = context;
          {
            context.reload = () => {
              render2(cloneVNode$1(vnode), rootContainer, isSVG);
            };
          }
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp$1(app, version$2);
          }
          return getExposeProxy$1(vnode.component) || vnode.component.proxy;
        } else {
          warn$5(`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``);
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp$1(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$5(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$5(`App already provides property with key "${String(key)}". It will be overwritten with the new value.`);
        }
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
function setRef$1(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$5(rawRef)) {
    rawRef.forEach((r2, i2) => setRef$1(r2, oldRawRef && (isArray$5(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper$1(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy$1(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  if (!owner) {
    warn$5(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ$1 ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$4(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn$2(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef$1(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$4(ref2)) {
    callWithErrorHandling$1(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$4(ref2);
    const _isRef = isRef$1(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn$2(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$5(existing) && remove$1(existing, refValue);
          } else {
            if (!isArray$5(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn$2(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn$2(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else {
          warn$5("Invalid template ref type:", ref2, `(${typeof ref2})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect$1(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$5("Invalid template ref type:", ref2, `(${typeof ref2})`);
    }
  }
}
let supported$4;
let perf$4;
function startMeasure$1(instance, type) {
  if (instance.appContext.config.performance && isSupported$1()) {
    perf$4.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart$1(instance, type, isSupported$1() ? perf$4.now() : Date.now());
  }
}
function endMeasure$1(instance, type) {
  if (instance.appContext.config.performance && isSupported$1()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf$4.mark(endTag);
    perf$4.measure(`<${formatComponentName$1(instance, instance.type)}> ${type}`, startTag, endTag);
    perf$4.clearMarks(startTag);
    perf$4.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd$1(instance, type, isSupported$1() ? perf$4.now() : Date.now());
  }
}
function isSupported$1() {
  if (supported$4 !== void 0) {
    return supported$4;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$4 = true;
    perf$4 = window.performance;
  } else {
    supported$4 = false;
  }
  return supported$4;
}
function initFeatureFlags$2() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`);
  }
}
const queuePostRenderEffect$1 = queueEffectWithSuspense$1;
function createRenderer$1(options) {
  return baseCreateRenderer$1(options);
}
function baseCreateRenderer$1(options, createHydrationFns) {
  {
    initFeatureFlags$2();
  }
  const target = getGlobalThis$2();
  target.__VUE__ = true;
  {
    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP$1, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating$1 ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType$1(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text$1:
        processText(n1, n2, container, anchor);
        break;
      case Comment$2:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static$1:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment$1:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else {
          warn$5("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef$1(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el2 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el2, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el: el2, anchor }, container, nextSibling) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostInsert(el2, container, nextSibling);
      el2 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el2, anchor }) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostRemove(el2);
      el2 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el2;
    let vnodeHook;
    const { type, props, shapeFlag, transition, dirs } = vnode;
    el2 = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
    if (shapeFlag & 8) {
      hostSetElementText(el2, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(vnode.children, el2, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
    }
    if (dirs) {
      invokeDirectiveHook$1(vnode, null, parentComponent, "created");
    }
    setScopeId(el2, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp$1(key)) {
          hostPatchProp(el2, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in props) {
        hostPatchProp(el2, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el2, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el2, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook$1(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el2);
    }
    hostInsert(el2, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el2);
        dirs && invokeDirectiveHook$1(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el2, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el2, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el2, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot$1(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el2, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted$1(children[i2]) : normalizeVNode$1(children[i2]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el2 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ$1;
    const newProps = n2.props || EMPTY_OBJ$1;
    let vnodeHook;
    parentComponent && toggleRecurse$1(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook$1(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook$1(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse$1(parentComponent, true);
    if (isHmrUpdating$1) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el2, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
      if (parentComponent && parentComponent.type.__hmrId) {
        traverseStaticChildren$1(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(n1, n2, el2, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el2, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el2, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el2, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el2, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el2, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el2, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook$1(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment$1 || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType$1(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el2, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ$1) {
        for (const key in oldProps) {
          if (!isReservedProp$1(key) && !(key in newProps)) {
            hostPatchProp(el2, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp$1(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el2, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el2, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (
      // #5523 dev root fragment may inherit directives
      isHmrUpdating$1 || patchFlag & 2048
    ) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (parentComponent && parentComponent.type.__hmrId) {
          traverseStaticChildren$1(n1, n2);
        } else if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren$1(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance$1(initialVNode, parentComponent, parentSuspense);
    if (instance.type.__hmrId) {
      registerHMR$1(instance);
    }
    {
      pushWarningContext$1(initialVNode);
      startMeasure$1(instance, `mount`);
    }
    if (isKeepAlive$1(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure$1(instance, `init`);
      }
      setupComponent$1(instance);
      {
        endMeasure$1(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode$1(Comment$2);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
    {
      popWarningContext$1();
      endMeasure$1(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent$1(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext$1(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext$1();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob$1(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el2, props } = initialVNode;
        const { bm, m: m2, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper$1(initialVNode);
        toggleRecurse$1(instance, false);
        if (bm) {
          invokeArrayFns$1(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook$1(vnodeHook, parent, initialVNode);
        }
        toggleRecurse$1(instance, true);
        if (el2 && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure$1(instance, `render`);
            }
            instance.subTree = renderComponentRoot$1(instance);
            {
              endMeasure$1(instance, `render`);
            }
            {
              startMeasure$1(instance, `hydrate`);
            }
            hydrateNode(el2, instance.subTree, instance, parentSuspense, null);
            {
              endMeasure$1(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure$1(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot$1(instance);
          {
            endMeasure$1(instance, `render`);
          }
          {
            startMeasure$1(instance, `patch`);
          }
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          {
            endMeasure$1(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect$1(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect$1(() => invokeVNodeHook$1(vnodeHook, parent, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper$1(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect$1(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded$1(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u2, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext$1(next || instance.vnode);
        }
        toggleRecurse$1(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns$1(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook$1(vnodeHook, parent, next, vnode);
        }
        toggleRecurse$1(instance, true);
        {
          startMeasure$1(instance, `render`);
        }
        const nextTree = renderComponentRoot$1(instance);
        {
          endMeasure$1(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure$1(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        {
          endMeasure$1(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl$1(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect$1(u2, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect$1(() => invokeVNodeHook$1(vnodeHook, parent, next, vnode), parentSuspense);
        }
        {
          devtoolsComponentUpdated$1(instance);
        }
        {
          popWarningContext$1();
        }
      }
    };
    const effect = instance.effect = new ReactiveEffect$1(
      componentUpdateFn,
      () => queueJob$1(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => effect.run();
    update.id = instance.uid;
    toggleRecurse$1(instance, true);
    {
      effect.onTrack = instance.rtc ? (e2) => invokeArrayFns$1(instance.rtc, e2) : void 0;
      effect.onTrigger = instance.rtg ? (e2) => invokeArrayFns$1(instance.rtg, e2) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps$1(instance, nextVNode.props, prevProps, optimized);
    updateSlots$1(instance, nextVNode.children, optimized);
    pauseTracking$1();
    flushPreFlushCbs$1();
    resetTracking$1();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR$1;
    c2 = c2 || EMPTY_ARR$1;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]);
      patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]);
      if (isSameVNodeType$1(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted$1(c2[e2]) : normalizeVNode$1(c2[e2]);
      if (isSameVNodeType$1(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(null, c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s22 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s22; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$5(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
          }
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s22 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s22; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s22] === 0 && isSameVNodeType$1(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s22] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence$1(newIndexToOldIndexMap) : EMPTY_ARR$1;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s22 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(
              nextChild,
              container,
              anchor,
              2
              /* MoveType.REORDER */
            );
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el2, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment$1) {
      hostInsert(el2, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static$1) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el2);
        hostInsert(el2, container, anchor);
        queuePostRenderEffect$1(() => transition.enter(el2), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el2, container, anchor);
        const performLeave = () => {
          leave(el2, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el2, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el2, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef$1(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper$1(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook$1(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment$1 || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment$1 && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook$1(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el2, anchor, transition } = vnode;
    if (type === Fragment$1) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment$2) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el2, anchor);
      }
      return;
    }
    if (type === Static$1) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el2);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el2, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR$1(instance);
    }
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns$1(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect$1(um, parentSuspense);
    }
    queuePostRenderEffect$1(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved$1(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs$1();
    flushPostFlushCbs$1();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render2,
    hydrate,
    createApp: createAppAPI$1(render2, hydrate)
  };
}
function toggleRecurse$1({ effect, update }, allowed) {
  effect.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren$1(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$5(ch1) && isArray$5(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted$1(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren$1(c1, c2);
      }
      if (c2.type === Text$1) {
        c2.el = c1.el;
      }
      if (c2.type === Comment$2 && !c2.el) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence$1(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v3, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v3 = result.length - 1;
      while (u2 < v3) {
        c2 = u2 + v3 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v3 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v3 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v3;
    v3 = p2[v3];
  }
  return result;
}
const isTeleport$1 = (type) => type.__isTeleport;
const Fragment$1 = Symbol("Fragment");
const Text$1 = Symbol("Text");
const Comment$2 = Symbol("Comment");
const Static$1 = Symbol("Static");
const blockStack$1 = [];
let currentBlock$1 = null;
function openBlock$1(disableTracking = false) {
  blockStack$1.push(currentBlock$1 = disableTracking ? null : []);
}
function closeBlock$1() {
  blockStack$1.pop();
  currentBlock$1 = blockStack$1[blockStack$1.length - 1] || null;
}
let isBlockTreeEnabled$1 = 1;
function setBlockTracking$1(value) {
  isBlockTreeEnabled$1 += value;
}
function setupBlock$1(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled$1 > 0 ? currentBlock$1 || EMPTY_ARR$1 : null;
  closeBlock$1();
  if (isBlockTreeEnabled$1 > 0 && currentBlock$1) {
    currentBlock$1.push(vnode);
  }
  return vnode;
}
function createElementBlock$1(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock$1(createBaseVNode$1(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    true
    /* isBlock */
  ));
}
function createBlock$1(type, props, children, patchFlag, dynamicProps) {
  return setupBlock$1(createVNode$1(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    true
    /* isBlock: prevent a block from tracking itself */
  ));
}
function isVNode$2(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType$1(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents$1.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
const createVNodeWithArgsTransform$1 = (...args) => {
  return _createVNode$1(...args);
};
const InternalObjectKey$1 = `__vInternal`;
const normalizeKey$1 = ({ key }) => key != null ? key : null;
const normalizeRef$1 = ({ ref: ref2, ref_key, ref_for }) => {
  return ref2 != null ? isString$4(ref2) || isRef$1(ref2) || isFunction$4(ref2) ? { i: currentRenderingInstance$1, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode$1(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment$1 ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey$1(props),
    ref: props && normalizeRef$1(props),
    scopeId: currentScopeId$1,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance$1
  };
  if (needFullChildrenNormalization) {
    normalizeChildren$1(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$4(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$5(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled$1 > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock$1 && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock$1.push(vnode);
  }
  return vnode;
}
const createVNode$1 = createVNodeWithArgsTransform$1;
function _createVNode$1(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT$1) {
    if (!type) {
      warn$5(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment$2;
  }
  if (isVNode$2(type)) {
    const cloned = cloneVNode$1(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren$1(cloned, children);
    }
    if (isBlockTreeEnabled$1 > 0 && !isBlockNode && currentBlock$1) {
      if (cloned.shapeFlag & 6) {
        currentBlock$1[currentBlock$1.indexOf(type)] = cloned;
      } else {
        currentBlock$1.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent$1(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps$1(props);
    let { class: klass, style: style2 } = props;
    if (klass && !isString$4(klass)) {
      props.class = normalizeClass$1(klass);
    }
    if (isObject$4(style2)) {
      if (isProxy$1(style2) && !isArray$5(style2)) {
        style2 = extend$2({}, style2);
      }
      props.style = normalizeStyle$1(style2);
    }
  }
  const shapeFlag = isString$4(type) ? 1 : isSuspense$1(type) ? 128 : isTeleport$1(type) ? 64 : isObject$4(type) ? 4 : isFunction$4(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy$1(type)) {
    type = toRaw$1(type);
    warn$5(`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`, `
Component that was made reactive: `, type);
  }
  return createBaseVNode$1(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps$1(props) {
  if (!props)
    return null;
  return isProxy$1(props) || InternalObjectKey$1 in props ? extend$2({}, props) : props;
}
function cloneVNode$1(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps$1(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey$1(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref2 ? isArray$5(ref2) ? ref2.concat(normalizeRef$1(extraProps)) : [ref2, normalizeRef$1(extraProps)] : normalizeRef$1(extraProps)
    ) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray$5(children) ? children.map(deepCloneVNode$1) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment$1 ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode$1(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode$1(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function deepCloneVNode$1(vnode) {
  const cloned = cloneVNode$1(vnode);
  if (isArray$5(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode$1);
  }
  return cloned;
}
function createTextVNode$1(text = " ", flag = 0) {
  return createVNode$1(Text$1, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode$1(Static$1, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode$1(text = "", asBlock = false) {
  return asBlock ? (openBlock$1(), createBlock$1(Comment$2, null, text)) : createVNode$1(Comment$2, null, text);
}
function normalizeVNode$1(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode$1(Comment$2);
  } else if (isArray$5(child)) {
    return createVNode$1(
      Fragment$1,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted$1(child);
  } else {
    return createVNode$1(Text$1, null, String(child));
  }
}
function cloneIfMounted$1(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode$1(child);
}
function normalizeChildren$1(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$5(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren$1(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey$1 in children)) {
        children._ctx = currentRenderingInstance$1;
      } else if (slotFlag === 3 && currentRenderingInstance$1) {
        if (currentRenderingInstance$1.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$4(children)) {
    children = { default: children, _ctx: currentRenderingInstance$1 };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode$1(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps$1(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass$1([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle$1([ret.style, toMerge.style]);
      } else if (isOn$1(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$5(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook$1(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling$1(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext$1 = createAppContext$1();
let uid$3 = 0;
function createComponentInstance$1(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext$1;
  const instance = {
    uid: uid$3++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    effect: null,
    update: null,
    scope: new EffectScope$1(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions$1(type, appContext),
    emitsOptions: normalizeEmitsOptions$1(type, appContext),
    // emit
    emit: null,
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ$1,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ$1,
    data: EMPTY_OBJ$1,
    props: EMPTY_OBJ$1,
    attrs: EMPTY_OBJ$1,
    slots: EMPTY_OBJ$1,
    refs: EMPTY_OBJ$1,
    setupState: EMPTY_OBJ$1,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext$1(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit$2.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance$1 = null;
const getCurrentInstance$1 = () => currentInstance$1 || currentRenderingInstance$1;
const setCurrentInstance$1 = (instance) => {
  currentInstance$1 = instance;
  instance.scope.on();
};
const unsetCurrentInstance$1 = () => {
  currentInstance$1 && currentInstance$1.scope.off();
  currentInstance$1 = null;
};
const isBuiltInTag$1 = /* @__PURE__ */ makeMap$1("slot,component");
function validateComponentName$1(name, config2) {
  const appIsNativeTag = config2.isNativeTag || NO$1;
  if (isBuiltInTag$1(name) || appIsNativeTag(name)) {
    warn$5("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function isStatefulComponent$1(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup$1 = false;
function setupComponent$1(instance, isSSR = false) {
  isInSSRComponentSetup$1 = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent$1(instance);
  initProps$1(instance, props, isStateful, isSSR);
  initSlots$1(instance, children);
  const setupResult = isStateful ? setupStatefulComponent$1(instance, isSSR) : void 0;
  isInSSRComponentSetup$1 = false;
  return setupResult;
}
function setupStatefulComponent$1(instance, isSSR) {
  var _a2;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName$1(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateComponentName$1(names[i2], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateDirectiveName$1(names[i2]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly$1()) {
      warn$5(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw$1(new Proxy(instance.ctx, PublicInstanceProxyHandlers$1));
  {
    exposePropsOnRenderContext$1(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext$1(instance) : null;
    setCurrentInstance$1(instance);
    pauseTracking$1();
    const setupResult = callWithErrorHandling$1(setup, instance, 0, [shallowReadonly$1(instance.props), setupContext]);
    resetTracking$1();
    unsetCurrentInstance$1();
    if (isPromise$1(setupResult)) {
      setupResult.then(unsetCurrentInstance$1, unsetCurrentInstance$1);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult$1(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError$1(
            e2,
            instance,
            0
            /* ErrorCodes.SETUP_FUNCTION */
          );
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a2 = Component.name) !== null && _a2 !== void 0 ? _a2 : "Anonymous";
          warn$5(`Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);
        }
      }
    } else {
      handleSetupResult$1(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup$1(instance, isSSR);
  }
}
function handleSetupResult$1(instance, setupResult, isSSR) {
  if (isFunction$4(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$4(setupResult)) {
    if (isVNode$2(setupResult)) {
      warn$5(`setup() should not return VNodes directly - return a render function instead.`);
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs$1(setupResult);
    {
      exposeSetupStateOnRenderContext$1(instance);
    }
  } else if (setupResult !== void 0) {
    warn$5(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
  }
  finishComponentSetup$1(instance, isSSR);
}
let compile$1;
const isRuntimeOnly$1 = () => !compile$1;
function finishComponentSetup$1(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions$1(instance).template;
      if (template) {
        {
          startMeasure$1(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$2(extend$2({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile$1(template, finalCompilerOptions);
        {
          endMeasure$1(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP$1;
  }
  {
    setCurrentInstance$1(instance);
    pauseTracking$1();
    applyOptions$1(instance);
    resetTracking$1();
    unsetCurrentInstance$1();
  }
  if (!Component.render && instance.render === NOOP$1 && !isSSR) {
    if (Component.template) {
      warn$5(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
        /* should not happen */
      );
    } else {
      warn$5(`Component is missing template or render function.`);
    }
  }
}
function createAttrsProxy(instance) {
  return new Proxy(
    instance.attrs,
    {
      get(target, key) {
        markAttrsAccessed$1();
        track$1(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$5(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$5(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  );
}
function createSetupContext$1(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$5(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray$5(exposed)) {
            exposedType = "array";
          } else if (isRef$1(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$5(`expose() should be passed a plain object, received ${exposedType}.`);
        }
      }
    }
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return Object.freeze({
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      get slots() {
        return shallowReadonly$1(instance.slots);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy$1(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs$1(markRaw$1(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap$1) {
          return publicPropertiesMap$1[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap$1;
      }
    }));
  }
}
const classifyRE$1 = /(?:^|[-_])(\w)/g;
const classify$1 = (str) => str.replace(classifyRE$1, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName$1(Component, includeInferred = true) {
  return isFunction$4(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName$1(instance, Component, isRoot = false) {
  let name = getComponentName$1(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify$1(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent$1(value) {
  return isFunction$4(value) && "__vccOpts" in value;
}
const computed$2 = (getterOrOptions, debugOptions) => {
  return computed$1$1(getterOrOptions, debugOptions, isInSSRComponentSetup$1);
};
function h$4(type, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$4(propsOrChildren) && !isArray$5(propsOrChildren)) {
      if (isVNode$2(propsOrChildren)) {
        return createVNode$1(type, null, [propsOrChildren]);
      }
      return createVNode$1(type, propsOrChildren);
    } else {
      return createVNode$1(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode$2(children)) {
      children = [children];
    }
    return createVNode$1(type, propsOrChildren, children);
  }
}
const ssrContextKey$1 = Symbol(`ssrContext`);
const useSSRContext$1 = () => {
  {
    const ctx = inject$1(ssrContextKey$1);
    if (!ctx) {
      warn$5(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);
    }
    return ctx;
  }
};
function isShallow$2(value) {
  return !!(value && value[
    "__v_isShallow"
    /* ReactiveFlags.IS_SHALLOW */
  ]);
}
function initCustomFormatter$1() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#0b1bc9" };
  const stringStyle = { style: "color:#b62e24" };
  const keywordStyle = { style: "color:#9d288c" };
  const formatter = {
    header(obj) {
      if (!isObject$4(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow$2(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly$1(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow$2(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw$1(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ$1) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ$1) {
      blocks.push(createInstanceBlock("data", toRaw$1(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend$2({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v3, asRaw = true) {
    if (typeof v3 === "number") {
      return ["span", numberStyle, v3];
    } else if (typeof v3 === "string") {
      return ["span", stringStyle, JSON.stringify(v3)];
    } else if (typeof v3 === "boolean") {
      return ["span", keywordStyle, v3];
    } else if (isObject$4(v3)) {
      return ["object", { object: asRaw ? toRaw$1(v3) : v3 }];
    } else {
      return ["span", stringStyle, String(v3)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction$4(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray$5(opts) && opts.includes(key) || isObject$4(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m2) => isKeyOfType(m2, key, type))) {
      return true;
    }
  }
  function genRefFlag(v3) {
    if (isShallow$2(v3)) {
      return `ShallowRef`;
    }
    if (v3.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
const version$2 = "3.2.47";
const svgNS$1 = "http://www.w3.org/2000/svg";
const doc$1 = typeof document !== "undefined" ? document : null;
const templateContainer$1 = doc$1 && /* @__PURE__ */ doc$1.createElement("template");
const nodeOps$1 = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props) => {
    const el2 = isSVG ? doc$1.createElementNS(svgNS$1, tag) : doc$1.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el2.setAttribute("multiple", props.multiple);
    }
    return el2;
  },
  createText: (text) => doc$1.createTextNode(text),
  createComment: (text) => doc$1.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el2, text) => {
    el2.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc$1.querySelector(selector),
  setScopeId(el2, id2) {
    el2.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer$1.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer$1.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass$1(el2, value, isSVG) {
  const transitionClasses = el2._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el2.removeAttribute("class");
  } else if (isSVG) {
    el2.setAttribute("class", value);
  } else {
    el2.className = value;
  }
}
function patchStyle$1(el2, prev, next) {
  const style2 = el2.style;
  const isCssString = isString$4(next);
  if (next && !isCssString) {
    if (prev && !isString$4(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle$1(style2, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle$1(style2, key, next[key]);
    }
  } else {
    const currentDisplay = style2.display;
    if (isCssString) {
      if (prev !== next) {
        style2.cssText = next;
      }
    } else if (prev) {
      el2.removeAttribute("style");
    }
    if ("_vod" in el2) {
      style2.display = currentDisplay;
    }
  }
}
const semicolonRE$1 = /[^\\];\s*$/;
const importantRE$1 = /\s*!important$/;
function setStyle$1(style2, name, val) {
  if (isArray$5(val)) {
    val.forEach((v3) => setStyle$1(style2, name, v3));
  } else {
    if (val == null)
      val = "";
    {
      if (semicolonRE$1.test(val)) {
        warn$5(`Unexpected semicolon at the end of '${name}' style value: '${val}'`);
      }
    }
    if (name.startsWith("--")) {
      style2.setProperty(name, val);
    } else {
      const prefixed = autoPrefix$1(style2, name);
      if (importantRE$1.test(val)) {
        style2.setProperty(hyphenate$1(prefixed), val.replace(importantRE$1, ""), "important");
      } else {
        style2[prefixed] = val;
      }
    }
  }
}
const prefixes$1 = ["Webkit", "Moz", "ms"];
const prefixCache$1 = {};
function autoPrefix$1(style2, rawName) {
  const cached = prefixCache$1[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize$1(rawName);
  if (name !== "filter" && name in style2) {
    return prefixCache$1[rawName] = name;
  }
  name = capitalize$2(name);
  for (let i2 = 0; i2 < prefixes$1.length; i2++) {
    const prefixed = prefixes$1[i2] + name;
    if (prefixed in style2) {
      return prefixCache$1[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS$1 = "http://www.w3.org/1999/xlink";
function patchAttr$1(el2, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el2.removeAttributeNS(xlinkNS$1, key.slice(6, key.length));
    } else {
      el2.setAttributeNS(xlinkNS$1, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr$1(key);
    if (value == null || isBoolean2 && !includeBooleanAttr$1(value)) {
      el2.removeAttribute(key);
    } else {
      el2.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp$1(el2, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el2[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el2.tagName !== "PROGRESS" && // custom elements may use _value internally
  !el2.tagName.includes("-")) {
    el2._value = value;
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue || // #4956: always set for OPTION elements because its value falls back to
    // textContent if no value attribute is present. And setting .value for
    // OPTION has no side effect
    el2.tagName === "OPTION") {
      el2.value = newValue;
    }
    if (value == null) {
      el2.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el2[key];
    if (type === "boolean") {
      value = includeBooleanAttr$1(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el2[key] = value;
  } catch (e2) {
    if (!needRemove) {
      warn$5(`Failed setting prop "${key}" on <${el2.tagName.toLowerCase()}>: value ${value} is invalid.`, e2);
    }
  }
  needRemove && el2.removeAttribute(key);
}
function addEventListener$1(el2, event, handler, options) {
  el2.addEventListener(event, handler, options);
}
function removeEventListener$1(el2, event, handler, options) {
  el2.removeEventListener(event, handler, options);
}
function patchEvent$1(el2, rawName, prevValue, nextValue, instance = null) {
  const invokers = el2._vei || (el2._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName$1(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker$1(nextValue, instance);
      addEventListener$1(el2, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener$1(el2, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE$1 = /(?:Once|Passive|Capture)$/;
function parseName$1(name) {
  let options;
  if (optionsModifierRE$1.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE$1)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate$1(name.slice(2));
  return [event, options];
}
let cachedNow$1 = 0;
const p$8 = /* @__PURE__ */ Promise.resolve();
const getNow$1 = () => cachedNow$1 || (p$8.then(() => cachedNow$1 = 0), cachedNow$1 = Date.now());
function createInvoker$1(initialValue, instance) {
  const invoker = (e2) => {
    if (!e2._vts) {
      e2._vts = Date.now();
    } else if (e2._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling$1(patchStopImmediatePropagation$1(e2, invoker.value), instance, 5, [e2]);
  };
  invoker.value = initialValue;
  invoker.attached = getNow$1();
  return invoker;
}
function patchStopImmediatePropagation$1(e2, value) {
  if (isArray$5(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map((fn2) => (e3) => !e3._stopped && fn2 && fn2(e3));
  } else {
    return value;
  }
}
const nativeOnRE$1 = /^on[a-z]/;
const patchProp$1 = (el2, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass$1(el2, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle$1(el2, prevValue, nextValue);
  } else if (isOn$1(key)) {
    if (!isModelListener$1(key)) {
      patchEvent$1(el2, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp$1(el2, key, nextValue, isSVG)) {
    patchDOMProp$1(el2, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el2._trueValue = nextValue;
    } else if (key === "false-value") {
      el2._falseValue = nextValue;
    }
    patchAttr$1(el2, key, nextValue, isSVG);
  }
};
function shouldSetAsProp$1(el2, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el2 && nativeOnRE$1.test(key) && isFunction$4(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el2.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el2.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE$1.test(key) && isString$4(value)) {
    return false;
  }
  return key in el2;
}
function useCssVars$1(getter) {
  const instance = getCurrentInstance$1();
  if (!instance) {
    warn$5(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)).forEach((node) => setVarsOnNode$1(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode$1(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect$1(setVars);
  onMounted$1(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted$1(() => ob.disconnect());
  });
}
function setVarsOnVNode$1(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode$1(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode$1(vnode.el, vars);
  } else if (vnode.type === Fragment$1) {
    vnode.children.forEach((c2) => setVarsOnVNode$1(c2, vars));
  } else if (vnode.type === Static$1) {
    let { el: el2, anchor } = vnode;
    while (el2) {
      setVarsOnNode$1(el2, vars);
      if (el2 === anchor)
        break;
      el2 = el2.nextSibling;
    }
  }
}
function setVarsOnNode$1(el2, vars) {
  if (el2.nodeType === 1) {
    const style2 = el2.style;
    for (const key in vars) {
      style2.setProperty(`--${key}`, vars[key]);
    }
  }
}
const TRANSITION$1 = "transition";
const ANIMATION$1 = "animation";
const Transition$1 = (props, { slots }) => h$4(BaseTransition$1, resolveTransitionProps$1(props), slots);
Transition$1.displayName = "Transition";
const DOMTransitionPropsValidators$1 = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators$1 = Transition$1.props = /* @__PURE__ */ extend$2({}, BaseTransition$1.props, DOMTransitionPropsValidators$1);
const callHook$2 = (hook, args = []) => {
  if (isArray$5(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback$1 = (hook) => {
  return hook ? isArray$5(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps$1(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators$1)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
  const durations = normalizeDuration$1(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
  const finishEnter = (el2, isAppear, done) => {
    removeTransitionClass$1(el2, isAppear ? appearToClass : enterToClass);
    removeTransitionClass$1(el2, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el2, done) => {
    el2._isLeaving = false;
    removeTransitionClass$1(el2, leaveFromClass);
    removeTransitionClass$1(el2, leaveToClass);
    removeTransitionClass$1(el2, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el2, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el2, isAppear, done);
      callHook$2(hook, [el2, resolve2]);
      nextFrame$2(() => {
        removeTransitionClass$1(el2, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass$1(el2, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback$1(hook)) {
          whenTransitionEnds$1(el2, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$2(baseProps, {
    onBeforeEnter(el2) {
      callHook$2(onBeforeEnter, [el2]);
      addTransitionClass$1(el2, enterFromClass);
      addTransitionClass$1(el2, enterActiveClass);
    },
    onBeforeAppear(el2) {
      callHook$2(onBeforeAppear, [el2]);
      addTransitionClass$1(el2, appearFromClass);
      addTransitionClass$1(el2, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el2, done) {
      el2._isLeaving = true;
      const resolve2 = () => finishLeave(el2, done);
      addTransitionClass$1(el2, leaveFromClass);
      forceReflow$1();
      addTransitionClass$1(el2, leaveActiveClass);
      nextFrame$2(() => {
        if (!el2._isLeaving) {
          return;
        }
        removeTransitionClass$1(el2, leaveFromClass);
        addTransitionClass$1(el2, leaveToClass);
        if (!hasExplicitCallback$1(onLeave)) {
          whenTransitionEnds$1(el2, type, leaveDuration, resolve2);
        }
      });
      callHook$2(onLeave, [el2, resolve2]);
    },
    onEnterCancelled(el2) {
      finishEnter(el2, false);
      callHook$2(onEnterCancelled, [el2]);
    },
    onAppearCancelled(el2) {
      finishEnter(el2, true);
      callHook$2(onAppearCancelled, [el2]);
    },
    onLeaveCancelled(el2) {
      finishLeave(el2);
      callHook$2(onLeaveCancelled, [el2]);
    }
  });
}
function normalizeDuration$1(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$4(duration)) {
    return [NumberOf$1(duration.enter), NumberOf$1(duration.leave)];
  } else {
    const n2 = NumberOf$1(duration);
    return [n2, n2];
  }
}
function NumberOf$1(val) {
  const res = toNumber$1(val);
  {
    assertNumber$1(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass$1(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.add(c2));
  (el2._vtc || (el2._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass$1(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.remove(c2));
  const { _vtc } = el2;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el2._vtc = void 0;
    }
  }
}
function nextFrame$2(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId$1 = 0;
function whenTransitionEnds$1(el2, expectedType, explicitTimeout, resolve2) {
  const id2 = el2._endId = ++endId$1;
  const resolveIfNotStale = () => {
    if (id2 === el2._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo$1(el2, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el2.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e2) => {
    if (e2.target === el2 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el2.addEventListener(endEvent, onEnd);
}
function getTransitionInfo$1(el2, expectedType) {
  const styles = window.getComputedStyle(el2);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION$1}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION$1}Duration`);
  const transitionTimeout = getTimeout$1(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION$1}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION$1}Duration`);
  const animationTimeout = getTimeout$1(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION$1) {
    if (transitionTimeout > 0) {
      type = TRANSITION$1;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION$1) {
    if (animationTimeout > 0) {
      type = ANIMATION$1;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION$1 : ANIMATION$1 : null;
    propCount = type ? type === TRANSITION$1 ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION$1 && /\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION$1}Property`).toString());
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout$1(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs$1(d2) + toMs$1(delays[i2])));
}
function toMs$1(s3) {
  return Number(s3.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow$1() {
  return document.body.offsetHeight;
}
const positionMap$1 = /* @__PURE__ */ new WeakMap();
const newPositionMap$1 = /* @__PURE__ */ new WeakMap();
const TransitionGroupImpl$1 = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$2({}, TransitionPropsValidators$1, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance$1();
    const state = useTransitionState$1();
    let prevChildren;
    let children;
    onUpdated$1(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform$1(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs$1);
      prevChildren.forEach(recordPosition$1);
      const movedChildren = prevChildren.filter(applyTranslation$1);
      forceReflow$1();
      movedChildren.forEach((c2) => {
        const el2 = c2.el;
        const style2 = el2.style;
        addTransitionClass$1(el2, moveClass);
        style2.transform = style2.webkitTransform = style2.transitionDuration = "";
        const cb = el2._moveCb = (e2) => {
          if (e2 && e2.target !== el2) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el2.removeEventListener("transitionend", cb);
            el2._moveCb = null;
            removeTransitionClass$1(el2, moveClass);
          }
        };
        el2.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw$1(props);
      const cssTransitionProps = resolveTransitionProps$1(rawProps);
      let tag = rawProps.tag || Fragment$1;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren$1(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks$1(child, resolveTransitionHooks$1(child, cssTransitionProps, state, instance));
        } else {
          warn$5(`<TransitionGroup> children must be keyed.`);
        }
      }
      if (prevChildren) {
        for (let i2 = 0; i2 < prevChildren.length; i2++) {
          const child = prevChildren[i2];
          setTransitionHooks$1(child, resolveTransitionHooks$1(child, cssTransitionProps, state, instance));
          positionMap$1.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode$1(tag, null, children);
    };
  }
};
const removeMode$1 = (props) => delete props.mode;
/* @__PURE__ */ removeMode$1(TransitionGroupImpl$1.props);
function callPendingCbs$1(c2) {
  const el2 = c2.el;
  if (el2._moveCb) {
    el2._moveCb();
  }
  if (el2._enterCb) {
    el2._enterCb();
  }
}
function recordPosition$1(c2) {
  newPositionMap$1.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation$1(c2) {
  const oldPos = positionMap$1.get(c2);
  const newPos = newPositionMap$1.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s3 = c2.el.style;
    s3.transform = s3.webkitTransform = `translate(${dx}px,${dy}px)`;
    s3.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform$1(el2, root, moveClass) {
  const clone2 = el2.cloneNode();
  if (el2._vtc) {
    el2._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
  clone2.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo$1(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner$1 = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$5(fn2) ? (value) => invokeArrayFns$1(fn2, value) : fn2;
};
function onCompositionStart$1(e2) {
  e2.target.composing = true;
}
function onCompositionEnd$1(e2) {
  const target = e2.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const vModelText$1 = {
  created(el2, { modifiers: { lazy, trim: trim2, number: number2 } }, vnode) {
    el2._assign = getModelAssigner$1(vnode);
    const castToNumber = number2 || vnode.props && vnode.props.type === "number";
    addEventListener$1(el2, lazy ? "change" : "input", (e2) => {
      if (e2.target.composing)
        return;
      let domValue = el2.value;
      if (trim2) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber$1(domValue);
      }
      el2._assign(domValue);
    });
    if (trim2) {
      addEventListener$1(el2, "change", () => {
        el2.value = el2.value.trim();
      });
    }
    if (!lazy) {
      addEventListener$1(el2, "compositionstart", onCompositionStart$1);
      addEventListener$1(el2, "compositionend", onCompositionEnd$1);
      addEventListener$1(el2, "change", onCompositionEnd$1);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el2, { value }) {
    el2.value = value == null ? "" : value;
  },
  beforeUpdate(el2, { value, modifiers: { lazy, trim: trim2, number: number2 } }, vnode) {
    el2._assign = getModelAssigner$1(vnode);
    if (el2.composing)
      return;
    if (document.activeElement === el2 && el2.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim2 && el2.value.trim() === value) {
        return;
      }
      if ((number2 || el2.type === "number") && looseToNumber$1(el2.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue) {
      el2.value = newValue;
    }
  }
};
const systemModifiers$1 = ["ctrl", "shift", "alt", "meta"];
const modifierGuards$1 = {
  stop: (e2) => e2.stopPropagation(),
  prevent: (e2) => e2.preventDefault(),
  self: (e2) => e2.target !== e2.currentTarget,
  ctrl: (e2) => !e2.ctrlKey,
  shift: (e2) => !e2.shiftKey,
  alt: (e2) => !e2.altKey,
  meta: (e2) => !e2.metaKey,
  left: (e2) => "button" in e2 && e2.button !== 0,
  middle: (e2) => "button" in e2 && e2.button !== 1,
  right: (e2) => "button" in e2 && e2.button !== 2,
  exact: (e2, modifiers) => systemModifiers$1.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers$1 = (fn2, modifiers) => {
  return (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards$1[modifiers[i2]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  };
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn2, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate$1(event.key);
    if (modifiers.some((k2) => k2 === eventKey || keyNames[k2] === eventKey)) {
      return fn2(event);
    }
  };
};
const vShow = {
  beforeMount(el2, { value }, { transition }) {
    el2._vod = el2.style.display === "none" ? "" : el2.style.display;
    if (transition && value) {
      transition.beforeEnter(el2);
    } else {
      setDisplay(el2, value);
    }
  },
  mounted(el2, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el2);
    }
  },
  updated(el2, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el2);
        setDisplay(el2, true);
        transition.enter(el2);
      } else {
        transition.leave(el2, () => {
          setDisplay(el2, false);
        });
      }
    } else {
      setDisplay(el2, value);
    }
  },
  beforeUnmount(el2, { value }) {
    setDisplay(el2, value);
  }
};
function setDisplay(el2, value) {
  el2.style.display = value ? el2._vod : "none";
}
const rendererOptions$1 = /* @__PURE__ */ extend$2({ patchProp: patchProp$1 }, nodeOps$1);
let renderer$1;
function ensureRenderer$1() {
  return renderer$1 || (renderer$1 = createRenderer$1(rendererOptions$1));
}
const createApp$1 = (...args) => {
  const app = ensureRenderer$1().createApp(...args);
  {
    injectNativeTagCheck$1(app);
    injectCompilerOptionsCheck$1(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer$1(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$4(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function injectNativeTagCheck$1(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag$1(tag) || isSVGTag$1(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck$1(app) {
  {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn$5(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn$5(msg);
        return compilerOptions;
      },
      set() {
        warn$5(msg);
      }
    });
  }
}
function normalizeContainer$1(container) {
  if (isString$4(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn$5(`Failed to mount app: mount target selector "${container}" returned null.`);
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn$5(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
  }
  return container;
}
function initDev$1() {
  {
    initCustomFormatter$1();
  }
}
{
  initDev$1();
}
var isVue2$1 = false;
function set$3(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  target[key] = val;
  return val;
}
function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1);
    return;
  }
  delete target[key];
}
function getDevtoolsGlobalHook$2() {
  return getTarget$2().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget$2() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable$2 = typeof Proxy === "function";
const HOOK_SETUP$2 = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET$2 = "plugin:settings:set";
let supported$3;
let perf$3;
function isPerformanceSupported$2() {
  var _a2;
  if (supported$3 !== void 0) {
    return supported$3;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$3 = true;
    perf$3 = window.performance;
  } else if (typeof global !== "undefined" && ((_a2 = global.perf_hooks) === null || _a2 === void 0 ? void 0 : _a2.performance)) {
    supported$3 = true;
    perf$3 = global.perf_hooks.performance;
  } else {
    supported$3 = false;
  }
  return supported$3;
}
function now$2() {
  return isPerformanceSupported$2() ? perf$3.now() : Date.now();
}
let ApiProxy$2 = class ApiProxy2 {
  constructor(plugin2, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin2;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin2.settings) {
      for (const id2 in plugin2.settings) {
        const item = plugin2.settings[id2];
        defaultSettings[id2] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin2.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e2) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e2) {
        }
        currentSettings = value;
      },
      now() {
        return now$2();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET$2, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
};
function setupDevtoolsPlugin$2(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget$2();
  const hook = getDevtoolsGlobalHook$2();
  const enableProxy = isProxyAvailable$2 && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP$2, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy$2(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy)
      setupFn(proxy.proxiedTarget);
  }
}
/*!
  * pinia v2.0.30
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
let activePinia;
const setActivePinia = (pinia) => activePinia = pinia;
const piniaSymbol$1 = Symbol("pinia");
function isPlainObject$5(o2) {
  return o2 && typeof o2 === "object" && Object.prototype.toString.call(o2) === "[object Object]" && typeof o2.toJSON !== "function";
}
var MutationType$1;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType$1 || (MutationType$1 = {}));
const IS_CLIENT$1 = typeof window !== "undefined";
const USE_DEVTOOLS$1 = IS_CLIENT$1;
const _global$3 = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
function bom$1(blob, { autoBom = false } = {}) {
  if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
  }
  return blob;
}
function download$1(url, name, opts) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.responseType = "blob";
  xhr.onload = function() {
    saveAs$1(xhr.response, name, opts);
  };
  xhr.onerror = function() {
    console.error("could not download file");
  };
  xhr.send();
}
function corsEnabled$1(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("HEAD", url, false);
  try {
    xhr.send();
  } catch (e2) {
  }
  return xhr.status >= 200 && xhr.status <= 299;
}
function click$1(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e2) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
    node.dispatchEvent(evt);
  }
}
const _navigator$1 = typeof navigator === "object" ? navigator : { userAgent: "" };
const isMacOSWebView$1 = /* @__PURE__ */ (() => /Macintosh/.test(_navigator$1.userAgent) && /AppleWebKit/.test(_navigator$1.userAgent) && !/Safari/.test(_navigator$1.userAgent))();
const saveAs$1 = !IS_CLIENT$1 ? () => {
} : (
  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
  typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView$1 ? downloadSaveAs$1 : (
    // Use msSaveOrOpenBlob as a second approach
    "msSaveOrOpenBlob" in _navigator$1 ? msSaveAs$1 : (
      // Fallback to using FileReader and a popup
      fileSaverSaveAs$1
    )
  )
);
function downloadSaveAs$1(blob, name = "download", opts) {
  const a2 = document.createElement("a");
  a2.download = name;
  a2.rel = "noopener";
  if (typeof blob === "string") {
    a2.href = blob;
    if (a2.origin !== location.origin) {
      if (corsEnabled$1(a2.href)) {
        download$1(blob, name, opts);
      } else {
        a2.target = "_blank";
        click$1(a2);
      }
    } else {
      click$1(a2);
    }
  } else {
    a2.href = URL.createObjectURL(blob);
    setTimeout(function() {
      URL.revokeObjectURL(a2.href);
    }, 4e4);
    setTimeout(function() {
      click$1(a2);
    }, 0);
  }
}
function msSaveAs$1(blob, name = "download", opts) {
  if (typeof blob === "string") {
    if (corsEnabled$1(blob)) {
      download$1(blob, name, opts);
    } else {
      const a2 = document.createElement("a");
      a2.href = blob;
      a2.target = "_blank";
      setTimeout(function() {
        click$1(a2);
      });
    }
  } else {
    navigator.msSaveOrOpenBlob(bom$1(blob, opts), name);
  }
}
function fileSaverSaveAs$1(blob, name, opts, popup) {
  popup = popup || open("", "_blank");
  if (popup) {
    popup.document.title = popup.document.body.innerText = "downloading...";
  }
  if (typeof blob === "string")
    return download$1(blob, name, opts);
  const force = blob.type === "application/octet-stream";
  const isSafari2 = /constructor/i.test(String(_global$3.HTMLElement)) || "safari" in _global$3;
  const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((isChromeIOS || force && isSafari2 || isMacOSWebView$1) && typeof FileReader !== "undefined") {
    const reader = new FileReader();
    reader.onloadend = function() {
      let url = reader.result;
      if (typeof url !== "string") {
        popup = null;
        throw new Error("Wrong reader.result type");
      }
      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
      if (popup) {
        popup.location.href = url;
      } else {
        location.assign(url);
      }
      popup = null;
    };
    reader.readAsDataURL(blob);
  } else {
    const url = URL.createObjectURL(blob);
    if (popup)
      popup.location.assign(url);
    else
      location.href = url;
    popup = null;
    setTimeout(function() {
      URL.revokeObjectURL(url);
    }, 4e4);
  }
}
function toastMessage$1(message, type) {
  const piniaMessage = "🍍 " + message;
  if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
  } else if (type === "error") {
    console.error(piniaMessage);
  } else if (type === "warn") {
    console.warn(piniaMessage);
  } else {
    console.log(piniaMessage);
  }
}
function isPinia$1(o2) {
  return "_a" in o2 && "install" in o2;
}
function checkClipboardAccess$1() {
  if (!("clipboard" in navigator)) {
    toastMessage$1(`Your browser doesn't support the Clipboard API`, "error");
    return true;
  }
}
function checkNotFocusedError$1(error) {
  if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
    toastMessage$1('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
    return true;
  }
  return false;
}
async function actionGlobalCopyState$1(pinia) {
  if (checkClipboardAccess$1())
    return;
  try {
    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
    toastMessage$1("Global state copied to clipboard.");
  } catch (error) {
    if (checkNotFocusedError$1(error))
      return;
    toastMessage$1(`Failed to serialize the state. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalPasteState$1(pinia) {
  if (checkClipboardAccess$1())
    return;
  try {
    pinia.state.value = JSON.parse(await navigator.clipboard.readText());
    toastMessage$1("Global state pasted from clipboard.");
  } catch (error) {
    if (checkNotFocusedError$1(error))
      return;
    toastMessage$1(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalSaveState$1(pinia) {
  try {
    saveAs$1(new Blob([JSON.stringify(pinia.state.value)], {
      type: "text/plain;charset=utf-8"
    }), "pinia-state.json");
  } catch (error) {
    toastMessage$1(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
let fileInput$1;
function getFileOpener$1() {
  if (!fileInput$1) {
    fileInput$1 = document.createElement("input");
    fileInput$1.type = "file";
    fileInput$1.accept = ".json";
  }
  function openFile() {
    return new Promise((resolve2, reject) => {
      fileInput$1.onchange = async () => {
        const files = fileInput$1.files;
        if (!files)
          return resolve2(null);
        const file = files.item(0);
        if (!file)
          return resolve2(null);
        return resolve2({ text: await file.text(), file });
      };
      fileInput$1.oncancel = () => resolve2(null);
      fileInput$1.onerror = reject;
      fileInput$1.click();
    });
  }
  return openFile;
}
async function actionGlobalOpenStateFile$1(pinia) {
  try {
    const open2 = await getFileOpener$1();
    const result = await open2();
    if (!result)
      return;
    const { text, file } = result;
    pinia.state.value = JSON.parse(text);
    toastMessage$1(`Global state imported from "${file.name}".`);
  } catch (error) {
    toastMessage$1(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
function formatDisplay$3(display) {
  return {
    _custom: {
      display
    }
  };
}
const PINIA_ROOT_LABEL$1 = "🍍 Pinia (root)";
const PINIA_ROOT_ID$1 = "_root";
function formatStoreForInspectorTree$1(store) {
  return isPinia$1(store) ? {
    id: PINIA_ROOT_ID$1,
    label: PINIA_ROOT_LABEL$1
  } : {
    id: store.$id,
    label: store.$id
  };
}
function formatStoreForInspectorState$1(store) {
  if (isPinia$1(store)) {
    const storeNames = Array.from(store._s.keys());
    const storeMap = store._s;
    const state2 = {
      state: storeNames.map((storeId) => ({
        editable: true,
        key: storeId,
        value: store.state.value[storeId]
      })),
      getters: storeNames.filter((id2) => storeMap.get(id2)._getters).map((id2) => {
        const store2 = storeMap.get(id2);
        return {
          editable: false,
          key: id2,
          value: store2._getters.reduce((getters, key) => {
            getters[key] = store2[key];
            return getters;
          }, {})
        };
      })
    };
    return state2;
  }
  const state = {
    state: Object.keys(store.$state).map((key) => ({
      editable: true,
      key,
      value: store.$state[key]
    }))
  };
  if (store._getters && store._getters.length) {
    state.getters = store._getters.map((getterName) => ({
      editable: false,
      key: getterName,
      value: store[getterName]
    }));
  }
  if (store._customProperties.size) {
    state.customProperties = Array.from(store._customProperties).map((key) => ({
      editable: true,
      key,
      value: store[key]
    }));
  }
  return state;
}
function formatEventData$1(events) {
  if (!events)
    return {};
  if (Array.isArray(events)) {
    return events.reduce((data, event) => {
      data.keys.push(event.key);
      data.operations.push(event.type);
      data.oldValue[event.key] = event.oldValue;
      data.newValue[event.key] = event.newValue;
      return data;
    }, {
      oldValue: {},
      keys: [],
      operations: [],
      newValue: {}
    });
  } else {
    return {
      operation: formatDisplay$3(events.type),
      key: formatDisplay$3(events.key),
      oldValue: events.oldValue,
      newValue: events.newValue
    };
  }
}
function formatMutationType$1(type) {
  switch (type) {
    case MutationType$1.direct:
      return "mutation";
    case MutationType$1.patchFunction:
      return "$patch";
    case MutationType$1.patchObject:
      return "$patch";
    default:
      return "unknown";
  }
}
let isTimelineActive$1 = true;
const componentStateTypes$1 = [];
const MUTATIONS_LAYER_ID$1 = "pinia:mutations";
const INSPECTOR_ID$1 = "pinia";
const { assign: assign$1$1 } = Object;
const getStoreType$1 = (id2) => "🍍 " + id2;
function registerPiniaDevtools$1(app, pinia) {
  setupDevtoolsPlugin$2({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes: componentStateTypes$1,
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      toastMessage$1("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.addTimelineLayer({
      id: MUTATIONS_LAYER_ID$1,
      label: `Pinia 🍍`,
      color: 15064968
    });
    api.addInspector({
      id: INSPECTOR_ID$1,
      label: "Pinia 🍍",
      icon: "storage",
      treeFilterPlaceholder: "Search stores",
      actions: [
        {
          icon: "content_copy",
          action: () => {
            actionGlobalCopyState$1(pinia);
          },
          tooltip: "Serialize and copy the state"
        },
        {
          icon: "content_paste",
          action: async () => {
            await actionGlobalPasteState$1(pinia);
            api.sendInspectorTree(INSPECTOR_ID$1);
            api.sendInspectorState(INSPECTOR_ID$1);
          },
          tooltip: "Replace the state with the content of your clipboard"
        },
        {
          icon: "save",
          action: () => {
            actionGlobalSaveState$1(pinia);
          },
          tooltip: "Save the state as a JSON file"
        },
        {
          icon: "folder_open",
          action: async () => {
            await actionGlobalOpenStateFile$1(pinia);
            api.sendInspectorTree(INSPECTOR_ID$1);
            api.sendInspectorState(INSPECTOR_ID$1);
          },
          tooltip: "Import the state from a JSON file"
        }
      ],
      nodeActions: [
        {
          icon: "restore",
          tooltip: "Reset the state (option store only)",
          action: (nodeId) => {
            const store = pinia._s.get(nodeId);
            if (!store) {
              toastMessage$1(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
            } else if (!store._isOptionsAPI) {
              toastMessage$1(`Cannot reset "${nodeId}" store because it's a setup store.`, "warn");
            } else {
              store.$reset();
              toastMessage$1(`Store "${nodeId}" reset.`);
            }
          }
        }
      ]
    });
    api.on.inspectComponent((payload, ctx) => {
      const proxy = payload.componentInstance && payload.componentInstance.proxy;
      if (proxy && proxy._pStores) {
        const piniaStores = payload.componentInstance.proxy._pStores;
        Object.values(piniaStores).forEach((store) => {
          payload.instanceData.state.push({
            type: getStoreType$1(store.$id),
            key: "state",
            editable: true,
            value: store._isOptionsAPI ? {
              _custom: {
                value: toRaw$1(store.$state),
                actions: [
                  {
                    icon: "restore",
                    tooltip: "Reset the state of this store",
                    action: () => store.$reset()
                  }
                ]
              }
            } : (
              // NOTE: workaround to unwrap transferred refs
              Object.keys(store.$state).reduce((state, key) => {
                state[key] = store.$state[key];
                return state;
              }, {})
            )
          });
          if (store._getters && store._getters.length) {
            payload.instanceData.state.push({
              type: getStoreType$1(store.$id),
              key: "getters",
              editable: false,
              value: store._getters.reduce((getters, key) => {
                try {
                  getters[key] = store[key];
                } catch (error) {
                  getters[key] = error;
                }
                return getters;
              }, {})
            });
          }
        });
      }
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID$1) {
        let stores = [pinia];
        stores = stores.concat(Array.from(pinia._s.values()));
        payload.rootNodes = (payload.filter ? stores.filter((store) => "$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL$1.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree$1);
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID$1) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID$1 ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return;
        }
        if (inspectedStore) {
          payload.state = formatStoreForInspectorState$1(inspectedStore);
        }
      }
    });
    api.on.editInspectorState((payload, ctx) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID$1) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID$1 ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return toastMessage$1(`store "${payload.nodeId}" not found`, "error");
        }
        const { path } = payload;
        if (!isPinia$1(inspectedStore)) {
          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
            path.unshift("$state");
          }
        } else {
          path.unshift("state");
        }
        isTimelineActive$1 = false;
        payload.set(inspectedStore, path, payload.state.value);
        isTimelineActive$1 = true;
      }
    });
    api.on.editComponentState((payload) => {
      if (payload.type.startsWith("🍍")) {
        const storeId = payload.type.replace(/^🍍\s*/, "");
        const store = pinia._s.get(storeId);
        if (!store) {
          return toastMessage$1(`store "${storeId}" not found`, "error");
        }
        const { path } = payload;
        if (path[0] !== "state") {
          return toastMessage$1(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
        }
        path[0] = "$state";
        isTimelineActive$1 = false;
        payload.set(store, path, payload.state.value);
        isTimelineActive$1 = true;
      }
    });
  });
}
function addStoreToDevtools$1(app, store) {
  if (!componentStateTypes$1.includes(getStoreType$1(store.$id))) {
    componentStateTypes$1.push(getStoreType$1(store.$id));
  }
  setupDevtoolsPlugin$2({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes: componentStateTypes$1,
    app,
    settings: {
      logStoreChanges: {
        label: "Notify about new/deleted stores",
        type: "boolean",
        defaultValue: true
      }
      // useEmojis: {
      //   label: 'Use emojis in messages ⚡️',
      //   type: 'boolean',
      //   defaultValue: true,
      // },
    }
  }, (api) => {
    const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
    store.$onAction(({ after, onError, name, args }) => {
      const groupId = runningActionId$1++;
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID$1,
        event: {
          time: now2(),
          title: "🛫 " + name,
          subtitle: "start",
          data: {
            store: formatDisplay$3(store.$id),
            action: formatDisplay$3(name),
            args
          },
          groupId
        }
      });
      after((result) => {
        activeAction$1 = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID$1,
          event: {
            time: now2(),
            title: "🛬 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay$3(store.$id),
              action: formatDisplay$3(name),
              args,
              result
            },
            groupId
          }
        });
      });
      onError((error) => {
        activeAction$1 = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID$1,
          event: {
            time: now2(),
            logType: "error",
            title: "💥 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay$3(store.$id),
              action: formatDisplay$3(name),
              args,
              error
            },
            groupId
          }
        });
      });
    }, true);
    store._customProperties.forEach((name) => {
      watch$1(() => unref$1(store[name]), (newValue, oldValue) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID$1);
        if (isTimelineActive$1) {
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID$1,
            event: {
              time: now2(),
              title: "Change",
              subtitle: name,
              data: {
                newValue,
                oldValue
              },
              groupId: activeAction$1
            }
          });
        }
      }, { deep: true });
    });
    store.$subscribe(({ events, type }, state) => {
      api.notifyComponentUpdate();
      api.sendInspectorState(INSPECTOR_ID$1);
      if (!isTimelineActive$1)
        return;
      const eventData = {
        time: now2(),
        title: formatMutationType$1(type),
        data: assign$1$1({ store: formatDisplay$3(store.$id) }, formatEventData$1(events)),
        groupId: activeAction$1
      };
      activeAction$1 = void 0;
      if (type === MutationType$1.patchFunction) {
        eventData.subtitle = "⤵️";
      } else if (type === MutationType$1.patchObject) {
        eventData.subtitle = "🧩";
      } else if (events && !Array.isArray(events)) {
        eventData.subtitle = events.type;
      }
      if (events) {
        eventData.data["rawEvent(s)"] = {
          _custom: {
            display: "DebuggerEvent",
            type: "object",
            tooltip: "raw DebuggerEvent[]",
            value: events
          }
        };
      }
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID$1,
        event: eventData
      });
    }, { detached: true, flush: "sync" });
    const hotUpdate = store._hotUpdate;
    store._hotUpdate = markRaw$1((newStore) => {
      hotUpdate(newStore);
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID$1,
        event: {
          time: now2(),
          title: "🔥 " + store.$id,
          subtitle: "HMR update",
          data: {
            store: formatDisplay$3(store.$id),
            info: formatDisplay$3(`HMR update`)
          }
        }
      });
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID$1);
      api.sendInspectorState(INSPECTOR_ID$1);
    });
    const { $dispose } = store;
    store.$dispose = () => {
      $dispose();
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID$1);
      api.sendInspectorState(INSPECTOR_ID$1);
      api.getSettings().logStoreChanges && toastMessage$1(`Disposed "${store.$id}" store 🗑`);
    };
    api.notifyComponentUpdate();
    api.sendInspectorTree(INSPECTOR_ID$1);
    api.sendInspectorState(INSPECTOR_ID$1);
    api.getSettings().logStoreChanges && toastMessage$1(`"${store.$id}" store installed 🆕`);
  });
}
let runningActionId$1 = 0;
let activeAction$1;
function patchActionForGrouping$1(store, actionNames) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw$1(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const _actionId = runningActionId$1;
      const trackedStore = new Proxy(store, {
        get(...args) {
          activeAction$1 = _actionId;
          return Reflect.get(...args);
        },
        set(...args) {
          activeAction$1 = _actionId;
          return Reflect.set(...args);
        }
      });
      return actions[actionName].apply(trackedStore, arguments);
    };
  }
}
function devtoolsPlugin$1({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  if (options.state) {
    store._isOptionsAPI = true;
  }
  if (typeof options.state === "function") {
    patchActionForGrouping$1(
      // @ts-expect-error: can cast the store...
      store,
      Object.keys(options.actions)
    );
    const originalHotUpdate = store._hotUpdate;
    toRaw$1(store)._hotUpdate = function(newStore) {
      originalHotUpdate.apply(this, arguments);
      patchActionForGrouping$1(store, Object.keys(newStore._hmrPayload.actions));
    };
  }
  addStoreToDevtools$1(
    app,
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store
  );
}
function createPinia$1() {
  const scope = effectScope$1(true);
  const state = scope.run(() => ref$1({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia = markRaw$1({
    install(app) {
      setActivePinia(pinia);
      {
        pinia._a = app;
        app.provide(piniaSymbol$1, pinia);
        app.config.globalProperties.$pinia = pinia;
        if (USE_DEVTOOLS$1) {
          registerPiniaDevtools$1(app, pinia);
        }
        toBeInstalled.forEach((plugin2) => _p2.push(plugin2));
        toBeInstalled = [];
      }
    },
    use(plugin2) {
      if (!this._a && !isVue2$1) {
        toBeInstalled.push(plugin2);
      } else {
        _p2.push(plugin2);
      }
      return this;
    },
    _p: _p2,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS$1 && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin$1);
  }
  return pinia;
}
function patchObject(newState, oldState) {
  for (const key in oldState) {
    const subPatch = oldState[key];
    if (!(key in newState)) {
      continue;
    }
    const targetValue = newState[key];
    if (isPlainObject$5(targetValue) && isPlainObject$5(subPatch) && !isRef$1(subPatch) && !isReactive$1(subPatch)) {
      newState[key] = patchObject(targetValue, subPatch);
    } else {
      {
        newState[key] = subPatch;
      }
    }
  }
  return newState;
}
const noop$6 = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop$6) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope$1()) {
    onScopeDispose$1(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  }
  if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject$5(targetValue) && isPlainObject$5(subPatch) && target.hasOwnProperty(key) && !isRef$1(subPatch) && !isReactive$1(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = Symbol("pinia:skipHydration");
function shouldHydrate(obj) {
  return !isPlainObject$5(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign: assign$5 } = Object;
function isComputed(o2) {
  return !!(isRef$1(o2) && o2.effect);
}
function createOptionsStore(id2, options, pinia, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia.state.value[id2];
  let store;
  function setup() {
    if (!initialState && !hot) {
      {
        pinia.state.value[id2] = state ? state() : {};
      }
    }
    const localState = hot ? (
      // use ref() to unwrap refs inside state TODO: check if this is still necessary
      toRefs$1(ref$1(state ? state() : {}).value)
    ) : toRefs$1(pinia.state.value[id2]);
    return assign$5(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      if (name in localState) {
        console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name}" in store "${id2}".`);
      }
      computedGetters[name] = markRaw$1(computed$2(() => {
        setActivePinia(pinia);
        const store2 = pinia._s.get(id2);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id2, setup, options, pinia, hot, true);
  store.$reset = function $reset() {
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign$5($state, newState);
    });
  };
  return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign$5({ actions: {} }, options);
  if (!pinia._e.active) {
    throw new Error("Pinia destroyed");
  }
  const $subscribeOptions = {
    deep: true
    // flush: 'post',
  };
  {
    $subscribeOptions.onTrigger = (event) => {
      if (isListening) {
        debuggerEvents = event;
      } else if (isListening == false && !store._hotUpdating) {
        if (Array.isArray(debuggerEvents)) {
          debuggerEvents.push(event);
        } else {
          console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.");
        }
      }
    };
  }
  let isListening;
  let isSyncListening;
  let subscriptions = markRaw$1([]);
  let actionSubscriptions = markRaw$1([]);
  let debuggerEvents;
  const initialState = pinia.state.value[$id];
  if (!isOptionsStore && !initialState && !hot) {
    {
      pinia.state.value[$id] = {};
    }
  }
  const hotState = ref$1({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    {
      debuggerEvents = [];
    }
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia.state.value[$id]);
      subscriptionMutation = {
        type: MutationType$1.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType$1.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick$1().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
  }
  const $reset = () => {
    throw new Error(`🍍: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
  };
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia._s.delete($id);
  }
  function wrapAction(name, action) {
    return function() {
      setActivePinia(pinia);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name,
        store,
        after,
        onError
      });
      let ret;
      try {
        ret = action.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
  }
  const _hmrPayload = /* @__PURE__ */ markRaw$1({
    actions: {},
    getters: {},
    state: [],
    hotState
  });
  const partialStore = {
    _p: pinia,
    // _s: scope,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch$1(() => pinia.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType$1.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign$5({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive$1(
    assign$5(
      {
        _hmrPayload,
        _customProperties: markRaw$1(/* @__PURE__ */ new Set())
        // devtools custom properties
      },
      partialStore
      // must be added later
      // setupStore
    )
  );
  pinia._s.set($id, store);
  const setupStore = pinia._e.run(() => {
    scope = effectScope$1();
    return scope.run(() => setup());
  });
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef$1(prop) && !isComputed(prop) || isReactive$1(prop)) {
      if (hot) {
        set$3(hotState.value, key, toRef$1(setupStore, key));
      } else if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef$1(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        {
          pinia.state.value[$id][key] = prop;
        }
      }
      {
        _hmrPayload.state.push(key);
      }
    } else if (typeof prop === "function") {
      const actionValue = hot ? prop : wrapAction(key, prop);
      {
        setupStore[key] = actionValue;
      }
      {
        _hmrPayload.actions[key] = prop;
      }
      optionsForPlugin.actions[key] = prop;
    } else {
      if (isComputed(prop)) {
        _hmrPayload.getters[key] = isOptionsStore ? (
          // @ts-expect-error
          options.getters[key]
        ) : prop;
        if (IS_CLIENT$1) {
          const getters = setupStore._getters || // @ts-expect-error: same
          (setupStore._getters = markRaw$1([]));
          getters.push(key);
        }
      }
    }
  }
  {
    assign$5(store, setupStore);
    assign$5(toRaw$1(store), setupStore);
  }
  Object.defineProperty(store, "$state", {
    get: () => hot ? hotState.value : pinia.state.value[$id],
    set: (state) => {
      if (hot) {
        throw new Error("cannot set hotState");
      }
      $patch(($state) => {
        assign$5($state, state);
      });
    }
  });
  {
    store._hotUpdate = markRaw$1((newStore) => {
      store._hotUpdating = true;
      newStore._hmrPayload.state.forEach((stateKey) => {
        if (stateKey in store.$state) {
          const newStateTarget = newStore.$state[stateKey];
          const oldStateSource = store.$state[stateKey];
          if (typeof newStateTarget === "object" && isPlainObject$5(newStateTarget) && isPlainObject$5(oldStateSource)) {
            patchObject(newStateTarget, oldStateSource);
          } else {
            newStore.$state[stateKey] = oldStateSource;
          }
        }
        set$3(store, stateKey, toRef$1(newStore.$state, stateKey));
      });
      Object.keys(store.$state).forEach((stateKey) => {
        if (!(stateKey in newStore.$state)) {
          del(store, stateKey);
        }
      });
      isListening = false;
      isSyncListening = false;
      pinia.state.value[$id] = toRef$1(newStore._hmrPayload, "hotState");
      isSyncListening = true;
      nextTick$1().then(() => {
        isListening = true;
      });
      for (const actionName in newStore._hmrPayload.actions) {
        const action = newStore[actionName];
        set$3(store, actionName, wrapAction(actionName, action));
      }
      for (const getterName in newStore._hmrPayload.getters) {
        const getter = newStore._hmrPayload.getters[getterName];
        const getterValue = isOptionsStore ? (
          // special handling of options api
          computed$2(() => {
            setActivePinia(pinia);
            return getter.call(store, store);
          })
        ) : getter;
        set$3(store, getterName, getterValue);
      }
      Object.keys(store._hmrPayload.getters).forEach((key) => {
        if (!(key in newStore._hmrPayload.getters)) {
          del(store, key);
        }
      });
      Object.keys(store._hmrPayload.actions).forEach((key) => {
        if (!(key in newStore._hmrPayload.actions)) {
          del(store, key);
        }
      });
      store._hmrPayload = newStore._hmrPayload;
      store._getters = newStore._getters;
      store._hotUpdating = false;
    });
  }
  if (USE_DEVTOOLS$1) {
    const nonEnumerable = {
      writable: true,
      configurable: true,
      // avoid warning on devtools trying to display this property
      enumerable: false
    };
    ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((p2) => {
      Object.defineProperty(store, p2, assign$5({ value: store[p2] }, nonEnumerable));
    });
  }
  pinia._p.forEach((extender) => {
    if (USE_DEVTOOLS$1) {
      const extensions = scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      }));
      Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));
      assign$5(store, extensions);
    } else {
      assign$5(store, scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      })));
    }
  });
  if (store.$state && typeof store.$state === "object" && typeof store.$state.constructor === "function" && !store.$state.constructor.toString().includes("[native code]")) {
    console.warn(`[🍍]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${store.$id}".`);
  }
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
function defineStore(idOrOptions, setup, setupOptions) {
  let id2;
  let options;
  const isSetupStore = typeof setup === "function";
  if (typeof idOrOptions === "string") {
    id2 = idOrOptions;
    options = isSetupStore ? setupOptions : setup;
  } else {
    options = idOrOptions;
    id2 = idOrOptions.id;
  }
  function useStore(pinia, hot) {
    const currentInstance2 = getCurrentInstance$1();
    pinia = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    pinia || currentInstance2 && inject$1(piniaSymbol$1, null);
    if (pinia)
      setActivePinia(pinia);
    if (!activePinia) {
      throw new Error(`[🍍]: getActivePinia was called with no active Pinia. Did you forget to install pinia?
	const pinia = createPinia()
	app.use(pinia)
This will fail in production.`);
    }
    pinia = activePinia;
    if (!pinia._s.has(id2)) {
      if (isSetupStore) {
        createSetupStore(id2, setup, options, pinia);
      } else {
        createOptionsStore(id2, options, pinia);
      }
      {
        useStore._pinia = pinia;
      }
    }
    const store = pinia._s.get(id2);
    if (hot) {
      const hotId = "__hot:" + id2;
      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign$5({}, options), pinia, true);
      hot._hotUpdate(newStore);
      delete pinia.state.value[hotId];
      pinia._s.delete(hotId);
    }
    if (IS_CLIENT$1 && currentInstance2 && currentInstance2.proxy && // avoid adding stores that are just built for hot module replacement
    !hot) {
      const vm = currentInstance2.proxy;
      const cache2 = "_pStores" in vm ? vm._pStores : vm._pStores = {};
      cache2[id2] = store;
    }
    return store;
  }
  useStore.$id = id2;
  return useStore;
}
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
function getAlignment$1(placement) {
  return placement.split("-")[1];
}
function getMainAxisFromPlacement$1(placement) {
  return ["top", "bottom"].includes(getBasePlacement(placement)) ? "x" : "y";
}
function getLengthFromAxis$1(axis) {
  return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement$1(_ref) {
  let {
    reference,
    floating,
    placement
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  let coords;
  switch (getBasePlacement(placement)) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  const mainAxis = getMainAxisFromPlacement$1(placement);
  const length = getLengthFromAxis$1(mainAxis);
  switch (getAlignment$1(placement)) {
    case "start":
      coords[mainAxis] = coords[mainAxis] - (reference[length] / 2 - floating[length] / 2);
      break;
    case "end":
      coords[mainAxis] = coords[mainAxis] + (reference[length] / 2 - floating[length] / 2);
      break;
  }
  return coords;
}
const computePosition$1$1 = async (reference, floating, config2) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config2;
  {
    if (platform2 == null) {
      console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
    }
    if (middleware.filter((_ref) => {
      let {
        name
      } = _ref;
      return name === "autoPlacement" || name === "flip";
    }).length > 1) {
      throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement`", "middleware detected. This will lead to an infinite loop. Ensure only", "one of either has been passed to the `middleware` array."].join(" "));
    }
  }
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y2
  } = computeCoordsFromPlacement$1({
    ...rects,
    placement
  });
  let statefulPlacement = placement;
  let middlewareData = {};
  let _debug_loop_count_ = 0;
  for (let i2 = 0; i2 < middleware.length; i2++) {
    {
      _debug_loop_count_++;
      if (_debug_loop_count_ > 100) {
        throw new Error(["Floating UI: The middleware lifecycle appears to be", "running in an infinite loop. This is usually caused by a `reset`", "continually being returned without a break condition."].join(" "));
      }
    }
    const {
      name,
      fn: fn2
    } = middleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn2({
      x: x2,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y2 = nextY != null ? nextY : y2;
    middlewareData = {
      ...middlewareData,
      [name]: data != null ? data : {}
    };
    if (reset) {
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y: y2
        } = computeCoordsFromPlacement$1({
          ...rects,
          placement: statefulPlacement
        }));
      }
      i2 = -1;
      continue;
    }
  }
  return {
    x: x2,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function expandPaddingObject$1(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getSideObjectFromPadding$1(padding) {
  return typeof padding !== "number" ? expandPaddingObject$1(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect$1(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow$1(middlewareArguments, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y: y2,
    platform: platform2,
    rects,
    elements,
    strategy
  } = middlewareArguments;
  const {
    boundary = "clippingParents",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = options;
  const paddingObject = getSideObjectFromPadding$1(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = await platform2.getClippingClientRect({
    element: await platform2.isElement(element) ? element : element.contextElement || await platform2.getDocumentElement({
      element: elements.floating
    }),
    boundary,
    rootBoundary
  });
  const elementClientRect = rectToClientRect$1(await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: elementContext === "floating" ? {
      ...rects.floating,
      x: x2,
      y: y2
    } : rects.reference,
    offsetParent: await platform2.getOffsetParent({
      element: elements.floating
    }),
    strategy
  }));
  return {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
}
const min$1$1 = Math.min;
const max$1$1 = Math.max;
function within$1(min$1$1$1, value, max$1$1$1) {
  return max$1$1(min$1$1$1, min$1$1(value, max$1$1$1));
}
const arrow$2 = (options) => ({
  name: "arrow",
  options,
  async fn(middlewareArguments) {
    const {
      element,
      padding = 0
    } = options != null ? options : {};
    const {
      x: x2,
      y: y2,
      placement,
      rects,
      platform: platform2
    } = middlewareArguments;
    if (element == null) {
      {
        console.warn("Floating UI: No `element` was passed to the `arrow` middleware.");
      }
      return {};
    }
    const paddingObject = getSideObjectFromPadding$1(padding);
    const coords = {
      x: x2,
      y: y2
    };
    const basePlacement = getBasePlacement(placement);
    const axis = getMainAxisFromPlacement$1(basePlacement);
    const length = getLengthFromAxis$1(axis);
    const arrowDimensions = await platform2.getDimensions({
      element
    });
    const minProp = axis === "y" ? "top" : "left";
    const maxProp = axis === "y" ? "bottom" : "right";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await platform2.getOffsetParent({
      element
    });
    const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min2 = paddingObject[minProp];
    const max2 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = within$1(min2, center, max2);
    return {
      data: {
        [axis]: offset2,
        centerOffset: center - offset2
      }
    };
  }
});
const hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement$1(placement) {
  return placement.replace(/left|right|bottom|top/g, (matched) => hash$1[matched]);
}
function getAlignmentSides$1(placement, rects) {
  const isStart = getAlignment$1(placement) === "start";
  const mainAxis = getMainAxisFromPlacement$1(placement);
  const length = getLengthFromAxis$1(mainAxis);
  let mainAlignmentSide = mainAxis === "x" ? isStart ? "right" : "left" : isStart ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement$1(mainAlignmentSide);
  }
  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement$1(mainAlignmentSide)
  };
}
const hash = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement$1(placement) {
  return placement.replace(/start|end/g, (matched) => hash[matched]);
}
const basePlacements = ["top", "right", "bottom", "left"];
const allPlacements$1 = /* @__PURE__ */ basePlacements.reduce((acc, basePlacement) => acc.concat(basePlacement, basePlacement + "-start", basePlacement + "-end"), []);
function getPlacementList$1(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment$1(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment$1(placement) !== alignment)] : allowedPlacements.filter((placement) => getBasePlacement(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment$1(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement$1(placement) !== placement : false);
    }
    return true;
  });
}
const autoPlacement$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "autoPlacement",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _middlewareData$autoP5, _placementsSortedByLe;
      const {
        x: x2,
        y: y2,
        rects,
        middlewareData,
        placement
      } = middlewareArguments;
      const {
        alignment = null,
        allowedPlacements = allPlacements$1,
        autoAlignment = true,
        ...detectOverflowOptions
      } = options;
      if ((_middlewareData$autoP = middlewareData.autoPlacement) != null && _middlewareData$autoP.skip) {
        return {};
      }
      const placements2 = getPlacementList$1(alignment, autoAlignment, allowedPlacements);
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const currentIndex = (_middlewareData$autoP2 = (_middlewareData$autoP3 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP3.index) != null ? _middlewareData$autoP2 : 0;
      const currentPlacement = placements2[currentIndex];
      const {
        main: main2,
        cross
      } = getAlignmentSides$1(currentPlacement, rects);
      if (placement !== currentPlacement) {
        return {
          x: x2,
          y: y2,
          reset: {
            placement: placements2[0]
          }
        };
      }
      const currentOverflows = [overflow[getBasePlacement(currentPlacement)], overflow[main2], overflow[cross]];
      const allOverflows = [...(_middlewareData$autoP4 = (_middlewareData$autoP5 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP5.overflows) != null ? _middlewareData$autoP4 : [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements2[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a2, b3) => a2.overflows[0] - b3.overflows[0]);
      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find((_ref) => {
        let {
          overflows
        } = _ref;
        return overflows.every((overflow2) => overflow2 <= 0);
      })) == null ? void 0 : _placementsSortedByLe.placement;
      return {
        data: {
          skip: true
        },
        reset: {
          placement: placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement
        }
      };
    }
  };
};
function getExpandedPlacements$1(placement) {
  const oppositePlacement = getOppositePlacement$1(placement);
  return [getOppositeAlignmentPlacement$1(placement), oppositePlacement, getOppositeAlignmentPlacement$1(oppositePlacement)];
}
const flip$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$flip, _middlewareData$flip2;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement
      } = middlewareArguments;
      if ((_middlewareData$flip = middlewareData.flip) != null && _middlewareData$flip.skip) {
        return {};
      }
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        flipAlignment = true,
        ...detectOverflowOptions
      } = options;
      const basePlacement = getBasePlacement(placement);
      const isBasePlacement = basePlacement === initialPlacement;
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement$1(initialPlacement)] : getExpandedPlacements$1(initialPlacement));
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[basePlacement]);
      }
      if (checkCrossAxis) {
        const {
          main: main2,
          cross
        } = getAlignmentSides$1(placement, rects);
        overflows.push(overflow[main2], overflow[cross]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side) => side <= 0)) {
        var _middlewareData$flip$, _middlewareData$flip3;
        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip3 = middlewareData.flip) == null ? void 0 : _middlewareData$flip3.index) != null ? _middlewareData$flip$ : 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = "bottom";
        switch (fallbackStrategy) {
          case "bestFit": {
            var _overflowsData$slice$;
            const placement2 = (_overflowsData$slice$ = overflowsData.slice().sort((a2, b3) => a2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0) - b3.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;
            if (placement2) {
              resetPlacement = placement2;
            }
            break;
          }
          case "initialPlacement":
            resetPlacement = initialPlacement;
            break;
        }
        return {
          data: {
            skip: true
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
function convertValueToCoords$1(_ref) {
  let {
    placement,
    rects,
    value
  } = _ref;
  const basePlacement = getBasePlacement(placement);
  const multiplier = ["left", "top"].includes(basePlacement) ? -1 : 1;
  const rawValue = typeof value === "function" ? value({
    ...rects,
    placement
  }) : value;
  const {
    mainAxis,
    crossAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0
  } : {
    mainAxis: 0,
    crossAxis: 0,
    ...rawValue
  };
  return getMainAxisFromPlacement$1(basePlacement) === "x" ? {
    x: crossAxis,
    y: mainAxis * multiplier
  } : {
    x: mainAxis * multiplier,
    y: crossAxis
  };
}
const offset$1 = function(value) {
  if (value === void 0) {
    value = 0;
  }
  return {
    name: "offset",
    options: value,
    fn(middlewareArguments) {
      const {
        x: x2,
        y: y2,
        placement,
        rects
      } = middlewareArguments;
      const diffCoords = convertValueToCoords$1({
        placement,
        rects,
        value
      });
      return {
        x: x2 + diffCoords.x,
        y: y2 + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis$1(axis) {
  return axis === "x" ? "y" : "x";
}
const shift$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(middlewareArguments) {
      const {
        x: x2,
        y: y2,
        placement
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y3
            } = _ref;
            return {
              x: x3,
              y: y3
            };
          }
        },
        ...detectOverflowOptions
      } = options;
      const coords = {
        x: x2,
        y: y2
      };
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement$1(getBasePlacement(placement));
      const crossAxis = getCrossAxis$1(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within$1(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within$1(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...middlewareArguments,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y2
        }
      };
    }
  };
};
const size$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$size;
      const {
        placement,
        rects,
        middlewareData
      } = middlewareArguments;
      const {
        apply: apply2,
        ...detectOverflowOptions
      } = options;
      if ((_middlewareData$size = middlewareData.size) != null && _middlewareData$size.skip) {
        return {};
      }
      const overflow = await detectOverflow$1(middlewareArguments, detectOverflowOptions);
      const basePlacement = getBasePlacement(placement);
      const isEnd = getAlignment$1(placement) === "end";
      let heightSide;
      let widthSide;
      if (basePlacement === "top" || basePlacement === "bottom") {
        heightSide = basePlacement;
        widthSide = isEnd ? "left" : "right";
      } else {
        widthSide = basePlacement;
        heightSide = isEnd ? "top" : "bottom";
      }
      const xMin = max$1$1(overflow.left, 0);
      const xMax = max$1$1(overflow.right, 0);
      const yMin = max$1$1(overflow.top, 0);
      const yMax = max$1$1(overflow.bottom, 0);
      const dimensions = {
        height: rects.floating.height - (["left", "right"].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$1$1(overflow.top, overflow.bottom)) : overflow[heightSide]),
        width: rects.floating.width - (["top", "bottom"].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$1$1(overflow.left, overflow.right)) : overflow[widthSide])
      };
      apply2 == null ? void 0 : apply2({
        ...dimensions,
        ...rects
      });
      return {
        data: {
          skip: true
        },
        reset: {
          rects: true
        }
      };
    }
  };
};
function isWindow(value) {
  return (value == null ? void 0 : value.toString()) === "[object Window]";
}
function getWindow$1(node) {
  if (node == null) {
    return window;
  }
  if (!isWindow(node)) {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function getComputedStyle$1$1(element) {
  return getWindow$1(element).getComputedStyle(element);
}
function getNodeName$1(node) {
  return isWindow(node) ? "" : node ? (node.nodeName || "").toLowerCase() : "";
}
function isHTMLElement$1(value) {
  return value instanceof getWindow$1(value).HTMLElement;
}
function isElement$1(value) {
  return value instanceof getWindow$1(value).Element;
}
function isNode$1(value) {
  return value instanceof getWindow$1(value).Node;
}
function isShadowRoot$1(node) {
  const OwnElement = getWindow$1(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isScrollParent(element) {
  const {
    overflow,
    overflowX,
    overflowY
  } = getComputedStyle$1$1(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isTableElement$1(element) {
  return ["table", "td", "th"].includes(getNodeName$1(element));
}
function isContainingBlock$1(element) {
  const isFirefox = navigator.userAgent.toLowerCase().includes("firefox");
  const css = getComputedStyle$1$1(element);
  return css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].includes(css.willChange) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false);
}
const min$2 = Math.min;
const max$2 = Math.max;
const round$1 = Math.round;
function getBoundingClientRect$1(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  const clientRect = element.getBoundingClientRect();
  let scaleX = 1;
  let scaleY = 1;
  if (includeScale && isHTMLElement$1(element)) {
    scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  return {
    width: clientRect.width / scaleX,
    height: clientRect.height / scaleY,
    top: clientRect.top / scaleY,
    right: clientRect.right / scaleX,
    bottom: clientRect.bottom / scaleY,
    left: clientRect.left / scaleX,
    x: clientRect.left / scaleX,
    y: clientRect.top / scaleY
  };
}
function getDocumentElement$1(node) {
  return ((isNode$1(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll$1(element) {
  if (isWindow(element)) {
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getWindowScrollBarX$1(element) {
  return getBoundingClientRect$1(getDocumentElement$1(element)).left + getNodeScroll$1(element).scrollLeft;
}
function isScaled(element) {
  const rect = getBoundingClientRect$1(element);
  return round$1(rect.width) !== element.offsetWidth || round$1(rect.height) !== element.offsetHeight;
}
function getRectRelativeToOffsetParent$1(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
  const documentElement = getDocumentElement$1(offsetParent);
  const rect = getBoundingClientRect$1(element, isOffsetParentAnElement && isScaled(offsetParent));
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName$1(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll$1(offsetParent);
    }
    if (isHTMLElement$1(offsetParent)) {
      const offsetRect = getBoundingClientRect$1(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX$1(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getParentNode$1(node) {
  if (getNodeName$1(node) === "html") {
    return node;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // @ts-ignore
    node.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    node.parentNode || // DOM Element detected
    (isShadowRoot$1(node) ? node.host : null) || // ShadowRoot detected
    getDocumentElement$1(node)
  );
}
function getTrueOffsetParent$1(element) {
  if (!isHTMLElement$1(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock$1(element) {
  let currentNode = getParentNode$1(element);
  while (isHTMLElement$1(currentNode) && !["html", "body"].includes(getNodeName$1(currentNode))) {
    if (isContainingBlock$1(currentNode)) {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent$1(element) {
  const window2 = getWindow$1(element);
  let offsetParent = getTrueOffsetParent$1(element);
  while (offsetParent && isTableElement$1(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent$1(offsetParent);
  }
  if (offsetParent && (getNodeName$1(offsetParent) === "html" || getNodeName$1(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock$1(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock$1(element) || window2;
}
function getDimensions$1(element) {
  return {
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect$1(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
  const documentElement = getDocumentElement$1(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName$1(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll$1(offsetParent);
    }
    if (isHTMLElement$1(offsetParent)) {
      const offsetRect = getBoundingClientRect$1(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    ...rect,
    x: rect.x - scroll.scrollLeft + offsets.x,
    y: rect.y - scroll.scrollTop + offsets.y
  };
}
function getViewportRect$1(element) {
  const win = getWindow$1(element);
  const html = getDocumentElement$1(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) < 0.01) {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getDocumentRect$1(element) {
  var _element$ownerDocumen;
  const html = getDocumentElement$1(element);
  const scroll = getNodeScroll$1(element);
  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  const width = max$2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = max$2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX$1(element);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle$1$1(body || html).direction === "rtl") {
    x2 += max$2(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getScrollParent(node) {
  if (["html", "body", "#document"].includes(getNodeName$1(node))) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement$1(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode$1(node));
}
function getScrollParents(node, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  const scrollParent = getScrollParent(node);
  const isBody = scrollParent === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow$1(scrollParent);
  const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  const updatedList = list.concat(target);
  return isBody ? updatedList : (
    // @ts-ignore: isBody tells us target will be an HTMLElement here
    updatedList.concat(getScrollParents(getParentNode$1(target)))
  );
}
function contains(parent, child) {
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot$1(rootNode)) {
    let next = child;
    do {
      if (next && parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getInnerBoundingClientRect$1(element) {
  const clientRect = getBoundingClientRect$1(element);
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  return {
    top,
    left,
    x: left,
    y: top,
    right: left + element.clientWidth,
    bottom: top + element.clientHeight,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getClientRectFromClippingParent(element, clippingParent) {
  if (clippingParent === "viewport") {
    return rectToClientRect$1(getViewportRect$1(element));
  }
  if (isElement$1(clippingParent)) {
    return getInnerBoundingClientRect$1(clippingParent);
  }
  return rectToClientRect$1(getDocumentRect$1(getDocumentElement$1(element)));
}
function getClippingParents(element) {
  const clippingParents = getScrollParents(getParentNode$1(element));
  const canEscapeClipping = ["absolute", "fixed"].includes(getComputedStyle$1$1(element).position);
  const clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent$1(element) : element;
  if (!isElement$1(clipperElement)) {
    return [];
  }
  return clippingParents.filter((clippingParent) => isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName$1(clippingParent) !== "body");
}
function getClippingClientRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary
  } = _ref;
  const mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  const clippingParents = [...mainClippingParents, rootBoundary];
  const firstClippingParent = clippingParents[0];
  const clippingRect = clippingParents.reduce((accRect, clippingParent) => {
    const rect = getClientRectFromClippingParent(element, clippingParent);
    accRect.top = max$2(rect.top, accRect.top);
    accRect.right = min$2(rect.right, accRect.right);
    accRect.bottom = min$2(rect.bottom, accRect.bottom);
    accRect.left = max$2(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingParent(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
const platform$2 = {
  getElementRects: (_ref) => {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    return {
      reference: getRectRelativeToOffsetParent$1(reference, getOffsetParent$1(floating), strategy),
      floating: {
        ...getDimensions$1(floating),
        x: 0,
        y: 0
      }
    };
  },
  convertOffsetParentRelativeRectToViewportRelativeRect: (args) => convertOffsetParentRelativeRectToViewportRelativeRect$1(args),
  getOffsetParent: (_ref2) => {
    let {
      element
    } = _ref2;
    return getOffsetParent$1(element);
  },
  isElement: (value) => isElement$1(value),
  getDocumentElement: (_ref3) => {
    let {
      element
    } = _ref3;
    return getDocumentElement$1(element);
  },
  getClippingClientRect: (args) => getClippingClientRect(args),
  getDimensions: (_ref4) => {
    let {
      element
    } = _ref4;
    return getDimensions$1(element);
  },
  getClientRects: (_ref5) => {
    let {
      element
    } = _ref5;
    return element.getClientRects();
  }
};
const computePosition$2 = (reference, floating, options) => computePosition$1$1(reference, floating, {
  platform: platform$2,
  ...options
});
var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp$1.call(b3, prop))
      __defNormalProp$1(a2, prop, b3[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b3)) {
      if (__propIsEnum$1.call(b3, prop))
        __defNormalProp$1(a2, prop, b3[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b3) => __defProps(a2, __getOwnPropDescs(b3));
function assign$4(to2, from) {
  for (const key in from) {
    if (Object.prototype.hasOwnProperty.call(from, key)) {
      if (typeof from[key] === "object" && to2[key]) {
        assign$4(to2[key], from[key]);
      } else {
        to2[key] = from[key];
      }
    }
  }
}
const config$2 = {
  disabled: false,
  distance: 5,
  skidding: 0,
  container: "body",
  boundary: void 0,
  instantMove: false,
  disposeTimeout: 5e3,
  popperTriggers: [],
  strategy: "absolute",
  preventOverflow: true,
  flip: true,
  shift: true,
  overflowPadding: 0,
  arrowPadding: 0,
  arrowOverflow: true,
  themes: {
    tooltip: {
      placement: "top",
      triggers: ["hover", "focus", "touch"],
      hideTriggers: (events) => [...events, "click"],
      delay: {
        show: 200,
        hide: 0
      },
      handleResize: false,
      html: false,
      loadingContent: "..."
    },
    dropdown: {
      placement: "bottom",
      triggers: ["click"],
      delay: 0,
      handleResize: true,
      autoHide: true
    },
    menu: {
      $extend: "dropdown",
      triggers: ["hover", "focus"],
      popperTriggers: ["hover", "focus"],
      delay: {
        show: 0,
        hide: 400
      }
    }
  }
};
function getDefaultConfig(theme, key) {
  let themeConfig = config$2.themes[theme] || {};
  let value;
  do {
    value = themeConfig[key];
    if (typeof value === "undefined") {
      if (themeConfig.$extend) {
        themeConfig = config$2.themes[themeConfig.$extend] || {};
      } else {
        themeConfig = null;
        value = config$2[key];
      }
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return value;
}
function getThemeClasses(theme) {
  const result = [theme];
  let themeConfig = config$2.themes[theme] || {};
  do {
    if (themeConfig.$extend && !themeConfig.$resetCss) {
      result.push(themeConfig.$extend);
      themeConfig = config$2.themes[themeConfig.$extend] || {};
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return result.map((c2) => `v-popper--theme-${c2}`);
}
function getAllParentThemes(theme) {
  const result = [theme];
  let themeConfig = config$2.themes[theme] || {};
  do {
    if (themeConfig.$extend) {
      result.push(themeConfig.$extend);
      themeConfig = config$2.themes[themeConfig.$extend] || {};
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return result;
}
let supportsPassive = false;
if (typeof window !== "undefined") {
  supportsPassive = false;
  try {
    const opts = Object.defineProperty({}, "passive", {
      get() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test", null, opts);
  } catch (e2) {
  }
}
let isIOS = false;
if (typeof window !== "undefined" && typeof navigator !== "undefined") {
  isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}
const placements = ["auto", "top", "bottom", "left", "right"].reduce((acc, base) => acc.concat([
  base,
  `${base}-start`,
  `${base}-end`
]), []);
const SHOW_EVENT_MAP = {
  hover: "mouseenter",
  focus: "focus",
  click: "click",
  touch: "touchstart"
};
const HIDE_EVENT_MAP = {
  hover: "mouseleave",
  focus: "blur",
  click: "click",
  touch: "touchend"
};
function removeFromArray(array, item) {
  const index = array.indexOf(item);
  if (index !== -1) {
    array.splice(index, 1);
  }
}
function nextFrame$1() {
  return new Promise((resolve2) => requestAnimationFrame(() => {
    requestAnimationFrame(resolve2);
  }));
}
const shownPoppers = [];
let hidingPopper = null;
const shownPoppersByTheme = {};
function getShownPoppersByTheme(theme) {
  let list = shownPoppersByTheme[theme];
  if (!list) {
    list = shownPoppersByTheme[theme] = [];
  }
  return list;
}
let Element$1 = function() {
};
if (typeof window !== "undefined") {
  Element$1 = window.Element;
}
function defaultPropFactory(prop) {
  return function(props) {
    return getDefaultConfig(props.theme, prop);
  };
}
const PROVIDE_KEY = "__floating-vue__popper";
var PrivatePopper = () => defineComponent$1({
  name: "VPopper",
  provide() {
    return {
      [PROVIDE_KEY]: {
        parentPopper: this
      }
    };
  },
  inject: {
    [PROVIDE_KEY]: { default: null }
  },
  props: {
    theme: {
      type: String,
      required: true
    },
    targetNodes: {
      type: Function,
      required: true
    },
    referenceNode: {
      type: Function,
      default: null
    },
    popperNode: {
      type: Function,
      required: true
    },
    shown: {
      type: Boolean,
      default: false
    },
    showGroup: {
      type: String,
      default: null
    },
    ariaId: {
      default: null
    },
    disabled: {
      type: Boolean,
      default: defaultPropFactory("disabled")
    },
    positioningDisabled: {
      type: Boolean,
      default: defaultPropFactory("positioningDisabled")
    },
    placement: {
      type: String,
      default: defaultPropFactory("placement"),
      validator: (value) => placements.includes(value)
    },
    delay: {
      type: [String, Number, Object],
      default: defaultPropFactory("delay")
    },
    distance: {
      type: [Number, String],
      default: defaultPropFactory("distance")
    },
    skidding: {
      type: [Number, String],
      default: defaultPropFactory("skidding")
    },
    triggers: {
      type: Array,
      default: defaultPropFactory("triggers")
    },
    showTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("showTriggers")
    },
    hideTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("hideTriggers")
    },
    popperTriggers: {
      type: Array,
      default: defaultPropFactory("popperTriggers")
    },
    popperShowTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("popperShowTriggers")
    },
    popperHideTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("popperHideTriggers")
    },
    container: {
      type: [String, Object, Element$1, Boolean],
      default: defaultPropFactory("container")
    },
    boundary: {
      type: [String, Element$1],
      default: defaultPropFactory("boundary")
    },
    strategy: {
      type: String,
      validator: (value) => ["absolute", "fixed"].includes(value),
      default: defaultPropFactory("strategy")
    },
    autoHide: {
      type: [Boolean, Function],
      default: defaultPropFactory("autoHide")
    },
    handleResize: {
      type: Boolean,
      default: defaultPropFactory("handleResize")
    },
    instantMove: {
      type: Boolean,
      default: defaultPropFactory("instantMove")
    },
    eagerMount: {
      type: Boolean,
      default: defaultPropFactory("eagerMount")
    },
    popperClass: {
      type: [String, Array, Object],
      default: defaultPropFactory("popperClass")
    },
    computeTransformOrigin: {
      type: Boolean,
      default: defaultPropFactory("computeTransformOrigin")
    },
    autoMinSize: {
      type: Boolean,
      default: defaultPropFactory("autoMinSize")
    },
    autoSize: {
      type: [Boolean, String],
      default: defaultPropFactory("autoSize")
    },
    autoMaxSize: {
      type: Boolean,
      default: defaultPropFactory("autoMaxSize")
    },
    autoBoundaryMaxSize: {
      type: Boolean,
      default: defaultPropFactory("autoBoundaryMaxSize")
    },
    preventOverflow: {
      type: Boolean,
      default: defaultPropFactory("preventOverflow")
    },
    overflowPadding: {
      type: [Number, String],
      default: defaultPropFactory("overflowPadding")
    },
    arrowPadding: {
      type: [Number, String],
      default: defaultPropFactory("arrowPadding")
    },
    arrowOverflow: {
      type: Boolean,
      default: defaultPropFactory("arrowOverflow")
    },
    flip: {
      type: Boolean,
      default: defaultPropFactory("flip")
    },
    shift: {
      type: Boolean,
      default: defaultPropFactory("shift")
    },
    shiftCrossAxis: {
      type: Boolean,
      default: defaultPropFactory("shiftCrossAxis")
    },
    noAutoFocus: {
      type: Boolean,
      default: defaultPropFactory("noAutoFocus")
    }
  },
  emits: [
    "show",
    "hide",
    "update:shown",
    "apply-show",
    "apply-hide",
    "close-group",
    "close-directive",
    "auto-hide",
    "resize",
    "dispose"
  ],
  data() {
    return {
      isShown: false,
      isMounted: false,
      skipTransition: false,
      classes: {
        showFrom: false,
        showTo: false,
        hideFrom: false,
        hideTo: true
      },
      result: {
        x: 0,
        y: 0,
        placement: "",
        strategy: this.strategy,
        arrow: {
          x: 0,
          y: 0,
          centerOffset: 0
        },
        transformOrigin: null
      },
      shownChildren: /* @__PURE__ */ new Set(),
      lastAutoHide: true
    };
  },
  computed: {
    popperId() {
      return this.ariaId != null ? this.ariaId : this.randomId;
    },
    shouldMountContent() {
      return this.eagerMount || this.isMounted;
    },
    slotData() {
      return {
        popperId: this.popperId,
        isShown: this.isShown,
        shouldMountContent: this.shouldMountContent,
        skipTransition: this.skipTransition,
        autoHide: typeof this.autoHide === "function" ? this.lastAutoHide : this.autoHide,
        show: this.show,
        hide: this.hide,
        handleResize: this.handleResize,
        onResize: this.onResize,
        classes: __spreadProps(__spreadValues$1({}, this.classes), {
          popperClass: this.popperClass
        }),
        result: this.positioningDisabled ? null : this.result,
        attrs: this.$attrs
      };
    },
    parentPopper() {
      var _a2;
      return (_a2 = this[PROVIDE_KEY]) == null ? void 0 : _a2.parentPopper;
    },
    hasPopperShowTriggerHover() {
      var _a2, _b;
      return ((_a2 = this.popperTriggers) == null ? void 0 : _a2.includes("hover")) || ((_b = this.popperShowTriggers) == null ? void 0 : _b.includes("hover"));
    }
  },
  watch: __spreadValues$1(__spreadValues$1({
    shown: "$_autoShowHide",
    disabled(value) {
      if (value) {
        this.dispose();
      } else {
        this.init();
      }
    },
    async container() {
      if (this.isShown) {
        this.$_ensureTeleport();
        await this.$_computePosition();
      }
    }
  }, [
    "triggers",
    "positioningDisabled"
  ].reduce((acc, prop) => {
    acc[prop] = "$_refreshListeners";
    return acc;
  }, {})), [
    "placement",
    "distance",
    "skidding",
    "boundary",
    "strategy",
    "overflowPadding",
    "arrowPadding",
    "preventOverflow",
    "shift",
    "shiftCrossAxis",
    "flip"
  ].reduce((acc, prop) => {
    acc[prop] = "$_computePosition";
    return acc;
  }, {})),
  created() {
    this.$_isDisposed = true;
    this.randomId = `popper_${[Math.random(), Date.now()].map((n2) => n2.toString(36).substring(2, 10)).join("_")}`;
    if (this.autoMinSize) {
      console.warn('[floating-vue] `autoMinSize` option is deprecated. Use `autoSize="min"` instead.');
    }
    if (this.autoMaxSize) {
      console.warn("[floating-vue] `autoMaxSize` option is deprecated. Use `autoBoundaryMaxSize` instead.");
    }
  },
  mounted() {
    this.init();
    this.$_detachPopperNode();
  },
  activated() {
    this.$_autoShowHide();
  },
  deactivated() {
    this.hide();
  },
  beforeUnmount() {
    this.dispose();
  },
  methods: {
    show({ event = null, skipDelay = false, force = false } = {}) {
      var _a2, _b;
      if (((_a2 = this.parentPopper) == null ? void 0 : _a2.lockedChild) && this.parentPopper.lockedChild !== this)
        return;
      this.$_pendingHide = false;
      if (force || !this.disabled) {
        if (((_b = this.parentPopper) == null ? void 0 : _b.lockedChild) === this) {
          this.parentPopper.lockedChild = null;
        }
        this.$_scheduleShow(event, skipDelay);
        this.$emit("show");
        this.$_showFrameLocked = true;
        requestAnimationFrame(() => {
          this.$_showFrameLocked = false;
        });
      }
      this.$emit("update:shown", true);
    },
    hide({ event = null, skipDelay = false } = {}) {
      var _a2;
      if (this.$_hideInProgress)
        return;
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        return;
      }
      if (this.hasPopperShowTriggerHover && this.$_isAimingPopper()) {
        if (this.parentPopper) {
          this.parentPopper.lockedChild = this;
          clearTimeout(this.parentPopper.lockedChildTimer);
          this.parentPopper.lockedChildTimer = setTimeout(() => {
            if (this.parentPopper.lockedChild === this) {
              this.parentPopper.lockedChild.hide({ skipDelay });
              this.parentPopper.lockedChild = null;
            }
          }, 1e3);
        }
        return;
      }
      if (((_a2 = this.parentPopper) == null ? void 0 : _a2.lockedChild) === this) {
        this.parentPopper.lockedChild = null;
      }
      this.$_pendingHide = false;
      this.$_scheduleHide(event, skipDelay);
      this.$emit("hide");
      this.$emit("update:shown", false);
    },
    init() {
      var _a2, _b;
      if (!this.$_isDisposed)
        return;
      this.$_isDisposed = false;
      this.isMounted = false;
      this.$_events = [];
      this.$_preventShow = false;
      this.$_referenceNode = (_b = (_a2 = this.referenceNode) == null ? void 0 : _a2.call(this)) != null ? _b : this.$el;
      this.$_targetNodes = this.targetNodes().filter((e2) => e2.nodeType === e2.ELEMENT_NODE);
      this.$_popperNode = this.popperNode();
      this.$_innerNode = this.$_popperNode.querySelector(".v-popper__inner");
      this.$_arrowNode = this.$_popperNode.querySelector(".v-popper__arrow-container");
      this.$_swapTargetAttrs("title", "data-original-title");
      this.$_detachPopperNode();
      if (this.triggers.length) {
        this.$_addEventListeners();
      }
      if (this.shown) {
        this.show();
      }
    },
    dispose() {
      if (this.$_isDisposed)
        return;
      this.$_isDisposed = true;
      this.$_removeEventListeners();
      this.hide({ skipDelay: true });
      this.$_detachPopperNode();
      this.isMounted = false;
      this.isShown = false;
      this.$_updateParentShownChildren(false);
      this.$_swapTargetAttrs("data-original-title", "title");
      this.$emit("dispose");
    },
    async onResize() {
      if (this.isShown) {
        await this.$_computePosition();
        this.$emit("resize");
      }
    },
    async $_computePosition() {
      var _a2;
      if (this.$_isDisposed || this.positioningDisabled)
        return;
      const options2 = {
        strategy: this.strategy,
        middleware: []
      };
      if (this.distance || this.skidding) {
        options2.middleware.push(offset$1({
          mainAxis: this.distance,
          crossAxis: this.skidding
        }));
      }
      const isPlacementAuto = this.placement.startsWith("auto");
      if (isPlacementAuto) {
        options2.middleware.push(autoPlacement$1({
          alignment: (_a2 = this.placement.split("-")[1]) != null ? _a2 : ""
        }));
      } else {
        options2.placement = this.placement;
      }
      if (this.preventOverflow) {
        if (this.shift) {
          options2.middleware.push(shift$1({
            padding: this.overflowPadding,
            boundary: this.boundary,
            crossAxis: this.shiftCrossAxis
          }));
        }
        if (!isPlacementAuto && this.flip) {
          options2.middleware.push(flip$1({
            padding: this.overflowPadding,
            boundary: this.boundary
          }));
        }
      }
      options2.middleware.push(arrow$2({
        element: this.$_arrowNode,
        padding: this.arrowPadding
      }));
      if (this.arrowOverflow) {
        options2.middleware.push({
          name: "arrowOverflow",
          fn: ({ placement, rects, middlewareData }) => {
            let overflow;
            const { centerOffset } = middlewareData.arrow;
            if (placement.startsWith("top") || placement.startsWith("bottom")) {
              overflow = Math.abs(centerOffset) > rects.reference.width / 2;
            } else {
              overflow = Math.abs(centerOffset) > rects.reference.height / 2;
            }
            return {
              data: {
                overflow
              }
            };
          }
        });
      }
      if (this.autoMinSize || this.autoSize) {
        const autoSize = this.autoSize ? this.autoSize : this.autoMinSize ? "min" : null;
        options2.middleware.push({
          name: "autoSize",
          fn: ({ rects, placement, middlewareData }) => {
            var _a22;
            if ((_a22 = middlewareData.autoSize) == null ? void 0 : _a22.skip) {
              return {};
            }
            let width;
            let height;
            if (placement.startsWith("top") || placement.startsWith("bottom")) {
              width = rects.reference.width;
            } else {
              height = rects.reference.height;
            }
            this.$_innerNode.style[autoSize === "min" ? "minWidth" : autoSize === "max" ? "maxWidth" : "width"] = width != null ? `${width}px` : null;
            this.$_innerNode.style[autoSize === "min" ? "minHeight" : autoSize === "max" ? "maxHeight" : "height"] = height != null ? `${height}px` : null;
            return {
              data: {
                skip: true
              },
              reset: {
                rects: true
              }
            };
          }
        });
      }
      if (this.autoMaxSize || this.autoBoundaryMaxSize) {
        this.$_innerNode.style.maxWidth = null;
        this.$_innerNode.style.maxHeight = null;
        options2.middleware.push(size$1({
          boundary: this.boundary,
          padding: this.overflowPadding,
          apply: ({ width, height }) => {
            this.$_innerNode.style.maxWidth = width != null ? `${width}px` : null;
            this.$_innerNode.style.maxHeight = height != null ? `${height}px` : null;
          }
        }));
      }
      const data = await computePosition$2(this.$_referenceNode, this.$_popperNode, options2);
      Object.assign(this.result, {
        x: data.x,
        y: data.y,
        placement: data.placement,
        strategy: data.strategy,
        arrow: __spreadValues$1(__spreadValues$1({}, data.middlewareData.arrow), data.middlewareData.arrowOverflow)
      });
    },
    $_scheduleShow(event = null, skipDelay = false) {
      this.$_updateParentShownChildren(true);
      this.$_hideInProgress = false;
      clearTimeout(this.$_scheduleTimer);
      if (hidingPopper && this.instantMove && hidingPopper.instantMove && hidingPopper !== this.parentPopper) {
        hidingPopper.$_applyHide(true);
        this.$_applyShow(true);
        return;
      }
      if (skipDelay) {
        this.$_applyShow();
      } else {
        this.$_scheduleTimer = setTimeout(this.$_applyShow.bind(this), this.$_computeDelay("show"));
      }
    },
    $_scheduleHide(event = null, skipDelay = false) {
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        return;
      }
      this.$_updateParentShownChildren(false);
      this.$_hideInProgress = true;
      clearTimeout(this.$_scheduleTimer);
      if (this.isShown) {
        hidingPopper = this;
      }
      if (skipDelay) {
        this.$_applyHide();
      } else {
        this.$_scheduleTimer = setTimeout(this.$_applyHide.bind(this), this.$_computeDelay("hide"));
      }
    },
    $_computeDelay(type) {
      const delay = this.delay;
      return parseInt(delay && delay[type] || delay || 0);
    },
    async $_applyShow(skipTransition = false) {
      clearTimeout(this.$_disposeTimer);
      clearTimeout(this.$_scheduleTimer);
      this.skipTransition = skipTransition;
      if (this.isShown) {
        return;
      }
      this.$_ensureTeleport();
      await nextFrame$1();
      await this.$_computePosition();
      await this.$_applyShowEffect();
      if (!this.positioningDisabled) {
        this.$_registerEventListeners([
          ...getScrollParents(this.$_referenceNode),
          ...getScrollParents(this.$_popperNode)
        ], "scroll", () => {
          this.$_computePosition();
        });
      }
    },
    async $_applyShowEffect() {
      if (this.$_hideInProgress)
        return;
      if (this.computeTransformOrigin) {
        const bounds = this.$_referenceNode.getBoundingClientRect();
        const popperWrapper = this.$_popperNode.querySelector(".v-popper__wrapper");
        const parentBounds = popperWrapper.parentNode.getBoundingClientRect();
        const x2 = bounds.x + bounds.width / 2 - (parentBounds.left + popperWrapper.offsetLeft);
        const y2 = bounds.y + bounds.height / 2 - (parentBounds.top + popperWrapper.offsetTop);
        this.result.transformOrigin = `${x2}px ${y2}px`;
      }
      this.isShown = true;
      this.$_applyAttrsToTarget({
        "aria-describedby": this.popperId,
        "data-popper-shown": ""
      });
      const showGroup = this.showGroup;
      if (showGroup) {
        let popover;
        for (let i2 = 0; i2 < shownPoppers.length; i2++) {
          popover = shownPoppers[i2];
          if (popover.showGroup !== showGroup) {
            popover.hide();
            popover.$emit("close-group");
          }
        }
      }
      shownPoppers.push(this);
      document.body.classList.add("v-popper--some-open");
      for (const theme of getAllParentThemes(this.theme)) {
        getShownPoppersByTheme(theme).push(this);
        document.body.classList.add(`v-popper--some-open--${theme}`);
      }
      this.$emit("apply-show");
      this.classes.showFrom = true;
      this.classes.showTo = false;
      this.classes.hideFrom = false;
      this.classes.hideTo = false;
      await nextFrame$1();
      this.classes.showFrom = false;
      this.classes.showTo = true;
      if (!this.noAutoFocus)
        this.$_popperNode.focus();
    },
    async $_applyHide(skipTransition = false) {
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        this.$_hideInProgress = false;
        return;
      }
      clearTimeout(this.$_scheduleTimer);
      if (!this.isShown) {
        return;
      }
      this.skipTransition = skipTransition;
      removeFromArray(shownPoppers, this);
      if (shownPoppers.length === 0) {
        document.body.classList.remove("v-popper--some-open");
      }
      for (const theme of getAllParentThemes(this.theme)) {
        const list = getShownPoppersByTheme(theme);
        removeFromArray(list, this);
        if (list.length === 0) {
          document.body.classList.remove(`v-popper--some-open--${theme}`);
        }
      }
      if (hidingPopper === this) {
        hidingPopper = null;
      }
      this.isShown = false;
      this.$_applyAttrsToTarget({
        "aria-describedby": void 0,
        "data-popper-shown": void 0
      });
      clearTimeout(this.$_disposeTimer);
      const disposeTime = getDefaultConfig(this.theme, "disposeTimeout");
      if (disposeTime !== null) {
        this.$_disposeTimer = setTimeout(() => {
          if (this.$_popperNode) {
            this.$_detachPopperNode();
            this.isMounted = false;
          }
        }, disposeTime);
      }
      this.$_removeEventListeners("scroll");
      this.$emit("apply-hide");
      this.classes.showFrom = false;
      this.classes.showTo = false;
      this.classes.hideFrom = true;
      this.classes.hideTo = false;
      await nextFrame$1();
      this.classes.hideFrom = false;
      this.classes.hideTo = true;
    },
    $_autoShowHide() {
      if (this.shown) {
        this.show();
      } else {
        this.hide();
      }
    },
    $_ensureTeleport() {
      if (this.$_isDisposed)
        return;
      let container = this.container;
      if (typeof container === "string") {
        container = window.document.querySelector(container);
      } else if (container === false) {
        container = this.$_targetNodes[0].parentNode;
      }
      if (!container) {
        throw new Error("No container for popover: " + this.container);
      }
      container.appendChild(this.$_popperNode);
      this.isMounted = true;
    },
    $_addEventListeners() {
      const handleShow = (event) => {
        if (this.isShown && !this.$_hideInProgress) {
          return;
        }
        event.usedByTooltip = true;
        !this.$_preventShow && this.show({ event });
      };
      this.$_registerTriggerListeners(this.$_targetNodes, SHOW_EVENT_MAP, this.triggers, this.showTriggers, handleShow);
      this.$_registerTriggerListeners([this.$_popperNode], SHOW_EVENT_MAP, this.popperTriggers, this.popperShowTriggers, handleShow);
      const handleHide = (event) => {
        if (event.usedByTooltip) {
          return;
        }
        this.hide({ event });
      };
      this.$_registerTriggerListeners(this.$_targetNodes, HIDE_EVENT_MAP, this.triggers, this.hideTriggers, handleHide);
      this.$_registerTriggerListeners([this.$_popperNode], HIDE_EVENT_MAP, this.popperTriggers, this.popperHideTriggers, handleHide);
    },
    $_registerEventListeners(targetNodes, eventType, handler) {
      this.$_events.push({ targetNodes, eventType, handler });
      targetNodes.forEach((node) => node.addEventListener(eventType, handler, supportsPassive ? {
        passive: true
      } : void 0));
    },
    $_registerTriggerListeners(targetNodes, eventMap, commonTriggers, customTrigger, handler) {
      let triggers = commonTriggers;
      if (customTrigger != null) {
        triggers = typeof customTrigger === "function" ? customTrigger(triggers) : customTrigger;
      }
      triggers.forEach((trigger2) => {
        const eventType = eventMap[trigger2];
        if (eventType) {
          this.$_registerEventListeners(targetNodes, eventType, handler);
        }
      });
    },
    $_removeEventListeners(filterEventType) {
      const newList = [];
      this.$_events.forEach((listener) => {
        const { targetNodes, eventType, handler } = listener;
        if (!filterEventType || filterEventType === eventType) {
          targetNodes.forEach((node) => node.removeEventListener(eventType, handler));
        } else {
          newList.push(listener);
        }
      });
      this.$_events = newList;
    },
    $_refreshListeners() {
      if (!this.$_isDisposed) {
        this.$_removeEventListeners();
        this.$_addEventListeners();
      }
    },
    $_handleGlobalClose(event, touch = false) {
      if (this.$_showFrameLocked)
        return;
      this.hide({ event });
      if (event.closePopover) {
        this.$emit("close-directive");
      } else {
        this.$emit("auto-hide");
      }
      if (touch) {
        this.$_preventShow = true;
        setTimeout(() => {
          this.$_preventShow = false;
        }, 300);
      }
    },
    $_detachPopperNode() {
      this.$_popperNode.parentNode && this.$_popperNode.parentNode.removeChild(this.$_popperNode);
    },
    $_swapTargetAttrs(attrFrom, attrTo) {
      for (const el2 of this.$_targetNodes) {
        const value = el2.getAttribute(attrFrom);
        if (value) {
          el2.removeAttribute(attrFrom);
          el2.setAttribute(attrTo, value);
        }
      }
    },
    $_applyAttrsToTarget(attrs) {
      for (const el2 of this.$_targetNodes) {
        for (const n2 in attrs) {
          const value = attrs[n2];
          if (value == null) {
            el2.removeAttribute(n2);
          } else {
            el2.setAttribute(n2, value);
          }
        }
      }
    },
    $_updateParentShownChildren(value) {
      let parent = this.parentPopper;
      while (parent) {
        if (value) {
          parent.shownChildren.add(this.randomId);
        } else {
          parent.shownChildren.delete(this.randomId);
          if (parent.$_pendingHide) {
            parent.hide();
          }
        }
        parent = parent.parentPopper;
      }
    },
    $_isAimingPopper() {
      const referenceBounds = this.$_referenceNode.getBoundingClientRect();
      if (mouseX >= referenceBounds.left && mouseX <= referenceBounds.right && mouseY >= referenceBounds.top && mouseY <= referenceBounds.bottom) {
        const popperBounds = this.$_popperNode.getBoundingClientRect();
        const vectorX = mouseX - mousePreviousX;
        const vectorY = mouseY - mousePreviousY;
        const distance = popperBounds.left + popperBounds.width / 2 - mousePreviousX + (popperBounds.top + popperBounds.height / 2) - mousePreviousY;
        const newVectorLength = distance + popperBounds.width + popperBounds.height;
        const edgeX = mousePreviousX + vectorX * newVectorLength;
        const edgeY = mousePreviousY + vectorY * newVectorLength;
        return lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.top, popperBounds.left, popperBounds.bottom) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.top, popperBounds.right, popperBounds.top) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.right, popperBounds.top, popperBounds.right, popperBounds.bottom) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.bottom, popperBounds.right, popperBounds.bottom);
      }
      return false;
    }
  },
  render() {
    return this.$slots.default(this.slotData);
  }
});
if (typeof document !== "undefined" && typeof window !== "undefined") {
  if (isIOS) {
    document.addEventListener("touchstart", handleGlobalMousedown, supportsPassive ? {
      passive: true,
      capture: true
    } : true);
    document.addEventListener("touchend", handleGlobalTouchend, supportsPassive ? {
      passive: true,
      capture: true
    } : true);
  } else {
    window.addEventListener("mousedown", handleGlobalMousedown, true);
    window.addEventListener("click", handleGlobalClick, true);
  }
  window.addEventListener("resize", computePositionAllShownPoppers);
}
function handleGlobalMousedown(event) {
  for (let i2 = 0; i2 < shownPoppers.length; i2++) {
    const popper = shownPoppers[i2];
    try {
      const popperContent = popper.popperNode();
      popper.$_mouseDownContains = popperContent.contains(event.target);
    } catch (e2) {
    }
  }
}
function handleGlobalClick(event) {
  handleGlobalClose(event);
}
function handleGlobalTouchend(event) {
  handleGlobalClose(event, true);
}
function handleGlobalClose(event, touch = false) {
  const preventClose = {};
  for (let i2 = shownPoppers.length - 1; i2 >= 0; i2--) {
    const popper = shownPoppers[i2];
    try {
      const contains2 = popper.$_containsGlobalTarget = isContainingEventTarget(popper, event);
      popper.$_pendingHide = false;
      requestAnimationFrame(() => {
        popper.$_pendingHide = false;
        if (preventClose[popper.randomId])
          return;
        if (shouldAutoHide(popper, contains2, event)) {
          popper.$_handleGlobalClose(event, touch);
          if (!event.closeAllPopover && event.closePopover && contains2) {
            let parent2 = popper.parentPopper;
            while (parent2) {
              preventClose[parent2.randomId] = true;
              parent2 = parent2.parentPopper;
            }
            return;
          }
          let parent = popper.parentPopper;
          while (parent) {
            if (shouldAutoHide(parent, parent.$_containsGlobalTarget, event)) {
              parent.$_handleGlobalClose(event, touch);
            } else {
              break;
            }
            parent = parent.parentPopper;
          }
        }
      });
    } catch (e2) {
    }
  }
}
function isContainingEventTarget(popper, event) {
  const popperContent = popper.popperNode();
  return popper.$_mouseDownContains || popperContent.contains(event.target);
}
function shouldAutoHide(popper, contains2, event) {
  return event.closeAllPopover || event.closePopover && contains2 || getAutoHideResult(popper, event) && !contains2;
}
function getAutoHideResult(popper, event) {
  if (typeof popper.autoHide === "function") {
    const result = popper.autoHide(event);
    popper.lastAutoHide = result;
    return result;
  }
  return popper.autoHide;
}
function computePositionAllShownPoppers(event) {
  for (let i2 = 0; i2 < shownPoppers.length; i2++) {
    const popper = shownPoppers[i2];
    popper.$_computePosition(event);
  }
}
let mousePreviousX = 0;
let mousePreviousY = 0;
let mouseX = 0;
let mouseY = 0;
if (typeof window !== "undefined") {
  window.addEventListener("mousemove", (event) => {
    mousePreviousX = mouseX;
    mousePreviousY = mouseY;
    mouseX = event.clientX;
    mouseY = event.clientY;
  }, supportsPassive ? {
    passive: true
  } : void 0);
}
function lineIntersectsLine(x1, y1, x2, y2, x3, y3, x4, y4) {
  const uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  const uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  return uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1;
}
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _sfc_main$6 = {
  extends: PrivatePopper()
};
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock$1(), createElementBlock$1("div", {
    ref: "reference",
    class: normalizeClass$1(["v-popper", {
      "v-popper--shown": _ctx.slotData.isShown
    }])
  }, [
    renderSlot$1(_ctx.$slots, "default", normalizeProps$1(guardReactiveProps$1(_ctx.slotData)))
  ], 2);
}
var Popper$1 = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$3]]);
function getInternetExplorerVersion() {
  var ua2 = window.navigator.userAgent;
  var msie = ua2.indexOf("MSIE ");
  if (msie > 0) {
    return parseInt(ua2.substring(msie + 5, ua2.indexOf(".", msie)), 10);
  }
  var trident = ua2.indexOf("Trident/");
  if (trident > 0) {
    var rv = ua2.indexOf("rv:");
    return parseInt(ua2.substring(rv + 3, ua2.indexOf(".", rv)), 10);
  }
  var edge = ua2.indexOf("Edge/");
  if (edge > 0) {
    return parseInt(ua2.substring(edge + 5, ua2.indexOf(".", edge)), 10);
  }
  return -1;
}
let isIE;
function initCompat() {
  if (!initCompat.init) {
    initCompat.init = true;
    isIE = getInternetExplorerVersion() !== -1;
  }
}
var script = {
  name: "ResizeObserver",
  props: {
    emitOnMount: {
      type: Boolean,
      default: false
    },
    ignoreWidth: {
      type: Boolean,
      default: false
    },
    ignoreHeight: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "notify"
  ],
  mounted() {
    initCompat();
    nextTick$1(() => {
      this._w = this.$el.offsetWidth;
      this._h = this.$el.offsetHeight;
      if (this.emitOnMount) {
        this.emitSize();
      }
    });
    const object = document.createElement("object");
    this._resizeObject = object;
    object.setAttribute("aria-hidden", "true");
    object.setAttribute("tabindex", -1);
    object.onload = this.addResizeHandlers;
    object.type = "text/html";
    if (isIE) {
      this.$el.appendChild(object);
    }
    object.data = "about:blank";
    if (!isIE) {
      this.$el.appendChild(object);
    }
  },
  beforeUnmount() {
    this.removeResizeHandlers();
  },
  methods: {
    compareAndNotify() {
      if (!this.ignoreWidth && this._w !== this.$el.offsetWidth || !this.ignoreHeight && this._h !== this.$el.offsetHeight) {
        this._w = this.$el.offsetWidth;
        this._h = this.$el.offsetHeight;
        this.emitSize();
      }
    },
    emitSize() {
      this.$emit("notify", {
        width: this._w,
        height: this._h
      });
    },
    addResizeHandlers() {
      this._resizeObject.contentDocument.defaultView.addEventListener("resize", this.compareAndNotify);
      this.compareAndNotify();
    },
    removeResizeHandlers() {
      if (this._resizeObject && this._resizeObject.onload) {
        if (!isIE && this._resizeObject.contentDocument) {
          this._resizeObject.contentDocument.defaultView.removeEventListener("resize", this.compareAndNotify);
        }
        this.$el.removeChild(this._resizeObject);
        this._resizeObject.onload = null;
        this._resizeObject = null;
      }
    }
  }
};
const _withId = /* @__PURE__ */ withScopeId();
pushScopeId$1("data-v-b329ee4c");
const _hoisted_1$2 = {
  class: "resize-observer",
  tabindex: "-1"
};
popScopeId$1();
const render$1 = /* @__PURE__ */ _withId((_ctx, _cache, $props, $setup, $data, $options) => {
  return openBlock$1(), createBlock$1("div", _hoisted_1$2);
});
script.render = render$1;
script.__scopeId = "data-v-b329ee4c";
script.__file = "src/components/ResizeObserver.vue";
var PrivateThemeClass = (prop = "theme") => ({
  computed: {
    themeClass() {
      return getThemeClasses(this[prop]);
    }
  }
});
const _sfc_main$5 = defineComponent$1({
  name: "VPopperContent",
  components: {
    ResizeObserver: script
  },
  mixins: [
    PrivateThemeClass()
  ],
  props: {
    popperId: String,
    theme: String,
    shown: Boolean,
    mounted: Boolean,
    skipTransition: Boolean,
    autoHide: Boolean,
    handleResize: Boolean,
    classes: Object,
    result: Object
  },
  emits: [
    "hide",
    "resize"
  ],
  methods: {
    toPx(value) {
      if (value != null && !isNaN(value)) {
        return `${value}px`;
      }
      return null;
    }
  }
});
const _hoisted_1$1 = ["id", "aria-hidden", "tabindex", "data-popper-placement"];
const _hoisted_2$1 = {
  ref: "inner",
  class: "v-popper__inner"
};
const _hoisted_3 = /* @__PURE__ */ createBaseVNode$1("div", { class: "v-popper__arrow-outer" }, null, -1);
const _hoisted_4 = /* @__PURE__ */ createBaseVNode$1("div", { class: "v-popper__arrow-inner" }, null, -1);
const _hoisted_5 = [
  _hoisted_3,
  _hoisted_4
];
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ResizeObserver = resolveComponent$1("ResizeObserver");
  return openBlock$1(), createElementBlock$1("div", {
    id: _ctx.popperId,
    ref: "popover",
    class: normalizeClass$1(["v-popper__popper", [
      _ctx.themeClass,
      _ctx.classes.popperClass,
      {
        "v-popper__popper--shown": _ctx.shown,
        "v-popper__popper--hidden": !_ctx.shown,
        "v-popper__popper--show-from": _ctx.classes.showFrom,
        "v-popper__popper--show-to": _ctx.classes.showTo,
        "v-popper__popper--hide-from": _ctx.classes.hideFrom,
        "v-popper__popper--hide-to": _ctx.classes.hideTo,
        "v-popper__popper--skip-transition": _ctx.skipTransition,
        "v-popper__popper--arrow-overflow": _ctx.result && _ctx.result.arrow.overflow,
        "v-popper__popper--no-positioning": !_ctx.result
      }
    ]]),
    style: normalizeStyle$1(_ctx.result ? {
      position: _ctx.result.strategy,
      transform: `translate3d(${Math.round(_ctx.result.x)}px,${Math.round(_ctx.result.y)}px,0)`
    } : void 0),
    "aria-hidden": _ctx.shown ? "false" : "true",
    tabindex: _ctx.autoHide ? 0 : void 0,
    "data-popper-placement": _ctx.result ? _ctx.result.placement : void 0,
    onKeyup: _cache[2] || (_cache[2] = withKeys(($event) => _ctx.autoHide && _ctx.$emit("hide"), ["esc"]))
  }, [
    createBaseVNode$1("div", {
      class: "v-popper__backdrop",
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.autoHide && _ctx.$emit("hide"))
    }),
    createBaseVNode$1("div", {
      class: "v-popper__wrapper",
      style: normalizeStyle$1(_ctx.result ? {
        transformOrigin: _ctx.result.transformOrigin
      } : void 0)
    }, [
      createBaseVNode$1("div", _hoisted_2$1, [
        _ctx.mounted ? (openBlock$1(), createElementBlock$1(Fragment$1, { key: 0 }, [
          createBaseVNode$1("div", null, [
            renderSlot$1(_ctx.$slots, "default")
          ]),
          _ctx.handleResize ? (openBlock$1(), createBlock$1(_component_ResizeObserver, {
            key: 0,
            onNotify: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("resize", $event))
          })) : createCommentVNode$1("", true)
        ], 64)) : createCommentVNode$1("", true)
      ], 512),
      createBaseVNode$1("div", {
        ref: "arrow",
        class: "v-popper__arrow-container",
        style: normalizeStyle$1(_ctx.result ? {
          left: _ctx.toPx(_ctx.result.arrow.x),
          top: _ctx.toPx(_ctx.result.arrow.y)
        } : void 0)
      }, _hoisted_5, 4)
    ], 4)
  ], 46, _hoisted_1$1);
}
var PrivatePopperContent = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$2]]);
var PrivatePopperMethods = {
  methods: {
    show(...args) {
      return this.$refs.popper.show(...args);
    },
    hide(...args) {
      return this.$refs.popper.hide(...args);
    },
    dispose(...args) {
      return this.$refs.popper.dispose(...args);
    },
    onResize(...args) {
      return this.$refs.popper.onResize(...args);
    }
  }
};
const _sfc_main$4 = defineComponent$1({
  name: "VPopperWrapper",
  components: {
    Popper: Popper$1,
    PopperContent: PrivatePopperContent
  },
  mixins: [
    PrivatePopperMethods,
    PrivateThemeClass("finalTheme")
  ],
  props: {
    theme: {
      type: String,
      default: null
    }
  },
  computed: {
    finalTheme() {
      var _a2;
      return (_a2 = this.theme) != null ? _a2 : this.$options.vPopperTheme;
    }
  },
  methods: {
    getTargetNodes() {
      return Array.from(this.$el.children).filter((node) => node !== this.$refs.popperContent.$el);
    }
  }
});
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_PopperContent = resolveComponent$1("PopperContent");
  const _component_Popper = resolveComponent$1("Popper");
  return openBlock$1(), createBlock$1(_component_Popper, {
    ref: "popper",
    theme: _ctx.finalTheme,
    "target-nodes": _ctx.getTargetNodes,
    "popper-node": () => _ctx.$refs.popperContent.$el,
    class: normalizeClass$1([
      _ctx.themeClass
    ])
  }, {
    default: withCtx$1(({
      popperId,
      isShown,
      shouldMountContent,
      skipTransition,
      autoHide,
      show,
      hide: hide2,
      handleResize,
      onResize,
      classes,
      result
    }) => [
      renderSlot$1(_ctx.$slots, "default", {
        shown: isShown,
        show,
        hide: hide2
      }),
      createVNode$1(_component_PopperContent, {
        ref: "popperContent",
        "popper-id": popperId,
        theme: _ctx.finalTheme,
        shown: isShown,
        mounted: shouldMountContent,
        "skip-transition": skipTransition,
        "auto-hide": autoHide,
        "handle-resize": handleResize,
        classes,
        result,
        onHide: hide2,
        onResize
      }, {
        default: withCtx$1(() => [
          renderSlot$1(_ctx.$slots, "popper", {
            shown: isShown,
            hide: hide2
          })
        ]),
        _: 2
      }, 1032, ["popper-id", "theme", "shown", "mounted", "skip-transition", "auto-hide", "handle-resize", "classes", "result", "onHide", "onResize"])
    ]),
    _: 3
  }, 8, ["theme", "target-nodes", "popper-node", "class"]);
}
var PrivatePopperWrapper = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$1]]);
const _sfc_main$3 = defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VDropdown",
  vPopperTheme: "dropdown"
}));
const _sfc_main$2 = defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VMenu",
  vPopperTheme: "menu"
}));
const _sfc_main$1 = defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VTooltip",
  vPopperTheme: "tooltip"
}));
const _sfc_main = defineComponent$1({
  name: "VTooltipDirective",
  components: {
    Popper: PrivatePopper(),
    PopperContent: PrivatePopperContent
  },
  mixins: [
    PrivatePopperMethods
  ],
  inheritAttrs: false,
  props: {
    theme: {
      type: String,
      default: "tooltip"
    },
    html: {
      type: Boolean,
      default: (props) => getDefaultConfig(props.theme, "html")
    },
    content: {
      type: [String, Number, Function],
      default: null
    },
    loadingContent: {
      type: String,
      default: (props) => getDefaultConfig(props.theme, "loadingContent")
    }
  },
  data() {
    return {
      asyncContent: null
    };
  },
  computed: {
    isContentAsync() {
      return typeof this.content === "function";
    },
    loading() {
      return this.isContentAsync && this.asyncContent == null;
    },
    finalContent() {
      if (this.isContentAsync) {
        return this.loading ? this.loadingContent : this.asyncContent;
      }
      return this.content;
    }
  },
  watch: {
    content: {
      handler() {
        this.fetchContent(true);
      },
      immediate: true
    },
    async finalContent() {
      await this.$nextTick();
      this.$refs.popper.onResize();
    }
  },
  created() {
    this.$_fetchId = 0;
  },
  methods: {
    fetchContent(force) {
      if (typeof this.content === "function" && this.$_isShown && (force || !this.$_loading && this.asyncContent == null)) {
        this.asyncContent = null;
        this.$_loading = true;
        const fetchId = ++this.$_fetchId;
        const result = this.content(this);
        if (result.then) {
          result.then((res) => this.onResult(fetchId, res));
        } else {
          this.onResult(fetchId, result);
        }
      }
    },
    onResult(fetchId, result) {
      if (fetchId !== this.$_fetchId)
        return;
      this.$_loading = false;
      this.asyncContent = result;
    },
    onShow() {
      this.$_isShown = true;
      this.fetchContent();
    },
    onHide() {
      this.$_isShown = false;
    }
  }
});
const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["textContent"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_PopperContent = resolveComponent$1("PopperContent");
  const _component_Popper = resolveComponent$1("Popper");
  return openBlock$1(), createBlock$1(_component_Popper, mergeProps$1({ ref: "popper" }, _ctx.$attrs, {
    theme: _ctx.theme,
    "popper-node": () => _ctx.$refs.popperContent.$el,
    onApplyShow: _ctx.onShow,
    onApplyHide: _ctx.onHide
  }), {
    default: withCtx$1(({
      popperId,
      isShown,
      shouldMountContent,
      skipTransition,
      autoHide,
      hide: hide2,
      handleResize,
      onResize,
      classes,
      result
    }) => [
      createVNode$1(_component_PopperContent, {
        ref: "popperContent",
        class: normalizeClass$1({
          "v-popper--tooltip-loading": _ctx.loading
        }),
        "popper-id": popperId,
        theme: _ctx.theme,
        shown: isShown,
        mounted: shouldMountContent,
        "skip-transition": skipTransition,
        "auto-hide": autoHide,
        "handle-resize": handleResize,
        classes,
        result,
        onHide: hide2,
        onResize
      }, {
        default: withCtx$1(() => [
          _ctx.html ? (openBlock$1(), createElementBlock$1("div", {
            key: 0,
            innerHTML: _ctx.finalContent
          }, null, 8, _hoisted_1)) : (openBlock$1(), createElementBlock$1("div", {
            key: 1,
            textContent: toDisplayString$2(_ctx.finalContent)
          }, null, 8, _hoisted_2))
        ]),
        _: 2
      }, 1032, ["class", "popper-id", "theme", "shown", "mounted", "skip-transition", "auto-hide", "handle-resize", "classes", "result", "onHide", "onResize"])
    ]),
    _: 1
  }, 16, ["theme", "popper-node", "onApplyShow", "onApplyHide"]);
}
var PrivateTooltipDirective = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
const TARGET_CLASS = "v-popper--has-tooltip";
function getPlacement(options2, modifiers) {
  let result = options2.placement;
  if (!result && modifiers) {
    for (const pos of placements) {
      if (modifiers[pos]) {
        result = pos;
      }
    }
  }
  if (!result) {
    result = getDefaultConfig(options2.theme || "tooltip", "placement");
  }
  return result;
}
function getOptions$1(el2, value, modifiers) {
  let options2;
  const type = typeof value;
  if (type === "string") {
    options2 = { content: value };
  } else if (value && type === "object") {
    options2 = value;
  } else {
    options2 = { content: false };
  }
  options2.placement = getPlacement(options2, modifiers);
  options2.targetNodes = () => [el2];
  options2.referenceNode = () => el2;
  return options2;
}
let directiveApp;
let directives;
let uid$2 = 0;
function ensureDirectiveApp() {
  if (directiveApp)
    return;
  directives = ref$1([]);
  directiveApp = createApp$1({
    name: "VTooltipDirectiveApp",
    setup() {
      return {
        directives
      };
    },
    render() {
      return this.directives.map((directive) => {
        return h$4(PrivateTooltipDirective, __spreadProps(__spreadValues$1({}, directive.options), {
          shown: directive.shown || directive.options.shown,
          key: directive.id
        }));
      });
    },
    devtools: {
      hide: true
    }
  });
  const mountTarget = document.createElement("div");
  document.body.appendChild(mountTarget);
  directiveApp.mount(mountTarget);
}
function createTooltip(el2, value, modifiers) {
  ensureDirectiveApp();
  const options2 = ref$1(getOptions$1(el2, value, modifiers));
  const shown = ref$1(false);
  const item = {
    id: uid$2++,
    options: options2,
    shown
  };
  directives.value.push(item);
  if (el2.classList) {
    el2.classList.add(TARGET_CLASS);
  }
  const result = el2.$_popper = {
    options: options2,
    item,
    show() {
      shown.value = true;
    },
    hide() {
      shown.value = false;
    }
  };
  return result;
}
function destroyTooltip(el2) {
  if (el2.$_popper) {
    const index = directives.value.indexOf(el2.$_popper.item);
    if (index !== -1)
      directives.value.splice(index, 1);
    delete el2.$_popper;
    delete el2.$_popperOldShown;
    delete el2.$_popperMountTarget;
  }
  if (el2.classList) {
    el2.classList.remove(TARGET_CLASS);
  }
}
function bind$1(el2, { value, modifiers }) {
  const options2 = getOptions$1(el2, value, modifiers);
  if (!options2.content || getDefaultConfig(options2.theme || "tooltip", "disabled")) {
    destroyTooltip(el2);
  } else {
    let directive;
    if (el2.$_popper) {
      directive = el2.$_popper;
      directive.options.value = options2;
    } else {
      directive = createTooltip(el2, value, modifiers);
    }
    if (typeof value.shown !== "undefined" && value.shown !== el2.$_popperOldShown) {
      el2.$_popperOldShown = value.shown;
      value.shown ? directive.show() : directive.hide();
    }
  }
}
var PrivateVTooltip = {
  beforeMount: bind$1,
  updated: bind$1,
  beforeUnmount(el2) {
    destroyTooltip(el2);
  }
};
function addListeners(el2) {
  el2.addEventListener("click", onClick);
  el2.addEventListener("touchstart", onTouchStart, supportsPassive ? {
    passive: true
  } : false);
}
function removeListeners(el2) {
  el2.removeEventListener("click", onClick);
  el2.removeEventListener("touchstart", onTouchStart);
  el2.removeEventListener("touchend", onTouchEnd);
  el2.removeEventListener("touchcancel", onTouchCancel);
}
function onClick(event) {
  const el2 = event.currentTarget;
  event.closePopover = !el2.$_vclosepopover_touch;
  event.closeAllPopover = el2.$_closePopoverModifiers && !!el2.$_closePopoverModifiers.all;
}
function onTouchStart(event) {
  if (event.changedTouches.length === 1) {
    const el2 = event.currentTarget;
    el2.$_vclosepopover_touch = true;
    const touch = event.changedTouches[0];
    el2.$_vclosepopover_touchPoint = touch;
    el2.addEventListener("touchend", onTouchEnd);
    el2.addEventListener("touchcancel", onTouchCancel);
  }
}
function onTouchEnd(event) {
  const el2 = event.currentTarget;
  el2.$_vclosepopover_touch = false;
  if (event.changedTouches.length === 1) {
    const touch = event.changedTouches[0];
    const firstTouch = el2.$_vclosepopover_touchPoint;
    event.closePopover = Math.abs(touch.screenY - firstTouch.screenY) < 20 && Math.abs(touch.screenX - firstTouch.screenX) < 20;
    event.closeAllPopover = el2.$_closePopoverModifiers && !!el2.$_closePopoverModifiers.all;
  }
}
function onTouchCancel(event) {
  const el2 = event.currentTarget;
  el2.$_vclosepopover_touch = false;
}
var PrivateVClosePopper = {
  beforeMount(el2, { value, modifiers }) {
    el2.$_closePopoverModifiers = modifiers;
    if (typeof value === "undefined" || value) {
      addListeners(el2);
    }
  },
  updated(el2, { value, oldValue, modifiers }) {
    el2.$_closePopoverModifiers = modifiers;
    if (value !== oldValue) {
      if (typeof value === "undefined" || value) {
        addListeners(el2);
      } else {
        removeListeners(el2);
      }
    }
  },
  beforeUnmount(el2) {
    removeListeners(el2);
  }
};
const VTooltip = PrivateVTooltip;
const Dropdown = _sfc_main$3;
function install(app, options2 = {}) {
  if (app.$_vTooltipInstalled)
    return;
  app.$_vTooltipInstalled = true;
  assign$4(config$2, options2);
  app.directive("tooltip", PrivateVTooltip);
  app.directive("close-popper", PrivateVClosePopper);
  app.component("VTooltip", _sfc_main$1);
  app.component("VDropdown", _sfc_main$3);
  app.component("VMenu", _sfc_main$2);
}
const plugin = {
  version: "2.0.0-beta.20",
  install,
  options: config$2
};
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  const links = document.getElementsByTagName("link");
  return Promise.all(deps.map((dep) => {
    dep = assetsURL(dep);
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    const isBaseRelative = !!importerUrl;
    if (isBaseRelative) {
      for (let i2 = links.length - 1; i2 >= 0; i2--) {
        const link2 = links[i2];
        if (link2.href === dep && (!isCss || link2.rel === "stylesheet")) {
          return;
        }
      }
    } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link = document.createElement("link");
    link.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link.as = "script";
      link.crossOrigin = "";
    }
    link.href = dep;
    document.head.appendChild(link);
    if (isCss) {
      return new Promise((res, rej) => {
        link.addEventListener("load", res);
        link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule());
};
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map2[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove = (arr, el2) => {
  const i2 = arr.indexOf(el2);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$3 = Object.prototype.hasOwnProperty;
const hasOwn$1 = (val, key) => hasOwnProperty$3.call(val, key);
const isArray$4 = Array.isArray;
const isMap = (val) => toTypeString$1(val) === "[object Map]";
const isSet = (val) => toTypeString$1(val) === "[object Set]";
const isDate$2 = (val) => toTypeString$1(val) === "[object Date]";
const isFunction$3 = (val) => typeof val === "function";
const isString$3 = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject$3 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject$3(val) && isFunction$3(val.then) && isFunction$3(val.catch);
};
const objectToString$1 = Object.prototype.toString;
const toTypeString$1 = (value) => objectToString$1.call(value);
const toRawType = (value) => {
  return toTypeString$1(value).slice(8, -1);
};
const isPlainObject$4 = (val) => toTypeString$1(val) === "[object Object]";
const isIntegerKey = (key) => isString$3(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_2, c2) => c2 ? c2.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize$1 = cacheStringFunction(
  (str) => str.charAt(0).toUpperCase() + str.slice(1)
);
const toHandlerKey = cacheStringFunction(
  (str) => str ? `on${capitalize$1(str)}` : ``
);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber = (val) => {
  const n2 = isString$3(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis$1;
const getGlobalThis$1 = () => {
  return _globalThis$1 || (_globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function normalizeStyle(value) {
  if (isArray$4(value)) {
    const res = {};
    for (let i2 = 0; i2 < value.length; i2++) {
      const item = value[i2];
      const normalized = isString$3(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$3(value)) {
    return value;
  } else if (isObject$3(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString$3(value)) {
    res = value;
  } else if (isArray$4(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      const normalized = normalizeClass(value[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$3(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style: style2 } = props;
  if (klass && !isString$3(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style2) {
    props.style = normalizeStyle(style2);
  }
  return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function looseCompareArrays(a2, b3) {
  if (a2.length !== b3.length)
    return false;
  let equal = true;
  for (let i2 = 0; equal && i2 < a2.length; i2++) {
    equal = looseEqual(a2[i2], b3[i2]);
  }
  return equal;
}
function looseEqual(a2, b3) {
  if (a2 === b3)
    return true;
  let aValidType = isDate$2(a2);
  let bValidType = isDate$2(b3);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a2.getTime() === b3.getTime() : false;
  }
  aValidType = isSymbol(a2);
  bValidType = isSymbol(b3);
  if (aValidType || bValidType) {
    return a2 === b3;
  }
  aValidType = isArray$4(a2);
  bValidType = isArray$4(b3);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a2, b3) : false;
  }
  aValidType = isObject$3(a2);
  bValidType = isObject$3(b3);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a2).length;
    const bKeysCount = Object.keys(b3).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a2) {
      const aHasKey = a2.hasOwnProperty(key);
      const bHasKey = b3.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a2[key], b3[key])) {
        return false;
      }
    }
  }
  return String(a2) === String(b3);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const toDisplayString$1 = (val) => {
  return isString$3(val) ? val : val == null ? "" : isArray$4(val) || isObject$3(val) && (val.toString === objectToString$1 || !isFunction$3(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$3(val) && !isArray$4(val) && !isPlainObject$4(val)) {
    return String(val);
  }
  return val;
};
function warn$4(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else {
      warn$4(`cannot run an inactive effect scope.`);
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i2, l2;
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].stop();
      }
      for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
        this.cleanups[i2]();
      }
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn2) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn2);
  } else {
    warn$4(
      `onScopeDispose() is called when there is no active effect scope to be associated with.`
    );
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect) => {
  const { deps } = effect;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
class ReactiveEffect {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect2);
    }
    deps.length = 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    const eventInfo = { effect: activeEffect, target, type, key };
    trackEffects(dep, eventInfo);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (activeEffect.onTrack) {
      activeEffect.onTrack(
        extend$1(
          {
            effect: activeEffect
          },
          debuggerEventExtraInfo
        )
      );
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$4(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$4(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$4(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0], eventInfo);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects), eventInfo);
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = isArray$4(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect || effect2.allowRecurse) {
    if (effect2.onTrigger) {
      effect2.onTrigger(extend$1({ effect: effect2 }, debuggerEventExtraInfo));
    }
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive(object, key) {
  var _a2;
  return (_a2 = targetMap.get(object)) == null ? void 0 : _a2.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const get$1$1 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
        track(arr, "get", i2 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty$2(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray$4(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn$1(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty$2;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$3(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$1 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow$1(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray$4(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$4(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn$1(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn$1(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has$1(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray$4(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$1$1,
  set: set$1,
  deleteProperty,
  has: has$1,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    {
      warn$4(
        `Set operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  },
  deleteProperty(target, key) {
    {
      warn$4(
        `Delete operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend$1(
  {},
  mutableHandlers,
  {
    get: shallowGet,
    set: shallowSet
  }
);
const shallowReadonlyHandlers = /* @__PURE__ */ extend$1(
  {},
  readonlyHandlers,
  {
    get: shallowReadonlyGet
  }
);
const toShallow = (value) => value;
const getProto = (v3) => Reflect.getPrototypeOf(v3);
function get$2(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap2(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap2(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$2(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach2(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap2(value), wrap2(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(
        `${capitalize$1(type)} operation ${key}failed: target is readonly.`,
        toRaw(this)
      );
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$2(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set: set$2,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$2(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set: set$2,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$2(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$2(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(
      method,
      false,
      false
    );
    readonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      false
    );
    shallowInstrumentations2[method] = createIterableMethod(
      method,
      false,
      true
    );
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn$1(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$3(target)) {
    {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow$1(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
const toReactive = (value) => isObject$3(value) ? reactive(value) : value;
const toReadonly = (value) => isObject$3(value) ? readonly(value) : value;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep()), {
        target: ref2,
        type: "get",
        key: "value"
      });
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects(dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    }
  }
}
function isRef(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow$1(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, newVal);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
function toRefs(object) {
  if (!isProxy(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray$4(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction$3(source)) {
    return new GetterRefImpl(source);
  } else if (isObject$3(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(
    source,
    key,
    defaultValue
  );
}
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$3(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      console.warn("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
const stack = [];
function pushWarningContext(vnode) {
  stack.push(vnode);
}
function popWarningContext() {
  stack.pop();
}
function warn$3(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        msg + args.join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps(vnode.props), close] : [open2 + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString$3(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$3(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$3(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$3(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorTypeStrings = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
};
function callWithErrorHandling(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction$3(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn2.length; i2++) {
    values.push(callWithAsyncErrorHandling(fn2[i2], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn$3(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id2) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue[middle]);
    middleJobId < id2 ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if (!queue.length || !queue.includes(
    job,
    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
  )) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i2 = queue.indexOf(job);
  if (i2 > flushIndex) {
    queue.splice(i2, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray$4(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(
      cb,
      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
    )) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(seen2, i2 = isFlushing ? flushIndex + 1 : 0) {
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  for (; i2 < queue.length; i2++) {
    const cb = queue[i2];
    if (cb && cb.pre) {
      if (checkRecursiveUpdates(seen2, cb)) {
        continue;
      }
      queue.splice(i2, 1);
      i2--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    {
      seen2 = seen2 || /* @__PURE__ */ new Map();
    }
    activePostFlushCbs.sort((a2, b3) => getId(a2) - getId(b3));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (checkRecursiveUpdates(seen2, activePostFlushCbs[postFlushIndex])) {
        continue;
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a2, b3) => {
  const diff = getId(a2) - getId(b3);
  if (diff === 0) {
    if (a2.pre && !b3.pre)
      return -1;
    if (b3.pre && !a2.pre)
      return 1;
  }
  return diff;
};
function flushJobs(seen2) {
  isFlushPending = false;
  isFlushing = true;
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  queue.sort(comparator);
  const check = (job) => checkRecursiveUpdates(seen2, job);
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen2);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen2);
    }
  }
}
function checkRecursiveUpdates(seen2, fn2) {
  if (!seen2.has(fn2)) {
    seen2.set(fn2, 1);
  } else {
    const count2 = seen2.get(fn2);
    if (count2 > RECURSION_LIMIT) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      warn$3(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`
      );
      return true;
    } else {
      seen2.set(fn2, count2 + 1);
    }
  }
}
let isHmrUpdating = false;
const hmrDirtyComponents = /* @__PURE__ */ new Set();
{
  getGlobalThis$1().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
  };
}
const map = /* @__PURE__ */ new Map();
function registerHMR(instance) {
  const id2 = instance.type.__hmrId;
  let record = map.get(id2);
  if (!record) {
    createRecord(id2, instance.type);
    record = map.get(id2);
  }
  record.instances.add(instance);
}
function unregisterHMR(instance) {
  map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id2, initialDef) {
  if (map.has(id2)) {
    return false;
  }
  map.set(id2, {
    initialDef: normalizeClassComponent(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent(component) {
  return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id2, newRender) {
  const record = map.get(id2);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating = true;
    instance.update();
    isHmrUpdating = false;
  });
}
function reload(id2, newComp) {
  const record = map.get(id2);
  if (!record)
    return;
  newComp = normalizeClassComponent(newComp);
  updateComponentDef(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent(instance.type);
    if (!hmrDirtyComponents.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef(oldComp, newComp);
      }
      hmrDirtyComponents.add(oldComp);
    }
    instance.appContext.propsCache.delete(instance.type);
    instance.appContext.emitsCache.delete(instance.type);
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents.delete(oldComp);
    } else if (instance.parent) {
      queueJob(instance.parent.update);
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn(
        "[HMR] Root or manually mounted instance modified. Full reload required."
      );
    }
  }
  queuePostFlushCb(() => {
    for (const instance of instances) {
      hmrDirtyComponents.delete(
        normalizeClassComponent(instance.type)
      );
    }
  });
}
function updateComponentDef(oldComp, newComp) {
  extend$1(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap(fn2) {
  return (id2, arg) => {
    try {
      return fn2(id2, arg);
    } catch (e2) {
      console.error(e2);
      console.warn(
        `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
      );
    }
  };
}
let devtools$1;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
  if (devtools$1) {
    devtools$1.emit(event, ...args);
  } else if (!devtoolsNotInstalled) {
    buffer.push({ event, args });
  }
}
function setDevtoolsHook(hook, target) {
  var _a2, _b;
  devtools$1 = hook;
  if (devtools$1) {
    devtools$1.enabled = true;
    buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
    buffer = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a2 = window.navigator) == null ? void 0 : _a2.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$1) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled = true;
    buffer = [];
  }
}
function devtoolsInitApp(app, version2) {
  emit$1("app:init", app, version2, {
    Fragment,
    Text,
    Comment: Comment$1,
    Static
  });
}
function devtoolsUnmountApp(app) {
  emit$1("app:unmount", app);
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:added"
  /* COMPONENT_ADDED */
);
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:updated"
  /* COMPONENT_UPDATED */
);
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:removed"
  /* COMPONENT_REMOVED */
);
const devtoolsComponentRemoved = (component) => {
  if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools$1.cleanupBuffer(component)) {
    _devtoolsComponentRemoved(component);
  }
};
function createDevtoolsComponentHook(hook) {
  return (component) => {
    emit$1(
      hook,
      component.appContext.app,
      component.uid,
      component.parent ? component.parent.uid : void 0,
      component
    );
  };
}
const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:start"
  /* PERFORMANCE_START */
);
const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:end"
  /* PERFORMANCE_END */
);
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    emit$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  emit$1(
    "component:emit",
    component.appContext.app,
    component,
    event,
    params
  );
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  {
    const {
      emitsOptions,
      propsOptions: [propsOptions]
    } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn$3(
            `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`
          );
        }
      } else {
        const validator2 = emitsOptions[event];
        if (isFunction$3(validator2)) {
          const isValid2 = validator2(...rawArgs);
          if (!isValid2) {
            warn$3(
              `Invalid event arguments: event validation failed for event "${event}".`
            );
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number2, trim: trim2 } = props[modifiersKey] || EMPTY_OBJ;
    if (trim2) {
      args = rawArgs.map((a2) => isString$3(a2) ? a2.trim() : a2);
    }
    if (number2) {
      args = rawArgs.map(looseToNumber);
    }
  }
  {
    devtoolsComponentEmit(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn$3(
        `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
          instance,
          instance.type
        )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(event)}" instead of "${event}".`
      );
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$3(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$3(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$4(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  if (isObject$3(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$1(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$1(options, hyphenate(key)) || hasOwn$1(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id2) {
  currentScopeId = id2;
}
function popScopeId() {
  currentScopeId = null;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    {
      devtoolsComponentUpdated(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    props,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance(instance);
  {
    accessedAttrs = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(
        render2.call(
          proxyToUse,
          proxyToUse,
          renderCache,
          props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (attrs === props) {
        markAttrsAccessed();
      }
      result = normalizeVNode(
        render22.length > 1 ? render22(
          props,
          true ? {
            get attrs() {
              markAttrsAccessed();
              return attrs;
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          props,
          null
          /* we know it doesn't need it */
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment$1);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs);
      } else if (!accessedAttrs && root.type !== Comment$1) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i2 = 0, l2 = allAttrs.length; i2 < l2; i2++) {
          const key = allAttrs[i2];
          if (isOn(key)) {
            if (!isModelListener(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$3(
            `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
          );
        }
        if (eventAttrs.length) {
          warn$3(
            `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
          );
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot(root)) {
      warn$3(
        `Runtime directive used on component with non-element root node. The directives will not function as intended.`
      );
    }
    root = cloneVNode(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot(root)) {
      warn$3(
        `Component inside <Transition> renders non-element root node that cannot be animated.`
      );
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getChildRoot = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children) {
  let singleRoot;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (isVNode$1(child)) {
      if (child.type !== Comment$1 || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment$1;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el2) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el2;
    parent = parent.parent;
  }
}
const isSuspense = (type) => type.__isSuspense;
const SuspenseImpl = {
  name: "Suspense",
  // In order to make Suspense tree-shakable, we need to avoid importing it
  // directly in the renderer. The renderer checks for the __isSuspense flag
  // on a vnode's type and calls the `process` method, passing in renderer
  // internals.
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    } else {
      patchSuspense(
        n1,
        n2,
        container,
        anchor,
        parentComponent,
        isSVG,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary,
  normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if (isFunction$3(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
  const {
    p: patch,
    o: { createElement }
  } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    container,
    hiddenContainer,
    anchor,
    isSVG,
    slotScopeIds,
    optimized,
    rendererInternals
  );
  patch(
    null,
    suspense.pendingBranch = vnode.ssContent,
    hiddenContainer,
    null,
    parentComponent,
    suspense,
    isSVG,
    slotScopeIds
  );
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      isSVG,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve(false, true);
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(
        pendingBranch,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        isSVG,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        patch(
          activeBranch,
          newFallback,
          container,
          anchor,
          parentComponent,
          null,
          // fallback tree will not have suspense context
          isSVG,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, newFallback);
      }
    } else {
      suspense.pendingId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            isSVG,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(
          activeBranch,
          newBranch,
          container,
          anchor,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        suspense.resolve(true);
      } else {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(
        activeBranch,
        newBranch,
        container,
        anchor,
        parentComponent,
        suspense,
        isSVG,
        slotScopeIds,
        optimized
      );
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      suspense.pendingId++;
      patch(
        null,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        isSVG,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  if (!hasWarned) {
    hasWarned = true;
    console[console.info ? "info" : "log"](
      `<Suspense> is an experimental feature and its API will likely change.`
    );
  }
  const {
    p: patch,
    m: move,
    um: unmount,
    n: next,
    o: { parentNode, remove: remove2 }
  } = rendererInternals;
  let parentSuspenseId;
  const isSuspensible = isVNodeSuspensible(vnode);
  if (isSuspensible) {
    if (parentSuspense == null ? void 0 : parentSuspense.pendingBranch) {
      parentSuspenseId = parentSuspense.pendingId;
      parentSuspense.deps++;
    }
  }
  const timeout = vnode.props ? toNumber(vnode.props.timeout) : void 0;
  {
    assertNumber(timeout, `Suspense timeout`);
  }
  const suspense = {
    vnode,
    parent: parentSuspense,
    parentComponent,
    isSVG,
    container,
    hiddenContainer,
    anchor,
    deps: 0,
    pendingId: 0,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: true,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false, sync = false) {
      {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(
            `suspense.resolve() is called without a pending branch.`
          );
        }
        if (suspense.isUnmounted) {
          throw new Error(
            `suspense.resolve() is called on an already unmounted suspense boundary.`
          );
        }
      }
      const {
        vnode: vnode2,
        activeBranch,
        pendingBranch,
        pendingId,
        effects,
        parentComponent: parentComponent2,
        container: container2
      } = suspense;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(pendingBranch, container2, anchor2, 0);
            }
          };
        }
        let { anchor: anchor2 } = suspense;
        if (activeBranch) {
          anchor2 = next(activeBranch);
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor2, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent) {
        if (parent.pendingBranch) {
          parent.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent = parent.parent;
      }
      if (!hasUnresolvedAncestor) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0 && !sync) {
            parentSuspense.resolve();
          }
        }
      }
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          isSVG2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next(instance.subTree),
          suspense,
          isSVG,
          optimized
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        {
          popWarningContext();
        }
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense2, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(
          suspense.activeBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
      if (suspense.pendingBranch) {
        unmount(
          suspense.pendingBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node.parentNode,
    document.createElement("div"),
    null,
    isSVG,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
    /* hydrating */
  );
  const result = hydrateNode(
    node,
    suspense.pendingBranch = vnode.ssContent,
    parentComponent,
    suspense,
    slotScopeIds,
    optimized
  );
  if (suspense.deps === 0) {
    suspense.resolve(false, true);
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(
    isSlotChildren ? children.default : children
  );
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment$1);
}
function normalizeSuspenseSlot(s3) {
  let block;
  if (isFunction$3(s3)) {
    const trackBlock = isBlockTreeEnabled && s3._c;
    if (trackBlock) {
      s3._d = false;
      openBlock();
    }
    s3 = s3();
    if (trackBlock) {
      s3._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if (isArray$4(s3)) {
    const singleChild = filterSingleRoot(s3);
    if (!singleChild) {
      warn$3(`<Suspense> slots expect a single root node.`);
    }
    s3 = singleChild;
  }
  s3 = normalizeVNode(s3);
  if (block && !s3.dynamicChildren) {
    s3.dynamicChildren = block.filter((c2) => c2 !== s3);
  }
  return s3;
}
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$4(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  const el2 = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el2;
    updateHOCHostEl(parentComponent, el2);
  }
}
function isVNodeSuspensible(vnode) {
  var _a2;
  return ((_a2 = vnode.props) == null ? void 0 : _a2.suspensible) != null && vnode.props.suspensible !== false;
}
function watchEffect(effect, options) {
  return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
  return doWatch(
    effect,
    null,
    extend$1({}, options, { flush: "post" })
  );
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (!isFunction$3(cb)) {
    warn$3(
      `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
    );
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  var _a2;
  if (!cb) {
    if (immediate !== void 0) {
      warn$3(
        `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (deep !== void 0) {
      warn$3(
        `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
  }
  const warnInvalidSource = (s3) => {
    warn$3(
      `Invalid watch source: `,
      s3,
      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
    );
  };
  const instance = getCurrentScope() === ((_a2 = currentInstance) == null ? void 0 : _a2.scope) ? currentInstance : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow$1(source);
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$4(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s3) => isReactive(s3) || isShallow$1(s3));
    getter = () => source.map((s3) => {
      if (isRef(s3)) {
        return s3.value;
      } else if (isReactive(s3)) {
        return traverse(s3);
      } else if (isFunction$3(s3)) {
        return callWithErrorHandling(s3, instance, 2);
      } else {
        warnInvalidSource(s3);
      }
    });
  } else if (isFunction$3(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = NOOP;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling(fn2, instance, 4);
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect.active) {
      return;
    }
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some(
        (v3, i2) => hasChanged(v3, oldValue[i2])
      ) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect = new ReactiveEffect(getter, scheduler);
  {
    effect.onTrack = onTrack;
    effect.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(
      effect.run.bind(effect),
      instance && instance.suspense
    );
  } else {
    effect.run();
  }
  const unwatch = () => {
    effect.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$3(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$3(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse(value, seen2) {
  if (!isObject$3(value) || value["__v_skip"]) {
    return value;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  if (isRef(value)) {
    traverse(value.value, seen2);
  } else if (isArray$4(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      traverse(value[i2], seen2);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v3) => {
      traverse(v3, seen2);
    });
  } else if (isPlainObject$4(value)) {
    for (const key in value) {
      traverse(value[key], seen2);
    }
  }
  return value;
}
function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn$3("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives(vnode, directives2) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    warn$3(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives2.length; i2++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives2[i2];
    if (dir) {
      if (isFunction$3(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c2 of children) {
          if (c2.type !== Comment$1) {
            if (hasFound) {
              warn$3(
                "<transition> can only be used on a single element or component. Use <transition-group> for lists."
              );
              break;
            }
            child = c2;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$3(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance
      );
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.update();
            }
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment$1) {
          leavingHooks.delayLeave = (el2, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el2._leaveCb = () => {
              earlyRemove();
              el2._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$4(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el2) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el2._leaveCb) {
        el2._leaveCb(
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el2]);
    },
    enter(el2) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el2._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el2]);
        } else {
          callHook2(afterHook, [el2]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el2._enterCb = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el2, done]);
      } else {
        done();
      }
    },
    leave(el2, remove2) {
      const key2 = String(vnode.key);
      if (el2._enterCb) {
        el2._enterCb(
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el2]);
      let called = false;
      const done = el2._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el2]);
        } else {
          callHook2(onAfterLeave, [el2]);
        }
        el2._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el2, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    let child = children[i2];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment$1) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options, extraOptions) {
  return isFunction$3(options) ? (
    // #8326: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend$1({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
function defineAsyncComponent(source) {
  if (isFunction$3(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$3(
          `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
        );
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject$3(comp) && !isFunction$3(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
          /* do not throw in dev if user provided error component */
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded2 = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded2.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded2.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded2.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref2, props, children, ce: ce3 } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce3;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ""));
    warn$3(
      `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
    );
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target)
);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook(
  "rtg"
);
const onRenderTracked = createHook(
  "rtc"
);
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
const COMPONENTS = "components";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString$3(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
        /* do not include inferred name to avoid breaking existing code */
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize$1(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$3(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$3(
      `resolve${capitalize$1(type.slice(0, -1))} can only be used in render() or setup().`
    );
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize$1(camelize(name))]);
}
function renderList(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  if (isArray$4(source) || isString$3(source)) {
    ret = new Array(source.length);
    for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
      ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$3(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject$3(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i2) => renderItem(item, i2, void 0, cached && cached[i2])
      );
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
        const key = keys[i2];
        ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$3(
      `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
    );
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(
    Fragment,
    {
      key: props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode$1(child))
      return true;
    if (child.type === Comment$1)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
const getPublicInstance = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent(i2))
    return getExposeProxy(i2) || i2.proxy;
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
    $: (i2) => i2,
    $el: (i2) => i2.vnode.el,
    $data: (i2) => i2.data,
    $props: (i2) => shallowReadonly(i2.props),
    $attrs: (i2) => shallowReadonly(i2.attrs),
    $slots: (i2) => shallowReadonly(i2.slots),
    $refs: (i2) => shallowReadonly(i2.refs),
    $parent: (i2) => getPublicInstance(i2.parent),
    $root: (i2) => getPublicInstance(i2.root),
    $emit: (i2) => i2.emit,
    $options: (i2) => resolveMergedOptions(i2),
    $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob(i2.update)),
    $nextTick: (i2) => i2.n || (i2.n = nextTick.bind(i2.proxy)),
    $watch: (i2) => instanceWatch.bind(i2)
  })
);
const isReservedPrefix = (key) => key === "_" || key === "$";
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn$1(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$1(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
        markAttrsAccessed();
      } else if (key === "$slots") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$1(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance && (!isString$3(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
    // to infinite warning loop
    key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn$1(data, key)) {
        warn$3(
          `Property ${JSON.stringify(
            key
          )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
        );
      } else if (instance === currentRenderingInstance) {
        warn$3(
          `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
        );
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn$1(setupState, key)) {
      warn$3(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$1(instance.props, key)) {
      warn$3(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$3(
        `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
      );
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn$1(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$1(normalizedProps, key) || hasOwn$1(ctx, key) || hasOwn$1(publicPropertiesMap, key) || hasOwn$1(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$1(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn$3(
      `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
    );
    return Reflect.ownKeys(target);
  };
}
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const {
    ctx,
    propsOptions: [propsOptions]
  } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix(key[0])) {
        warn$3(
          `setup() return property ${JSON.stringify(
            key
          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
        );
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP
      });
    }
  });
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function useModel(props, name, options) {
  const i2 = getCurrentInstance();
  if (!i2) {
    warn$3(`useModel() called without active instance.`);
    return ref();
  }
  if (!i2.propsOptions[0][name]) {
    warn$3(`useModel() called with prop "${name}" which is not declared.`);
    return ref();
  }
  if (options && options.local) {
    const proxy = ref(props[name]);
    watch(
      () => props[name],
      (v3) => proxy.value = v3
    );
    watch(proxy, (value) => {
      if (value !== props[name]) {
        i2.emit(`update:${name}`, value);
      }
    });
    return proxy;
  } else {
    return {
      __v_isRef: true,
      get value() {
        return props[name];
      },
      set value(value) {
        i2.emit(`update:${name}`, value);
      }
    };
  }
}
function getContext() {
  const i2 = getCurrentInstance();
  if (!i2) {
    warn$3(`useContext() called without active instance.`);
  }
  return i2.setupContext || (i2.setupContext = createSetupContext(i2));
}
function normalizePropsOrEmits(props) {
  return isArray$4(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function mergeModels(a2, b3) {
  if (!a2 || !b3)
    return a2 || b3;
  if (isArray$4(a2) && isArray$4(b3))
    return a2.concat(b3);
  return extend$1({}, normalizePropsOrEmits(a2), normalizePropsOrEmits(b3));
}
function createDuplicateChecker() {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache2[key]) {
      warn$3(`${type} property "${key}" is already defined in ${cache2[key]}.`);
    } else {
      cache2[key] = type;
    }
  };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives: directives2,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$3(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$3(
          `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
        );
      }
    }
  }
  if (dataOptions) {
    if (!isFunction$3(dataOptions)) {
      warn$3(
        `The data option must be a function. Plain object usage is no longer supported.`
      );
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise(data)) {
      warn$3(
        `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
      );
    }
    if (!isObject$3(data)) {
      warn$3(`data() should return an object.`);
    } else {
      instance.data = reactive(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP
            });
          }
        }
      }
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$3(opt) ? opt.bind(publicThis, publicThis) : isFunction$3(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (get2 === NOOP) {
        warn$3(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction$3(opt) && isFunction$3(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$3(
          `Write operation failed: computed property "${key}" is readonly.`
        );
      };
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v3) => c2.value = v3
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$3(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$4(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$4(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives2)
    instance.directives = directives2;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray$4(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$3(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
          /* treat default function as factory */
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v3) => injected.value = v3
      });
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(
    isArray$4(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$3(raw)) {
    const handler = ctx[raw];
    if (isFunction$3(handler)) {
      watch(getter, handler);
    } else {
      warn$3(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction$3(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$3(raw)) {
    if (isArray$4(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction$3(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$3(handler)) {
        watch(getter, handler, raw);
      } else {
        warn$3(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$3(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache2,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m2) => mergeOptions$2(resolved, m2, optionMergeStrategies, true)
      );
    }
    mergeOptions$2(resolved, base, optionMergeStrategies);
  }
  if (isObject$3(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$2(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$2(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m2) => mergeOptions$2(to2, m2, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$3(
        `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
      );
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend$1(
      isFunction$3(to2) ? to2.call(this, this) : to2,
      isFunction$3(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to2, from) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$4(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions(to2, from) {
  return to2 ? extend$1(/* @__PURE__ */ Object.create(null), to2, from) : from;
}
function mergeEmitsOrPropsOptions(to2, from) {
  if (to2) {
    if (isArray$4(to2) && isArray$4(from)) {
      return [.../* @__PURE__ */ new Set([...to2, ...from])];
    }
    return extend$1(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to2),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray(to2[key], from[key]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render2, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$3(rootComponent)) {
      rootComponent = extend$1({}, rootComponent);
    }
    if (rootProps != null && !isObject$3(rootProps)) {
      warn$3(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext();
    {
      Object.defineProperty(context.config, "unwrapInjectedRef", {
        get() {
          return true;
        },
        set() {
          warn$3(
            `app.config.unwrapInjectedRef has been deprecated. 3.3 now alawys unwraps injected refs in Options API.`
          );
        }
      });
    }
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$1,
      get config() {
        return context.config;
      },
      set config(v3) {
        {
          warn$3(
            `app.config cannot be replaced. Modify individual options instead.`
          );
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$3(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction$3(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction$3(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$3(
            `A plugin must either be a function or an object with an "install" function.`
          );
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$3(
              "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
            );
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$3(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$3(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$3(
              `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
            );
          }
          const vnode = createVNode(
            rootComponent,
            rootProps
          );
          vnode.appContext = context;
          {
            context.reload = () => {
              render2(cloneVNode(vnode), rootContainer, isSVG);
            };
          }
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp(app, version$1);
          }
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        } else {
          warn$3(
            `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
          );
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$3(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$3(
            `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
          );
        }
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn2) {
        currentApp = app;
        try {
          return fn2();
        } finally {
          currentApp = null;
        }
      }
    };
    return app;
  };
}
let currentApp = null;
function provide(key, value) {
  if (!currentInstance) {
    {
      warn$3(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$3(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else {
      warn$3(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$3(`inject() can only be used inside setup() or functional components.`);
  }
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext(instance) {
  while (instance) {
    if (instance.type.__hmrId)
      return true;
    instance = instance.parent;
  }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$1(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
              /* isAbsent */
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$1(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn$1(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
              /* isAbsent */
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$1(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$1(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn$1(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$1(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction$3(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          unsetCurrentInstance();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$3(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend$1(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$3(comp)) {
      cache2.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$4(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      if (!isString$3(raw[i2])) {
        warn$3(`props must be strings when using array syntax.`, raw[i2]);
      }
      const normalizedKey = camelize(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (!isObject$3(raw)) {
      warn$3(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$4(opt) || isFunction$3(opt) ? { type: opt } : extend$1({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$1(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$3(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  } else {
    warn$3(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match ? match[2] : ctor === null ? "null" : "";
}
function isSameType(a2, b3) {
  return getType(a2) === getType(b3);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray$4(expectedTypes)) {
    return expectedTypes.findIndex((t2) => isSameType(t2, type));
  } else if (isFunction$3(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp(
      key,
      resolvedValues[key],
      opt,
      !hasOwn$1(rawProps, key) && !hasOwn$1(rawProps, hyphenate(key))
    );
  }
}
function validateProp(name, value, prop, isAbsent) {
  const { type, required, validator: validator2, skipCheck } = prop;
  if (required && isAbsent) {
    warn$3('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !required) {
    return;
  }
  if (type != null && type !== true && !skipCheck) {
    let isValid2 = false;
    const types = isArray$4(type) ? type : [type];
    const expectedTypes = [];
    for (let i2 = 0; i2 < types.length && !isValid2; i2++) {
      const { valid, expectedType } = assertType(value, types[i2]);
      expectedTypes.push(expectedType || "");
      isValid2 = valid;
    }
    if (!isValid2) {
      warn$3(getInvalidTypeMessage(name, value, expectedTypes));
      return;
    }
  }
  if (validator2 && !validator2(value)) {
    warn$3('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType = /* @__PURE__ */ makeMap(
  "String,Number,Boolean,Function,Symbol,BigInt"
);
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t2 = typeof value;
    valid = t2 === expectedType.toLowerCase();
    if (!valid && t2 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$3(value);
  } else if (expectedType === "Array") {
    valid = isArray$4(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize$1).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean$2(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean$2(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$4(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot$2 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (currentInstance) {
      warn$3(
        `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
      );
    }
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$3(value)) {
      slots[key] = normalizeSlot$2(key, value, ctx);
    } else if (value != null) {
      {
        warn$3(
          `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
        );
      }
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  if (!isKeepAlive(instance.vnode) && true) {
    warn$3(
      `Non-function value encountered for default slot. Prefer function slots for better performance.`
    );
  }
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(
        children,
        instance.slots = {}
      );
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating) {
        extend$1(slots, children);
        trigger(instance, "set", "$slots");
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$1(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$4(rawRef)) {
    rawRef.forEach(
      (r2, i2) => setRef(
        r2,
        oldRawRef && (isArray$4(oldRawRef) ? oldRawRef[i2] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  if (!owner) {
    warn$3(
      `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
    );
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$3(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn$1(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$3(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$3(ref2);
    const _isRef = isRef(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn$1(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$4(existing) && remove(existing, refValue);
          } else {
            if (!isArray$4(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn$1(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn$1(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else {
          warn$3("Invalid template ref type:", ref2, `(${typeof ref2})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$3("Invalid template ref type:", ref2, `(${typeof ref2})`);
    }
  }
}
let supported$2;
let perf$2;
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf$2.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart(instance, type, isSupported() ? perf$2.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf$2.mark(endTag);
    perf$2.measure(
      `<${formatComponentName(instance, instance.type)}> ${type}`,
      startTag,
      endTag
    );
    perf$2.clearMarks(startTag);
    perf$2.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd(instance, type, isSupported() ? perf$2.now() : Date.now());
  }
}
function isSupported() {
  if (supported$2 !== void 0) {
    return supported$2;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$2 = true;
    perf$2 = window.performance;
  } else {
    supported$2 = false;
  }
  return supported$2;
}
function initFeatureFlags$1() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(
      `Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`
    );
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags$1();
  }
  const target = getGlobalThis$1();
  target.__VUE__ = true;
  {
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment$1:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized,
            internals
          );
        } else {
          warn$3("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el2 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el2, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      isSVG,
      n2.el,
      n2.anchor
    );
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(
        n2.children,
        container,
        anchor,
        isSVG
      );
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el: el2, anchor }, container, nextSibling) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostInsert(el2, container, nextSibling);
      el2 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el2, anchor }) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostRemove(el2);
      el2 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el2;
    let vnodeHook;
    const { type, props, shapeFlag, transition, dirs } = vnode;
    el2 = vnode.el = hostCreateElement(
      vnode.type,
      isSVG,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el2, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el2,
        null,
        parentComponent,
        parentSuspense,
        isSVG && type !== "foreignObject",
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el2, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(
            el2,
            key,
            null,
            props[key],
            isSVG,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in props) {
        hostPatchProp(el2, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el2, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el2, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el2);
    }
    hostInsert(el2, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el2);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el2, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el2, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el2, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el2,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el2 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (isHmrUpdating) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el2,
        parentComponent,
        parentSuspense,
        areChildrenSVG,
        slotScopeIds
      );
      {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el2,
        null,
        parentComponent,
        parentSuspense,
        areChildrenSVG,
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(
          el2,
          n2,
          oldProps,
          newProps,
          parentComponent,
          parentSuspense,
          isSVG
        );
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el2, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el2, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(
                el2,
                key,
                prev,
                next,
                isSVG,
                n1.children,
                parentComponent,
                parentSuspense,
                unmountChildren
              );
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el2, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(
        el2,
        n2,
        oldProps,
        newProps,
        parentComponent,
        parentSuspense,
        isSVG
      );
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el2, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(
              el2,
              key,
              oldProps[key],
              null,
              isSVG,
              vnode.children,
              parentComponent,
              parentSuspense,
              unmountChildren
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(
            el2,
            key,
            prev,
            next,
            isSVG,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el2, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (
      // #5523 dev root fragment may inherit directives
      isHmrUpdating || patchFlag & 2048
    ) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        n2.children,
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds
        );
        {
          traverseStaticChildren(n1, n2);
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          isSVG,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (instance.type.__hmrId) {
      registerHMR(instance);
    }
    {
      pushWarningContext(initialVNode);
      startMeasure(instance, `mount`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure(instance, `init`);
      }
      setupComponent(instance);
      {
        endMeasure(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment$1);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(
      instance,
      initialVNode,
      container,
      anchor,
      parentSuspense,
      isSVG,
      optimized
    );
    {
      popWarningContext();
      endMeasure(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el2, props } = initialVNode;
        const { bm, m: m2, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el2 && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure(instance, `render`);
            }
            instance.subTree = renderComponentRoot(instance);
            {
              endMeasure(instance, `render`);
            }
            {
              startMeasure(instance, `hydrate`);
            }
            hydrateNode(
              el2,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
            {
              endMeasure(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          {
            endMeasure(instance, `render`);
          }
          {
            startMeasure(instance, `patch`);
          }
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            isSVG
          );
          {
            endMeasure(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u2, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext(next || instance.vnode);
        }
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        {
          startMeasure(instance, `render`);
        }
        const nextTree = renderComponentRoot(instance);
        {
          endMeasure(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        {
          endMeasure(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect(u2, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
        {
          devtoolsComponentUpdated(instance);
        }
        {
          popWarningContext();
        }
      }
    };
    const effect = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => effect.run();
    update.id = instance.uid;
    toggleRecurse(instance, true);
    {
      effect.onTrack = instance.rtc ? (e2) => invokeArrayFns(instance.rtc, e2) : void 0;
      effect.onTrigger = instance.rtg ? (e2) => invokeArrayFns(instance.rtg, e2) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs();
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(
        c1[i2],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(
            null,
            c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s22 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s22; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$3(
              `Duplicate keys found during update:`,
              JSON.stringify(nextChild.key),
              `Make sure keys are unique.`
            );
          }
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s22 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s22; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s22] === 0 && isSameVNodeType(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s22] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s22 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el2, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el2, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el2);
        hostInsert(el2, container, anchor);
        queuePostRenderEffect(() => transition.enter(el2), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el2, container, anchor);
        const performLeave = () => {
          leave(el2, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el2, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el2, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref: ref2,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs
    } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          optimized,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el2, anchor, transition } = vnode;
    if (type === Fragment) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment$1) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el2, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el2);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el2, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR(instance);
    }
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs();
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate,
    createApp: createAppAPI(render2, hydrate)
  };
}
function toggleRecurse({ effect, update }, allowed) {
  effect.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$4(ch1) && isArray$4(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
      if (c2.type === Comment$1 && !c2.el) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v3, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v3 = result.length - 1;
      while (u2 < v3) {
        c2 = u2 + v3 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v3 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v3 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v3;
    v3 = p2[v3];
  }
  return result;
}
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString$3(targetSelector)) {
    if (!select) {
      warn$3(
        `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
      );
      return null;
    } else {
      const target = select(targetSelector);
      if (!target) {
        warn$3(
          `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
        );
      }
      return target;
    }
  } else {
    if (!targetSelector && !isTeleportDisabled(props)) {
      warn$3(`Invalid Teleport target: ${targetSelector}`);
    }
    return targetSelector;
  }
};
const TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (isHmrUpdating) {
      optimized = false;
      dynamicChildren = null;
    }
    if (n1 == null) {
      const placeholder = n2.el = createComment("teleport start");
      const mainAnchor = n2.anchor = createComment("teleport end");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target) {
        insert(targetAnchor, target);
        isSVG = isSVG || isTargetSVG(target);
      } else if (!disabled) {
        warn$3("Invalid Teleport target on mount:", target, `(${typeof target})`);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(
            children,
            container2,
            anchor2,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      isSVG = isSVG || isTargetSVG(target);
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          } else {
            warn$3(
              "Invalid Teleport target on update:",
              target,
              `(${typeof target})`
            );
          }
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target,
            targetAnchor,
            internals,
            1
          );
        }
      }
    }
    updateCssVars(n2);
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
    if (target) {
      hostRemove(targetAnchor);
    }
    if (doRemove || !isTeleportDisabled(props)) {
      hostRemove(anchor);
      if (shapeFlag & 16) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const child = children[i2];
          unmount(
            child,
            parentComponent,
            parentSuspense,
            true,
            !!child.dynamicChildren
          );
        }
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el: el2, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el2, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i2 = 0; i2 < children.length; i2++) {
        move(
          children[i2],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector }
}, hydrateChildren) {
  const target = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(
          nextSibling(node),
          vnode,
          parentNode(node),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(
          targetNode,
          vnode,
          target,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node = vnode.children[0].el;
    while (node !== vnode.targetAnchor) {
      if (node.nodeType === 1)
        node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment$1 = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
      /* isBlock */
    )
  );
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
      /* isBlock: prevent a block from tracking itself */
    )
  );
}
function isVNode$1(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
const createVNodeWithArgsTransform = (...args) => {
  return _createVNode(
    ...args
  );
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref: ref2,
  ref_key,
  ref_for
}) => {
  if (typeof ref2 === "number") {
    ref2 = "" + ref2;
  }
  return ref2 != null ? isString$3(ref2) || isRef(ref2) || isFunction$3(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$3(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$3(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (!type) {
      warn$3(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment$1;
  }
  if (isVNode$1(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style: style2 } = props;
    if (klass && !isString$3(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$3(style2)) {
      if (isProxy(style2) && !isArray$4(style2)) {
        style2 = extend$1({}, style2);
      }
      props.style = normalizeStyle(style2);
    }
  }
  const shapeFlag = isString$3(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$3(type) ? 4 : isFunction$3(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy(type)) {
    type = toRaw(type);
    warn$3(
      `Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
      `
Component that was made reactive: `,
      type
    );
  }
  return createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend$1({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref2 ? isArray$4(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray$4(children) ? children.map(deepCloneVNode) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function deepCloneVNode(vnode) {
  const cloned = cloneVNode(vnode);
  if (isArray$4(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode);
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment$1, null, text)) : createVNode(Comment$1, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment$1);
  } else if (isArray$4(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$4(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$3(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$4(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    attrsProxy: null,
    slotsProxy: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let globalCurrentInstanceSetters;
let settersKey = "__VUE_INSTANCE_SETTERS__";
{
  if (!(globalCurrentInstanceSetters = getGlobalThis$1()[settersKey])) {
    globalCurrentInstanceSetters = getGlobalThis$1()[settersKey] = [];
  }
  globalCurrentInstanceSetters.push((i2) => currentInstance = i2);
  internalSetCurrentInstance = (instance) => {
    if (globalCurrentInstanceSetters.length > 1) {
      globalCurrentInstanceSetters.forEach((s3) => s3(instance));
    } else {
      globalCurrentInstanceSetters[0](instance);
    }
  };
}
const setCurrentInstance = (instance) => {
  internalSetCurrentInstance(instance);
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
const isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
function validateComponentName(name, config2) {
  const appIsNativeTag = config2.isNativeTag || NO;
  if (isBuiltInTag(name) || appIsNativeTag(name)) {
    warn$3(
      "Do not use built-in or reserved HTML elements as component id: " + name
    );
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  var _a2;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateComponentName(names[i2], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateDirectiveName(names[i2]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly()) {
      warn$3(
        `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
      );
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  {
    exposePropsOnRenderContext(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [shallowReadonly(instance.props), setupContext]
    );
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a2 = Component.name) != null ? _a2 : "Anonymous";
          warn$3(
            `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
          );
        }
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$3(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$3(setupResult)) {
    if (isVNode$1(setupResult)) {
      warn$3(
        `setup() should not return VNodes directly - return a render function instead.`
      );
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (setupResult !== void 0) {
    warn$3(
      `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
    );
  }
  finishComponentSetup(instance, isSSR);
}
let compile;
const isRuntimeOnly = () => !compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        {
          startMeasure(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$1(
          extend$1(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile(template, finalCompilerOptions);
        {
          endMeasure(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
  if (!Component.render && instance.render === NOOP && !isSSR) {
    if (Component.template) {
      warn$3(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
        /* should not happen */
      );
    } else {
      warn$3(`Component is missing template or render function.`);
    }
  }
}
function getAttrsProxy(instance) {
  return instance.attrsProxy || (instance.attrsProxy = new Proxy(
    instance.attrs,
    {
      get(target, key) {
        markAttrsAccessed();
        track(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$3(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$3(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  ));
}
function getSlotsProxy(instance) {
  return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
    get(target, key) {
      track(instance, "get", "$slots");
      return target[key];
    }
  }));
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$3(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray$4(exposed)) {
            exposedType = "array";
          } else if (isRef(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$3(
            `expose() should be passed a plain object, received ${exposedType}.`
          );
        }
      }
    }
    instance.exposed = exposed || {};
  };
  {
    return Object.freeze({
      get attrs() {
        return getAttrsProxy(instance);
      },
      get slots() {
        return getSlotsProxy(instance);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction$3(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction$3(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
function h$3(type, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$3(propsOrChildren) && !isArray$4(propsOrChildren)) {
      if (isVNode$1(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode$1(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
      warn$3(
        `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
      );
    }
    return ctx;
  }
};
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function initCustomFormatter() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#0b1bc9" };
  const stringStyle = { style: "color:#b62e24" };
  const keywordStyle = { style: "color:#9d288c" };
  const formatter = {
    header(obj) {
      if (!isObject$3(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("data", toRaw(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend$1({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v3, asRaw = true) {
    if (typeof v3 === "number") {
      return ["span", numberStyle, v3];
    } else if (typeof v3 === "string") {
      return ["span", stringStyle, JSON.stringify(v3)];
    } else if (typeof v3 === "boolean") {
      return ["span", keywordStyle, v3];
    } else if (isObject$3(v3)) {
      return ["object", { object: asRaw ? toRaw(v3) : v3 }];
    } else {
      return ["span", stringStyle, String(v3)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction$3(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray$4(opts) && opts.includes(key) || isObject$3(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m2) => isKeyOfType(m2, key, type))) {
      return true;
    }
  }
  function genRefFlag(v3) {
    if (isShallow(v3)) {
      return `ShallowRef`;
    }
    if (v3.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
const version$1 = "3.3.4";
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props) => {
    const el2 = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el2.setAttribute("multiple", props.multiple);
    }
    return el2;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el2, text) => {
    el2.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el2, id2) {
    el2.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass(el2, value, isSVG) {
  const transitionClasses = el2._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el2.removeAttribute("class");
  } else if (isSVG) {
    el2.setAttribute("class", value);
  } else {
    el2.className = value;
  }
}
function patchStyle(el2, prev, next) {
  const style2 = el2.style;
  const isCssString = isString$3(next);
  if (next && !isCssString) {
    if (prev && !isString$3(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style2, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle(style2, key, next[key]);
    }
  } else {
    const currentDisplay = style2.display;
    if (isCssString) {
      if (prev !== next) {
        style2.cssText = next;
      }
    } else if (prev) {
      el2.removeAttribute("style");
    }
    if ("_vod" in el2) {
      style2.display = currentDisplay;
    }
  }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style2, name, val) {
  if (isArray$4(val)) {
    val.forEach((v3) => setStyle(style2, name, v3));
  } else {
    if (val == null)
      val = "";
    {
      if (semicolonRE.test(val)) {
        warn$3(
          `Unexpected semicolon at the end of '${name}' style value: '${val}'`
        );
      }
    }
    if (name.startsWith("--")) {
      style2.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style2, name);
      if (importantRE.test(val)) {
        style2.setProperty(
          hyphenate(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style2[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style2, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style2) {
    return prefixCache[rawName] = name;
  }
  name = capitalize$1(name);
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    const prefixed = prefixes[i2] + name;
    if (prefixed in style2) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el2, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el2.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el2.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr(key);
    if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
      el2.removeAttribute(key);
    } else {
      el2.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp(el2, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el2[key] = value == null ? "" : value;
    return;
  }
  const tag = el2.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    el2._value = value;
    const oldValue = tag === "OPTION" ? el2.getAttribute("value") : el2.value;
    const newValue = value == null ? "" : value;
    if (oldValue !== newValue) {
      el2.value = newValue;
    }
    if (value == null) {
      el2.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el2[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el2[key] = value;
  } catch (e2) {
    if (!needRemove) {
      warn$3(
        `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
        e2
      );
    }
  }
  needRemove && el2.removeAttribute(key);
}
function addEventListener(el2, event, handler, options) {
  el2.addEventListener(event, handler, options);
}
function removeEventListener(el2, event, handler, options) {
  el2.removeEventListener(event, handler, options);
}
function patchEvent(el2, rawName, prevValue, nextValue, instance = null) {
  const invokers = el2._vei || (el2._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el2, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el2, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p$7 = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p$7.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    if (!e2._vts) {
      e2._vts = Date.now();
    } else if (e2._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e2, invoker.value),
      instance,
      5,
      [e2]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e2, value) {
  if (isArray$4(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map((fn2) => (e22) => !e22._stopped && fn2 && fn2(e22));
  } else {
    return value;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el2, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el2, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el2, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el2, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el2, key, nextValue, isSVG)) {
    patchDOMProp(
      el2,
      key,
      nextValue,
      prevChildren,
      parentComponent,
      parentSuspense,
      unmountChildren
    );
  } else {
    if (key === "true-value") {
      el2._trueValue = nextValue;
    } else if (key === "false-value") {
      el2._falseValue = nextValue;
    }
    patchAttr(el2, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el2, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el2 && nativeOnRE.test(key) && isFunction$3(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el2.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el2.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString$3(value)) {
    return false;
  }
  return key in el2;
}
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    warn$3(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect(setVars);
  onMounted(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c2) => setVarsOnVNode(c2, vars));
  } else if (vnode.type === Static) {
    let { el: el2, anchor } = vnode;
    while (el2) {
      setVarsOnNode(el2, vars);
      if (el2 === anchor)
        break;
      el2 = el2.nextSibling;
    }
  }
}
function setVarsOnNode(el2, vars) {
  if (el2.nodeType === 1) {
    const style2 = el2.style;
    for (const key in vars) {
      style2.setProperty(`--${key}`, vars[key]);
    }
  }
}
const TRANSITION = "transition";
const ANIMATION = "animation";
const Transition = (props, { slots }) => h$3(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend$1(
  {},
  BaseTransitionPropsValidators,
  DOMTransitionPropsValidators
);
const callHook = (hook, args = []) => {
  if (isArray$4(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$4(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el2, isAppear, done) => {
    removeTransitionClass(el2, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el2, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el2, done) => {
    el2._isLeaving = false;
    removeTransitionClass(el2, leaveFromClass);
    removeTransitionClass(el2, leaveToClass);
    removeTransitionClass(el2, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el2, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el2, isAppear, done);
      callHook(hook, [el2, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el2, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el2, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el2, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$1(baseProps, {
    onBeforeEnter(el2) {
      callHook(onBeforeEnter, [el2]);
      addTransitionClass(el2, enterFromClass);
      addTransitionClass(el2, enterActiveClass);
    },
    onBeforeAppear(el2) {
      callHook(onBeforeAppear, [el2]);
      addTransitionClass(el2, appearFromClass);
      addTransitionClass(el2, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el2, done) {
      el2._isLeaving = true;
      const resolve2 = () => finishLeave(el2, done);
      addTransitionClass(el2, leaveFromClass);
      forceReflow();
      addTransitionClass(el2, leaveActiveClass);
      nextFrame(() => {
        if (!el2._isLeaving) {
          return;
        }
        removeTransitionClass(el2, leaveFromClass);
        addTransitionClass(el2, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el2, type, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el2, resolve2]);
    },
    onEnterCancelled(el2) {
      finishEnter(el2, false);
      callHook(onEnterCancelled, [el2]);
    },
    onAppearCancelled(el2) {
      finishEnter(el2, true);
      callHook(onAppearCancelled, [el2]);
    },
    onLeaveCancelled(el2) {
      finishLeave(el2);
      callHook(onLeaveCancelled, [el2]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$3(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n2 = NumberOf(duration);
    return [n2, n2];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  {
    assertNumber(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.add(c2));
  (el2._vtc || (el2._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.remove(c2));
  const { _vtc } = el2;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el2._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el2, expectedType, explicitTimeout, resolve2) {
  const id2 = el2._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id2 === el2._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el2, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el2.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e2) => {
    if (e2.target === el2 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el2.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el2, expectedType) {
  const styles = window.getComputedStyle(el2);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION}Property`).toString()
  );
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs(d2) + toMs(delays[i2])));
}
function toMs(s3) {
  return Number(s3.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$1({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c2) => {
        const el2 = c2.el;
        const style2 = el2.style;
        addTransitionClass(el2, moveClass);
        style2.transform = style2.webkitTransform = style2.transitionDuration = "";
        const cb = el2._moveCb = (e2) => {
          if (e2 && e2.target !== el2) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el2.removeEventListener("transitionend", cb);
            el2._moveCb = null;
            removeTransitionClass(el2, moveClass);
          }
        };
        el2.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks(
            child,
            resolveTransitionHooks(child, cssTransitionProps, state, instance)
          );
        } else {
          warn$3(`<TransitionGroup> children must be keyed.`);
        }
      }
      if (prevChildren) {
        for (let i2 = 0; i2 < prevChildren.length; i2++) {
          const child = prevChildren[i2];
          setTransitionHooks(
            child,
            resolveTransitionHooks(child, cssTransitionProps, state, instance)
          );
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
const removeMode = (props) => delete props.mode;
/* @__PURE__ */ removeMode(TransitionGroupImpl.props);
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c2) {
  const el2 = c2.el;
  if (el2._moveCb) {
    el2._moveCb();
  }
  if (el2._enterCb) {
    el2._enterCb();
  }
}
function recordPosition(c2) {
  newPositionMap.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation(c2) {
  const oldPos = positionMap.get(c2);
  const newPos = newPositionMap.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s3 = c2.el.style;
    s3.transform = s3.webkitTransform = `translate(${dx}px,${dy}px)`;
    s3.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform(el2, root, moveClass) {
  const clone2 = el2.cloneNode();
  if (el2._vtc) {
    el2._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
  clone2.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$4(fn2) ? (value) => invokeArrayFns(fn2, value) : fn2;
};
function onCompositionStart(e2) {
  e2.target.composing = true;
}
function onCompositionEnd(e2) {
  const target = e2.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const vModelText = {
  created(el2, { modifiers: { lazy, trim: trim2, number: number2 } }, vnode) {
    el2._assign = getModelAssigner(vnode);
    const castToNumber = number2 || vnode.props && vnode.props.type === "number";
    addEventListener(el2, lazy ? "change" : "input", (e2) => {
      if (e2.target.composing)
        return;
      let domValue = el2.value;
      if (trim2) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el2._assign(domValue);
    });
    if (trim2) {
      addEventListener(el2, "change", () => {
        el2.value = el2.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el2, "compositionstart", onCompositionStart);
      addEventListener(el2, "compositionend", onCompositionEnd);
      addEventListener(el2, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el2, { value }) {
    el2.value = value == null ? "" : value;
  },
  beforeUpdate(el2, { value, modifiers: { lazy, trim: trim2, number: number2 } }, vnode) {
    el2._assign = getModelAssigner(vnode);
    if (el2.composing)
      return;
    if (document.activeElement === el2 && el2.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim2 && el2.value.trim() === value) {
        return;
      }
      if ((number2 || el2.type === "number") && looseToNumber(el2.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue) {
      el2.value = newValue;
    }
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el2, _2, vnode) {
    el2._assign = getModelAssigner(vnode);
    addEventListener(el2, "change", () => {
      const modelValue = el2._modelValue;
      const elementValue = getValue(el2);
      const checked = el2.checked;
      const assign2 = el2._assign;
      if (isArray$4(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign2(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign2(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign2(cloned);
      } else {
        assign2(getCheckboxValue(el2, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el2, binding, vnode) {
    el2._assign = getModelAssigner(vnode);
    setChecked(el2, binding, vnode);
  }
};
function setChecked(el2, { value, oldValue }, vnode) {
  el2._modelValue = value;
  if (isArray$4(value)) {
    el2.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el2.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el2.checked = looseEqual(value, getCheckboxValue(el2, true));
  }
}
const vModelRadio = {
  created(el2, { value }, vnode) {
    el2.checked = looseEqual(value, vnode.props.value);
    el2._assign = getModelAssigner(vnode);
    addEventListener(el2, "change", () => {
      el2._assign(getValue(el2));
    });
  },
  beforeUpdate(el2, { value, oldValue }, vnode) {
    el2._assign = getModelAssigner(vnode);
    if (value !== oldValue) {
      el2.checked = looseEqual(value, vnode.props.value);
    }
  }
};
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el2, { value, modifiers: { number: number2 } }, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el2, "change", () => {
      const selectedVal = Array.prototype.filter.call(el2.options, (o2) => o2.selected).map(
        (o2) => number2 ? looseToNumber(getValue(o2)) : getValue(o2)
      );
      el2._assign(
        el2.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
      );
    });
    el2._assign = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el2, { value }) {
    setSelected(el2, value);
  },
  beforeUpdate(el2, _binding, vnode) {
    el2._assign = getModelAssigner(vnode);
  },
  updated(el2, { value }) {
    setSelected(el2, value);
  }
};
function setSelected(el2, value) {
  const isMultiple = el2.multiple;
  if (isMultiple && !isArray$4(value) && !isSet(value)) {
    warn$3(
      `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`
    );
    return;
  }
  for (let i2 = 0, l2 = el2.options.length; i2 < l2; i2++) {
    const option = el2.options[i2];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray$4(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el2.selectedIndex !== i2)
          el2.selectedIndex = i2;
        return;
      }
    }
  }
  if (!isMultiple && el2.selectedIndex !== -1) {
    el2.selectedIndex = -1;
  }
}
function getValue(el2) {
  return "_value" in el2 ? el2._value : el2.value;
}
function getCheckboxValue(el2, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el2 ? el2[key] : checked;
}
const vModelDynamic = {
  created(el2, binding, vnode) {
    callModelHook(el2, binding, vnode, null, "created");
  },
  mounted(el2, binding, vnode) {
    callModelHook(el2, binding, vnode, null, "mounted");
  },
  beforeUpdate(el2, binding, vnode, prevVNode) {
    callModelHook(el2, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el2, binding, vnode, prevVNode) {
    callModelHook(el2, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el2, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(
    el2.tagName,
    vnode.props && vnode.props.type
  );
  const fn2 = modelToUse[hook];
  fn2 && fn2(el2, binding, vnode, prevVNode);
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e2) => e2.stopPropagation(),
  prevent: (e2) => e2.preventDefault(),
  self: (e2) => e2.target !== e2.currentTarget,
  ctrl: (e2) => !e2.ctrlKey,
  shift: (e2) => !e2.shiftKey,
  alt: (e2) => !e2.altKey,
  meta: (e2) => !e2.metaKey,
  left: (e2) => "button" in e2 && e2.button !== 0,
  middle: (e2) => "button" in e2 && e2.button !== 1,
  right: (e2) => "button" in e2 && e2.button !== 2,
  exact: (e2, modifiers) => systemModifiers.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers = (fn2, modifiers) => {
  return (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards[modifiers[i2]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  };
};
const rendererOptions = /* @__PURE__ */ extend$1({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$3(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn$3(
          `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
        );
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn$3(msg);
        return compilerOptions;
      },
      set() {
        warn$3(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if (isString$3(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn$3(
        `Failed to mount app: mount target selector "${container}" returned null.`
      );
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn$3(
      `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
    );
  }
  return container;
}
function initDev() {
  {
    initCustomFormatter();
  }
}
{
  initDev();
}
const style = "";
const matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const iconDefaults = Object.freeze({
  left: 0,
  top: 0,
  width: 16,
  height: 16,
  rotate: 0,
  vFlip: false,
  hFlip: false
});
function fullIcon(data) {
  return { ...iconDefaults, ...data };
}
const stringToIcon = (value, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name2 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name2
    };
    return validate && !validateIcon(result) ? null : result;
  }
  const name = colonSeparated[0];
  const dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIcon(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name
    };
    return validate && !validateIcon(result, allowSimpleName) ? null : result;
  }
  return null;
};
const validateIcon = (icon, allowSimpleName) => {
  if (!icon) {
    return false;
  }
  return !!((icon.provider === "" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchName)) && icon.name.match(matchName));
};
function mergeIconData(icon, alias) {
  const result = { ...icon };
  for (const key in iconDefaults) {
    const prop = key;
    if (alias[prop] !== void 0) {
      const value = alias[prop];
      if (result[prop] === void 0) {
        result[prop] = value;
        continue;
      }
      switch (prop) {
        case "rotate":
          result[prop] = (result[prop] + value) % 4;
          break;
        case "hFlip":
        case "vFlip":
          result[prop] = value !== result[prop];
          break;
        default:
          result[prop] = value;
      }
    }
  }
  return result;
}
function getIconData$1(data, name, full = false) {
  function getIcon(name2, iteration) {
    if (data.icons[name2] !== void 0) {
      return Object.assign({}, data.icons[name2]);
    }
    if (iteration > 5) {
      return null;
    }
    const aliases = data.aliases;
    if (aliases && aliases[name2] !== void 0) {
      const item = aliases[name2];
      const result2 = getIcon(item.parent, iteration + 1);
      if (result2) {
        return mergeIconData(result2, item);
      }
      return result2;
    }
    const chars = data.chars;
    if (!iteration && chars && chars[name2] !== void 0) {
      return getIcon(chars[name2], iteration + 1);
    }
    return null;
  }
  const result = getIcon(name, 0);
  if (result) {
    for (const key in iconDefaults) {
      if (result[key] === void 0 && data[key] !== void 0) {
        result[key] = data[key];
      }
    }
  }
  return result && full ? fullIcon(result) : result;
}
function isVariation(item) {
  for (const key in iconDefaults) {
    if (item[key] !== void 0) {
      return true;
    }
  }
  return false;
}
function parseIconSet(data, callback, options) {
  options = options || {};
  const names = [];
  if (typeof data !== "object" || typeof data.icons !== "object") {
    return names;
  }
  if (data.not_found instanceof Array) {
    data.not_found.forEach((name) => {
      callback(name, null);
      names.push(name);
    });
  }
  const icons = data.icons;
  Object.keys(icons).forEach((name) => {
    const iconData = getIconData$1(data, name, true);
    if (iconData) {
      callback(name, iconData);
      names.push(name);
    }
  });
  const parseAliases = options.aliases || "all";
  if (parseAliases !== "none" && typeof data.aliases === "object") {
    const aliases = data.aliases;
    Object.keys(aliases).forEach((name) => {
      if (parseAliases === "variations" && isVariation(aliases[name])) {
        return;
      }
      const iconData = getIconData$1(data, name, true);
      if (iconData) {
        callback(name, iconData);
        names.push(name);
      }
    });
  }
  return names;
}
const optionalProperties = {
  provider: "string",
  aliases: "object",
  not_found: "object"
};
for (const prop in iconDefaults) {
  optionalProperties[prop] = typeof iconDefaults[prop];
}
function quicklyValidateIconSet(obj) {
  if (typeof obj !== "object" || obj === null) {
    return null;
  }
  const data = obj;
  if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
    return null;
  }
  for (const prop in optionalProperties) {
    if (obj[prop] !== void 0 && typeof obj[prop] !== optionalProperties[prop]) {
      return null;
    }
  }
  const icons = data.icons;
  for (const name in icons) {
    const icon = icons[name];
    if (!name.match(matchName) || typeof icon.body !== "string") {
      return null;
    }
    for (const prop in iconDefaults) {
      if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
        return null;
      }
    }
  }
  const aliases = data.aliases;
  if (aliases) {
    for (const name in aliases) {
      const icon = aliases[name];
      const parent = icon.parent;
      if (!name.match(matchName) || typeof parent !== "string" || !icons[parent] && !aliases[parent]) {
        return null;
      }
      for (const prop in iconDefaults) {
        if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
          return null;
        }
      }
    }
  }
  return data;
}
const storageVersion = 1;
let storage$1 = /* @__PURE__ */ Object.create(null);
try {
  const w2 = window || self;
  if (w2 && w2._iconifyStorage.version === storageVersion) {
    storage$1 = w2._iconifyStorage.storage;
  }
} catch (err) {
}
function newStorage(provider, prefix) {
  return {
    provider,
    prefix,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ Object.create(null)
  };
}
function getStorage(provider, prefix) {
  if (storage$1[provider] === void 0) {
    storage$1[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerStorage = storage$1[provider];
  if (providerStorage[prefix] === void 0) {
    providerStorage[prefix] = newStorage(provider, prefix);
  }
  return providerStorage[prefix];
}
function addIconSet(storage2, data) {
  if (!quicklyValidateIconSet(data)) {
    return [];
  }
  const t2 = Date.now();
  return parseIconSet(data, (name, icon) => {
    if (icon) {
      storage2.icons[name] = icon;
    } else {
      storage2.missing[name] = t2;
    }
  });
}
function addIconToStorage(storage2, name, icon) {
  try {
    if (typeof icon.body === "string") {
      storage2.icons[name] = Object.freeze(fullIcon(icon));
      return true;
    }
  } catch (err) {
  }
  return false;
}
function getIconFromStorage(storage2, name) {
  const value = storage2.icons[name];
  return value === void 0 ? null : value;
}
let simpleNames = false;
function allowSimpleNames(allow) {
  if (typeof allow === "boolean") {
    simpleNames = allow;
  }
  return simpleNames;
}
function getIconData(name) {
  const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
  return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;
}
function addIcon(name, data) {
  const icon = stringToIcon(name, true, simpleNames);
  if (!icon) {
    return false;
  }
  const storage2 = getStorage(icon.provider, icon.prefix);
  return addIconToStorage(storage2, icon.name, data);
}
function addCollection(data, provider) {
  if (typeof data !== "object") {
    return false;
  }
  if (typeof provider !== "string") {
    provider = typeof data.provider === "string" ? data.provider : "";
  }
  if (simpleNames && provider === "" && (typeof data.prefix !== "string" || data.prefix === "")) {
    let added = false;
    if (quicklyValidateIconSet(data)) {
      data.prefix = "";
      parseIconSet(data, (name, icon) => {
        if (icon && addIcon(name, icon)) {
          added = true;
        }
      });
    }
    return added;
  }
  if (typeof data.prefix !== "string" || !validateIcon({
    provider,
    prefix: data.prefix,
    name: "a"
  })) {
    return false;
  }
  const storage2 = getStorage(provider, data.prefix);
  return !!addIconSet(storage2, data);
}
const defaults$2 = Object.freeze({
  inline: false,
  width: null,
  height: null,
  hAlign: "center",
  vAlign: "middle",
  slice: false,
  hFlip: false,
  vFlip: false,
  rotate: 0
});
function mergeCustomisations(defaults2, item) {
  const result = {};
  for (const key in defaults2) {
    const attr = key;
    result[attr] = defaults2[attr];
    if (item[attr] === void 0) {
      continue;
    }
    const value = item[attr];
    switch (attr) {
      case "inline":
      case "slice":
        if (typeof value === "boolean") {
          result[attr] = value;
        }
        break;
      case "hFlip":
      case "vFlip":
        if (value === true) {
          result[attr] = !result[attr];
        }
        break;
      case "hAlign":
      case "vAlign":
        if (typeof value === "string" && value !== "") {
          result[attr] = value;
        }
        break;
      case "width":
      case "height":
        if (typeof value === "string" && value !== "" || typeof value === "number" && value || value === null) {
          result[attr] = value;
        }
        break;
      case "rotate":
        if (typeof value === "number") {
          result[attr] += value;
        }
        break;
    }
  }
  return result;
}
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size2, ratio, precision) {
  if (ratio === 1) {
    return size2;
  }
  precision = precision === void 0 ? 100 : precision;
  if (typeof size2 === "number") {
    return Math.ceil(size2 * ratio * precision) / precision;
  }
  if (typeof size2 !== "string") {
    return size2;
  }
  const oldParts = size2.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size2;
  }
  const newParts = [];
  let code2 = oldParts.shift();
  let isNumber2 = unitsTest.test(code2);
  while (true) {
    if (isNumber2) {
      const num = parseFloat(code2);
      if (isNaN(num)) {
        newParts.push(code2);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code2);
    }
    code2 = oldParts.shift();
    if (code2 === void 0) {
      return newParts.join("");
    }
    isNumber2 = !isNumber2;
  }
}
function preserveAspectRatio(props) {
  let result = "";
  switch (props.hAlign) {
    case "left":
      result += "xMin";
      break;
    case "right":
      result += "xMax";
      break;
    default:
      result += "xMid";
  }
  switch (props.vAlign) {
    case "top":
      result += "YMin";
      break;
    case "bottom":
      result += "YMax";
      break;
    default:
      result += "YMid";
  }
  result += props.slice ? " slice" : " meet";
  return result;
}
function iconToSVG(icon, customisations) {
  const box = {
    left: icon.left,
    top: icon.top,
    width: icon.width,
    height: icon.height
  };
  let body = icon.body;
  [icon, customisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")");
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")");
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
      case 2:
        transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== 0 || box.top !== 0) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>";
    }
  });
  let width, height;
  if (customisations.width === null && customisations.height === null) {
    height = "1em";
    width = calculateSize(height, box.width / box.height);
  } else if (customisations.width !== null && customisations.height !== null) {
    width = customisations.width;
    height = customisations.height;
  } else if (customisations.height !== null) {
    height = customisations.height;
    width = calculateSize(height, box.width / box.height);
  } else {
    width = customisations.width;
    height = calculateSize(width, box.height / box.width);
  }
  if (width === "auto") {
    width = box.width;
  }
  if (height === "auto") {
    height = box.height;
  }
  width = typeof width === "string" ? width : width.toString() + "";
  height = typeof height === "string" ? height : height.toString() + "";
  const result = {
    attributes: {
      width,
      height,
      preserveAspectRatio: preserveAspectRatio(customisations),
      viewBox: box.left.toString() + " " + box.top.toString() + " " + box.width.toString() + " " + box.height.toString()
    },
    body
  };
  if (customisations.inline) {
    result.inline = true;
  }
  return result;
}
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
  const ids = [];
  let match;
  while (match = regex.exec(body)) {
    ids.push(match[1]);
  }
  if (!ids.length) {
    return body;
  }
  ids.forEach((id2) => {
    const newID = typeof prefix === "function" ? prefix(id2) : prefix + (counter++).toString();
    const escapedID = id2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + "$3");
  });
  return body;
}
const storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources === "string") {
    resources = [source.resources];
  } else {
    resources = source.resources;
    if (!(resources instanceof Array) || !resources.length) {
      return null;
    }
  }
  const result = {
    resources,
    path: source.path === void 0 ? "/" : source.path,
    maxURL: source.maxURL ? source.maxURL : 500,
    rotate: source.rotate ? source.rotate : 750,
    timeout: source.timeout ? source.timeout : 5e3,
    random: source.random === true,
    index: source.index ? source.index : 0,
    dataAfterTimeout: source.dataAfterTimeout !== false
  };
  return result;
}
const configStorage = /* @__PURE__ */ Object.create(null);
const fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
const fallBackAPI = [];
while (fallBackAPISources.length > 0) {
  if (fallBackAPISources.length === 1) {
    fallBackAPI.push(fallBackAPISources.shift());
  } else {
    if (Math.random() > 0.5) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      fallBackAPI.push(fallBackAPISources.pop());
    }
  }
}
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  const config2 = createAPIConfig(customConfig);
  if (config2 === null) {
    return false;
  }
  configStorage[provider] = config2;
  return true;
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
const mergeParams = (base, params) => {
  let result = base, hasParams = result.indexOf("?") !== -1;
  function paramToString(value) {
    switch (typeof value) {
      case "boolean":
        return value ? "true" : "false";
      case "number":
        return encodeURIComponent(value);
      case "string":
        return encodeURIComponent(value);
      default:
        throw new Error("Invalid parameter");
    }
  }
  Object.keys(params).forEach((key) => {
    let value;
    try {
      value = paramToString(params[key]);
    } catch (err) {
      return;
    }
    result += (hasParams ? "&" : "?") + encodeURIComponent(key) + "=" + value;
    hasParams = true;
  });
  return result;
};
const maxLengthCache = {};
const pathCache = {};
const detectFetch = () => {
  let callback;
  try {
    callback = fetch;
    if (typeof callback === "function") {
      return callback;
    }
  } catch (err) {
  }
  return null;
};
let fetchModule = detectFetch();
function calculateMaxLength(provider, prefix) {
  const config2 = getAPIConfig(provider);
  if (!config2) {
    return 0;
  }
  let result;
  if (!config2.maxURL) {
    result = 0;
  } else {
    let maxHostLength = 0;
    config2.resources.forEach((item) => {
      const host = item;
      maxHostLength = Math.max(maxHostLength, host.length);
    });
    const url = mergeParams(prefix + ".json", {
      icons: ""
    });
    result = config2.maxURL - maxHostLength - config2.path.length - url.length;
  }
  const cacheKey = provider + ":" + prefix;
  pathCache[provider] = config2.path;
  maxLengthCache[cacheKey] = result;
  return result;
}
function shouldAbort(status) {
  return status === 404;
}
const prepare = (provider, prefix, icons) => {
  const results = [];
  let maxLength = maxLengthCache[prefix];
  if (maxLength === void 0) {
    maxLength = calculateMaxLength(provider, prefix);
  }
  const type = "icons";
  let item = {
    type,
    provider,
    prefix,
    icons: []
  };
  let length = 0;
  icons.forEach((name, index) => {
    length += name.length + 1;
    if (length >= maxLength && index > 0) {
      results.push(item);
      item = {
        type,
        provider,
        prefix,
        icons: []
      };
      length = name.length;
    }
    item.icons.push(name);
  });
  results.push(item);
  return results;
};
function getPath(provider) {
  if (typeof provider === "string") {
    if (pathCache[provider] === void 0) {
      const config2 = getAPIConfig(provider);
      if (!config2) {
        return "/";
      }
      pathCache[provider] = config2.path;
    }
    return pathCache[provider];
  }
  return "/";
}
const send = (host, params, callback) => {
  if (!fetchModule) {
    callback("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      const prefix = params.prefix;
      const icons = params.icons;
      const iconsList = icons.join(",");
      path += mergeParams(prefix + ".json", {
        icons: iconsList
      });
      break;
    }
    case "custom": {
      const uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    const status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    defaultError = 501;
    return response.json();
  }).then((data) => {
    if (typeof data !== "object" || data === null) {
      setTimeout(() => {
        callback("next", defaultError);
      });
      return;
    }
    setTimeout(() => {
      callback("success", data);
    });
  }).catch(() => {
    callback("next", defaultError);
  });
};
const fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  const result = {
    loaded: [],
    missing: [],
    pending: []
  };
  const storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a2, b3) => {
    if (a2.provider !== b3.provider) {
      return a2.provider.localeCompare(b3.provider);
    }
    if (a2.prefix !== b3.prefix) {
      return a2.prefix.localeCompare(b3.prefix);
    }
    return a2.name.localeCompare(b3.name);
  });
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  icons.forEach((icon) => {
    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
      return;
    }
    lastIcon = icon;
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    if (storage2[provider] === void 0) {
      storage2[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerStorage = storage2[provider];
    if (providerStorage[prefix] === void 0) {
      providerStorage[prefix] = getStorage(provider, prefix);
    }
    const localStorage2 = providerStorage[prefix];
    let list;
    if (localStorage2.icons[name] !== void 0) {
      list = result.loaded;
    } else if (prefix === "" || localStorage2.missing[name] !== void 0) {
      list = result.missing;
    } else {
      list = result.pending;
    }
    const item = {
      provider,
      prefix,
      name
    };
    list.push(item);
  });
  return result;
}
const callbacks = /* @__PURE__ */ Object.create(null);
const pendingUpdates = /* @__PURE__ */ Object.create(null);
function removeCallback(sources, id2) {
  sources.forEach((source) => {
    const provider = source.provider;
    if (callbacks[provider] === void 0) {
      return;
    }
    const providerCallbacks = callbacks[provider];
    const prefix = source.prefix;
    const items = providerCallbacks[prefix];
    if (items) {
      providerCallbacks[prefix] = items.filter((row) => row.id !== id2);
    }
  });
}
function updateCallbacks(provider, prefix) {
  if (pendingUpdates[provider] === void 0) {
    pendingUpdates[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingUpdates = pendingUpdates[provider];
  if (!providerPendingUpdates[prefix]) {
    providerPendingUpdates[prefix] = true;
    setTimeout(() => {
      providerPendingUpdates[prefix] = false;
      if (callbacks[provider] === void 0 || callbacks[provider][prefix] === void 0) {
        return;
      }
      const items = callbacks[provider][prefix].slice(0);
      if (!items.length) {
        return;
      }
      const storage2 = getStorage(provider, prefix);
      let hasPending = false;
      items.forEach((item) => {
        const icons = item.icons;
        const oldLength = icons.pending.length;
        icons.pending = icons.pending.filter((icon) => {
          if (icon.prefix !== prefix) {
            return true;
          }
          const name = icon.name;
          if (storage2.icons[name] !== void 0) {
            icons.loaded.push({
              provider,
              prefix,
              name
            });
          } else if (storage2.missing[name] !== void 0) {
            icons.missing.push({
              provider,
              prefix,
              name
            });
          } else {
            hasPending = true;
            return true;
          }
          return false;
        });
        if (icons.pending.length !== oldLength) {
          if (!hasPending) {
            removeCallback([
              {
                provider,
                prefix
              }
            ], item.id);
          }
          item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);
        }
      });
    });
  }
}
let idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
  const id2 = idCounter++;
  const abort = removeCallback.bind(null, pendingSources, id2);
  if (!icons.pending.length) {
    return abort;
  }
  const item = {
    id: id2,
    icons,
    callback,
    abort
  };
  pendingSources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (callbacks[provider] === void 0) {
      callbacks[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerCallbacks = callbacks[provider];
    if (providerCallbacks[prefix] === void 0) {
      providerCallbacks[prefix] = [];
    }
    providerCallbacks[prefix].push(item);
  });
  return abort;
}
function listToIcons(list, validate = true, simpleNames2 = false) {
  const result = [];
  list.forEach((item) => {
    const icon = typeof item === "string" ? stringToIcon(item, false, simpleNames2) : item;
    if (!validate || validateIcon(icon, simpleNames2)) {
      result.push({
        provider: icon.provider,
        prefix: icon.prefix,
        name: icon.name
      });
    }
  });
  return result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function sendQuery(config2, payload, query, done) {
  const resourcesCount = config2.resources.length;
  const startIndex = config2.random ? Math.floor(Math.random() * resourcesCount) : config2.index;
  let resources;
  if (config2.random) {
    let list = config2.resources.slice(0);
    resources = [];
    while (list.length > 1) {
      const nextIndex = Math.floor(Math.random() * list.length);
      resources.push(list[nextIndex]);
      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
    }
    resources = resources.concat(list);
  } else {
    resources = config2.resources.slice(startIndex).concat(config2.resources.slice(0, startIndex));
  }
  const startTime = Date.now();
  let status = "pending";
  let queriesSent = 0;
  let lastError;
  let timer = null;
  let queue2 = [];
  let doneCallbacks = [];
  if (typeof done === "function") {
    doneCallbacks.push(done);
  }
  function resetTimer() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function abort() {
    if (status === "pending") {
      status = "aborted";
    }
    resetTimer();
    queue2.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue2 = [];
  }
  function subscribe(callback, overwrite) {
    if (overwrite) {
      doneCallbacks = [];
    }
    if (typeof callback === "function") {
      doneCallbacks.push(callback);
    }
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue2.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed";
    doneCallbacks.forEach((callback) => {
      callback(void 0, lastError);
    });
  }
  function clearQueue() {
    queue2.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue2 = [];
  }
  function moduleResponse(item, response, data) {
    const isError = response !== "success";
    queue2 = queue2.filter((queued) => queued !== item);
    switch (status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config2.dataAfterTimeout) {
          return;
        }
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data;
      failQuery();
      return;
    }
    if (isError) {
      lastError = data;
      if (!queue2.length) {
        if (!resources.length) {
          failQuery();
        } else {
          execNext();
        }
      }
      return;
    }
    resetTimer();
    clearQueue();
    if (!config2.random) {
      const index = config2.resources.indexOf(item.resource);
      if (index !== -1 && index !== config2.index) {
        config2.index = index;
      }
    }
    status = "completed";
    doneCallbacks.forEach((callback) => {
      callback(data);
    });
  }
  function execNext() {
    if (status !== "pending") {
      return;
    }
    resetTimer();
    const resource2 = resources.shift();
    if (resource2 === void 0) {
      if (queue2.length) {
        timer = setTimeout(() => {
          resetTimer();
          if (status === "pending") {
            clearQueue();
            failQuery();
          }
        }, config2.timeout);
        return;
      }
      failQuery();
      return;
    }
    const item = {
      status: "pending",
      resource: resource2,
      callback: (status2, data) => {
        moduleResponse(item, status2, data);
      }
    };
    queue2.push(item);
    queriesSent++;
    timer = setTimeout(execNext, config2.rotate);
    query(resource2, payload, item.callback);
  }
  setTimeout(execNext);
  return getQueryStatus;
}
function setConfig(config2) {
  if (typeof config2 !== "object" || typeof config2.resources !== "object" || !(config2.resources instanceof Array) || !config2.resources.length) {
    throw new Error("Invalid Reduncancy configuration");
  }
  const newConfig = /* @__PURE__ */ Object.create(null);
  let key;
  for (key in defaultConfig) {
    if (config2[key] !== void 0) {
      newConfig[key] = config2[key];
    } else {
      newConfig[key] = defaultConfig[key];
    }
  }
  return newConfig;
}
function initRedundancy(cfg) {
  const config2 = setConfig(cfg);
  let queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    const query2 = sendQuery(config2, payload, queryCallback, (data, error) => {
      cleanup();
      if (doneCallback) {
        doneCallback(data, error);
      }
    });
    queries.push(query2);
    return query2;
  }
  function find(callback) {
    const result = queries.find((value) => {
      return callback(value);
    });
    return result !== void 0 ? result : null;
  }
  const instance = {
    query,
    find,
    setIndex: (index) => {
      config2.index = index;
    },
    getIndex: () => config2.index,
    cleanup
  };
  return instance;
}
function emptyCallback$1() {
}
const redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (redundancyCache[provider] === void 0) {
    const config2 = getAPIConfig(provider);
    if (!config2) {
      return;
    }
    const redundancy = initRedundancy(config2);
    const cachedReundancy = {
      config: config2,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
  let redundancy;
  let send2;
  if (typeof target === "string") {
    const api = getAPIModule(target);
    if (!api) {
      callback(void 0, 424);
      return emptyCallback$1;
    }
    send2 = api.send;
    const cached = getRedundancyCache(target);
    if (cached) {
      redundancy = cached.redundancy;
    }
  } else {
    const config2 = createAPIConfig(target);
    if (config2) {
      redundancy = initRedundancy(config2);
      const moduleKey = target.resources ? target.resources[0] : "";
      const api = getAPIModule(moduleKey);
      if (api) {
        send2 = api.send;
      }
    }
  }
  if (!redundancy || !send2) {
    callback(void 0, 424);
    return emptyCallback$1;
  }
  return redundancy.query(query, send2, callback)().abort;
}
const cache$1 = {};
function emptyCallback() {
}
const pendingIcons = /* @__PURE__ */ Object.create(null);
const iconsToLoad = /* @__PURE__ */ Object.create(null);
const loaderFlags = /* @__PURE__ */ Object.create(null);
const queueFlags = /* @__PURE__ */ Object.create(null);
function loadedNewIcons(provider, prefix) {
  if (loaderFlags[provider] === void 0) {
    loaderFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerLoaderFlags = loaderFlags[provider];
  if (!providerLoaderFlags[prefix]) {
    providerLoaderFlags[prefix] = true;
    setTimeout(() => {
      providerLoaderFlags[prefix] = false;
      updateCallbacks(provider, prefix);
    });
  }
}
const errorsCache = /* @__PURE__ */ Object.create(null);
function loadNewIcons(provider, prefix, icons) {
  function err() {
    const key = (provider === "" ? "" : "@" + provider + ":") + prefix;
    const time = Math.floor(Date.now() / 6e4);
    if (errorsCache[key] < time) {
      errorsCache[key] = time;
      console.error('Unable to retrieve icons for "' + key + '" because API is not configured properly.');
    }
  }
  if (iconsToLoad[provider] === void 0) {
    iconsToLoad[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerIconsToLoad = iconsToLoad[provider];
  if (queueFlags[provider] === void 0) {
    queueFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerQueueFlags = queueFlags[provider];
  if (pendingIcons[provider] === void 0) {
    pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingIcons = pendingIcons[provider];
  if (providerIconsToLoad[prefix] === void 0) {
    providerIconsToLoad[prefix] = icons;
  } else {
    providerIconsToLoad[prefix] = providerIconsToLoad[prefix].concat(icons).sort();
  }
  if (!providerQueueFlags[prefix]) {
    providerQueueFlags[prefix] = true;
    setTimeout(() => {
      providerQueueFlags[prefix] = false;
      const icons2 = providerIconsToLoad[prefix];
      delete providerIconsToLoad[prefix];
      const api = getAPIModule(provider);
      if (!api) {
        err();
        return;
      }
      const params = api.prepare(provider, prefix, icons2);
      params.forEach((item) => {
        sendAPIQuery(provider, item, (data, error) => {
          const storage2 = getStorage(provider, prefix);
          if (typeof data !== "object") {
            if (error !== 404) {
              return;
            }
            const t2 = Date.now();
            item.icons.forEach((name) => {
              storage2.missing[name] = t2;
            });
          } else {
            try {
              const parsed = addIconSet(storage2, data);
              if (!parsed.length) {
                return;
              }
              const pending = providerPendingIcons[prefix];
              parsed.forEach((name) => {
                delete pending[name];
              });
              if (cache$1.store) {
                cache$1.store(provider, data);
              }
            } catch (err2) {
              console.error(err2);
            }
          }
          loadedNewIcons(provider, prefix);
        });
      });
    });
  }
}
const loadIcons = (icons, callback) => {
  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
  const sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = true;
    if (callback) {
      setTimeout(() => {
        if (callCallback) {
          callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
        }
      });
    }
    return () => {
      callCallback = false;
    };
  }
  const newIcons = /* @__PURE__ */ Object.create(null);
  const sources = [];
  let lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    if (prefix === lastPrefix && provider === lastProvider) {
      return;
    }
    lastProvider = provider;
    lastPrefix = prefix;
    sources.push({
      provider,
      prefix
    });
    if (pendingIcons[provider] === void 0) {
      pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerPendingIcons = pendingIcons[provider];
    if (providerPendingIcons[prefix] === void 0) {
      providerPendingIcons[prefix] = /* @__PURE__ */ Object.create(null);
    }
    if (newIcons[provider] === void 0) {
      newIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerNewIcons = newIcons[provider];
    if (providerNewIcons[prefix] === void 0) {
      providerNewIcons[prefix] = [];
    }
  });
  const time = Date.now();
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    const pendingQueue = pendingIcons[provider][prefix];
    if (pendingQueue[name] === void 0) {
      pendingQueue[name] = time;
      newIcons[provider][prefix].push(name);
    }
  });
  sources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (newIcons[provider][prefix].length) {
      loadNewIcons(provider, prefix, newIcons[provider][prefix]);
    }
  });
  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
const cacheVersion = "iconify2";
const cachePrefix = "iconify";
const countKey = cachePrefix + "-count";
const versionKey = cachePrefix + "-version";
const hour = 36e5;
const cacheExpiration = 168;
const config$1 = {
  local: true,
  session: true
};
let loaded = false;
const count = {
  local: 0,
  session: 0
};
const emptyList = {
  local: [],
  session: []
};
let _window = typeof window === "undefined" ? {} : window;
function getGlobal(key) {
  const attr = key + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length === "number") {
      return _window[attr];
    }
  } catch (err) {
  }
  config$1[key] = false;
  return null;
}
function setCount(storage2, key, value) {
  try {
    storage2.setItem(countKey, value.toString());
    count[key] = value;
    return true;
  } catch (err) {
    return false;
  }
}
function getCount(storage2) {
  const count2 = storage2.getItem(countKey);
  if (count2) {
    const total = parseInt(count2);
    return total ? total : 0;
  }
  return 0;
}
function initCache(storage2, key) {
  try {
    storage2.setItem(versionKey, cacheVersion);
  } catch (err) {
  }
  setCount(storage2, key, 0);
}
function destroyCache(storage2) {
  try {
    const total = getCount(storage2);
    for (let i2 = 0; i2 < total; i2++) {
      storage2.removeItem(cachePrefix + i2.toString());
    }
  } catch (err) {
  }
}
const loadCache = () => {
  if (loaded) {
    return;
  }
  loaded = true;
  const minTime = Math.floor(Date.now() / hour) - cacheExpiration;
  function load(key) {
    const func = getGlobal(key);
    if (!func) {
      return;
    }
    const getItem = (index) => {
      const name = cachePrefix + index.toString();
      const item = func.getItem(name);
      if (typeof item !== "string") {
        return false;
      }
      let valid = true;
      try {
        const data = JSON.parse(item);
        if (typeof data !== "object" || typeof data.cached !== "number" || data.cached < minTime || typeof data.provider !== "string" || typeof data.data !== "object" || typeof data.data.prefix !== "string") {
          valid = false;
        } else {
          const provider = data.provider;
          const prefix = data.data.prefix;
          const storage2 = getStorage(provider, prefix);
          valid = addIconSet(storage2, data.data).length > 0;
        }
      } catch (err) {
        valid = false;
      }
      if (!valid) {
        func.removeItem(name);
      }
      return valid;
    };
    try {
      const version2 = func.getItem(versionKey);
      if (version2 !== cacheVersion) {
        if (version2) {
          destroyCache(func);
        }
        initCache(func, key);
        return;
      }
      let total = getCount(func);
      for (let i2 = total - 1; i2 >= 0; i2--) {
        if (!getItem(i2)) {
          if (i2 === total - 1) {
            total--;
          } else {
            emptyList[key].push(i2);
          }
        }
      }
      setCount(func, key, total);
    } catch (err) {
    }
  }
  for (const key in config$1) {
    load(key);
  }
};
const storeCache = (provider, data) => {
  if (!loaded) {
    loadCache();
  }
  function store(key) {
    if (!config$1[key]) {
      return false;
    }
    const func = getGlobal(key);
    if (!func) {
      return false;
    }
    let index = emptyList[key].shift();
    if (index === void 0) {
      index = count[key];
      if (!setCount(func, key, index + 1)) {
        return false;
      }
    }
    try {
      const item = {
        cached: Math.floor(Date.now() / hour),
        provider,
        data
      };
      func.setItem(cachePrefix + index.toString(), JSON.stringify(item));
    } catch (err) {
      return false;
    }
    return true;
  }
  if (!Object.keys(data.icons).length) {
    return;
  }
  if (data.not_found) {
    data = Object.assign({}, data);
    delete data.not_found;
  }
  if (!store("local")) {
    store("session");
  }
};
const separator = /[\s,]+/;
function flipFromString(custom2, flip2) {
  flip2.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "horizontal":
        custom2.hFlip = true;
        break;
      case "vertical":
        custom2.vFlip = true;
        break;
    }
  });
}
function alignmentFromString(custom2, align) {
  align.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "left":
      case "center":
      case "right":
        custom2.hAlign = value;
        break;
      case "top":
      case "middle":
      case "bottom":
        custom2.vAlign = value;
        break;
      case "slice":
      case "crop":
        custom2.slice = true;
        break;
      case "meet":
        custom2.slice = false;
    }
  });
}
function rotateFromString(value, defaultValue = 0) {
  const units = value.replace(/^-?[0-9.]*/, "");
  function cleanup(value2) {
    while (value2 < 0) {
      value2 += 4;
    }
    return value2 % 4;
  }
  if (units === "") {
    const num = parseInt(value);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value.slice(0, value.length - units.length));
      if (isNaN(num)) {
        return 0;
      }
      num = num / split;
      return num % 1 === 0 ? cleanup(num) : 0;
    }
  }
  return defaultValue;
}
const svgDefaults = {
  "xmlns": "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  "aria-hidden": true,
  "role": "img"
};
let customisationAliases = {};
["horizontal", "vertical"].forEach((prefix) => {
  ["Align", "Flip"].forEach((suffix) => {
    const attr = prefix.slice(0, 1) + suffix;
    const value = {
      attr,
      boolean: suffix === "Flip"
    };
    customisationAliases[prefix + "-" + suffix.toLowerCase()] = value;
    customisationAliases[prefix.slice(0, 1) + "-" + suffix.toLowerCase()] = value;
    customisationAliases[prefix + suffix] = value;
  });
});
const render = (icon, props) => {
  const customisations = mergeCustomisations(defaults$2, props);
  const componentProps = { ...svgDefaults };
  let style2 = typeof props.style === "object" && !(props.style instanceof Array) ? { ...props.style } : {};
  for (let key in props) {
    const value = props[key];
    if (value === void 0) {
      continue;
    }
    switch (key) {
      case "icon":
      case "style":
      case "onLoad":
        break;
      case "inline":
      case "hFlip":
      case "vFlip":
        customisations[key] = value === true || value === "true" || value === 1;
        break;
      case "flip":
        if (typeof value === "string") {
          flipFromString(customisations, value);
        }
        break;
      case "align":
        if (typeof value === "string") {
          alignmentFromString(customisations, value);
        }
        break;
      case "color":
        style2.color = value;
        break;
      case "rotate":
        if (typeof value === "string") {
          customisations[key] = rotateFromString(value);
        } else if (typeof value === "number") {
          customisations[key] = value;
        }
        break;
      case "ariaHidden":
      case "aria-hidden":
        if (value !== true && value !== "true") {
          delete componentProps["aria-hidden"];
        }
        break;
      default:
        if (customisationAliases[key] !== void 0) {
          if (customisationAliases[key].boolean && (value === true || value === "true" || value === 1)) {
            customisations[customisationAliases[key].attr] = true;
          } else if (!customisationAliases[key].boolean && typeof value === "string" && value !== "") {
            customisations[customisationAliases[key].attr] = value;
          }
        } else if (defaults$2[key] === void 0) {
          componentProps[key] = value;
        }
    }
  }
  const item = iconToSVG(icon, customisations);
  for (let key in item.attributes) {
    componentProps[key] = item.attributes[key];
  }
  if (item.inline && style2.verticalAlign === void 0 && style2["vertical-align"] === void 0) {
    style2.verticalAlign = "-0.125em";
  }
  let localCounter = 0;
  let id2 = props.id;
  if (typeof id2 === "string") {
    id2 = id2.replace(/-/g, "_");
  }
  componentProps["innerHTML"] = replaceIDs(item.body, id2 ? () => id2 + "ID" + localCounter++ : "iconifyVue");
  if (Object.keys(style2).length > 0) {
    componentProps["style"] = style2;
  }
  return h$4("svg", componentProps);
};
allowSimpleNames(true);
setAPIModule("", fetchAPIModule);
if (typeof document !== "undefined" && typeof window !== "undefined") {
  cache$1.store = storeCache;
  loadCache();
  const _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    const preload2 = _window2.IconifyPreload;
    const err = "Invalid IconifyPreload syntax.";
    if (typeof preload2 === "object" && preload2 !== null) {
      (preload2 instanceof Array ? preload2 : [preload2]).forEach((item) => {
        try {
          if (
            // Check if item is an object and not null/array
            typeof item !== "object" || item === null || item instanceof Array || // Check for 'icons' and 'prefix'
            typeof item.icons !== "object" || typeof item.prefix !== "string" || // Add icon set
            !addCollection(item)
          ) {
            console.error(err);
          }
        } catch (e2) {
          console.error(err);
        }
      });
    }
  }
  if (_window2.IconifyProviders !== void 0) {
    const providers = _window2.IconifyProviders;
    if (typeof providers === "object" && providers !== null) {
      for (let key in providers) {
        const err = "IconifyProviders[" + key + "] is invalid.";
        try {
          const value = providers[key];
          if (typeof value !== "object" || !value || value.resources === void 0) {
            continue;
          }
          if (!addAPIProvider(key, value)) {
            console.error(err);
          }
        } catch (e2) {
          console.error(err);
        }
      }
    }
  }
}
const emptyIcon = fullIcon({
  body: ""
});
const Icon = defineComponent$1({
  // Do not inherit other attributes: it is handled by render()
  inheritAttrs: false,
  // Set initial data
  data() {
    return {
      // Mounted status
      iconMounted: false,
      // Callback counter to trigger re-render
      counter: 0
    };
  },
  mounted() {
    this._name = "";
    this._loadingIcon = null;
    this.iconMounted = true;
  },
  unmounted() {
    this.abortLoading();
  },
  methods: {
    abortLoading() {
      if (this._loadingIcon) {
        this._loadingIcon.abort();
        this._loadingIcon = null;
      }
    },
    // Get data for icon to render or null
    getIcon(icon, onload) {
      if (typeof icon === "object" && icon !== null && typeof icon.body === "string") {
        this._name = "";
        this.abortLoading();
        return {
          data: fullIcon(icon)
        };
      }
      let iconName;
      if (typeof icon !== "string" || (iconName = stringToIcon(icon, false, true)) === null) {
        this.abortLoading();
        return null;
      }
      const data = getIconData(iconName);
      if (data === null) {
        if (!this._loadingIcon || this._loadingIcon.name !== icon) {
          this.abortLoading();
          this._name = "";
          this._loadingIcon = {
            name: icon,
            abort: loadIcons([iconName], () => {
              this.counter++;
            })
          };
        }
        return null;
      }
      this.abortLoading();
      if (this._name !== icon) {
        this._name = icon;
        if (onload) {
          onload(icon);
        }
      }
      const classes = ["iconify"];
      if (iconName.prefix !== "") {
        classes.push("iconify--" + iconName.prefix);
      }
      if (iconName.provider !== "") {
        classes.push("iconify--" + iconName.provider);
      }
      return { data, classes };
    }
  },
  // Render icon
  render() {
    this.counter;
    const props = this.$attrs;
    const icon = this.iconMounted ? this.getIcon(props.icon, props.onLoad) : null;
    if (!icon) {
      return render(emptyIcon, props);
    }
    let newProps = props;
    if (icon.classes) {
      newProps = {
        ...props,
        class: (typeof props["class"] === "string" ? props["class"] + " " : "") + icon.classes.join(" ")
      };
    }
    return render(icon.data, newProps);
  }
});
var _a$1;
const isClient$1 = typeof window !== "undefined";
const isDef = (val) => typeof val !== "undefined";
const isFunction$2 = (val) => typeof val === "function";
const isString$2 = (val) => typeof val === "string";
const noop$5 = () => {
};
isClient$1 && ((_a$1 = window == null ? void 0 : window.navigator) == null ? void 0 : _a$1.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function resolveUnref$1(r2) {
  return typeof r2 === "function" ? r2() : unref$1(r2);
}
function createFilterWrapper$1(filter2, fn2) {
  function wrapper(...args) {
    return new Promise((resolve2, reject) => {
      Promise.resolve(filter2(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve2).catch(reject);
    });
  }
  return wrapper;
}
const bypassFilter$1 = (invoke) => {
  return invoke();
};
function debounceFilter$1(ms2, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop$5;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop$5;
  };
  const filter2 = (invoke) => {
    const duration = resolveUnref$1(ms2);
    const maxDuration = resolveUnref$1(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve2, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve2;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve2(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve2(invoke());
      }, duration);
    });
  };
  return filter2;
}
function pausableFilter(extendFilter = bypassFilter$1) {
  const isActive = ref$1(true);
  function pause() {
    isActive.value = false;
  }
  function resume() {
    isActive.value = true;
  }
  const eventFilter = (...args) => {
    if (isActive.value)
      extendFilter(...args);
  };
  return { isActive: readonly$1(isActive), pause, resume, eventFilter };
}
function identity(arg) {
  return arg;
}
function computedWithControl(source, fn2) {
  let v3 = void 0;
  let track2;
  let trigger2;
  const dirty = ref$1(true);
  const update = () => {
    dirty.value = true;
    trigger2();
  };
  watch$1(source, update, { flush: "sync" });
  const get2 = isFunction$2(fn2) ? fn2 : fn2.get;
  const set2 = isFunction$2(fn2) ? void 0 : fn2.set;
  const result = customRef((_track, _trigger) => {
    track2 = _track;
    trigger2 = _trigger;
    return {
      get() {
        if (dirty.value) {
          v3 = get2();
          dirty.value = false;
        }
        track2();
        return v3;
      },
      set(v22) {
        set2 == null ? void 0 : set2(v22);
      }
    };
  });
  if (Object.isExtensible(result))
    result.trigger = update;
  return result;
}
function tryOnScopeDispose$1(fn2) {
  if (getCurrentScope$1()) {
    onScopeDispose$1(fn2);
    return true;
  }
  return false;
}
function useDebounceFn(fn2, ms2 = 200, options = {}) {
  return createFilterWrapper$1(debounceFilter$1(ms2, options), fn2);
}
function refDebounced(value, ms2 = 200, options = {}) {
  const debounced = ref$1(value.value);
  const updater = useDebounceFn(() => {
    debounced.value = value.value;
  }, ms2, options);
  watch$1(value, () => updater());
  return debounced;
}
function resolveRef(r2) {
  return typeof r2 === "function" ? computed$2(r2) : ref$1(r2);
}
function tryOnMounted$1(fn2, sync = true) {
  if (getCurrentInstance$1())
    onMounted$1(fn2);
  else if (sync)
    fn2();
  else
    nextTick$1(fn2);
}
function useTimeoutFn(cb, interval, options = {}) {
  const {
    immediate = true
  } = options;
  const isPending = ref$1(false);
  let timer = null;
  function clear2() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function stop() {
    isPending.value = false;
    clear2();
  }
  function start(...args) {
    clear2();
    isPending.value = true;
    timer = setTimeout(() => {
      isPending.value = false;
      timer = null;
      cb(...args);
    }, resolveUnref$1(interval));
  }
  if (immediate) {
    isPending.value = true;
    if (isClient$1)
      start();
  }
  tryOnScopeDispose$1(stop);
  return {
    isPending: readonly$1(isPending),
    start,
    stop
  };
}
function useToggle(initialValue = false, options = {}) {
  const {
    truthyValue = true,
    falsyValue = false
  } = options;
  const valueIsRef = isRef$1(initialValue);
  const _value = ref$1(initialValue);
  function toggle(value) {
    if (arguments.length) {
      _value.value = value;
      return _value.value;
    } else {
      const truthy = resolveUnref$1(truthyValue);
      _value.value = _value.value === truthy ? resolveUnref$1(falsyValue) : truthy;
      return _value.value;
    }
  }
  if (valueIsRef)
    return toggle;
  else
    return [_value, toggle];
}
var __getOwnPropSymbols$6$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$6$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$6$1 = Object.prototype.propertyIsEnumerable;
var __objRest$5$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$6$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$6$1)
    for (var prop of __getOwnPropSymbols$6$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$6$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchWithFilter$1(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter = bypassFilter$1
  } = _a2, watchOptions = __objRest$5$1(_a2, [
    "eventFilter"
  ]);
  return watch$1(source, createFilterWrapper$1(eventFilter, cb), watchOptions);
}
var __defProp$2$1 = Object.defineProperty;
var __defProps$2$1 = Object.defineProperties;
var __getOwnPropDescs$2$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$2$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$2$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2$1 = (obj, key, value) => key in obj ? __defProp$2$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2$1 = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp$2$1.call(b3, prop))
      __defNormalProp$2$1(a2, prop, b3[prop]);
  if (__getOwnPropSymbols$2$1)
    for (var prop of __getOwnPropSymbols$2$1(b3)) {
      if (__propIsEnum$2$1.call(b3, prop))
        __defNormalProp$2$1(a2, prop, b3[prop]);
    }
  return a2;
};
var __spreadProps$2$1 = (a2, b3) => __defProps$2$1(a2, __getOwnPropDescs$2$1(b3));
var __objRest$1$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$2$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$2$1)
    for (var prop of __getOwnPropSymbols$2$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$2$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchPausable(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter: filter2
  } = _a2, watchOptions = __objRest$1$1(_a2, [
    "eventFilter"
  ]);
  const { eventFilter, pause, resume, isActive } = pausableFilter(filter2);
  const stop = watchWithFilter$1(source, cb, __spreadProps$2$1(__spreadValues$2$1({}, watchOptions), {
    eventFilter
  }));
  return { stop, pause, resume, isActive };
}
function unrefElement$1(elRef) {
  var _a2;
  const plain = resolveUnref$1(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow$1 = isClient$1 ? window : void 0;
const defaultDocument = isClient$1 ? window.document : void 0;
const defaultNavigator = isClient$1 ? window.navigator : void 0;
function useEventListener$1(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (isString$2(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow$1;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop$5;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register = (el2, event, listener) => {
    el2.addEventListener(event, listener, options);
    return () => el2.removeEventListener(event, listener, options);
  };
  const stopWatch = watch$1(() => unrefElement$1(target), (el2) => {
    cleanup();
    if (!el2)
      return;
    cleanups.push(...events.flatMap((event) => {
      return listeners.map((listener) => register(el2, event, listener));
    }));
  }, { immediate: true, flush: "post" });
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose$1(stop);
  return stop;
}
function onClickOutside(target, handler, options = {}) {
  const { window: window2 = defaultWindow$1, ignore = [], capture = true, detectIframe = false } = options;
  if (!window2)
    return;
  let shouldListen = true;
  let fallback;
  const shouldIgnore = (event) => {
    return ignore.some((target2) => {
      if (typeof target2 === "string") {
        return Array.from(window2.document.querySelectorAll(target2)).some((el2) => el2 === event.target || event.composedPath().includes(el2));
      } else {
        const el2 = unrefElement$1(target2);
        return el2 && (event.target === el2 || event.composedPath().includes(el2));
      }
    });
  };
  const listener = (event) => {
    window2.clearTimeout(fallback);
    const el2 = unrefElement$1(target);
    if (!el2 || el2 === event.target || event.composedPath().includes(el2))
      return;
    if (event.detail === 0)
      shouldListen = !shouldIgnore(event);
    if (!shouldListen) {
      shouldListen = true;
      return;
    }
    handler(event);
  };
  const cleanup = [
    useEventListener$1(window2, "click", listener, { passive: true, capture }),
    useEventListener$1(window2, "pointerdown", (e2) => {
      const el2 = unrefElement$1(target);
      if (el2)
        shouldListen = !e2.composedPath().includes(el2) && !shouldIgnore(e2);
    }, { passive: true }),
    useEventListener$1(window2, "pointerup", (e2) => {
      if (e2.button === 0) {
        const path = e2.composedPath();
        e2.composedPath = () => path;
        fallback = window2.setTimeout(() => listener(e2), 50);
      }
    }, { passive: true }),
    detectIframe && useEventListener$1(window2, "blur", (event) => {
      var _a2;
      const el2 = unrefElement$1(target);
      if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el2 == null ? void 0 : el2.contains(window2.document.activeElement)))
        handler(event);
    })
  ].filter(Boolean);
  const stop = () => cleanup.forEach((fn2) => fn2());
  return stop;
}
function useActiveElement(options = {}) {
  var _a2;
  const { window: window2 = defaultWindow$1 } = options;
  const document2 = (_a2 = options.document) != null ? _a2 : window2 == null ? void 0 : window2.document;
  const activeElement = computedWithControl(() => null, () => document2 == null ? void 0 : document2.activeElement);
  if (window2) {
    useEventListener$1(window2, "blur", (event) => {
      if (event.relatedTarget !== null)
        return;
      activeElement.trigger();
    }, true);
    useEventListener$1(window2, "focus", activeElement.trigger, true);
  }
  return activeElement;
}
function useSupported$1(callback, sync = false) {
  const isSupported2 = ref$1();
  const update = () => isSupported2.value = Boolean(callback());
  update();
  tryOnMounted$1(update, sync);
  return isSupported2;
}
function useMediaQuery(query, options = {}) {
  const { window: window2 = defaultWindow$1 } = options;
  const isSupported2 = useSupported$1(() => window2 && "matchMedia" in window2 && typeof window2.matchMedia === "function");
  let mediaQuery;
  const matches2 = ref$1(false);
  const cleanup = () => {
    if (!mediaQuery)
      return;
    if ("removeEventListener" in mediaQuery)
      mediaQuery.removeEventListener("change", update);
    else
      mediaQuery.removeListener(update);
  };
  const update = () => {
    if (!isSupported2.value)
      return;
    cleanup();
    mediaQuery = window2.matchMedia(resolveRef(query).value);
    matches2.value = mediaQuery.matches;
    if ("addEventListener" in mediaQuery)
      mediaQuery.addEventListener("change", update);
    else
      mediaQuery.addListener(update);
  };
  watchEffect$1(update);
  tryOnScopeDispose$1(() => cleanup());
  return matches2;
}
function useClipboard(options = {}) {
  const {
    navigator: navigator2 = defaultNavigator,
    read: read2 = false,
    source,
    copiedDuring = 1500,
    legacy = false
  } = options;
  const events = ["copy", "cut"];
  const isClipboardApiSupported = useSupported$1(() => navigator2 && "clipboard" in navigator2);
  const isSupported2 = computed$2(() => isClipboardApiSupported.value || legacy);
  const text = ref$1("");
  const copied = ref$1(false);
  const timeout = useTimeoutFn(() => copied.value = false, copiedDuring);
  function updateText() {
    if (isClipboardApiSupported.value) {
      navigator2.clipboard.readText().then((value) => {
        text.value = value;
      });
    } else {
      text.value = legacyRead();
    }
  }
  if (isSupported2.value && read2) {
    for (const event of events)
      useEventListener$1(event, updateText);
  }
  async function copy(value = resolveUnref$1(source)) {
    if (isSupported2.value && value != null) {
      if (isClipboardApiSupported.value)
        await navigator2.clipboard.writeText(value);
      else
        legacyCopy(value);
      text.value = value;
      copied.value = true;
      timeout.start();
    }
  }
  function legacyCopy(value) {
    const ta2 = document.createElement("textarea");
    ta2.value = value != null ? value : "";
    ta2.style.position = "absolute";
    ta2.style.opacity = "0";
    document.body.appendChild(ta2);
    ta2.select();
    document.execCommand("copy");
    ta2.remove();
  }
  function legacyRead() {
    var _a2, _b, _c2;
    return (_c2 = (_b = (_a2 = document == null ? void 0 : document.getSelection) == null ? void 0 : _a2.call(document)) == null ? void 0 : _b.toString()) != null ? _c2 : "";
  }
  return {
    isSupported: isSupported2,
    text,
    copied,
    copy
  };
}
const _global$2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__vueuse_ssr_handlers__";
_global$2[globalKey] = _global$2[globalKey] || {};
const handlers = _global$2[globalKey];
function getSSRHandler(key, fallback) {
  return handlers[key] || fallback;
}
function guessSerializerType(rawInit) {
  return rawInit == null ? "any" : rawInit instanceof Set ? "set" : rawInit instanceof Map ? "map" : rawInit instanceof Date ? "date" : typeof rawInit === "boolean" ? "boolean" : typeof rawInit === "string" ? "string" : typeof rawInit === "object" ? "object" : !Number.isNaN(rawInit) ? "number" : "any";
}
var __defProp$j = Object.defineProperty;
var __getOwnPropSymbols$l = Object.getOwnPropertySymbols;
var __hasOwnProp$l = Object.prototype.hasOwnProperty;
var __propIsEnum$l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$j = (obj, key, value) => key in obj ? __defProp$j(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$j = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp$l.call(b3, prop))
      __defNormalProp$j(a2, prop, b3[prop]);
  if (__getOwnPropSymbols$l)
    for (var prop of __getOwnPropSymbols$l(b3)) {
      if (__propIsEnum$l.call(b3, prop))
        __defNormalProp$j(a2, prop, b3[prop]);
    }
  return a2;
};
const StorageSerializers = {
  boolean: {
    read: (v3) => v3 === "true",
    write: (v3) => String(v3)
  },
  object: {
    read: (v3) => JSON.parse(v3),
    write: (v3) => JSON.stringify(v3)
  },
  number: {
    read: (v3) => Number.parseFloat(v3),
    write: (v3) => String(v3)
  },
  any: {
    read: (v3) => v3,
    write: (v3) => String(v3)
  },
  string: {
    read: (v3) => v3,
    write: (v3) => String(v3)
  },
  map: {
    read: (v3) => new Map(JSON.parse(v3)),
    write: (v3) => JSON.stringify(Array.from(v3.entries()))
  },
  set: {
    read: (v3) => new Set(JSON.parse(v3)),
    write: (v3) => JSON.stringify(Array.from(v3))
  },
  date: {
    read: (v3) => new Date(v3),
    write: (v3) => v3.toISOString()
  }
};
function useStorage(key, defaults2, storage2, options = {}) {
  var _a2;
  const {
    flush = "pre",
    deep = true,
    listenToStorageChanges = true,
    writeDefaults = true,
    mergeDefaults = false,
    shallow,
    window: window2 = defaultWindow$1,
    eventFilter,
    onError = (e2) => {
      console.error(e2);
    }
  } = options;
  const data = (shallow ? shallowRef$1 : ref$1)(defaults2);
  if (!storage2) {
    try {
      storage2 = getSSRHandler("getDefaultStorage", () => {
        var _a22;
        return (_a22 = defaultWindow$1) == null ? void 0 : _a22.localStorage;
      })();
    } catch (e2) {
      onError(e2);
    }
  }
  if (!storage2)
    return data;
  const rawInit = resolveUnref$1(defaults2);
  const type = guessSerializerType(rawInit);
  const serializer = (_a2 = options.serializer) != null ? _a2 : StorageSerializers[type];
  const { pause: pauseWatch, resume: resumeWatch } = watchPausable(data, () => write(data.value), { flush, deep, eventFilter });
  if (window2 && listenToStorageChanges)
    useEventListener$1(window2, "storage", update);
  update();
  return data;
  function write(v3) {
    try {
      if (v3 == null) {
        storage2.removeItem(key);
      } else {
        const serialized = serializer.write(v3);
        const oldValue = storage2.getItem(key);
        if (oldValue !== serialized) {
          storage2.setItem(key, serialized);
          if (window2) {
            window2 == null ? void 0 : window2.dispatchEvent(new StorageEvent("storage", {
              key,
              oldValue,
              newValue: serialized,
              storageArea: storage2
            }));
          }
        }
      }
    } catch (e2) {
      onError(e2);
    }
  }
  function read2(event) {
    const rawValue = event ? event.newValue : storage2.getItem(key);
    if (rawValue == null) {
      if (writeDefaults && rawInit !== null)
        storage2.setItem(key, serializer.write(rawInit));
      return rawInit;
    } else if (!event && mergeDefaults) {
      const value = serializer.read(rawValue);
      if (isFunction$2(mergeDefaults))
        return mergeDefaults(value, rawInit);
      else if (type === "object" && !Array.isArray(value))
        return __spreadValues$j(__spreadValues$j({}, rawInit), value);
      return value;
    } else if (typeof rawValue !== "string") {
      return rawValue;
    } else {
      return serializer.read(rawValue);
    }
  }
  function update(event) {
    if (event && event.storageArea !== storage2)
      return;
    if (event && event.key == null) {
      data.value = rawInit;
      return;
    }
    if (event && event.key !== key)
      return;
    pauseWatch();
    try {
      data.value = read2(event);
    } catch (e2) {
      onError(e2);
    } finally {
      if (event)
        nextTick$1(resumeWatch);
      else
        resumeWatch();
    }
  }
}
function usePreferredDark(options) {
  return useMediaQuery("(prefers-color-scheme: dark)", options);
}
var __defProp$i = Object.defineProperty;
var __getOwnPropSymbols$k = Object.getOwnPropertySymbols;
var __hasOwnProp$k = Object.prototype.hasOwnProperty;
var __propIsEnum$k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$i = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp$k.call(b3, prop))
      __defNormalProp$i(a2, prop, b3[prop]);
  if (__getOwnPropSymbols$k)
    for (var prop of __getOwnPropSymbols$k(b3)) {
      if (__propIsEnum$k.call(b3, prop))
        __defNormalProp$i(a2, prop, b3[prop]);
    }
  return a2;
};
function useColorMode(options = {}) {
  const {
    selector = "html",
    attribute = "class",
    initialValue = "auto",
    window: window2 = defaultWindow$1,
    storage: storage2,
    storageKey = "vueuse-color-scheme",
    listenToStorageChanges = true,
    storageRef,
    emitAuto
  } = options;
  const modes = __spreadValues$i({
    auto: "",
    light: "light",
    dark: "dark"
  }, options.modes || {});
  const preferredDark = usePreferredDark({ window: window2 });
  const preferredMode = computed$2(() => preferredDark.value ? "dark" : "light");
  const store = storageRef || (storageKey == null ? ref$1(initialValue) : useStorage(storageKey, initialValue, storage2, { window: window2, listenToStorageChanges }));
  const state = computed$2({
    get() {
      return store.value === "auto" && !emitAuto ? preferredMode.value : store.value;
    },
    set(v3) {
      store.value = v3;
    }
  });
  const updateHTMLAttrs = getSSRHandler("updateHTMLAttrs", (selector2, attribute2, value) => {
    const el2 = window2 == null ? void 0 : window2.document.querySelector(selector2);
    if (!el2)
      return;
    if (attribute2 === "class") {
      const current = value.split(/\s/g);
      Object.values(modes).flatMap((i2) => (i2 || "").split(/\s/g)).filter(Boolean).forEach((v3) => {
        if (current.includes(v3))
          el2.classList.add(v3);
        else
          el2.classList.remove(v3);
      });
    } else {
      el2.setAttribute(attribute2, value);
    }
  });
  function defaultOnChanged(mode) {
    var _a2;
    const resolvedMode = mode === "auto" ? preferredMode.value : mode;
    updateHTMLAttrs(selector, attribute, (_a2 = modes[resolvedMode]) != null ? _a2 : resolvedMode);
  }
  function onChanged(mode) {
    if (options.onChanged)
      options.onChanged(mode, defaultOnChanged);
    else
      defaultOnChanged(mode);
  }
  watch$1(state, onChanged, { flush: "post", immediate: true });
  if (emitAuto)
    watch$1(preferredMode, () => onChanged(state.value), { flush: "post" });
  tryOnMounted$1(() => onChanged(state.value));
  return state;
}
var __defProp$h = Object.defineProperty;
var __defProps$7 = Object.defineProperties;
var __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$j = Object.getOwnPropertySymbols;
var __hasOwnProp$j = Object.prototype.hasOwnProperty;
var __propIsEnum$j = Object.prototype.propertyIsEnumerable;
var __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$h = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp$j.call(b3, prop))
      __defNormalProp$h(a2, prop, b3[prop]);
  if (__getOwnPropSymbols$j)
    for (var prop of __getOwnPropSymbols$j(b3)) {
      if (__propIsEnum$j.call(b3, prop))
        __defNormalProp$h(a2, prop, b3[prop]);
    }
  return a2;
};
var __spreadProps$7 = (a2, b3) => __defProps$7(a2, __getOwnPropDescs$7(b3));
function useDark(options = {}) {
  const {
    valueDark = "dark",
    valueLight = "",
    window: window2 = defaultWindow$1
  } = options;
  const mode = useColorMode(__spreadProps$7(__spreadValues$h({}, options), {
    onChanged: (mode2, defaultHandler) => {
      var _a2;
      if (options.onChanged)
        (_a2 = options.onChanged) == null ? void 0 : _a2.call(options, mode2 === "dark");
      else
        defaultHandler(mode2);
    },
    modes: {
      dark: valueDark,
      light: valueLight
    }
  }));
  const preferredDark = usePreferredDark({ window: window2 });
  const isDark = computed$2({
    get() {
      return mode.value === "dark";
    },
    set(v3) {
      if (v3 === preferredDark.value)
        mode.value = "auto";
      else
        mode.value = v3 ? "dark" : "light";
    }
  });
  return isDark;
}
var __getOwnPropSymbols$f = Object.getOwnPropertySymbols;
var __hasOwnProp$f = Object.prototype.hasOwnProperty;
var __propIsEnum$f = Object.prototype.propertyIsEnumerable;
var __objRest$2$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$f.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$f)
    for (var prop of __getOwnPropSymbols$f(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$f.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver$1(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow$1 } = _a2, observerOptions = __objRest$2$1(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported$1(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch$1(() => unrefElement$1(target), (el2) => {
    cleanup();
    if (isSupported2.value && window2 && el2) {
      observer = new ResizeObserver(callback);
      observer.observe(el2, observerOptions);
    }
  }, { immediate: true, flush: "post" });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose$1(stop);
  return {
    isSupported: isSupported2,
    stop
  };
}
/* @__PURE__ */ new Map();
function useFocus$1(target, options = {}) {
  const { initialValue = false } = options;
  const activeElement = useActiveElement(options);
  const targetElement = computed$2(() => unrefElement$1(target));
  const focused = computed$2({
    get() {
      return isDef(activeElement.value) && isDef(targetElement.value) && activeElement.value === targetElement.value;
    },
    set(value) {
      var _a2, _b;
      if (!value && focused.value)
        (_a2 = targetElement.value) == null ? void 0 : _a2.blur();
      if (value && !focused.value)
        (_b = targetElement.value) == null ? void 0 : _b.focus();
    }
  });
  watch$1(targetElement, () => {
    focused.value = initialValue;
  }, { immediate: true, flush: "post" });
  return { focused };
}
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$7)
    for (var prop of __getOwnPropSymbols$7(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useMutationObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow$1 } = _a2, mutationOptions = __objRest$1(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported$1(() => window2 && "MutationObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch$1(() => unrefElement$1(target), (el2) => {
    cleanup();
    if (isSupported2.value && window2 && el2) {
      observer = new MutationObserver(callback);
      observer.observe(el2, mutationOptions);
    }
  }, { immediate: true });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose$1(stop);
  return {
    isSupported: isSupported2,
    stop
  };
}
var SwipeDirection;
(function(SwipeDirection2) {
  SwipeDirection2["UP"] = "UP";
  SwipeDirection2["RIGHT"] = "RIGHT";
  SwipeDirection2["DOWN"] = "DOWN";
  SwipeDirection2["LEFT"] = "LEFT";
  SwipeDirection2["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));
function useTitle(newTitle = null, options = {}) {
  var _a2, _b;
  const {
    document: document2 = defaultDocument
  } = options;
  const title = resolveRef((_a2 = newTitle != null ? newTitle : document2 == null ? void 0 : document2.title) != null ? _a2 : null);
  const isReadonly2 = newTitle && isFunction$2(newTitle);
  function format2(t2) {
    if (!("titleTemplate" in options))
      return t2;
    const template = options.titleTemplate || "%s";
    return isFunction$2(template) ? template(t2) : unref$1(template).replace(/%s/g, t2);
  }
  watch$1(title, (t2, o2) => {
    if (t2 !== o2 && document2)
      document2.title = format2(isString$2(t2) ? t2 : "");
  }, { immediate: true });
  if (options.observe && !options.titleTemplate && document2 && !isReadonly2) {
    useMutationObserver((_b = document2.head) == null ? void 0 : _b.querySelector("title"), () => {
      if (document2 && document2.title !== title.value)
        title.value = format2(document2.title);
    }, { childList: true });
  }
  return title;
}
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp.call(b3, prop))
      __defNormalProp(a2, prop, b3[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b3)) {
      if (__propIsEnum.call(b3, prop))
        __defNormalProp(a2, prop, b3[prop]);
    }
  return a2;
};
const _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
__spreadValues({
  linear: identity
}, _TransitionPresets);
const pa = {
  name: "HstButton"
}, Uo = /* @__PURE__ */ defineComponent$1({
  ...pa,
  props: {
    color: null
  },
  setup(s3) {
    const t2 = {
      default: "htw-bg-gray-200 dark:htw-bg-gray-750 htw-text-gray-900 dark:htw-text-gray-100 hover:htw-bg-primary-200 dark:hover:htw-bg-primary-900",
      primary: "htw-bg-primary-500 hover:htw-bg-primary-600 htw-text-white dark:htw-text-black",
      flat: "htw-bg-transparent hover:htw-bg-gray-500/20 htw-text-gray-900 dark:htw-text-gray-100"
    };
    return (e2, i2) => (openBlock$1(), createElementBlock$1("button", {
      class: normalizeClass$1(["histoire-button htw-cursor-pointer htw-rounded-sm", t2[s3.color ?? "default"]])
    }, [
      renderSlot$1(e2.$slots, "default")
    ], 2));
  }
}), ga = { class: "htw-w-28 htw-whitespace-nowrap htw-text-ellipsis htw-overflow-hidden htw-shrink-0" }, ma = { class: "htw-grow htw-max-w-full htw-flex htw-items-center htw-gap-1" }, wa = { class: "htw-block htw-grow htw-max-w-full" }, ya = {
  name: "HstWrapper"
}, qt = /* @__PURE__ */ defineComponent$1({
  ...ya,
  props: {
    title: { default: void 0 },
    tag: { default: "label" }
  },
  setup(s3) {
    return (t2, e2) => (openBlock$1(), createBlock$1(resolveDynamicComponent$1(s3.tag), { class: "histoire-wrapper htw-p-2 hover:htw-bg-primary-100 dark:hover:htw-bg-primary-800 htw-flex htw-gap-2 htw-flex-wrap" }, {
      default: withCtx$1(() => [
        withDirectives$1((openBlock$1(), createElementBlock$1("span", ga, [
          createTextVNode$1(toDisplayString$2(s3.title), 1)
        ])), [
          [unref$1(VTooltip), {
            content: s3.title,
            placement: "left",
            distance: 12
          }]
        ]),
        createBaseVNode$1("span", ma, [
          createBaseVNode$1("span", wa, [
            renderSlot$1(t2.$slots, "default")
          ]),
          renderSlot$1(t2.$slots, "actions")
        ])
      ]),
      _: 3
    }));
  }
}), ba = { class: "htw-flex htw-gap-px htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 htw-rounded-sm htw-p-px" }, ka = {
  name: "HstButtonGroup"
}, xa = /* @__PURE__ */ defineComponent$1({
  ...ka,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s3, { emit: t2 }) {
    const e2 = s3, i2 = computed$2(() => Array.isArray(e2.options) ? e2.options.map((r2) => typeof r2 == "string" || typeof r2 == "number" ? { value: r2, label: String(r2) } : r2) : Object.keys(e2.options).map((r2) => ({
      value: r2,
      label: e2.options[r2]
    })));
    function n2(r2) {
      t2("update:modelValue", r2);
    }
    return (r2, o2) => (openBlock$1(), createBlock$1(qt, {
      tag: "div",
      role: "group",
      title: s3.title,
      class: "histoire-button-group htw-flex-nowrap htw-items-center"
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(r2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", ba, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), ({ label: l2, value: h2 }) => (openBlock$1(), createBlock$1(Uo, {
            key: h2,
            class: "htw-px-1 htw-h-[22px] htw-flex-1 !htw-rounded-[3px]",
            color: h2 === s3.modelValue ? "primary" : "flat",
            rounded: false,
            onClick: (a2) => n2(h2)
          }, {
            default: withCtx$1(() => [
              createTextVNode$1(toDisplayString$2(l2), 1)
            ]),
            _: 2
          }, 1032, ["color", "onClick"]))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title"]));
  }
}), va = {
  width: "16",
  height: "16",
  viewBox: "0 0 24 24",
  class: "htw-relative htw-z-10"
}, Sa = ["stroke-dasharray", "stroke-dashoffset"], Ca = {
  name: "HstSimpleCheckbox"
}, Qo = /* @__PURE__ */ defineComponent$1({
  ...Ca,
  props: {
    modelValue: { type: Boolean },
    withToggle: { type: Boolean }
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = s3;
    function i2() {
      e2.withToggle && t2("update:modelValue", !e2.modelValue);
    }
    watch$1(() => e2.modelValue, () => {
      h2.value = true;
    });
    const n2 = ref$1(), r2 = ref$1(0), o2 = computed$2(() => e2.modelValue ? 1 : 0), l2 = computed$2(() => (1 - o2.value) * r2.value), h2 = ref$1(false);
    return watch$1(n2, () => {
      var a2, c2;
      r2.value = ((c2 = (a2 = n2.value).getTotalLength) == null ? void 0 : c2.call(a2)) ?? 21.21;
    }), (a2, c2) => (openBlock$1(), createElementBlock$1("div", {
      class: normalizeClass$1(["histoire-simple-checkbox htw-group htw-text-white htw-w-[16px] htw-h-[16px] htw-relative", { "htw-cursor-pointer": s3.withToggle }]),
      onClick: i2
    }, [
      createBaseVNode$1("div", {
        class: normalizeClass$1(["htw-border htw-border-solid group-active:htw-bg-gray-500/20 htw-rounded-sm htw-box-border htw-absolute htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out group-hover:htw-border-primary-500 group-hover:dark:htw-border-primary-500", [
          s3.modelValue ? "htw-border-primary-500 htw-border-8" : "htw-border-black/25 dark:htw-border-white/25 htw-delay-150"
        ]])
      }, null, 2),
      (openBlock$1(), createElementBlock$1("svg", va, [
        createBaseVNode$1("path", {
          ref_key: "path",
          ref: n2,
          d: "m 4 12 l 5 5 l 10 -10",
          fill: "none",
          class: normalizeClass$1(["htw-stroke-white htw-stroke-2 htw-duration-200 htw-ease-in-out", [
            h2.value ? "htw-transition-all" : "htw-transition-none",
            {
              "htw-delay-150": s3.modelValue
            }
          ]]),
          "stroke-dasharray": r2.value,
          "stroke-dashoffset": unref$1(l2)
        }, null, 10, Sa)
      ]))
    ], 2));
  }
}), Aa = {
  name: "HstCheckbox"
}, Oa = /* @__PURE__ */ defineComponent$1({
  ...Aa,
  props: {
    modelValue: { type: [Boolean, String] },
    title: null
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = s3;
    function i2() {
      if (typeof e2.modelValue == "string") {
        t2("update:modelValue", e2.modelValue === "false" ? "true" : "false");
        return;
      }
      t2("update:modelValue", !e2.modelValue);
    }
    const n2 = computed$2(() => typeof e2.modelValue == "string" ? e2.modelValue !== "false" : e2.modelValue);
    return (r2, o2) => (openBlock$1(), createBlock$1(qt, {
      role: "checkbox",
      tabindex: "0",
      class: "histoire-checkbox htw-cursor-pointer htw-items-center",
      title: s3.title,
      onClick: o2[0] || (o2[0] = (l2) => i2()),
      onKeydown: [
        o2[1] || (o2[1] = withKeys(withModifiers$1((l2) => i2(), ["prevent"]), ["enter"])),
        o2[2] || (o2[2] = withKeys(withModifiers$1((l2) => i2(), ["prevent"]), ["space"]))
      ]
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(r2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createVNode$1(Qo, { "model-value": unref$1(n2) }, null, 8, ["model-value"])
      ]),
      _: 3
    }, 8, ["title"]));
  }
}), Ma = { class: "-htw-my-1" }, Da = ["for", "onKeydown", "onClick"], Ta = {
  name: "HstCheckboxList"
}, Pa = /* @__PURE__ */ defineComponent$1({
  ...Ta,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s3, { emit: t2 }) {
    const e2 = s3, i2 = computed$2(() => Array.isArray(e2.options) ? Object.fromEntries(e2.options.map((r2) => typeof r2 == "string" ? [r2, r2] : [r2.value, r2.label])) : e2.options);
    function n2(r2) {
      e2.modelValue.includes(r2) ? t2("update:modelValue", e2.modelValue.filter((o2) => o2 !== r2)) : t2("update:modelValue", [...e2.modelValue, r2]);
    }
    return (r2, o2) => (openBlock$1(), createBlock$1(qt, {
      role: "group",
      title: s3.title,
      class: normalizeClass$1(["histoire-checkbox-list htw-cursor-text", r2.$attrs.class]),
      style: normalizeStyle$1(r2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(r2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Ma, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), (l2, h2) => (openBlock$1(), createElementBlock$1("label", {
            key: h2,
            tabindex: "0",
            for: `${h2}-radio`,
            class: "htw-cursor-pointer htw-flex htw-items-center htw-relative htw-py-1 htw-group",
            onKeydown: [
              withKeys(withModifiers$1((a2) => n2(h2), ["prevent"]), ["enter"]),
              withKeys(withModifiers$1((a2) => n2(h2), ["prevent"]), ["space"])
            ],
            onClick: (a2) => n2(h2)
          }, [
            createVNode$1(Qo, {
              "model-value": s3.modelValue.includes(h2),
              class: "htw-mr-2"
            }, null, 8, ["model-value"]),
            createTextVNode$1(" " + toDisplayString$2(l2), 1)
          ], 40, Da))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Ba = ["value"], Ra = {
  name: "HstText"
}, La = /* @__PURE__ */ defineComponent$1({
  ...Ra,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = ref$1();
    return (i2, n2) => (openBlock$1(), createBlock$1(qt, {
      title: s3.title,
      class: normalizeClass$1(["histoire-text htw-cursor-text htw-items-center", i2.$attrs.class]),
      style: normalizeStyle$1(i2.$attrs.style),
      onClick: n2[1] || (n2[1] = (r2) => e2.value.focus())
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(i2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("input", mergeProps$1({
          ref_key: "input",
          ref: e2
        }, { ...i2.$attrs, class: null, style: null }, {
          type: "text",
          value: s3.modelValue,
          class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm",
          onInput: n2[0] || (n2[0] = (r2) => t2("update:modelValue", r2.target.value))
        }), null, 16, Ba)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Ea = {
  name: "HstNumber",
  inheritAttrs: false
}, Na = /* @__PURE__ */ defineComponent$1({
  ...Ea,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = s3, i2 = computed$2({
      get: () => e2.modelValue,
      set: (u2) => {
        t2("update:modelValue", u2);
      }
    }), n2 = ref$1();
    function r2() {
      n2.value.focus(), n2.value.select();
    }
    const o2 = ref$1(false);
    let l2, h2;
    function a2(u2) {
      o2.value = true, l2 = u2.clientX, h2 = i2.value, window.addEventListener("mousemove", c2), window.addEventListener("mouseup", f2);
    }
    function c2(u2) {
      let d2 = parseFloat(n2.value.step);
      isNaN(d2) && (d2 = 1), i2.value = h2 + Math.round((u2.clientX - l2) / 10 / d2) * d2;
    }
    function f2() {
      o2.value = false, window.removeEventListener("mousemove", c2), window.removeEventListener("mouseup", f2);
    }
    return onUnmounted$1(() => {
      f2();
    }), (u2, d2) => (openBlock$1(), createBlock$1(qt, {
      class: normalizeClass$1(["histoire-number htw-cursor-ew-resize htw-items-center", [
        u2.$attrs.class,
        { "htw-select-none": o2.value }
      ]]),
      title: s3.title,
      style: normalizeStyle$1(u2.$attrs.style),
      onClick: r2,
      onMousedown: a2
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(u2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        withDirectives$1(createBaseVNode$1("input", mergeProps$1({
          ref_key: "input",
          ref: n2
        }, { ...u2.$attrs, class: null, style: null }, {
          "onUpdate:modelValue": d2[0] || (d2[0] = (p2) => isRef$1(i2) ? i2.value = p2 : null),
          type: "number",
          class: [{
            "htw-select-none": o2.value
          }, "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-pl-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm htw-cursor-ew-resize htw-box-border"]
        }), null, 16), [
          [
            vModelText$1,
            unref$1(i2),
            void 0,
            { number: true }
          ]
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Va = { class: "htw-relative htw-w-full htw-flex htw-items-center" }, Ia = /* @__PURE__ */ createBaseVNode$1("div", { class: "htw-absolute htw-inset-0 htw-flex htw-items-center" }, [
  /* @__PURE__ */ createBaseVNode$1("div", { class: "htw-border htw-border-black/25 dark:htw-border-white/25 htw-h-1 htw-w-full htw-rounded-full" })
], -1), Ha = {
  name: "HstSlider",
  inheritAttrs: false
}, $a = /* @__PURE__ */ defineComponent$1({
  ...Ha,
  props: {
    title: null,
    modelValue: null,
    min: null,
    max: null
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = s3, i2 = ref$1(false), n2 = ref$1(null), r2 = computed$2({
      get: () => e2.modelValue,
      set: (h2) => {
        t2("update:modelValue", h2);
      }
    }), o2 = computed$2(() => (e2.modelValue - e2.min) / (e2.max - e2.min)), l2 = computed$2(() => n2.value ? {
      left: 8 + (n2.value.clientWidth - 16) * o2.value + "px"
    } : {});
    return (h2, a2) => (openBlock$1(), createBlock$1(qt, {
      class: normalizeClass$1(["histoire-slider htw-items-center", h2.$attrs.class]),
      title: s3.title,
      style: normalizeStyle$1(h2.$attrs.style)
    }, {
      default: withCtx$1(() => [
        createBaseVNode$1("div", Va, [
          Ia,
          withDirectives$1(createBaseVNode$1("input", mergeProps$1({
            ref_key: "input",
            ref: n2,
            "onUpdate:modelValue": a2[0] || (a2[0] = (c2) => isRef$1(r2) ? r2.value = c2 : null),
            class: "htw-range-input htw-appearance-none htw-border-0 htw-bg-transparent htw-cursor-pointer htw-relative htw-w-full htw-m-0 htw-text-gray-700",
            type: "range"
          }, { ...h2.$attrs, class: null, style: null, min: s3.min, max: s3.max }, {
            onMouseover: a2[1] || (a2[1] = (c2) => i2.value = true),
            onMouseleave: a2[2] || (a2[2] = (c2) => i2.value = false)
          }), null, 16), [
            [
              vModelText$1,
              unref$1(r2),
              void 0,
              { number: true }
            ]
          ]),
          i2.value ? withDirectives$1((openBlock$1(), createElementBlock$1("div", {
            key: 0,
            class: "htw-absolute",
            style: normalizeStyle$1(unref$1(l2))
          }, null, 4)), [
            [unref$1(VTooltip), { content: s3.modelValue.toString(), shown: true, distance: 16, delay: 0 }]
          ]) : createCommentVNode$1("", true)
        ])
      ]),
      _: 1
    }, 8, ["title", "class", "style"]));
  }
});
const Fa = ["value"], za = {
  name: "HstTextarea",
  inheritAttrs: false
}, _a = /* @__PURE__ */ defineComponent$1({
  ...za,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = ref$1();
    return (i2, n2) => (openBlock$1(), createBlock$1(qt, {
      title: s3.title,
      class: normalizeClass$1(["histoire-textarea htw-cursor-text", i2.$attrs.class]),
      style: normalizeStyle$1(i2.$attrs.style),
      onClick: n2[1] || (n2[1] = (r2) => e2.value.focus())
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(i2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("textarea", mergeProps$1({
          ref_key: "input",
          ref: e2
        }, { ...i2.$attrs, class: null, style: null }, {
          value: s3.modelValue,
          class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm htw-box-border htw-resize-y htw-min-h-[26px]",
          onInput: n2[0] || (n2[0] = (r2) => t2("update:modelValue", r2.target.value))
        }), null, 16, Fa)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Wa = { class: "htw-cursor-pointer htw-w-full htw-outline-none htw-px-2 htw-h-[27px] -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 hover:htw-border-primary-500 dark:hover:htw-border-primary-500 htw-rounded-sm htw-flex htw-gap-2 htw-items-center htw-leading-normal" }, ja = { class: "htw-flex-1 htw-truncate" }, qa = { class: "htw-flex htw-flex-col htw-bg-gray-50 dark:htw-bg-gray-700" }, Ka = ["onClick"], Ga = {
  name: "CustomSelect"
}, Ua = /* @__PURE__ */ defineComponent$1({
  ...Ga,
  props: {
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s3, { emit: t2 }) {
    const e2 = s3, i2 = computed$2(() => Array.isArray(e2.options) ? e2.options.map((o2) => typeof o2 == "string" || typeof o2 == "number" ? [o2, String(o2)] : [o2.value, o2.label]) : Object.entries(e2.options)), n2 = computed$2(() => {
      var o2;
      return (o2 = i2.value.find(([l2]) => l2 === e2.modelValue)) == null ? void 0 : o2[1];
    });
    function r2(o2, l2) {
      t2("update:modelValue", o2), l2();
    }
    return (o2, l2) => (openBlock$1(), createBlock$1(unref$1(Dropdown), {
      "auto-size": "",
      "auto-boundary-max-size": ""
    }, {
      popper: withCtx$1(({ hide: h2 }) => [
        createBaseVNode$1("div", qa, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), ([a2, c2]) => (openBlock$1(), createElementBlock$1("div", mergeProps$1({ ...o2.$attrs, class: null, style: null }, {
            key: c2,
            class: ["htw-px-2 htw-py-1 htw-cursor-pointer hover:htw-bg-primary-100 dark:hover:htw-bg-primary-700", {
              "htw-bg-primary-200 dark:htw-bg-primary-800": e2.modelValue === a2
            }],
            onClick: (f2) => r2(a2, h2)
          }), toDisplayString$2(c2), 17, Ka))), 128))
        ])
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Wa, [
          createBaseVNode$1("div", ja, [
            renderSlot$1(o2.$slots, "default", { label: unref$1(n2) }, () => [
              createTextVNode$1(toDisplayString$2(unref$1(n2)), 1)
            ])
          ]),
          createVNode$1(unref$1(Icon), {
            icon: "carbon:chevron-sort",
            class: "htw-w-4 htw-h-4 htw-flex-none htw-ml-auto"
          })
        ])
      ]),
      _: 3
    }));
  }
});
const Qa = {
  name: "HstSelect"
}, Ja = /* @__PURE__ */ defineComponent$1({
  ...Qa,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s3, { emit: t2 }) {
    return (e2, i2) => (openBlock$1(), createBlock$1(qt, {
      title: s3.title,
      class: normalizeClass$1(["histoire-select htw-cursor-text htw-items-center", e2.$attrs.class]),
      style: normalizeStyle$1(e2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(e2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createVNode$1(Ua, {
          options: s3.options,
          "model-value": s3.modelValue,
          "onUpdate:modelValue": i2[0] || (i2[0] = (n2) => t2("update:modelValue", n2))
        }, null, 8, ["options", "model-value"])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Xa = {
  name: "HstCopyIcon"
}, Me = /* @__PURE__ */ defineComponent$1({
  ...Xa,
  props: {
    content: { type: [String, Function] }
  },
  setup(s3) {
    const t2 = s3, { copy: e2, copied: i2 } = useClipboard(), n2 = async () => {
      const r2 = typeof t2.content == "function" ? await t2.content() : t2.content;
      e2(r2);
    };
    return (r2, o2) => withDirectives$1((openBlock$1(), createBlock$1(unref$1(Icon), {
      icon: "carbon:copy-file",
      class: "htw-w-4 htw-h-4 htw-opacity-50 hover:htw-opacity-100 hover:htw-text-primary-500 htw-cursor-pointer",
      onClick: o2[0] || (o2[0] = (l2) => n2())
    }, null, 512)), [
      [unref$1(VTooltip), {
        content: "Copied!",
        triggers: [],
        shown: unref$1(i2),
        distance: 12,
        delay: 0
      }]
    ]);
  }
}), Ya = {
  key: 0,
  class: "histoire-color-shades htw-grid htw-gap-4 htw-grid-cols-[repeat(auto-fill,minmax(200px,1fr))] htw-m-4"
}, Za = ["onMouseenter"], tc = { class: "htw-flex htw-gap-1" }, ec = { class: "htw-my-0 htw-truncate htw-shrink" }, ic = { class: "htw-flex htw-gap-1" }, nc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, sc = {
  name: "HstColorShades"
}, rc = /* @__PURE__ */ defineComponent$1({
  ...sc,
  props: {
    shades: null,
    getName: { type: Function },
    search: null
  },
  setup(s3) {
    const t2 = s3, e2 = (o2, l2 = "") => Object.entries(o2).reduce((h2, [a2, c2]) => {
      const f2 = l2 ? a2 === "DEFAULT" ? l2 : `${l2}-${a2}` : a2, u2 = typeof c2 == "object" ? e2(c2, f2) : { [f2]: c2 };
      return { ...h2, ...u2 };
    }, {}), i2 = computed$2(() => {
      const o2 = t2.shades, l2 = t2.getName, h2 = e2(o2);
      return Object.entries(h2).map(([a2, c2]) => {
        const f2 = l2 ? l2(a2, c2) : a2;
        return {
          key: a2,
          color: c2,
          name: f2
        };
      });
    }), n2 = computed$2(() => {
      let o2 = i2.value;
      if (t2.search) {
        const l2 = new RegExp(t2.search, "i");
        o2 = o2.filter(({ name: h2 }) => l2.test(h2));
      }
      return o2;
    }), r2 = ref$1(null);
    return (o2, l2) => unref$1(n2).length ? (openBlock$1(), createElementBlock$1("div", Ya, [
      (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(n2), (h2) => (openBlock$1(), createElementBlock$1("div", {
        key: h2.key,
        class: "htw-flex htw-flex-col htw-gap-2",
        onMouseenter: (a2) => r2.value = h2.key,
        onMouseleave: l2[0] || (l2[0] = (a2) => r2.value = null)
      }, [
        renderSlot$1(o2.$slots, "default", {
          color: h2.color
        }, () => [
          createBaseVNode$1("div", {
            class: "htw-rounded-full htw-w-16 htw-h-16",
            style: normalizeStyle$1({
              backgroundColor: h2.color
            })
          }, null, 4)
        ]),
        createBaseVNode$1("div", null, [
          createBaseVNode$1("div", tc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", ec, [
              createTextVNode$1(toDisplayString$2(h2.name), 1)
            ])), [
              [unref$1(VTooltip), h2.name.length > 23 ? h2.name : ""]
            ]),
            r2.value === h2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: h2.name,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ]),
          createBaseVNode$1("div", ic, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", nc, [
              createTextVNode$1(toDisplayString$2(h2.color), 1)
            ])), [
              [unref$1(VTooltip), h2.color.length > 23 ? h2.color : ""]
            ]),
            r2.value === h2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: h2.color,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ])
        ])
      ], 40, Za))), 128))
    ])) : createCommentVNode$1("", true);
  }
}), oc = ["onMouseenter"], lc = { class: "htw-mx-4" }, hc = { class: "htw-flex htw-gap-1" }, ac = { class: "htw-my-0 htw-truncate htw-shrink" }, cc = { class: "htw-flex htw-gap-1" }, fc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, uc = {
  name: "HstTokenList"
}, dc = /* @__PURE__ */ defineComponent$1({
  ...uc,
  props: {
    tokens: null,
    getName: { type: Function }
  },
  setup(s3) {
    const t2 = s3, e2 = computed$2(() => {
      const n2 = t2.tokens, r2 = t2.getName;
      return Object.entries(n2).map(([o2, l2]) => {
        const h2 = r2 ? r2(o2, l2) : o2;
        return {
          key: o2,
          name: h2,
          value: typeof l2 == "number" ? l2.toString() : l2
        };
      });
    }), i2 = ref$1(null);
    return (n2, r2) => (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(e2), (o2) => (openBlock$1(), createElementBlock$1("div", {
      key: o2.key,
      class: "histoire-token-list htw-flex htw-flex-col htw-gap-2 htw-my-8",
      onMouseenter: (l2) => i2.value = o2.key,
      onMouseleave: r2[0] || (r2[0] = (l2) => i2.value = null)
    }, [
      renderSlot$1(n2.$slots, "default", { token: o2 }),
      createBaseVNode$1("div", lc, [
        createBaseVNode$1("div", hc, [
          createBaseVNode$1("pre", ac, toDisplayString$2(o2.name), 1),
          i2.value === o2.key ? (openBlock$1(), createBlock$1(Me, {
            key: 0,
            content: o2.name,
            class: "htw-flex-none"
          }, null, 8, ["content"])) : createCommentVNode$1("", true)
        ]),
        createBaseVNode$1("div", cc, [
          createBaseVNode$1("pre", fc, toDisplayString$2(o2.value), 1),
          i2.value === o2.key ? (openBlock$1(), createBlock$1(Me, {
            key: 0,
            content: typeof o2.value == "string" ? o2.value : JSON.stringify(o2.value),
            class: "htw-flex-none"
          }, null, 8, ["content"])) : createCommentVNode$1("", true)
        ])
      ])
    ], 40, oc))), 128));
  }
}), pc = ["onMouseenter"], gc = { class: "htw-flex htw-gap-1" }, mc = { class: "htw-my-0 htw-truncate htw-shrink" }, wc = { class: "htw-flex htw-gap-1" }, yc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, bc = {
  name: "HstTokenGrid"
}, kc = /* @__PURE__ */ defineComponent$1({
  ...bc,
  props: {
    tokens: null,
    colSize: { default: 180 },
    getName: { type: Function, default: null }
  },
  setup(s3) {
    const t2 = s3, e2 = computed$2(() => {
      const r2 = t2.tokens, o2 = t2.getName;
      return Object.entries(r2).map(([l2, h2]) => {
        const a2 = o2 ? o2(l2, h2) : l2;
        return {
          key: l2,
          name: a2,
          value: typeof h2 == "number" ? h2.toString() : h2
        };
      });
    }), i2 = computed$2(() => `${t2.colSize}px`), n2 = ref$1(null);
    return (r2, o2) => (openBlock$1(), createElementBlock$1("div", {
      class: "histoire-token-grid htw-bind-col-size htw-grid htw-gap-4 htw-m-4",
      style: normalizeStyle$1({
        "--histoire-col-size": unref$1(i2)
      })
    }, [
      (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(e2), (l2) => (openBlock$1(), createElementBlock$1("div", {
        key: l2.key,
        class: "htw-flex htw-flex-col htw-gap-2",
        onMouseenter: (h2) => n2.value = l2.key,
        onMouseleave: o2[0] || (o2[0] = (h2) => n2.value = null)
      }, [
        renderSlot$1(r2.$slots, "default", { token: l2 }),
        createBaseVNode$1("div", null, [
          createBaseVNode$1("div", gc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", mc, [
              createTextVNode$1(toDisplayString$2(l2.name), 1)
            ])), [
              [unref$1(VTooltip), l2.name.length > s3.colSize / 8 ? l2.name : ""]
            ]),
            n2.value === l2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: l2.name,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ]),
          createBaseVNode$1("div", wc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", yc, [
              createTextVNode$1(toDisplayString$2(l2.value), 1)
            ])), [
              [unref$1(VTooltip), l2.value.length > s3.colSize / 8 ? l2.value : ""]
            ]),
            n2.value === l2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: typeof l2.value == "string" ? l2.value : JSON.stringify(l2.value),
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ])
        ])
      ], 40, pc))), 128))
    ], 4));
  }
});
const xc = { class: "-htw-my-1" }, vc = ["id", "name", "value", "checked", "onChange"], Sc = ["for", "onKeydown"], Cc = {
  name: "HstRadio"
}, Ac = /* @__PURE__ */ defineComponent$1({
  ...Cc,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s3, { emit: t2 }) {
    const e2 = s3, i2 = computed$2(() => Array.isArray(e2.options) ? Object.fromEntries(e2.options.map((o2) => typeof o2 == "string" ? [o2, o2] : [o2.value, o2.label])) : e2.options);
    function n2(o2) {
      t2("update:modelValue", o2), r2.value = true;
    }
    const r2 = ref$1(false);
    return (o2, l2) => (openBlock$1(), createBlock$1(qt, {
      role: "group",
      title: s3.title,
      class: normalizeClass$1(["histoire-radio htw-cursor-text", o2.$attrs.class]),
      style: normalizeStyle$1(o2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(o2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", xc, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), (h2, a2) => (openBlock$1(), createElementBlock$1(Fragment$1, { key: a2 }, [
            createBaseVNode$1("input", {
              id: `${a2}-radio`,
              type: "radio",
              name: `${a2}-radio`,
              value: a2,
              checked: a2 === s3.modelValue,
              class: "htw-hidden",
              onChange: (c2) => n2(a2)
            }, null, 40, vc),
            createBaseVNode$1("label", {
              tabindex: "0",
              for: `${a2}-radio`,
              class: "htw-cursor-pointer htw-flex htw-items-center htw-relative htw-py-1 htw-group",
              onKeydown: [
                withKeys(withModifiers$1((c2) => n2(a2), ["prevent"]), ["enter"]),
                withKeys(withModifiers$1((c2) => n2(a2), ["prevent"]), ["space"])
              ]
            }, [
              (openBlock$1(), createElementBlock$1("svg", {
                width: "16",
                height: "16",
                viewBox: "-12 -12 24 24",
                class: normalizeClass$1(["htw-relative htw-z-10 htw-border htw-border-solid htw-text-inherit htw-rounded-full htw-box-border htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out htw-mr-2 group-hover:htw-border-primary-500", [
                  s3.modelValue === a2 ? "htw-border-primary-500" : "htw-border-black/25 dark:htw-border-white/25"
                ]])
              }, [
                createBaseVNode$1("circle", {
                  r: "7",
                  class: normalizeClass$1(["htw-will-change-transform", [
                    r2.value ? "htw-transition-all" : "htw-transition-none",
                    {
                      "htw-delay-150": s3.modelValue === a2
                    },
                    s3.modelValue === a2 ? "htw-fill-primary-500" : "htw-fill-transparent htw-scale-0"
                  ]])
                }, null, 2)
              ], 2)),
              createTextVNode$1(" " + toDisplayString$2(h2), 1)
            ], 40, Sc)
          ], 64))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
});
let E$4 = class E2 {
  /**
  @internal
  */
  constructor() {
  }
  /**
  Get the line description around the given position.
  */
  lineAt(t2) {
    if (t2 < 0 || t2 > this.length)
      throw new RangeError(`Invalid position ${t2} in document of length ${this.length}`);
    return this.lineInner(t2, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(t2) {
    if (t2 < 1 || t2 > this.lines)
      throw new RangeError(`Invalid line number ${t2} in ${this.lines}-line document`);
    return this.lineInner(t2, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(t2, e2, i2) {
    let n2 = [];
    return this.decompose(
      0,
      t2,
      n2,
      2
      /* Open.To */
    ), i2.length && i2.decompose(
      0,
      i2.length,
      n2,
      3
      /* Open.To */
    ), this.decompose(
      e2,
      this.length,
      n2,
      1
      /* Open.From */
    ), Ht.from(n2, this.length - (e2 - t2) + i2.length);
  }
  /**
  Append another document to this one.
  */
  append(t2) {
    return this.replace(this.length, this.length, t2);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(t2, e2 = this.length) {
    let i2 = [];
    return this.decompose(t2, e2, i2, 0), Ht.from(i2, e2 - t2);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(t2) {
    if (t2 == this)
      return true;
    if (t2.length != this.length || t2.lines != this.lines)
      return false;
    let e2 = this.scanIdentical(t2, 1), i2 = this.length - this.scanIdentical(t2, -1), n2 = new li(this), r2 = new li(t2);
    for (let o2 = e2, l2 = e2; ; ) {
      if (n2.next(o2), r2.next(o2), o2 = 0, n2.lineBreak != r2.lineBreak || n2.done != r2.done || n2.value != r2.value)
        return false;
      if (l2 += n2.value.length, n2.done || l2 >= i2)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(t2 = 1) {
    return new li(this, t2);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(t2, e2 = this.length) {
    return new Jo(this, t2, e2);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(t2, e2) {
    let i2;
    if (t2 == null)
      i2 = this.iter();
    else {
      e2 == null && (e2 = this.lines + 1);
      let n2 = this.line(t2).from;
      i2 = this.iterRange(n2, Math.max(n2, e2 == this.lines + 1 ? this.length : e2 <= 1 ? 0 : this.line(e2 - 1).to));
    }
    return new Xo(i2);
  }
  /**
  @internal
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let t2 = [];
    return this.flatten(t2), t2;
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(t2) {
    if (t2.length == 0)
      throw new RangeError("A document must have at least one line");
    return t2.length == 1 && !t2[0] ? E2.empty : t2.length <= 32 ? new G$1(t2) : Ht.from(G$1.split(t2, []));
  }
};
let G$1 = class G2 extends E$4 {
  constructor(t2, e2 = Oc(t2)) {
    super(), this.text = t2, this.length = e2;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(t2, e2, i2, n2) {
    for (let r2 = 0; ; r2++) {
      let o2 = this.text[r2], l2 = n2 + o2.length;
      if ((e2 ? i2 : l2) >= t2)
        return new Mc(n2, l2, i2, o2);
      n2 = l2 + 1, i2++;
    }
  }
  decompose(t2, e2, i2, n2) {
    let r2 = t2 <= 0 && e2 >= this.length ? this : new G2(dr(this.text, t2, e2), Math.min(e2, this.length) - Math.max(0, t2));
    if (n2 & 1) {
      let o2 = i2.pop(), l2 = _i(r2.text, o2.text.slice(), 0, r2.length);
      if (l2.length <= 32)
        i2.push(new G2(l2, o2.length + r2.length));
      else {
        let h2 = l2.length >> 1;
        i2.push(new G2(l2.slice(0, h2)), new G2(l2.slice(h2)));
      }
    } else
      i2.push(r2);
  }
  replace(t2, e2, i2) {
    if (!(i2 instanceof G2))
      return super.replace(t2, e2, i2);
    let n2 = _i(this.text, _i(i2.text, dr(this.text, 0, t2)), e2), r2 = this.length + i2.length - (e2 - t2);
    return n2.length <= 32 ? new G2(n2, r2) : Ht.from(G2.split(n2, []), r2);
  }
  sliceString(t2, e2 = this.length, i2 = `
`) {
    let n2 = "";
    for (let r2 = 0, o2 = 0; r2 <= e2 && o2 < this.text.length; o2++) {
      let l2 = this.text[o2], h2 = r2 + l2.length;
      r2 > t2 && o2 && (n2 += i2), t2 < h2 && e2 > r2 && (n2 += l2.slice(Math.max(0, t2 - r2), e2 - r2)), r2 = h2 + 1;
    }
    return n2;
  }
  flatten(t2) {
    for (let e2 of this.text)
      t2.push(e2);
  }
  scanIdentical() {
    return 0;
  }
  static split(t2, e2) {
    let i2 = [], n2 = -1;
    for (let r2 of t2)
      i2.push(r2), n2 += r2.length + 1, i2.length == 32 && (e2.push(new G2(i2, n2)), i2 = [], n2 = -1);
    return n2 > -1 && e2.push(new G2(i2, n2)), e2;
  }
};
class Ht extends E$4 {
  constructor(t2, e2) {
    super(), this.children = t2, this.length = e2, this.lines = 0;
    for (let i2 of t2)
      this.lines += i2.lines;
  }
  lineInner(t2, e2, i2, n2) {
    for (let r2 = 0; ; r2++) {
      let o2 = this.children[r2], l2 = n2 + o2.length, h2 = i2 + o2.lines - 1;
      if ((e2 ? h2 : l2) >= t2)
        return o2.lineInner(t2, e2, i2, n2);
      n2 = l2 + 1, i2 = h2 + 1;
    }
  }
  decompose(t2, e2, i2, n2) {
    for (let r2 = 0, o2 = 0; o2 <= e2 && r2 < this.children.length; r2++) {
      let l2 = this.children[r2], h2 = o2 + l2.length;
      if (t2 <= h2 && e2 >= o2) {
        let a2 = n2 & ((o2 <= t2 ? 1 : 0) | (h2 >= e2 ? 2 : 0));
        o2 >= t2 && h2 <= e2 && !a2 ? i2.push(l2) : l2.decompose(t2 - o2, e2 - o2, i2, a2);
      }
      o2 = h2 + 1;
    }
  }
  replace(t2, e2, i2) {
    if (i2.lines < this.lines)
      for (let n2 = 0, r2 = 0; n2 < this.children.length; n2++) {
        let o2 = this.children[n2], l2 = r2 + o2.length;
        if (t2 >= r2 && e2 <= l2) {
          let h2 = o2.replace(t2 - r2, e2 - r2, i2), a2 = this.lines - o2.lines + h2.lines;
          if (h2.lines < a2 >> 5 - 1 && h2.lines > a2 >> 5 + 1) {
            let c2 = this.children.slice();
            return c2[n2] = h2, new Ht(c2, this.length - (e2 - t2) + i2.length);
          }
          return super.replace(r2, l2, h2);
        }
        r2 = l2 + 1;
      }
    return super.replace(t2, e2, i2);
  }
  sliceString(t2, e2 = this.length, i2 = `
`) {
    let n2 = "";
    for (let r2 = 0, o2 = 0; r2 < this.children.length && o2 <= e2; r2++) {
      let l2 = this.children[r2], h2 = o2 + l2.length;
      o2 > t2 && r2 && (n2 += i2), t2 < h2 && e2 > o2 && (n2 += l2.sliceString(t2 - o2, e2 - o2, i2)), o2 = h2 + 1;
    }
    return n2;
  }
  flatten(t2) {
    for (let e2 of this.children)
      e2.flatten(t2);
  }
  scanIdentical(t2, e2) {
    if (!(t2 instanceof Ht))
      return 0;
    let i2 = 0, [n2, r2, o2, l2] = e2 > 0 ? [0, 0, this.children.length, t2.children.length] : [this.children.length - 1, t2.children.length - 1, -1, -1];
    for (; ; n2 += e2, r2 += e2) {
      if (n2 == o2 || r2 == l2)
        return i2;
      let h2 = this.children[n2], a2 = t2.children[r2];
      if (h2 != a2)
        return i2 + h2.scanIdentical(a2, e2);
      i2 += h2.length + 1;
    }
  }
  static from(t2, e2 = t2.reduce((i2, n2) => i2 + n2.length + 1, -1)) {
    let i2 = 0;
    for (let d2 of t2)
      i2 += d2.lines;
    if (i2 < 32) {
      let d2 = [];
      for (let p2 of t2)
        p2.flatten(d2);
      return new G$1(d2, e2);
    }
    let n2 = Math.max(
      32,
      i2 >> 5
      /* Tree.BranchShift */
    ), r2 = n2 << 1, o2 = n2 >> 1, l2 = [], h2 = 0, a2 = -1, c2 = [];
    function f2(d2) {
      let p2;
      if (d2.lines > r2 && d2 instanceof Ht)
        for (let w2 of d2.children)
          f2(w2);
      else
        d2.lines > o2 && (h2 > o2 || !h2) ? (u2(), l2.push(d2)) : d2 instanceof G$1 && h2 && (p2 = c2[c2.length - 1]) instanceof G$1 && d2.lines + p2.lines <= 32 ? (h2 += d2.lines, a2 += d2.length + 1, c2[c2.length - 1] = new G$1(p2.text.concat(d2.text), p2.length + 1 + d2.length)) : (h2 + d2.lines > n2 && u2(), h2 += d2.lines, a2 += d2.length + 1, c2.push(d2));
    }
    function u2() {
      h2 != 0 && (l2.push(c2.length == 1 ? c2[0] : Ht.from(c2, a2)), a2 = -1, h2 = c2.length = 0);
    }
    for (let d2 of t2)
      f2(d2);
    return u2(), l2.length == 1 ? l2[0] : new Ht(l2, e2);
  }
}
E$4.empty = /* @__PURE__ */ new G$1([""], 0);
function Oc(s3) {
  let t2 = -1;
  for (let e2 of s3)
    t2 += e2.length + 1;
  return t2;
}
function _i(s3, t2, e2 = 0, i2 = 1e9) {
  for (let n2 = 0, r2 = 0, o2 = true; r2 < s3.length && n2 <= i2; r2++) {
    let l2 = s3[r2], h2 = n2 + l2.length;
    h2 >= e2 && (h2 > i2 && (l2 = l2.slice(0, i2 - n2)), n2 < e2 && (l2 = l2.slice(e2 - n2)), o2 ? (t2[t2.length - 1] += l2, o2 = false) : t2.push(l2)), n2 = h2 + 1;
  }
  return t2;
}
function dr(s3, t2, e2) {
  return _i(s3, [""], t2, e2);
}
class li {
  constructor(t2, e2 = 1) {
    this.dir = e2, this.done = false, this.lineBreak = false, this.value = "", this.nodes = [t2], this.offsets = [e2 > 0 ? 1 : (t2 instanceof G$1 ? t2.text.length : t2.children.length) << 1];
  }
  nextInner(t2, e2) {
    for (this.done = this.lineBreak = false; ; ) {
      let i2 = this.nodes.length - 1, n2 = this.nodes[i2], r2 = this.offsets[i2], o2 = r2 >> 1, l2 = n2 instanceof G$1 ? n2.text.length : n2.children.length;
      if (o2 == (e2 > 0 ? l2 : 0)) {
        if (i2 == 0)
          return this.done = true, this.value = "", this;
        e2 > 0 && this.offsets[i2 - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((r2 & 1) == (e2 > 0 ? 0 : 1)) {
        if (this.offsets[i2] += e2, t2 == 0)
          return this.lineBreak = true, this.value = `
`, this;
        t2--;
      } else if (n2 instanceof G$1) {
        let h2 = n2.text[o2 + (e2 < 0 ? -1 : 0)];
        if (this.offsets[i2] += e2, h2.length > Math.max(0, t2))
          return this.value = t2 == 0 ? h2 : e2 > 0 ? h2.slice(t2) : h2.slice(0, h2.length - t2), this;
        t2 -= h2.length;
      } else {
        let h2 = n2.children[o2 + (e2 < 0 ? -1 : 0)];
        t2 > h2.length ? (t2 -= h2.length, this.offsets[i2] += e2) : (e2 < 0 && this.offsets[i2]--, this.nodes.push(h2), this.offsets.push(e2 > 0 ? 1 : (h2 instanceof G$1 ? h2.text.length : h2.children.length) << 1));
      }
    }
  }
  next(t2 = 0) {
    return t2 < 0 && (this.nextInner(-t2, -this.dir), t2 = this.value.length), this.nextInner(t2, this.dir);
  }
}
class Jo {
  constructor(t2, e2, i2) {
    this.value = "", this.done = false, this.cursor = new li(t2, e2 > i2 ? -1 : 1), this.pos = e2 > i2 ? t2.length : 0, this.from = Math.min(e2, i2), this.to = Math.max(e2, i2);
  }
  nextInner(t2, e2) {
    if (e2 < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = true, this;
    t2 += Math.max(0, e2 < 0 ? this.pos - this.to : this.from - this.pos);
    let i2 = e2 < 0 ? this.pos - this.from : this.to - this.pos;
    t2 > i2 && (t2 = i2), i2 -= t2;
    let { value: n2 } = this.cursor.next(t2);
    return this.pos += (n2.length + t2) * e2, this.value = n2.length <= i2 ? n2 : e2 < 0 ? n2.slice(n2.length - i2) : n2.slice(0, i2), this.done = !this.value, this;
  }
  next(t2 = 0) {
    return t2 < 0 ? t2 = Math.max(t2, this.from - this.pos) : t2 > 0 && (t2 = Math.min(t2, this.to - this.pos)), this.nextInner(t2, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class Xo {
  constructor(t2) {
    this.inner = t2, this.afterBreak = true, this.value = "", this.done = false;
  }
  next(t2 = 0) {
    let { done: e2, lineBreak: i2, value: n2 } = this.inner.next(t2);
    return e2 ? (this.done = true, this.value = "") : i2 ? this.afterBreak ? this.value = "" : (this.afterBreak = true, this.next()) : (this.value = n2, this.afterBreak = false), this;
  }
  get lineBreak() {
    return false;
  }
}
typeof Symbol < "u" && (E$4.prototype[Symbol.iterator] = function() {
  return this.iter();
}, li.prototype[Symbol.iterator] = Jo.prototype[Symbol.iterator] = Xo.prototype[Symbol.iterator] = function() {
  return this;
});
class Mc {
  /**
  @internal
  */
  constructor(t2, e2, i2, n2) {
    this.from = t2, this.to = e2, this.number = i2, this.text = n2;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
}
let Ie$2 = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s3) => s3 ? parseInt(s3, 36) : 1);
for (let s3 = 1; s3 < Ie$2.length; s3++)
  Ie$2[s3] += Ie$2[s3 - 1];
function Dc(s3) {
  for (let t2 = 1; t2 < Ie$2.length; t2 += 2)
    if (Ie$2[t2] > s3)
      return Ie$2[t2 - 1] <= s3;
  return false;
}
function pr(s3) {
  return s3 >= 127462 && s3 <= 127487;
}
const gr = 8205;
function xt(s3, t2, e2 = true, i2 = true) {
  return (e2 ? Yo : Tc)(s3, t2, i2);
}
function Yo(s3, t2, e2) {
  if (t2 == s3.length)
    return t2;
  t2 && Zo(s3.charCodeAt(t2)) && tl(s3.charCodeAt(t2 - 1)) && t2--;
  let i2 = hi(s3, t2);
  for (t2 += es(i2); t2 < s3.length; ) {
    let n2 = hi(s3, t2);
    if (i2 == gr || n2 == gr || e2 && Dc(n2))
      t2 += es(n2), i2 = n2;
    else if (pr(n2)) {
      let r2 = 0, o2 = t2 - 2;
      for (; o2 >= 0 && pr(hi(s3, o2)); )
        r2++, o2 -= 2;
      if (r2 % 2 == 0)
        break;
      t2 += 2;
    } else
      break;
  }
  return t2;
}
function Tc(s3, t2, e2) {
  for (; t2 > 0; ) {
    let i2 = Yo(s3, t2 - 2, e2);
    if (i2 < t2)
      return i2;
    t2--;
  }
  return 0;
}
function Zo(s3) {
  return s3 >= 56320 && s3 < 57344;
}
function tl(s3) {
  return s3 >= 55296 && s3 < 56320;
}
function hi(s3, t2) {
  let e2 = s3.charCodeAt(t2);
  if (!tl(e2) || t2 + 1 == s3.length)
    return e2;
  let i2 = s3.charCodeAt(t2 + 1);
  return Zo(i2) ? (e2 - 55296 << 10) + (i2 - 56320) + 65536 : e2;
}
function es(s3) {
  return s3 < 65536 ? 1 : 2;
}
const is = /\r\n?|\n/;
var gt = /* @__PURE__ */ function(s3) {
  return s3[s3.Simple = 0] = "Simple", s3[s3.TrackDel = 1] = "TrackDel", s3[s3.TrackBefore = 2] = "TrackBefore", s3[s3.TrackAfter = 3] = "TrackAfter", s3;
}(gt || (gt = {}));
class Yt {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(t2) {
    this.sections = t2;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let t2 = 0;
    for (let e2 = 0; e2 < this.sections.length; e2 += 2)
      t2 += this.sections[e2];
    return t2;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let t2 = 0;
    for (let e2 = 0; e2 < this.sections.length; e2 += 2) {
      let i2 = this.sections[e2 + 1];
      t2 += i2 < 0 ? this.sections[e2] : i2;
    }
    return t2;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(t2) {
    for (let e2 = 0, i2 = 0, n2 = 0; e2 < this.sections.length; ) {
      let r2 = this.sections[e2++], o2 = this.sections[e2++];
      o2 < 0 ? (t2(i2, n2, r2), n2 += r2) : n2 += o2, i2 += r2;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(t2, e2 = false) {
    ns(this, t2, e2);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let t2 = [];
    for (let e2 = 0; e2 < this.sections.length; ) {
      let i2 = this.sections[e2++], n2 = this.sections[e2++];
      n2 < 0 ? t2.push(i2, n2) : t2.push(n2, i2);
    }
    return new Yt(t2);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(t2) {
    return this.empty ? t2 : t2.empty ? this : el(this, t2);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(t2, e2 = false) {
    return t2.empty ? this : ss(this, t2, e2);
  }
  mapPos(t2, e2 = -1, i2 = gt.Simple) {
    let n2 = 0, r2 = 0;
    for (let o2 = 0; o2 < this.sections.length; ) {
      let l2 = this.sections[o2++], h2 = this.sections[o2++], a2 = n2 + l2;
      if (h2 < 0) {
        if (a2 > t2)
          return r2 + (t2 - n2);
        r2 += l2;
      } else {
        if (i2 != gt.Simple && a2 >= t2 && (i2 == gt.TrackDel && n2 < t2 && a2 > t2 || i2 == gt.TrackBefore && n2 < t2 || i2 == gt.TrackAfter && a2 > t2))
          return null;
        if (a2 > t2 || a2 == t2 && e2 < 0 && !l2)
          return t2 == n2 || e2 < 0 ? r2 : r2 + h2;
        r2 += h2;
      }
      n2 = a2;
    }
    if (t2 > n2)
      throw new RangeError(`Position ${t2} is out of range for changeset of length ${n2}`);
    return r2;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(t2, e2 = t2) {
    for (let i2 = 0, n2 = 0; i2 < this.sections.length && n2 <= e2; ) {
      let r2 = this.sections[i2++], o2 = this.sections[i2++], l2 = n2 + r2;
      if (o2 >= 0 && n2 <= e2 && l2 >= t2)
        return n2 < t2 && l2 > e2 ? "cover" : true;
      n2 = l2;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let t2 = "";
    for (let e2 = 0; e2 < this.sections.length; ) {
      let i2 = this.sections[e2++], n2 = this.sections[e2++];
      t2 += (t2 ? " " : "") + i2 + (n2 >= 0 ? ":" + n2 : "");
    }
    return t2;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(t2) {
    if (!Array.isArray(t2) || t2.length % 2 || t2.some((e2) => typeof e2 != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Yt(t2);
  }
  /**
  @internal
  */
  static create(t2) {
    return new Yt(t2);
  }
}
class Z extends Yt {
  constructor(t2, e2) {
    super(t2), this.inserted = e2;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(t2) {
    if (this.length != t2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return ns(this, (e2, i2, n2, r2, o2) => t2 = t2.replace(n2, n2 + (i2 - e2), o2), false), t2;
  }
  mapDesc(t2, e2 = false) {
    return ss(this, t2, e2, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(t2) {
    let e2 = this.sections.slice(), i2 = [];
    for (let n2 = 0, r2 = 0; n2 < e2.length; n2 += 2) {
      let o2 = e2[n2], l2 = e2[n2 + 1];
      if (l2 >= 0) {
        e2[n2] = l2, e2[n2 + 1] = o2;
        let h2 = n2 >> 1;
        for (; i2.length < h2; )
          i2.push(E$4.empty);
        i2.push(o2 ? t2.slice(r2, r2 + o2) : E$4.empty);
      }
      r2 += o2;
    }
    return new Z(e2, i2);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(t2) {
    return this.empty ? t2 : t2.empty ? this : el(this, t2, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(t2, e2 = false) {
    return t2.empty ? this : ss(this, t2, e2, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(t2, e2 = false) {
    ns(this, t2, e2);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return Yt.create(this.sections);
  }
  /**
  @internal
  */
  filter(t2) {
    let e2 = [], i2 = [], n2 = [], r2 = new ci(this);
    t:
      for (let o2 = 0, l2 = 0; ; ) {
        let h2 = o2 == t2.length ? 1e9 : t2[o2++];
        for (; l2 < h2 || l2 == h2 && r2.len == 0; ) {
          if (r2.done)
            break t;
          let c2 = Math.min(r2.len, h2 - l2);
          lt(n2, c2, -1);
          let f2 = r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0;
          lt(e2, c2, f2), f2 > 0 && oe(i2, e2, r2.text), r2.forward(c2), l2 += c2;
        }
        let a2 = t2[o2++];
        for (; l2 < a2; ) {
          if (r2.done)
            break t;
          let c2 = Math.min(r2.len, a2 - l2);
          lt(e2, c2, -1), lt(n2, c2, r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0), r2.forward(c2), l2 += c2;
        }
      }
    return {
      changes: new Z(e2, i2),
      filtered: Yt.create(n2)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let t2 = [];
    for (let e2 = 0; e2 < this.sections.length; e2 += 2) {
      let i2 = this.sections[e2], n2 = this.sections[e2 + 1];
      n2 < 0 ? t2.push(i2) : n2 == 0 ? t2.push([i2]) : t2.push([i2].concat(this.inserted[e2 >> 1].toJSON()));
    }
    return t2;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(t2, e2, i2) {
    let n2 = [], r2 = [], o2 = 0, l2 = null;
    function h2(c2 = false) {
      if (!c2 && !n2.length)
        return;
      o2 < e2 && lt(n2, e2 - o2, -1);
      let f2 = new Z(n2, r2);
      l2 = l2 ? l2.compose(f2.map(l2)) : f2, n2 = [], r2 = [], o2 = 0;
    }
    function a2(c2) {
      if (Array.isArray(c2))
        for (let f2 of c2)
          a2(f2);
      else if (c2 instanceof Z) {
        if (c2.length != e2)
          throw new RangeError(`Mismatched change set length (got ${c2.length}, expected ${e2})`);
        h2(), l2 = l2 ? l2.compose(c2.map(l2)) : c2;
      } else {
        let { from: f2, to: u2 = f2, insert: d2 } = c2;
        if (f2 > u2 || f2 < 0 || u2 > e2)
          throw new RangeError(`Invalid change range ${f2} to ${u2} (in doc of length ${e2})`);
        let p2 = d2 ? typeof d2 == "string" ? E$4.of(d2.split(i2 || is)) : d2 : E$4.empty, w2 = p2.length;
        if (f2 == u2 && w2 == 0)
          return;
        f2 < o2 && h2(), f2 > o2 && lt(n2, f2 - o2, -1), lt(n2, u2 - f2, w2), oe(r2, n2, p2), o2 = u2;
      }
    }
    return a2(t2), h2(!l2), l2;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(t2) {
    return new Z(t2 ? [t2, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(t2) {
    if (!Array.isArray(t2))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let e2 = [], i2 = [];
    for (let n2 = 0; n2 < t2.length; n2++) {
      let r2 = t2[n2];
      if (typeof r2 == "number")
        e2.push(r2, -1);
      else {
        if (!Array.isArray(r2) || typeof r2[0] != "number" || r2.some((o2, l2) => l2 && typeof o2 != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (r2.length == 1)
          e2.push(r2[0], 0);
        else {
          for (; i2.length < n2; )
            i2.push(E$4.empty);
          i2[n2] = E$4.of(r2.slice(1)), e2.push(r2[0], i2[n2].length);
        }
      }
    }
    return new Z(e2, i2);
  }
  /**
  @internal
  */
  static createSet(t2, e2) {
    return new Z(t2, e2);
  }
}
function lt(s3, t2, e2, i2 = false) {
  if (t2 == 0 && e2 <= 0)
    return;
  let n2 = s3.length - 2;
  n2 >= 0 && e2 <= 0 && e2 == s3[n2 + 1] ? s3[n2] += t2 : t2 == 0 && s3[n2] == 0 ? s3[n2 + 1] += e2 : i2 ? (s3[n2] += t2, s3[n2 + 1] += e2) : s3.push(t2, e2);
}
function oe(s3, t2, e2) {
  if (e2.length == 0)
    return;
  let i2 = t2.length - 2 >> 1;
  if (i2 < s3.length)
    s3[s3.length - 1] = s3[s3.length - 1].append(e2);
  else {
    for (; s3.length < i2; )
      s3.push(E$4.empty);
    s3.push(e2);
  }
}
function ns(s3, t2, e2) {
  let i2 = s3.inserted;
  for (let n2 = 0, r2 = 0, o2 = 0; o2 < s3.sections.length; ) {
    let l2 = s3.sections[o2++], h2 = s3.sections[o2++];
    if (h2 < 0)
      n2 += l2, r2 += l2;
    else {
      let a2 = n2, c2 = r2, f2 = E$4.empty;
      for (; a2 += l2, c2 += h2, h2 && i2 && (f2 = f2.append(i2[o2 - 2 >> 1])), !(e2 || o2 == s3.sections.length || s3.sections[o2 + 1] < 0); )
        l2 = s3.sections[o2++], h2 = s3.sections[o2++];
      t2(n2, a2, r2, c2, f2), n2 = a2, r2 = c2;
    }
  }
}
function ss(s3, t2, e2, i2 = false) {
  let n2 = [], r2 = i2 ? [] : null, o2 = new ci(s3), l2 = new ci(t2);
  for (let h2 = -1; ; )
    if (o2.ins == -1 && l2.ins == -1) {
      let a2 = Math.min(o2.len, l2.len);
      lt(n2, a2, -1), o2.forward(a2), l2.forward(a2);
    } else if (l2.ins >= 0 && (o2.ins < 0 || h2 == o2.i || o2.off == 0 && (l2.len < o2.len || l2.len == o2.len && !e2))) {
      let a2 = l2.len;
      for (lt(n2, l2.ins, -1); a2; ) {
        let c2 = Math.min(o2.len, a2);
        o2.ins >= 0 && h2 < o2.i && o2.len <= c2 && (lt(n2, 0, o2.ins), r2 && oe(r2, n2, o2.text), h2 = o2.i), o2.forward(c2), a2 -= c2;
      }
      l2.next();
    } else if (o2.ins >= 0) {
      let a2 = 0, c2 = o2.len;
      for (; c2; )
        if (l2.ins == -1) {
          let f2 = Math.min(c2, l2.len);
          a2 += f2, c2 -= f2, l2.forward(f2);
        } else if (l2.ins == 0 && l2.len < c2)
          c2 -= l2.len, l2.next();
        else
          break;
      lt(n2, a2, h2 < o2.i ? o2.ins : 0), r2 && h2 < o2.i && oe(r2, n2, o2.text), h2 = o2.i, o2.forward(o2.len - c2);
    } else {
      if (o2.done && l2.done)
        return r2 ? Z.createSet(n2, r2) : Yt.create(n2);
      throw new Error("Mismatched change set lengths");
    }
}
function el(s3, t2, e2 = false) {
  let i2 = [], n2 = e2 ? [] : null, r2 = new ci(s3), o2 = new ci(t2);
  for (let l2 = false; ; ) {
    if (r2.done && o2.done)
      return n2 ? Z.createSet(i2, n2) : Yt.create(i2);
    if (r2.ins == 0)
      lt(i2, r2.len, 0, l2), r2.next();
    else if (o2.len == 0 && !o2.done)
      lt(i2, 0, o2.ins, l2), n2 && oe(n2, i2, o2.text), o2.next();
    else {
      if (r2.done || o2.done)
        throw new Error("Mismatched change set lengths");
      {
        let h2 = Math.min(r2.len2, o2.len), a2 = i2.length;
        if (r2.ins == -1) {
          let c2 = o2.ins == -1 ? -1 : o2.off ? 0 : o2.ins;
          lt(i2, h2, c2, l2), n2 && c2 && oe(n2, i2, o2.text);
        } else
          o2.ins == -1 ? (lt(i2, r2.off ? 0 : r2.len, h2, l2), n2 && oe(n2, i2, r2.textBit(h2))) : (lt(i2, r2.off ? 0 : r2.len, o2.off ? 0 : o2.ins, l2), n2 && !o2.off && oe(n2, i2, o2.text));
        l2 = (r2.ins > h2 || o2.ins >= 0 && o2.len > h2) && (l2 || i2.length > a2), r2.forward2(h2), o2.forward(h2);
      }
    }
  }
}
class ci {
  constructor(t2) {
    this.set = t2, this.i = 0, this.next();
  }
  next() {
    let { sections: t2 } = this.set;
    this.i < t2.length ? (this.len = t2[this.i++], this.ins = t2[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: t2 } = this.set, e2 = this.i - 2 >> 1;
    return e2 >= t2.length ? E$4.empty : t2[e2];
  }
  textBit(t2) {
    let { inserted: e2 } = this.set, i2 = this.i - 2 >> 1;
    return i2 >= e2.length && !t2 ? E$4.empty : e2[i2].slice(this.off, t2 == null ? void 0 : this.off + t2);
  }
  forward(t2) {
    t2 == this.len ? this.next() : (this.len -= t2, this.off += t2);
  }
  forward2(t2) {
    this.ins == -1 ? this.forward(t2) : t2 == this.ins ? this.next() : (this.ins -= t2, this.off += t2);
  }
}
class Ce {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.flags = i2;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 16 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 16 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let t2 = this.flags & 3;
    return t2 == 3 ? null : t2;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let t2 = this.flags >> 5;
    return t2 == 33554431 ? void 0 : t2;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(t2, e2 = -1) {
    let i2, n2;
    return this.empty ? i2 = n2 = t2.mapPos(this.from, e2) : (i2 = t2.mapPos(this.from, 1), n2 = t2.mapPos(this.to, -1)), i2 == this.from && n2 == this.to ? this : new Ce(i2, n2, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(t2, e2 = t2) {
    if (t2 <= this.anchor && e2 >= this.anchor)
      return b$2.range(t2, e2);
    let i2 = Math.abs(t2 - this.anchor) > Math.abs(e2 - this.anchor) ? t2 : e2;
    return b$2.range(this.anchor, i2);
  }
  /**
  Compare this range to another range.
  */
  eq(t2) {
    return this.anchor == t2.anchor && this.head == t2.head;
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(t2) {
    if (!t2 || typeof t2.anchor != "number" || typeof t2.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return b$2.range(t2.anchor, t2.head);
  }
  /**
  @internal
  */
  static create(t2, e2, i2) {
    return new Ce(t2, e2, i2);
  }
}
let b$2 = class b2 {
  constructor(t2, e2) {
    this.ranges = t2, this.mainIndex = e2;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(t2, e2 = -1) {
    return t2.empty ? this : b2.create(this.ranges.map((i2) => i2.map(t2, e2)), this.mainIndex);
  }
  /**
  Compare this selection to another selection.
  */
  eq(t2) {
    if (this.ranges.length != t2.ranges.length || this.mainIndex != t2.mainIndex)
      return false;
    for (let e2 = 0; e2 < this.ranges.length; e2++)
      if (!this.ranges[e2].eq(t2.ranges[e2]))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new b2([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(t2, e2 = true) {
    return b2.create([t2].concat(this.ranges), e2 ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(t2, e2 = this.mainIndex) {
    let i2 = this.ranges.slice();
    return i2[e2] = t2, b2.create(i2, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((t2) => t2.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(t2) {
    if (!t2 || !Array.isArray(t2.ranges) || typeof t2.main != "number" || t2.main >= t2.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new b2(t2.ranges.map((e2) => Ce.fromJSON(e2)), t2.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(t2, e2 = t2) {
    return new b2([b2.range(t2, e2)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(t2, e2 = 0) {
    if (t2.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i2 = 0, n2 = 0; n2 < t2.length; n2++) {
      let r2 = t2[n2];
      if (r2.empty ? r2.from <= i2 : r2.from < i2)
        return b2.normalized(t2.slice(), e2);
      i2 = r2.to;
    }
    return new b2(t2, e2);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(t2, e2 = 0, i2, n2) {
    return Ce.create(t2, t2, (e2 == 0 ? 0 : e2 < 0 ? 4 : 8) | (i2 == null ? 3 : Math.min(2, i2)) | (n2 ?? 33554431) << 5);
  }
  /**
  Create a selection range.
  */
  static range(t2, e2, i2, n2) {
    let r2 = (i2 ?? 33554431) << 5 | (n2 == null ? 3 : Math.min(2, n2));
    return e2 < t2 ? Ce.create(e2, t2, 24 | r2) : Ce.create(t2, e2, (e2 > t2 ? 4 : 0) | r2);
  }
  /**
  @internal
  */
  static normalized(t2, e2 = 0) {
    let i2 = t2[e2];
    t2.sort((n2, r2) => n2.from - r2.from), e2 = t2.indexOf(i2);
    for (let n2 = 1; n2 < t2.length; n2++) {
      let r2 = t2[n2], o2 = t2[n2 - 1];
      if (r2.empty ? r2.from <= o2.to : r2.from < o2.to) {
        let l2 = o2.from, h2 = Math.max(r2.to, o2.to);
        n2 <= e2 && e2--, t2.splice(--n2, 2, r2.anchor > r2.head ? b2.range(h2, l2) : b2.range(l2, h2));
      }
    }
    return new b2(t2, e2);
  }
};
function il(s3, t2) {
  for (let e2 of s3.ranges)
    if (e2.to > t2)
      throw new RangeError("Selection points outside of document");
}
let _s = 0;
let v$4 = class v2 {
  constructor(t2, e2, i2, n2, r2) {
    this.combine = t2, this.compareInput = e2, this.compare = i2, this.isStatic = n2, this.id = _s++, this.default = t2([]), this.extensions = typeof r2 == "function" ? r2(this) : r2;
  }
  /**
  Define a new facet.
  */
  static define(t2 = {}) {
    return new v2(t2.combine || ((e2) => e2), t2.compareInput || ((e2, i2) => e2 === i2), t2.compare || (t2.combine ? (e2, i2) => e2 === i2 : Ws), !!t2.static, t2.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(t2) {
    return new Wi([], this, 0, t2);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(t2, e2) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Wi(t2, this, 1, e2);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(t2, e2) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Wi(t2, this, 2, e2);
  }
  from(t2, e2) {
    return e2 || (e2 = (i2) => i2), this.compute([t2], (i2) => e2(i2.field(t2)));
  }
};
function Ws(s3, t2) {
  return s3 == t2 || s3.length == t2.length && s3.every((e2, i2) => e2 === t2[i2]);
}
class Wi {
  constructor(t2, e2, i2, n2) {
    this.dependencies = t2, this.facet = e2, this.type = i2, this.value = n2, this.id = _s++;
  }
  dynamicSlot(t2) {
    var e2;
    let i2 = this.value, n2 = this.facet.compareInput, r2 = this.id, o2 = t2[r2] >> 1, l2 = this.type == 2, h2 = false, a2 = false, c2 = [];
    for (let f2 of this.dependencies)
      f2 == "doc" ? h2 = true : f2 == "selection" ? a2 = true : ((e2 = t2[f2.id]) !== null && e2 !== void 0 ? e2 : 1) & 1 || c2.push(t2[f2.id]);
    return {
      create(f2) {
        return f2.values[o2] = i2(f2), 1;
      },
      update(f2, u2) {
        if (h2 && u2.docChanged || a2 && (u2.docChanged || u2.selection) || rs(f2, c2)) {
          let d2 = i2(f2);
          if (l2 ? !mr(d2, f2.values[o2], n2) : !n2(d2, f2.values[o2]))
            return f2.values[o2] = d2, 1;
        }
        return 0;
      },
      reconfigure: (f2, u2) => {
        let d2, p2 = u2.config.address[r2];
        if (p2 != null) {
          let w2 = tn(u2, p2);
          if (this.dependencies.every((g2) => g2 instanceof v$4 ? u2.facet(g2) === f2.facet(g2) : g2 instanceof Bt ? u2.field(g2, false) == f2.field(g2, false) : true) || (l2 ? mr(d2 = i2(f2), w2, n2) : n2(d2 = i2(f2), w2)))
            return f2.values[o2] = w2, 0;
        } else
          d2 = i2(f2);
        return f2.values[o2] = d2, 1;
      }
    };
  }
}
function mr(s3, t2, e2) {
  if (s3.length != t2.length)
    return false;
  for (let i2 = 0; i2 < s3.length; i2++)
    if (!e2(s3[i2], t2[i2]))
      return false;
  return true;
}
function rs(s3, t2) {
  let e2 = false;
  for (let i2 of t2)
    ai(s3, i2) & 1 && (e2 = true);
  return e2;
}
function Pc(s3, t2, e2) {
  let i2 = e2.map((h2) => s3[h2.id]), n2 = e2.map((h2) => h2.type), r2 = i2.filter((h2) => !(h2 & 1)), o2 = s3[t2.id] >> 1;
  function l2(h2) {
    let a2 = [];
    for (let c2 = 0; c2 < i2.length; c2++) {
      let f2 = tn(h2, i2[c2]);
      if (n2[c2] == 2)
        for (let u2 of f2)
          a2.push(u2);
      else
        a2.push(f2);
    }
    return t2.combine(a2);
  }
  return {
    create(h2) {
      for (let a2 of i2)
        ai(h2, a2);
      return h2.values[o2] = l2(h2), 1;
    },
    update(h2, a2) {
      if (!rs(h2, r2))
        return 0;
      let c2 = l2(h2);
      return t2.compare(c2, h2.values[o2]) ? 0 : (h2.values[o2] = c2, 1);
    },
    reconfigure(h2, a2) {
      let c2 = rs(h2, i2), f2 = a2.config.facets[t2.id], u2 = a2.facet(t2);
      if (f2 && !c2 && Ws(e2, f2))
        return h2.values[o2] = u2, 0;
      let d2 = l2(h2);
      return t2.compare(d2, u2) ? (h2.values[o2] = u2, 0) : (h2.values[o2] = d2, 1);
    }
  };
}
const wr = /* @__PURE__ */ v$4.define({ static: true });
class Bt {
  constructor(t2, e2, i2, n2, r2) {
    this.id = t2, this.createF = e2, this.updateF = i2, this.compareF = n2, this.spec = r2, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(t2) {
    let e2 = new Bt(_s++, t2.create, t2.update, t2.compare || ((i2, n2) => i2 === n2), t2);
    return t2.provide && (e2.provides = t2.provide(e2)), e2;
  }
  create(t2) {
    let e2 = t2.facet(wr).find((i2) => i2.field == this);
    return ((e2 == null ? void 0 : e2.create) || this.createF)(t2);
  }
  /**
  @internal
  */
  slot(t2) {
    let e2 = t2[this.id] >> 1;
    return {
      create: (i2) => (i2.values[e2] = this.create(i2), 1),
      update: (i2, n2) => {
        let r2 = i2.values[e2], o2 = this.updateF(r2, n2);
        return this.compareF(r2, o2) ? 0 : (i2.values[e2] = o2, 1);
      },
      reconfigure: (i2, n2) => n2.config.address[this.id] != null ? (i2.values[e2] = n2.field(this), 0) : (i2.values[e2] = this.create(i2), 1)
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(t2) {
    return [this, wr.of({ field: this, create: t2 })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const ve$1 = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Ze(s3) {
  return (t2) => new nl(t2, s3);
}
const js = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Ze(ve$1.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Ze(ve$1.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Ze(ve$1.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ Ze(ve$1.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Ze(ve$1.lowest)
};
class nl {
  constructor(t2, e2) {
    this.inner = t2, this.prec = e2;
  }
}
class yi {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(t2) {
    return new os(this, t2);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(t2) {
    return yi.reconfigure.of({ compartment: this, extension: t2 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(t2) {
    return t2.config.compartments.get(this);
  }
}
class os {
  constructor(t2, e2) {
    this.compartment = t2, this.inner = e2;
  }
}
class Zi {
  constructor(t2, e2, i2, n2, r2, o2) {
    for (this.base = t2, this.compartments = e2, this.dynamicSlots = i2, this.address = n2, this.staticValues = r2, this.facets = o2, this.statusTemplate = []; this.statusTemplate.length < i2.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(t2) {
    let e2 = this.address[t2.id];
    return e2 == null ? t2.default : this.staticValues[e2 >> 1];
  }
  static resolve(t2, e2, i2) {
    let n2 = [], r2 = /* @__PURE__ */ Object.create(null), o2 = /* @__PURE__ */ new Map();
    for (let u2 of Bc(t2, e2, o2))
      u2 instanceof Bt ? n2.push(u2) : (r2[u2.facet.id] || (r2[u2.facet.id] = [])).push(u2);
    let l2 = /* @__PURE__ */ Object.create(null), h2 = [], a2 = [];
    for (let u2 of n2)
      l2[u2.id] = a2.length << 1, a2.push((d2) => u2.slot(d2));
    let c2 = i2 == null ? void 0 : i2.config.facets;
    for (let u2 in r2) {
      let d2 = r2[u2], p2 = d2[0].facet, w2 = c2 && c2[u2] || [];
      if (d2.every(
        (g2) => g2.type == 0
        /* Provider.Static */
      ))
        if (l2[p2.id] = h2.length << 1 | 1, Ws(w2, d2))
          h2.push(i2.facet(p2));
        else {
          let g2 = p2.combine(d2.map((y2) => y2.value));
          h2.push(i2 && p2.compare(g2, i2.facet(p2)) ? i2.facet(p2) : g2);
        }
      else {
        for (let g2 of d2)
          g2.type == 0 ? (l2[g2.id] = h2.length << 1 | 1, h2.push(g2.value)) : (l2[g2.id] = a2.length << 1, a2.push((y2) => g2.dynamicSlot(y2)));
        l2[p2.id] = a2.length << 1, a2.push((g2) => Pc(g2, p2, d2));
      }
    }
    let f2 = a2.map((u2) => u2(l2));
    return new Zi(t2, o2, f2, l2, h2, r2);
  }
}
function Bc(s3, t2, e2) {
  let i2 = [[], [], [], [], []], n2 = /* @__PURE__ */ new Map();
  function r2(o2, l2) {
    let h2 = n2.get(o2);
    if (h2 != null) {
      if (h2 <= l2)
        return;
      let a2 = i2[h2].indexOf(o2);
      a2 > -1 && i2[h2].splice(a2, 1), o2 instanceof os && e2.delete(o2.compartment);
    }
    if (n2.set(o2, l2), Array.isArray(o2))
      for (let a2 of o2)
        r2(a2, l2);
    else if (o2 instanceof os) {
      if (e2.has(o2.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let a2 = t2.get(o2.compartment) || o2.inner;
      e2.set(o2.compartment, a2), r2(a2, l2);
    } else if (o2 instanceof nl)
      r2(o2.inner, o2.prec);
    else if (o2 instanceof Bt)
      i2[l2].push(o2), o2.provides && r2(o2.provides, l2);
    else if (o2 instanceof Wi)
      i2[l2].push(o2), o2.facet.extensions && r2(o2.facet.extensions, ve$1.default);
    else {
      let a2 = o2.extension;
      if (!a2)
        throw new Error(`Unrecognized extension value in extension set (${o2}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      r2(a2, l2);
    }
  }
  return r2(s3, ve$1.default), i2.reduce((o2, l2) => o2.concat(l2));
}
function ai(s3, t2) {
  if (t2 & 1)
    return 2;
  let e2 = t2 >> 1, i2 = s3.status[e2];
  if (i2 == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i2 & 2)
    return i2;
  s3.status[e2] = 4;
  let n2 = s3.computeSlot(s3, s3.config.dynamicSlots[e2]);
  return s3.status[e2] = 2 | n2;
}
function tn(s3, t2) {
  return t2 & 1 ? s3.config.staticValues[t2 >> 1] : s3.values[t2 >> 1];
}
const sl = /* @__PURE__ */ v$4.define(), rl = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.some((t2) => t2),
  static: true
}), ol = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.length ? s3[0] : void 0,
  static: true
}), ll = /* @__PURE__ */ v$4.define(), hl = /* @__PURE__ */ v$4.define(), al = /* @__PURE__ */ v$4.define(), cl = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.length ? s3[0] : false
});
class bi {
  /**
  @internal
  */
  constructor(t2, e2) {
    this.type = t2, this.value = e2;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new Rc();
  }
}
class Rc {
  /**
  Create an instance of this annotation.
  */
  of(t2) {
    return new bi(this, t2);
  }
}
class Lc {
  /**
  @internal
  */
  constructor(t2) {
    this.map = t2;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(t2) {
    return new F$4(this, t2);
  }
}
let F$4 = class F2 {
  /**
  @internal
  */
  constructor(t2, e2) {
    this.type = t2, this.value = e2;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(t2) {
    let e2 = this.type.map(this.value, t2);
    return e2 === void 0 ? void 0 : e2 == this.value ? this : new F2(this.type, e2);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(t2) {
    return this.type == t2;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds.
  */
  static define(t2 = {}) {
    return new Lc(t2.map || ((e2) => e2));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(t2, e2) {
    if (!t2.length)
      return t2;
    let i2 = [];
    for (let n2 of t2) {
      let r2 = n2.map(e2);
      r2 && i2.push(r2);
    }
    return i2;
  }
};
F$4.reconfigure = /* @__PURE__ */ F$4.define();
F$4.appendConfig = /* @__PURE__ */ F$4.define();
class ht {
  constructor(t2, e2, i2, n2, r2, o2) {
    this.startState = t2, this.changes = e2, this.selection = i2, this.effects = n2, this.annotations = r2, this.scrollIntoView = o2, this._doc = null, this._state = null, i2 && il(i2, e2.newLength), r2.some((l2) => l2.type == ht.time) || (this.annotations = r2.concat(ht.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(t2, e2, i2, n2, r2, o2) {
    return new ht(t2, e2, i2, n2, r2, o2);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(t2) {
    for (let e2 of this.annotations)
      if (e2.type == t2)
        return e2.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(t2) {
    let e2 = this.annotation(ht.userEvent);
    return !!(e2 && (e2 == t2 || e2.length > t2.length && e2.slice(0, t2.length) == t2 && e2[t2.length] == "."));
  }
}
ht.time = /* @__PURE__ */ bi.define();
ht.userEvent = /* @__PURE__ */ bi.define();
ht.addToHistory = /* @__PURE__ */ bi.define();
ht.remote = /* @__PURE__ */ bi.define();
function Ec(s3, t2) {
  let e2 = [];
  for (let i2 = 0, n2 = 0; ; ) {
    let r2, o2;
    if (i2 < s3.length && (n2 == t2.length || t2[n2] >= s3[i2]))
      r2 = s3[i2++], o2 = s3[i2++];
    else if (n2 < t2.length)
      r2 = t2[n2++], o2 = t2[n2++];
    else
      return e2;
    !e2.length || e2[e2.length - 1] < r2 ? e2.push(r2, o2) : e2[e2.length - 1] < o2 && (e2[e2.length - 1] = o2);
  }
}
function fl(s3, t2, e2) {
  var i2;
  let n2, r2, o2;
  return e2 ? (n2 = t2.changes, r2 = Z.empty(t2.changes.length), o2 = s3.changes.compose(t2.changes)) : (n2 = t2.changes.map(s3.changes), r2 = s3.changes.mapDesc(t2.changes, true), o2 = s3.changes.compose(n2)), {
    changes: o2,
    selection: t2.selection ? t2.selection.map(r2) : (i2 = s3.selection) === null || i2 === void 0 ? void 0 : i2.map(n2),
    effects: F$4.mapEffects(s3.effects, n2).concat(F$4.mapEffects(t2.effects, r2)),
    annotations: s3.annotations.length ? s3.annotations.concat(t2.annotations) : t2.annotations,
    scrollIntoView: s3.scrollIntoView || t2.scrollIntoView
  };
}
function ls(s3, t2, e2) {
  let i2 = t2.selection, n2 = He(t2.annotations);
  return t2.userEvent && (n2 = n2.concat(ht.userEvent.of(t2.userEvent))), {
    changes: t2.changes instanceof Z ? t2.changes : Z.of(t2.changes || [], e2, s3.facet(ol)),
    selection: i2 && (i2 instanceof b$2 ? i2 : b$2.single(i2.anchor, i2.head)),
    effects: He(t2.effects),
    annotations: n2,
    scrollIntoView: !!t2.scrollIntoView
  };
}
function ul(s3, t2, e2) {
  let i2 = ls(s3, t2.length ? t2[0] : {}, s3.doc.length);
  t2.length && t2[0].filter === false && (e2 = false);
  for (let r2 = 1; r2 < t2.length; r2++) {
    t2[r2].filter === false && (e2 = false);
    let o2 = !!t2[r2].sequential;
    i2 = fl(i2, ls(s3, t2[r2], o2 ? i2.changes.newLength : s3.doc.length), o2);
  }
  let n2 = ht.create(s3, i2.changes, i2.selection, i2.effects, i2.annotations, i2.scrollIntoView);
  return Vc(e2 ? Nc(n2) : n2);
}
function Nc(s3) {
  let t2 = s3.startState, e2 = true;
  for (let n2 of t2.facet(ll)) {
    let r2 = n2(s3);
    if (r2 === false) {
      e2 = false;
      break;
    }
    Array.isArray(r2) && (e2 = e2 === true ? r2 : Ec(e2, r2));
  }
  if (e2 !== true) {
    let n2, r2;
    if (e2 === false)
      r2 = s3.changes.invertedDesc, n2 = Z.empty(t2.doc.length);
    else {
      let o2 = s3.changes.filter(e2);
      n2 = o2.changes, r2 = o2.filtered.mapDesc(o2.changes).invertedDesc;
    }
    s3 = ht.create(t2, n2, s3.selection && s3.selection.map(r2), F$4.mapEffects(s3.effects, r2), s3.annotations, s3.scrollIntoView);
  }
  let i2 = t2.facet(hl);
  for (let n2 = i2.length - 1; n2 >= 0; n2--) {
    let r2 = i2[n2](s3);
    r2 instanceof ht ? s3 = r2 : Array.isArray(r2) && r2.length == 1 && r2[0] instanceof ht ? s3 = r2[0] : s3 = ul(t2, He(r2), false);
  }
  return s3;
}
function Vc(s3) {
  let t2 = s3.startState, e2 = t2.facet(al), i2 = s3;
  for (let n2 = e2.length - 1; n2 >= 0; n2--) {
    let r2 = e2[n2](s3);
    r2 && Object.keys(r2).length && (i2 = fl(i2, ls(t2, r2, s3.changes.newLength), true));
  }
  return i2 == s3 ? s3 : ht.create(t2, s3.changes, s3.selection, i2.effects, i2.annotations, i2.scrollIntoView);
}
const Ic = [];
function He(s3) {
  return s3 == null ? Ic : Array.isArray(s3) ? s3 : [s3];
}
var Jt = /* @__PURE__ */ function(s3) {
  return s3[s3.Word = 0] = "Word", s3[s3.Space = 1] = "Space", s3[s3.Other = 2] = "Other", s3;
}(Jt || (Jt = {}));
const Hc = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let hs;
try {
  hs = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function $c(s3) {
  if (hs)
    return hs.test(s3);
  for (let t2 = 0; t2 < s3.length; t2++) {
    let e2 = s3[t2];
    if (/\w/.test(e2) || e2 > "" && (e2.toUpperCase() != e2.toLowerCase() || Hc.test(e2)))
      return true;
  }
  return false;
}
function Fc(s3) {
  return (t2) => {
    if (!/\S/.test(t2))
      return Jt.Space;
    if ($c(t2))
      return Jt.Word;
    for (let e2 = 0; e2 < s3.length; e2++)
      if (t2.indexOf(s3[e2]) > -1)
        return Jt.Word;
    return Jt.Other;
  };
}
let N$4 = class N2 {
  constructor(t2, e2, i2, n2, r2, o2) {
    this.config = t2, this.doc = e2, this.selection = i2, this.values = n2, this.status = t2.statusTemplate.slice(), this.computeSlot = r2, o2 && (o2._state = this);
    for (let l2 = 0; l2 < this.config.dynamicSlots.length; l2++)
      ai(this, l2 << 1);
    this.computeSlot = null;
  }
  field(t2, e2 = true) {
    let i2 = this.config.address[t2.id];
    if (i2 == null) {
      if (e2)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return ai(this, i2), tn(this, i2);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...t2) {
    return ul(this, t2, true);
  }
  /**
  @internal
  */
  applyTransaction(t2) {
    let e2 = this.config, { base: i2, compartments: n2 } = e2;
    for (let o2 of t2.effects)
      o2.is(yi.reconfigure) ? (e2 && (n2 = /* @__PURE__ */ new Map(), e2.compartments.forEach((l2, h2) => n2.set(h2, l2)), e2 = null), n2.set(o2.value.compartment, o2.value.extension)) : o2.is(F$4.reconfigure) ? (e2 = null, i2 = o2.value) : o2.is(F$4.appendConfig) && (e2 = null, i2 = He(i2).concat(o2.value));
    let r2;
    e2 ? r2 = t2.startState.values.slice() : (e2 = Zi.resolve(i2, n2, this), r2 = new N2(e2, this.doc, this.selection, e2.dynamicSlots.map(() => null), (l2, h2) => h2.reconfigure(l2, this), null).values), new N2(e2, t2.newDoc, t2.newSelection, r2, (o2, l2) => l2.update(o2, t2), t2);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(t2) {
    return typeof t2 == "string" && (t2 = this.toText(t2)), this.changeByRange((e2) => ({
      changes: { from: e2.from, to: e2.to, insert: t2 },
      range: b$2.cursor(e2.from + t2.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(t2) {
    let e2 = this.selection, i2 = t2(e2.ranges[0]), n2 = this.changes(i2.changes), r2 = [i2.range], o2 = He(i2.effects);
    for (let l2 = 1; l2 < e2.ranges.length; l2++) {
      let h2 = t2(e2.ranges[l2]), a2 = this.changes(h2.changes), c2 = a2.map(n2);
      for (let u2 = 0; u2 < l2; u2++)
        r2[u2] = r2[u2].map(c2);
      let f2 = n2.mapDesc(a2, true);
      r2.push(h2.range.map(f2)), n2 = n2.compose(c2), o2 = F$4.mapEffects(o2, c2).concat(F$4.mapEffects(He(h2.effects), f2));
    }
    return {
      changes: n2,
      selection: b$2.create(r2, e2.mainIndex),
      effects: o2
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(t2 = []) {
    return t2 instanceof Z ? t2 : Z.of(t2, this.doc.length, this.facet(N2.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(t2) {
    return E$4.of(t2.split(this.facet(N2.lineSeparator) || is));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(t2 = 0, e2 = this.doc.length) {
    return this.doc.sliceString(t2, e2, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(t2) {
    let e2 = this.config.address[t2.id];
    return e2 == null ? t2.default : (ai(this, e2), tn(this, e2));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(t2) {
    let e2 = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (t2)
      for (let i2 in t2) {
        let n2 = t2[i2];
        n2 instanceof Bt && this.config.address[n2.id] != null && (e2[i2] = n2.spec.toJSON(this.field(t2[i2]), this));
      }
    return e2;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(t2, e2 = {}, i2) {
    if (!t2 || typeof t2.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let n2 = [];
    if (i2) {
      for (let r2 in i2)
        if (Object.prototype.hasOwnProperty.call(t2, r2)) {
          let o2 = i2[r2], l2 = t2[r2];
          n2.push(o2.init((h2) => o2.spec.fromJSON(l2, h2)));
        }
    }
    return N2.create({
      doc: t2.doc,
      selection: b$2.fromJSON(t2.selection),
      extensions: e2.extensions ? n2.concat([e2.extensions]) : n2
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(t2 = {}) {
    let e2 = Zi.resolve(t2.extensions || [], /* @__PURE__ */ new Map()), i2 = t2.doc instanceof E$4 ? t2.doc : E$4.of((t2.doc || "").split(e2.staticFacet(N2.lineSeparator) || is)), n2 = t2.selection ? t2.selection instanceof b$2 ? t2.selection : b$2.single(t2.selection.anchor, t2.selection.head) : b$2.single(0);
    return il(n2, i2.length), e2.staticFacet(rl) || (n2 = n2.asSingle()), new N2(e2, i2, n2, e2.dynamicSlots.map(() => null), (r2, o2) => o2.create(r2), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(N2.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(N2.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(cl);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(t2, ...e2) {
    for (let i2 of this.facet(N2.phrases))
      if (Object.prototype.hasOwnProperty.call(i2, t2)) {
        t2 = i2[t2];
        break;
      }
    return e2.length && (t2 = t2.replace(/\$(\$|\d*)/g, (i2, n2) => {
      if (n2 == "$")
        return "$";
      let r2 = +(n2 || 1);
      return !r2 || r2 > e2.length ? i2 : e2[r2 - 1];
    })), t2;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(t2, e2, i2 = -1) {
    let n2 = [];
    for (let r2 of this.facet(sl))
      for (let o2 of r2(this, e2, i2))
        Object.prototype.hasOwnProperty.call(o2, t2) && n2.push(o2[t2]);
    return n2;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(t2) {
    return Fc(this.languageDataAt("wordChars", t2).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(t2) {
    let { text: e2, from: i2, length: n2 } = this.doc.lineAt(t2), r2 = this.charCategorizer(t2), o2 = t2 - i2, l2 = t2 - i2;
    for (; o2 > 0; ) {
      let h2 = xt(e2, o2, false);
      if (r2(e2.slice(h2, o2)) != Jt.Word)
        break;
      o2 = h2;
    }
    for (; l2 < n2; ) {
      let h2 = xt(e2, l2);
      if (r2(e2.slice(l2, h2)) != Jt.Word)
        break;
      l2 = h2;
    }
    return o2 == l2 ? null : b$2.range(o2 + i2, l2 + i2);
  }
};
N$4.allowMultipleSelections = rl;
N$4.tabSize = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.length ? s3[0] : 4
});
N$4.lineSeparator = ol;
N$4.readOnly = cl;
N$4.phrases = /* @__PURE__ */ v$4.define({
  compare(s3, t2) {
    let e2 = Object.keys(s3), i2 = Object.keys(t2);
    return e2.length == i2.length && e2.every((n2) => s3[n2] == t2[n2]);
  }
});
N$4.languageData = sl;
N$4.changeFilter = ll;
N$4.transactionFilter = hl;
N$4.transactionExtender = al;
yi.reconfigure = /* @__PURE__ */ F$4.define();
function Sn(s3, t2, e2 = {}) {
  let i2 = {};
  for (let n2 of s3)
    for (let r2 of Object.keys(n2)) {
      let o2 = n2[r2], l2 = i2[r2];
      if (l2 === void 0)
        i2[r2] = o2;
      else if (!(l2 === o2 || o2 === void 0))
        if (Object.hasOwnProperty.call(e2, r2))
          i2[r2] = e2[r2](l2, o2);
        else
          throw new Error("Config merge conflict for field " + r2);
    }
  for (let n2 in t2)
    i2[n2] === void 0 && (i2[n2] = t2[n2]);
  return i2;
}
let je$2 = class je2 {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(t2) {
    return this == t2;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(t2, e2 = t2) {
    return as.create(t2, e2, this);
  }
};
je$2.prototype.startSide = je$2.prototype.endSide = 0;
je$2.prototype.point = false;
je$2.prototype.mapMode = gt.TrackDel;
let as = class dl {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.value = i2;
  }
  /**
  @internal
  */
  static create(t2, e2, i2) {
    return new dl(t2, e2, i2);
  }
};
function cs(s3, t2) {
  return s3.from - t2.from || s3.value.startSide - t2.value.startSide;
}
class qs {
  constructor(t2, e2, i2, n2) {
    this.from = t2, this.to = e2, this.value = i2, this.maxPoint = n2;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(t2, e2, i2, n2 = 0) {
    let r2 = i2 ? this.to : this.from;
    for (let o2 = n2, l2 = r2.length; ; ) {
      if (o2 == l2)
        return o2;
      let h2 = o2 + l2 >> 1, a2 = r2[h2] - t2 || (i2 ? this.value[h2].endSide : this.value[h2].startSide) - e2;
      if (h2 == o2)
        return a2 >= 0 ? o2 : l2;
      a2 >= 0 ? l2 = h2 : o2 = h2 + 1;
    }
  }
  between(t2, e2, i2, n2) {
    for (let r2 = this.findIndex(e2, -1e9, true), o2 = this.findIndex(i2, 1e9, false, r2); r2 < o2; r2++)
      if (n2(this.from[r2] + t2, this.to[r2] + t2, this.value[r2]) === false)
        return false;
  }
  map(t2, e2) {
    let i2 = [], n2 = [], r2 = [], o2 = -1, l2 = -1;
    for (let h2 = 0; h2 < this.value.length; h2++) {
      let a2 = this.value[h2], c2 = this.from[h2] + t2, f2 = this.to[h2] + t2, u2, d2;
      if (c2 == f2) {
        let p2 = e2.mapPos(c2, a2.startSide, a2.mapMode);
        if (p2 == null || (u2 = d2 = p2, a2.startSide != a2.endSide && (d2 = e2.mapPos(c2, a2.endSide), d2 < u2)))
          continue;
      } else if (u2 = e2.mapPos(c2, a2.startSide), d2 = e2.mapPos(f2, a2.endSide), u2 > d2 || u2 == d2 && a2.startSide > 0 && a2.endSide <= 0)
        continue;
      (d2 - u2 || a2.endSide - a2.startSide) < 0 || (o2 < 0 && (o2 = u2), a2.point && (l2 = Math.max(l2, d2 - u2)), i2.push(a2), n2.push(u2 - o2), r2.push(d2 - o2));
    }
    return { mapped: i2.length ? new qs(n2, r2, i2, l2) : null, pos: o2 };
  }
}
let $$1 = class $2 {
  constructor(t2, e2, i2, n2) {
    this.chunkPos = t2, this.chunk = e2, this.nextLayer = i2, this.maxPoint = n2;
  }
  /**
  @internal
  */
  static create(t2, e2, i2, n2) {
    return new $2(t2, e2, i2, n2);
  }
  /**
  @internal
  */
  get length() {
    let t2 = this.chunk.length - 1;
    return t2 < 0 ? 0 : Math.max(this.chunkEnd(t2), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let t2 = this.nextLayer.size;
    for (let e2 of this.chunk)
      t2 += e2.value.length;
    return t2;
  }
  /**
  @internal
  */
  chunkEnd(t2) {
    return this.chunkPos[t2] + this.chunk[t2].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(t2) {
    let { add: e2 = [], sort: i2 = false, filterFrom: n2 = 0, filterTo: r2 = this.length } = t2, o2 = t2.filter;
    if (e2.length == 0 && !o2)
      return this;
    if (i2 && (e2 = e2.slice().sort(cs)), this.isEmpty)
      return e2.length ? $2.of(e2) : this;
    let l2 = new pl(this, null, -1).goto(0), h2 = 0, a2 = [], c2 = new De();
    for (; l2.value || h2 < e2.length; )
      if (h2 < e2.length && (l2.from - e2[h2].from || l2.startSide - e2[h2].value.startSide) >= 0) {
        let f2 = e2[h2++];
        c2.addInner(f2.from, f2.to, f2.value) || a2.push(f2);
      } else
        l2.rangeIndex == 1 && l2.chunkIndex < this.chunk.length && (h2 == e2.length || this.chunkEnd(l2.chunkIndex) < e2[h2].from) && (!o2 || n2 > this.chunkEnd(l2.chunkIndex) || r2 < this.chunkPos[l2.chunkIndex]) && c2.addChunk(this.chunkPos[l2.chunkIndex], this.chunk[l2.chunkIndex]) ? l2.nextChunk() : ((!o2 || n2 > l2.to || r2 < l2.from || o2(l2.from, l2.to, l2.value)) && (c2.addInner(l2.from, l2.to, l2.value) || a2.push(as.create(l2.from, l2.to, l2.value))), l2.next());
    return c2.finishInner(this.nextLayer.isEmpty && !a2.length ? $2.empty : this.nextLayer.update({ add: a2, filter: o2, filterFrom: n2, filterTo: r2 }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(t2) {
    if (t2.empty || this.isEmpty)
      return this;
    let e2 = [], i2 = [], n2 = -1;
    for (let o2 = 0; o2 < this.chunk.length; o2++) {
      let l2 = this.chunkPos[o2], h2 = this.chunk[o2], a2 = t2.touchesRange(l2, l2 + h2.length);
      if (a2 === false)
        n2 = Math.max(n2, h2.maxPoint), e2.push(h2), i2.push(t2.mapPos(l2));
      else if (a2 === true) {
        let { mapped: c2, pos: f2 } = h2.map(l2, t2);
        c2 && (n2 = Math.max(n2, c2.maxPoint), e2.push(c2), i2.push(f2));
      }
    }
    let r2 = this.nextLayer.map(t2);
    return e2.length == 0 ? r2 : new $2(i2, e2, r2 || $2.empty, n2);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(t2, e2, i2) {
    if (!this.isEmpty) {
      for (let n2 = 0; n2 < this.chunk.length; n2++) {
        let r2 = this.chunkPos[n2], o2 = this.chunk[n2];
        if (e2 >= r2 && t2 <= r2 + o2.length && o2.between(r2, t2 - r2, e2 - r2, i2) === false)
          return;
      }
      this.nextLayer.between(t2, e2, i2);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(t2 = 0) {
    return fi.from([this]).goto(t2);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(t2, e2 = 0) {
    return fi.from(t2).goto(e2);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(t2, e2, i2, n2, r2 = -1) {
    let o2 = t2.filter((f2) => f2.maxPoint > 0 || !f2.isEmpty && f2.maxPoint >= r2), l2 = e2.filter((f2) => f2.maxPoint > 0 || !f2.isEmpty && f2.maxPoint >= r2), h2 = yr(o2, l2, i2), a2 = new ti(o2, h2, r2), c2 = new ti(l2, h2, r2);
    i2.iterGaps((f2, u2, d2) => br(a2, f2, c2, u2, d2, n2)), i2.empty && i2.length == 0 && br(a2, 0, c2, 0, 0, n2);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(t2, e2, i2 = 0, n2) {
    n2 == null && (n2 = 1e9 - 1);
    let r2 = t2.filter((c2) => !c2.isEmpty && e2.indexOf(c2) < 0), o2 = e2.filter((c2) => !c2.isEmpty && t2.indexOf(c2) < 0);
    if (r2.length != o2.length)
      return false;
    if (!r2.length)
      return true;
    let l2 = yr(r2, o2), h2 = new ti(r2, l2, 0).goto(i2), a2 = new ti(o2, l2, 0).goto(i2);
    for (; ; ) {
      if (h2.to != a2.to || !fs(h2.active, a2.active) || h2.point && (!a2.point || !h2.point.eq(a2.point)))
        return false;
      if (h2.to > n2)
        return true;
      h2.next(), a2.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(t2, e2, i2, n2, r2 = -1) {
    let o2 = new ti(t2, null, r2).goto(e2), l2 = e2, h2 = o2.openStart;
    for (; ; ) {
      let a2 = Math.min(o2.to, i2);
      if (o2.point) {
        let c2 = o2.activeForPoint(o2.to), f2 = o2.pointFrom < e2 ? c2.length + 1 : Math.min(c2.length, h2);
        n2.point(l2, a2, o2.point, c2, f2, o2.pointRank), h2 = Math.min(o2.openEnd(a2), c2.length);
      } else
        a2 > l2 && (n2.span(l2, a2, o2.active, h2), h2 = o2.openEnd(a2));
      if (o2.to > i2)
        return h2 + (o2.point && o2.to > i2 ? 1 : 0);
      l2 = o2.to, o2.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(t2, e2 = false) {
    let i2 = new De();
    for (let n2 of t2 instanceof as ? [t2] : e2 ? zc(t2) : t2)
      i2.add(n2.from, n2.to, n2.value);
    return i2.finish();
  }
};
$$1.empty = /* @__PURE__ */ new $$1([], [], null, -1);
function zc(s3) {
  if (s3.length > 1)
    for (let t2 = s3[0], e2 = 1; e2 < s3.length; e2++) {
      let i2 = s3[e2];
      if (cs(t2, i2) > 0)
        return s3.slice().sort(cs);
      t2 = i2;
    }
  return s3;
}
$$1.empty.nextLayer = $$1.empty;
class De {
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  finishChunk(t2) {
    this.chunks.push(new qs(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, t2 && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(t2, e2, i2) {
    this.addInner(t2, e2, i2) || (this.nextLayer || (this.nextLayer = new De())).add(t2, e2, i2);
  }
  /**
  @internal
  */
  addInner(t2, e2, i2) {
    let n2 = t2 - this.lastTo || i2.startSide - this.last.endSide;
    if (n2 <= 0 && (t2 - this.lastFrom || i2.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return n2 < 0 ? false : (this.from.length == 250 && this.finishChunk(true), this.chunkStart < 0 && (this.chunkStart = t2), this.from.push(t2 - this.chunkStart), this.to.push(e2 - this.chunkStart), this.last = i2, this.lastFrom = t2, this.lastTo = e2, this.value.push(i2), i2.point && (this.maxPoint = Math.max(this.maxPoint, e2 - t2)), true);
  }
  /**
  @internal
  */
  addChunk(t2, e2) {
    if ((t2 - this.lastTo || e2.value[0].startSide - this.last.endSide) < 0)
      return false;
    this.from.length && this.finishChunk(true), this.setMaxPoint = Math.max(this.setMaxPoint, e2.maxPoint), this.chunks.push(e2), this.chunkPos.push(t2);
    let i2 = e2.value.length - 1;
    return this.last = e2.value[i2], this.lastFrom = e2.from[i2] + t2, this.lastTo = e2.to[i2] + t2, true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner($$1.empty);
  }
  /**
  @internal
  */
  finishInner(t2) {
    if (this.from.length && this.finishChunk(false), this.chunks.length == 0)
      return t2;
    let e2 = $$1.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(t2) : t2, this.setMaxPoint);
    return this.from = null, e2;
  }
}
function yr(s3, t2, e2) {
  let i2 = /* @__PURE__ */ new Map();
  for (let r2 of s3)
    for (let o2 = 0; o2 < r2.chunk.length; o2++)
      r2.chunk[o2].maxPoint <= 0 && i2.set(r2.chunk[o2], r2.chunkPos[o2]);
  let n2 = /* @__PURE__ */ new Set();
  for (let r2 of t2)
    for (let o2 = 0; o2 < r2.chunk.length; o2++) {
      let l2 = i2.get(r2.chunk[o2]);
      l2 != null && (e2 ? e2.mapPos(l2) : l2) == r2.chunkPos[o2] && !(e2 != null && e2.touchesRange(l2, l2 + r2.chunk[o2].length)) && n2.add(r2.chunk[o2]);
    }
  return n2;
}
class pl {
  constructor(t2, e2, i2, n2 = 0) {
    this.layer = t2, this.skip = e2, this.minPoint = i2, this.rank = n2;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(t2, e2 = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(t2, e2, false), this;
  }
  gotoInner(t2, e2, i2) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let n2 = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(n2) || this.layer.chunkEnd(this.chunkIndex) < t2 || n2.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i2 = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let n2 = this.layer.chunk[this.chunkIndex].findIndex(t2 - this.layer.chunkPos[this.chunkIndex], e2, true);
      (!i2 || this.rangeIndex < n2) && this.setRangeIndex(n2);
    }
    this.next();
  }
  forward(t2, e2) {
    (this.to - t2 || this.endSide - e2) < 0 && this.gotoInner(t2, e2, true);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let t2 = this.layer.chunkPos[this.chunkIndex], e2 = this.layer.chunk[this.chunkIndex], i2 = t2 + e2.from[this.rangeIndex];
        if (this.from = i2, this.to = t2 + e2.to[this.rangeIndex], this.value = e2.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(t2) {
    if (t2 == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = t2;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(t2) {
    return this.from - t2.from || this.startSide - t2.startSide || this.rank - t2.rank || this.to - t2.to || this.endSide - t2.endSide;
  }
}
class fi {
  constructor(t2) {
    this.heap = t2;
  }
  static from(t2, e2 = null, i2 = -1) {
    let n2 = [];
    for (let r2 = 0; r2 < t2.length; r2++)
      for (let o2 = t2[r2]; !o2.isEmpty; o2 = o2.nextLayer)
        o2.maxPoint >= i2 && n2.push(new pl(o2, e2, i2, r2));
    return n2.length == 1 ? n2[0] : new fi(n2);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(t2, e2 = -1e9) {
    for (let i2 of this.heap)
      i2.goto(t2, e2);
    for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
      Nn(this.heap, i2);
    return this.next(), this;
  }
  forward(t2, e2) {
    for (let i2 of this.heap)
      i2.forward(t2, e2);
    for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
      Nn(this.heap, i2);
    (this.to - t2 || this.value.endSide - e2) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let t2 = this.heap[0];
      this.from = t2.from, this.to = t2.to, this.value = t2.value, this.rank = t2.rank, t2.value && t2.next(), Nn(this.heap, 0);
    }
  }
}
function Nn(s3, t2) {
  for (let e2 = s3[t2]; ; ) {
    let i2 = (t2 << 1) + 1;
    if (i2 >= s3.length)
      break;
    let n2 = s3[i2];
    if (i2 + 1 < s3.length && n2.compare(s3[i2 + 1]) >= 0 && (n2 = s3[i2 + 1], i2++), e2.compare(n2) < 0)
      break;
    s3[i2] = e2, s3[t2] = n2, t2 = i2;
  }
}
class ti {
  constructor(t2, e2, i2) {
    this.minPoint = i2, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = fi.from(t2, e2, i2);
  }
  goto(t2, e2 = -1e9) {
    return this.cursor.goto(t2, e2), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = t2, this.endSide = e2, this.openStart = -1, this.next(), this;
  }
  forward(t2, e2) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - t2 || this.active[this.minActive].endSide - e2) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(t2, e2);
  }
  removeActive(t2) {
    Ci(this.active, t2), Ci(this.activeTo, t2), Ci(this.activeRank, t2), this.minActive = kr(this.active, this.activeTo);
  }
  addActive(t2) {
    let e2 = 0, { value: i2, to: n2, rank: r2 } = this.cursor;
    for (; e2 < this.activeRank.length && this.activeRank[e2] <= r2; )
      e2++;
    Ai(this.active, e2, i2), Ai(this.activeTo, e2, n2), Ai(this.activeRank, e2, r2), t2 && Ai(t2, e2, this.cursor.from), this.minActive = kr(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let t2 = this.to, e2 = this.point;
    this.point = null;
    let i2 = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let n2 = this.minActive;
      if (n2 > -1 && (this.activeTo[n2] - this.cursor.from || this.active[n2].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[n2] > t2) {
          this.to = this.activeTo[n2], this.endSide = this.active[n2].endSide;
          break;
        }
        this.removeActive(n2), i2 && Ci(i2, n2);
      } else if (this.cursor.value)
        if (this.cursor.from > t2) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let r2 = this.cursor.value;
          if (!r2.point)
            this.addActive(i2), this.cursor.next();
          else if (e2 && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = r2, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r2.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i2) {
      this.openStart = 0;
      for (let n2 = i2.length - 1; n2 >= 0 && i2[n2] < t2; n2--)
        this.openStart++;
    }
  }
  activeForPoint(t2) {
    if (!this.active.length)
      return this.active;
    let e2 = [];
    for (let i2 = this.active.length - 1; i2 >= 0 && !(this.activeRank[i2] < this.pointRank); i2--)
      (this.activeTo[i2] > t2 || this.activeTo[i2] == t2 && this.active[i2].endSide >= this.point.endSide) && e2.push(this.active[i2]);
    return e2.reverse();
  }
  openEnd(t2) {
    let e2 = 0;
    for (let i2 = this.activeTo.length - 1; i2 >= 0 && this.activeTo[i2] > t2; i2--)
      e2++;
    return e2;
  }
}
function br(s3, t2, e2, i2, n2, r2) {
  s3.goto(t2), e2.goto(i2);
  let o2 = i2 + n2, l2 = i2, h2 = i2 - t2;
  for (; ; ) {
    let a2 = s3.to + h2 - e2.to || s3.endSide - e2.endSide, c2 = a2 < 0 ? s3.to + h2 : e2.to, f2 = Math.min(c2, o2);
    if (s3.point || e2.point ? s3.point && e2.point && (s3.point == e2.point || s3.point.eq(e2.point)) && fs(s3.activeForPoint(s3.to + h2), e2.activeForPoint(e2.to)) || r2.comparePoint(l2, f2, s3.point, e2.point) : f2 > l2 && !fs(s3.active, e2.active) && r2.compareRange(l2, f2, s3.active, e2.active), c2 > o2)
      break;
    l2 = c2, a2 <= 0 && s3.next(), a2 >= 0 && e2.next();
  }
}
function fs(s3, t2) {
  if (s3.length != t2.length)
    return false;
  for (let e2 = 0; e2 < s3.length; e2++)
    if (s3[e2] != t2[e2] && !s3[e2].eq(t2[e2]))
      return false;
  return true;
}
function Ci(s3, t2) {
  for (let e2 = t2, i2 = s3.length - 1; e2 < i2; e2++)
    s3[e2] = s3[e2 + 1];
  s3.pop();
}
function Ai(s3, t2, e2) {
  for (let i2 = s3.length - 1; i2 >= t2; i2--)
    s3[i2 + 1] = s3[i2];
  s3[t2] = e2;
}
function kr(s3, t2) {
  let e2 = -1, i2 = 1e9;
  for (let n2 = 0; n2 < t2.length; n2++)
    (t2[n2] - i2 || s3[n2].endSide - s3[e2].endSide) < 0 && (e2 = n2, i2 = t2[n2]);
  return e2;
}
function Cn(s3, t2, e2 = s3.length) {
  let i2 = 0;
  for (let n2 = 0; n2 < e2; )
    s3.charCodeAt(n2) == 9 ? (i2 += t2 - i2 % t2, n2++) : (i2++, n2 = xt(s3, n2));
  return i2;
}
function _c(s3, t2, e2, i2) {
  for (let n2 = 0, r2 = 0; ; ) {
    if (r2 >= t2)
      return n2;
    if (n2 == s3.length)
      break;
    r2 += s3.charCodeAt(n2) == 9 ? e2 - r2 % e2 : 1, n2 = xt(s3, n2);
  }
  return i2 === true ? -1 : s3.length;
}
const us = "ͼ", xr = typeof Symbol > "u" ? "__" + us : Symbol.for(us), ds = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), vr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
let de$1 = class de2 {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(t2, e2) {
    this.rules = [];
    let { finish: i2 } = e2 || {};
    function n2(o2) {
      return /^@/.test(o2) ? [o2] : o2.split(/,\s*/);
    }
    function r2(o2, l2, h2, a2) {
      let c2 = [], f2 = /^@(\w+)\b/.exec(o2[0]), u2 = f2 && f2[1] == "keyframes";
      if (f2 && l2 == null)
        return h2.push(o2[0] + ";");
      for (let d2 in l2) {
        let p2 = l2[d2];
        if (/&/.test(d2))
          r2(
            d2.split(/,\s*/).map((w2) => o2.map((g2) => w2.replace(/&/, g2))).reduce((w2, g2) => w2.concat(g2)),
            p2,
            h2
          );
        else if (p2 && typeof p2 == "object") {
          if (!f2)
            throw new RangeError("The value of a property (" + d2 + ") should be a primitive value.");
          r2(n2(d2), p2, c2, u2);
        } else
          p2 != null && c2.push(d2.replace(/_.*/, "").replace(/[A-Z]/g, (w2) => "-" + w2.toLowerCase()) + ": " + p2 + ";");
      }
      (c2.length || u2) && h2.push((i2 && !f2 && !a2 ? o2.map(i2) : o2).join(", ") + " {" + c2.join(" ") + "}");
    }
    for (let o2 in t2)
      r2(n2(o2), t2[o2], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let t2 = vr[xr] || 1;
    return vr[xr] = t2 + 1, us + t2.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  static mount(t2, e2) {
    (t2[ds] || new Wc(t2)).mount(Array.isArray(e2) ? e2 : [e2]);
  }
};
let Oi = null;
class Wc {
  constructor(t2) {
    if (!t2.head && t2.adoptedStyleSheets && typeof CSSStyleSheet < "u") {
      if (Oi)
        return t2.adoptedStyleSheets = [Oi.sheet].concat(t2.adoptedStyleSheets), t2[ds] = Oi;
      this.sheet = new CSSStyleSheet(), t2.adoptedStyleSheets = [this.sheet].concat(t2.adoptedStyleSheets), Oi = this;
    } else {
      this.styleTag = (t2.ownerDocument || t2).createElement("style");
      let e2 = t2.head || t2;
      e2.insertBefore(this.styleTag, e2.firstChild);
    }
    this.modules = [], t2[ds] = this;
  }
  mount(t2) {
    let e2 = this.sheet, i2 = 0, n2 = 0;
    for (let r2 = 0; r2 < t2.length; r2++) {
      let o2 = t2[r2], l2 = this.modules.indexOf(o2);
      if (l2 < n2 && l2 > -1 && (this.modules.splice(l2, 1), n2--, l2 = -1), l2 == -1) {
        if (this.modules.splice(n2++, 0, o2), e2)
          for (let h2 = 0; h2 < o2.rules.length; h2++)
            e2.insertRule(o2.rules[h2], i2++);
      } else {
        for (; n2 < l2; )
          i2 += this.modules[n2++].rules.length;
        i2 += o2.rules.length, n2++;
      }
    }
    if (!e2) {
      let r2 = "";
      for (let o2 = 0; o2 < this.modules.length; o2++)
        r2 += this.modules[o2].getRules() + `
`;
      this.styleTag.textContent = r2;
    }
  }
}
var pe$1 = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, ui = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, Sr = typeof navigator < "u" && /Chrome\/(\d+)/.exec(navigator.userAgent), jc = typeof navigator < "u" && /Mac/.test(navigator.platform), qc = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent), Kc = jc || Sr && +Sr[1] < 57;
for (var nt = 0; nt < 10; nt++)
  pe$1[48 + nt] = pe$1[96 + nt] = String(nt);
for (var nt = 1; nt <= 24; nt++)
  pe$1[nt + 111] = "F" + nt;
for (var nt = 65; nt <= 90; nt++)
  pe$1[nt] = String.fromCharCode(nt + 32), ui[nt] = String.fromCharCode(nt);
for (var Vn in pe$1)
  ui.hasOwnProperty(Vn) || (ui[Vn] = pe$1[Vn]);
function Gc(s3) {
  var t2 = Kc && (s3.ctrlKey || s3.altKey || s3.metaKey) || qc && s3.shiftKey && s3.key && s3.key.length == 1 || s3.key == "Unidentified", e2 = !t2 && s3.key || (s3.shiftKey ? ui : pe$1)[s3.keyCode] || s3.key || "Unidentified";
  return e2 == "Esc" && (e2 = "Escape"), e2 == "Del" && (e2 = "Delete"), e2 == "Left" && (e2 = "ArrowLeft"), e2 == "Up" && (e2 = "ArrowUp"), e2 == "Right" && (e2 = "ArrowRight"), e2 == "Down" && (e2 = "ArrowDown"), e2;
}
function en(s3) {
  let t2;
  return s3.nodeType == 11 ? t2 = s3.getSelection ? s3 : s3.ownerDocument : t2 = s3, t2.getSelection();
}
function qe$1(s3, t2) {
  return t2 ? s3 == t2 || s3.contains(t2.nodeType != 1 ? t2.parentNode : t2) : false;
}
function Uc(s3) {
  let t2 = s3.activeElement;
  for (; t2 && t2.shadowRoot; )
    t2 = t2.shadowRoot.activeElement;
  return t2;
}
function ji(s3, t2) {
  if (!t2.anchorNode)
    return false;
  try {
    return qe$1(s3, t2.anchorNode);
  } catch {
    return false;
  }
}
function di(s3) {
  return s3.nodeType == 3 ? Ke$1(s3, 0, s3.nodeValue.length).getClientRects() : s3.nodeType == 1 ? s3.getClientRects() : [];
}
function nn(s3, t2, e2, i2) {
  return e2 ? Cr(s3, t2, e2, i2, -1) || Cr(s3, t2, e2, i2, 1) : false;
}
function sn(s3) {
  for (var t2 = 0; ; t2++)
    if (s3 = s3.previousSibling, !s3)
      return t2;
}
function Cr(s3, t2, e2, i2, n2) {
  for (; ; ) {
    if (s3 == e2 && t2 == i2)
      return true;
    if (t2 == (n2 < 0 ? 0 : pi(s3))) {
      if (s3.nodeName == "DIV")
        return false;
      let r2 = s3.parentNode;
      if (!r2 || r2.nodeType != 1)
        return false;
      t2 = sn(s3) + (n2 < 0 ? 0 : 1), s3 = r2;
    } else if (s3.nodeType == 1) {
      if (s3 = s3.childNodes[t2 + (n2 < 0 ? -1 : 0)], s3.nodeType == 1 && s3.contentEditable == "false")
        return false;
      t2 = n2 < 0 ? pi(s3) : 0;
    } else
      return false;
  }
}
function pi(s3) {
  return s3.nodeType == 3 ? s3.nodeValue.length : s3.childNodes.length;
}
const gl = { left: 0, right: 0, top: 0, bottom: 0 };
function Ks(s3, t2) {
  let e2 = t2 ? s3.left : s3.right;
  return { left: e2, right: e2, top: s3.top, bottom: s3.bottom };
}
function Qc(s3) {
  return {
    left: 0,
    right: s3.innerWidth,
    top: 0,
    bottom: s3.innerHeight
  };
}
function Jc(s3, t2, e2, i2, n2, r2, o2, l2) {
  let h2 = s3.ownerDocument, a2 = h2.defaultView || window;
  for (let c2 = s3; c2; )
    if (c2.nodeType == 1) {
      let f2, u2 = c2 == h2.body;
      if (u2)
        f2 = Qc(a2);
      else {
        if (c2.scrollHeight <= c2.clientHeight && c2.scrollWidth <= c2.clientWidth) {
          c2 = c2.assignedSlot || c2.parentNode;
          continue;
        }
        let w2 = c2.getBoundingClientRect();
        f2 = {
          left: w2.left,
          right: w2.left + c2.clientWidth,
          top: w2.top,
          bottom: w2.top + c2.clientHeight
        };
      }
      let d2 = 0, p2 = 0;
      if (n2 == "nearest")
        t2.top < f2.top ? (p2 = -(f2.top - t2.top + o2), e2 > 0 && t2.bottom > f2.bottom + p2 && (p2 = t2.bottom - f2.bottom + p2 + o2)) : t2.bottom > f2.bottom && (p2 = t2.bottom - f2.bottom + o2, e2 < 0 && t2.top - p2 < f2.top && (p2 = -(f2.top + p2 - t2.top + o2)));
      else {
        let w2 = t2.bottom - t2.top, g2 = f2.bottom - f2.top;
        p2 = (n2 == "center" && w2 <= g2 ? t2.top + w2 / 2 - g2 / 2 : n2 == "start" || n2 == "center" && e2 < 0 ? t2.top - o2 : t2.bottom - g2 + o2) - f2.top;
      }
      if (i2 == "nearest" ? t2.left < f2.left ? (d2 = -(f2.left - t2.left + r2), e2 > 0 && t2.right > f2.right + d2 && (d2 = t2.right - f2.right + d2 + r2)) : t2.right > f2.right && (d2 = t2.right - f2.right + r2, e2 < 0 && t2.left < f2.left + d2 && (d2 = -(f2.left + d2 - t2.left + r2))) : d2 = (i2 == "center" ? t2.left + (t2.right - t2.left) / 2 - (f2.right - f2.left) / 2 : i2 == "start" == l2 ? t2.left - r2 : t2.right - (f2.right - f2.left) + r2) - f2.left, d2 || p2)
        if (u2)
          a2.scrollBy(d2, p2);
        else {
          let w2 = 0, g2 = 0;
          if (p2) {
            let y2 = c2.scrollTop;
            c2.scrollTop += p2, g2 = c2.scrollTop - y2;
          }
          if (d2) {
            let y2 = c2.scrollLeft;
            c2.scrollLeft += d2, w2 = c2.scrollLeft - y2;
          }
          t2 = {
            left: t2.left - w2,
            top: t2.top - g2,
            right: t2.right - w2,
            bottom: t2.bottom - g2
          }, w2 && Math.abs(w2 - d2) < 1 && (i2 = "nearest"), g2 && Math.abs(g2 - p2) < 1 && (n2 = "nearest");
        }
      if (u2)
        break;
      c2 = c2.assignedSlot || c2.parentNode;
    } else if (c2.nodeType == 11)
      c2 = c2.host;
    else
      break;
}
function Xc(s3) {
  let t2 = s3.ownerDocument;
  for (let e2 = s3.parentNode; e2 && e2 != t2.body; )
    if (e2.nodeType == 1) {
      if (e2.scrollHeight > e2.clientHeight || e2.scrollWidth > e2.clientWidth)
        return e2;
      e2 = e2.assignedSlot || e2.parentNode;
    } else if (e2.nodeType == 11)
      e2 = e2.host;
    else
      break;
  return null;
}
class Yc {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(t2) {
    return this.anchorNode == t2.anchorNode && this.anchorOffset == t2.anchorOffset && this.focusNode == t2.focusNode && this.focusOffset == t2.focusOffset;
  }
  setRange(t2) {
    this.set(t2.anchorNode, t2.anchorOffset, t2.focusNode, t2.focusOffset);
  }
  set(t2, e2, i2, n2) {
    this.anchorNode = t2, this.anchorOffset = e2, this.focusNode = i2, this.focusOffset = n2;
  }
}
let Ne$1 = null;
function ml(s3) {
  if (s3.setActive)
    return s3.setActive();
  if (Ne$1)
    return s3.focus(Ne$1);
  let t2 = [];
  for (let e2 = s3; e2 && (t2.push(e2, e2.scrollTop, e2.scrollLeft), e2 != e2.ownerDocument); e2 = e2.parentNode)
    ;
  if (s3.focus(Ne$1 == null ? {
    get preventScroll() {
      return Ne$1 = { preventScroll: true }, true;
    }
  } : void 0), !Ne$1) {
    Ne$1 = false;
    for (let e2 = 0; e2 < t2.length; ) {
      let i2 = t2[e2++], n2 = t2[e2++], r2 = t2[e2++];
      i2.scrollTop != n2 && (i2.scrollTop = n2), i2.scrollLeft != r2 && (i2.scrollLeft = r2);
    }
  }
}
let Ar;
function Ke$1(s3, t2, e2 = t2) {
  let i2 = Ar || (Ar = document.createRange());
  return i2.setEnd(s3, e2), i2.setStart(s3, t2), i2;
}
function $e(s3, t2, e2) {
  let i2 = { key: t2, code: t2, keyCode: e2, which: e2, cancelable: true }, n2 = new KeyboardEvent("keydown", i2);
  n2.synthetic = true, s3.dispatchEvent(n2);
  let r2 = new KeyboardEvent("keyup", i2);
  return r2.synthetic = true, s3.dispatchEvent(r2), n2.defaultPrevented || r2.defaultPrevented;
}
function Zc(s3) {
  for (; s3; ) {
    if (s3 && (s3.nodeType == 9 || s3.nodeType == 11 && s3.host))
      return s3;
    s3 = s3.assignedSlot || s3.parentNode;
  }
  return null;
}
function wl(s3) {
  for (; s3.attributes.length; )
    s3.removeAttributeNode(s3.attributes[0]);
}
function tf(s3, t2) {
  let e2 = t2.focusNode, i2 = t2.focusOffset;
  if (!e2 || t2.anchorNode != e2 || t2.anchorOffset != i2)
    return false;
  for (; ; )
    if (i2) {
      if (e2.nodeType != 1)
        return false;
      let n2 = e2.childNodes[i2 - 1];
      n2.contentEditable == "false" ? i2-- : (e2 = n2, i2 = pi(e2));
    } else {
      if (e2 == s3)
        return true;
      i2 = sn(e2), e2 = e2.parentNode;
    }
}
class at {
  constructor(t2, e2, i2 = true) {
    this.node = t2, this.offset = e2, this.precise = i2;
  }
  static before(t2, e2) {
    return new at(t2.parentNode, sn(t2), e2);
  }
  static after(t2, e2) {
    return new at(t2.parentNode, sn(t2) + 1, e2);
  }
}
const Gs = [];
let W$2 = class W2 {
  constructor() {
    this.parent = null, this.dom = null, this.dirty = 2;
  }
  get editorView() {
    if (!this.parent)
      throw new Error("Accessing view in orphan content view");
    return this.parent.editorView;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(t2) {
    let e2 = this.posAtStart;
    for (let i2 of this.children) {
      if (i2 == t2)
        return e2;
      e2 += i2.length + i2.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(t2) {
    return this.posBefore(t2) + t2.length;
  }
  // Will return a rectangle directly before (when side < 0), after
  // (side > 0) or directly on (when the browser supports it) the
  // given position.
  coordsAt(t2, e2) {
    return null;
  }
  sync(t2) {
    if (this.dirty & 2) {
      let e2 = this.dom, i2 = null, n2;
      for (let r2 of this.children) {
        if (r2.dirty) {
          if (!r2.dom && (n2 = i2 ? i2.nextSibling : e2.firstChild)) {
            let o2 = W2.get(n2);
            (!o2 || !o2.parent && o2.canReuseDOM(r2)) && r2.reuseDOM(n2);
          }
          r2.sync(t2), r2.dirty = 0;
        }
        if (n2 = i2 ? i2.nextSibling : e2.firstChild, t2 && !t2.written && t2.node == e2 && n2 != r2.dom && (t2.written = true), r2.dom.parentNode == e2)
          for (; n2 && n2 != r2.dom; )
            n2 = Or(n2);
        else
          e2.insertBefore(r2.dom, n2);
        i2 = r2.dom;
      }
      for (n2 = i2 ? i2.nextSibling : e2.firstChild, n2 && t2 && t2.node == e2 && (t2.written = true); n2; )
        n2 = Or(n2);
    } else if (this.dirty & 1)
      for (let e2 of this.children)
        e2.dirty && (e2.sync(t2), e2.dirty = 0);
  }
  reuseDOM(t2) {
  }
  localPosFromDOM(t2, e2) {
    let i2;
    if (t2 == this.dom)
      i2 = this.dom.childNodes[e2];
    else {
      let n2 = pi(t2) == 0 ? 0 : e2 == 0 ? -1 : 1;
      for (; ; ) {
        let r2 = t2.parentNode;
        if (r2 == this.dom)
          break;
        n2 == 0 && r2.firstChild != r2.lastChild && (t2 == r2.firstChild ? n2 = -1 : n2 = 1), t2 = r2;
      }
      n2 < 0 ? i2 = t2 : i2 = t2.nextSibling;
    }
    if (i2 == this.dom.firstChild)
      return 0;
    for (; i2 && !W2.get(i2); )
      i2 = i2.nextSibling;
    if (!i2)
      return this.length;
    for (let n2 = 0, r2 = 0; ; n2++) {
      let o2 = this.children[n2];
      if (o2.dom == i2)
        return r2;
      r2 += o2.length + o2.breakAfter;
    }
  }
  domBoundsAround(t2, e2, i2 = 0) {
    let n2 = -1, r2 = -1, o2 = -1, l2 = -1;
    for (let h2 = 0, a2 = i2, c2 = i2; h2 < this.children.length; h2++) {
      let f2 = this.children[h2], u2 = a2 + f2.length;
      if (a2 < t2 && u2 > e2)
        return f2.domBoundsAround(t2, e2, a2);
      if (u2 >= t2 && n2 == -1 && (n2 = h2, r2 = a2), a2 > e2 && f2.dom.parentNode == this.dom) {
        o2 = h2, l2 = c2;
        break;
      }
      c2 = u2, a2 = u2 + f2.breakAfter;
    }
    return {
      from: r2,
      to: l2 < 0 ? i2 + this.length : l2,
      startDOM: (n2 ? this.children[n2 - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o2 < this.children.length && o2 >= 0 ? this.children[o2].dom : null
    };
  }
  markDirty(t2 = false) {
    this.dirty |= 2, this.markParentsDirty(t2);
  }
  markParentsDirty(t2) {
    for (let e2 = this.parent; e2; e2 = e2.parent) {
      if (t2 && (e2.dirty |= 2), e2.dirty & 1)
        return;
      e2.dirty |= 1, t2 = false;
    }
  }
  setParent(t2) {
    this.parent != t2 && (this.parent = t2, this.dirty && this.markParentsDirty(true));
  }
  setDOM(t2) {
    this.dom && (this.dom.cmView = null), this.dom = t2, t2.cmView = this;
  }
  get rootView() {
    for (let t2 = this; ; ) {
      let e2 = t2.parent;
      if (!e2)
        return t2;
      t2 = e2;
    }
  }
  replaceChildren(t2, e2, i2 = Gs) {
    this.markDirty();
    for (let n2 = t2; n2 < e2; n2++) {
      let r2 = this.children[n2];
      r2.parent == this && r2.destroy();
    }
    this.children.splice(t2, e2 - t2, ...i2);
    for (let n2 = 0; n2 < i2.length; n2++)
      i2[n2].setParent(this);
  }
  ignoreMutation(t2) {
    return false;
  }
  ignoreEvent(t2) {
    return false;
  }
  childCursor(t2 = this.length) {
    return new yl(this.children, t2, this.children.length);
  }
  childPos(t2, e2 = 1) {
    return this.childCursor().findPos(t2, e2);
  }
  toString() {
    let t2 = this.constructor.name.replace("View", "");
    return t2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (t2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(t2) {
    return t2.cmView;
  }
  get isEditable() {
    return true;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return false;
  }
  become(t2) {
    return false;
  }
  canReuseDOM(t2) {
    return t2.constructor == this.constructor;
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    this.parent = null;
  }
};
W$2.prototype.breakAfter = 0;
function Or(s3) {
  let t2 = s3.nextSibling;
  return s3.parentNode.removeChild(s3), t2;
}
class yl {
  constructor(t2, e2, i2) {
    this.children = t2, this.pos = e2, this.i = i2, this.off = 0;
  }
  findPos(t2, e2 = 1) {
    for (; ; ) {
      if (t2 > this.pos || t2 == this.pos && (e2 > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = t2 - this.pos, this;
      let i2 = this.children[--this.i];
      this.pos -= i2.length + i2.breakAfter;
    }
  }
}
function bl(s3, t2, e2, i2, n2, r2, o2, l2, h2) {
  let { children: a2 } = s3, c2 = a2.length ? a2[t2] : null, f2 = r2.length ? r2[r2.length - 1] : null, u2 = f2 ? f2.breakAfter : o2;
  if (!(t2 == i2 && c2 && !o2 && !u2 && r2.length < 2 && c2.merge(e2, n2, r2.length ? f2 : null, e2 == 0, l2, h2))) {
    if (i2 < a2.length) {
      let d2 = a2[i2];
      d2 && n2 < d2.length ? (t2 == i2 && (d2 = d2.split(n2), n2 = 0), !u2 && f2 && d2.merge(0, n2, f2, true, 0, h2) ? r2[r2.length - 1] = d2 : (n2 && d2.merge(0, n2, null, false, 0, h2), r2.push(d2))) : d2 != null && d2.breakAfter && (f2 ? f2.breakAfter = 1 : o2 = 1), i2++;
    }
    for (c2 && (c2.breakAfter = o2, e2 > 0 && (!o2 && r2.length && c2.merge(e2, c2.length, r2[0], false, l2, 0) ? c2.breakAfter = r2.shift().breakAfter : (e2 < c2.length || c2.children.length && c2.children[c2.children.length - 1].length == 0) && c2.merge(e2, c2.length, null, false, l2, 0), t2++)); t2 < i2 && r2.length; )
      if (a2[i2 - 1].become(r2[r2.length - 1]))
        i2--, r2.pop(), h2 = r2.length ? 0 : l2;
      else if (a2[t2].become(r2[0]))
        t2++, r2.shift(), l2 = r2.length ? 0 : h2;
      else
        break;
    !r2.length && t2 && i2 < a2.length && !a2[t2 - 1].breakAfter && a2[i2].merge(0, 0, a2[t2 - 1], false, l2, h2) && t2--, (t2 < i2 || r2.length) && s3.replaceChildren(t2, i2, r2);
  }
}
function kl(s3, t2, e2, i2, n2, r2) {
  let o2 = s3.childCursor(), { i: l2, off: h2 } = o2.findPos(e2, 1), { i: a2, off: c2 } = o2.findPos(t2, -1), f2 = t2 - e2;
  for (let u2 of i2)
    f2 += u2.length;
  s3.length += f2, bl(s3, a2, c2, l2, h2, i2, 0, n2, r2);
}
let kt = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, ps = typeof document < "u" ? document : { documentElement: { style: {} } };
const gs = /* @__PURE__ */ /Edge\/(\d+)/.exec(kt.userAgent), xl = /* @__PURE__ */ /MSIE \d/.test(kt.userAgent), ms = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(kt.userAgent), An = !!(xl || ms || gs), Mr = !An && /* @__PURE__ */ /gecko\/(\d+)/i.test(kt.userAgent), In = !An && /* @__PURE__ */ /Chrome\/(\d+)/.exec(kt.userAgent), Dr = "webkitFontSmoothing" in ps.documentElement.style, vl = !An && /* @__PURE__ */ /Apple Computer/.test(kt.vendor), Tr = vl && (/* @__PURE__ */ /Mobile\/\w+/.test(kt.userAgent) || kt.maxTouchPoints > 2);
var x$3 = {
  mac: Tr || /* @__PURE__ */ /Mac/.test(kt.platform),
  windows: /* @__PURE__ */ /Win/.test(kt.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(kt.platform),
  ie: An,
  ie_version: xl ? ps.documentMode || 6 : ms ? +ms[1] : gs ? +gs[1] : 0,
  gecko: Mr,
  gecko_version: Mr ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(kt.userAgent) || [0, 0])[1] : 0,
  chrome: !!In,
  chrome_version: In ? +In[1] : 0,
  ios: Tr,
  android: /* @__PURE__ */ /Android\b/.test(kt.userAgent),
  webkit: Dr,
  safari: vl,
  webkit_version: Dr ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: ps.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const ef = 256;
let ge$3 = class ge2 extends W$2 {
  constructor(t2) {
    super(), this.text = t2;
  }
  get length() {
    return this.text.length;
  }
  createDOM(t2) {
    this.setDOM(t2 || document.createTextNode(this.text));
  }
  sync(t2) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t2 && t2.node == this.dom && (t2.written = true), this.dom.nodeValue = this.text);
  }
  reuseDOM(t2) {
    t2.nodeType == 3 && this.createDOM(t2);
  }
  merge(t2, e2, i2) {
    return i2 && (!(i2 instanceof ge2) || this.length - (e2 - t2) + i2.length > ef) ? false : (this.text = this.text.slice(0, t2) + (i2 ? i2.text : "") + this.text.slice(e2), this.markDirty(), true);
  }
  split(t2) {
    let e2 = new ge2(this.text.slice(t2));
    return this.text = this.text.slice(0, t2), this.markDirty(), e2;
  }
  localPosFromDOM(t2, e2) {
    return t2 == this.dom ? e2 : e2 ? this.text.length : 0;
  }
  domAtPos(t2) {
    return new at(this.dom, t2);
  }
  domBoundsAround(t2, e2, i2) {
    return { from: i2, to: i2 + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(t2, e2) {
    return ws(this.dom, t2, e2);
  }
};
class jt extends W$2 {
  constructor(t2, e2 = [], i2 = 0) {
    super(), this.mark = t2, this.children = e2, this.length = i2;
    for (let n2 of e2)
      n2.setParent(this);
  }
  setAttrs(t2) {
    if (wl(t2), this.mark.class && (t2.className = this.mark.class), this.mark.attrs)
      for (let e2 in this.mark.attrs)
        t2.setAttribute(e2, this.mark.attrs[e2]);
    return t2;
  }
  reuseDOM(t2) {
    t2.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(t2), this.dirty |= 6);
  }
  sync(t2) {
    this.dom ? this.dirty & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(t2);
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return i2 && (!(i2 instanceof jt && i2.mark.eq(this.mark)) || t2 && r2 <= 0 || e2 < this.length && o2 <= 0) ? false : (kl(this, t2, e2, i2 ? i2.children : [], r2 - 1, o2 - 1), this.markDirty(), true);
  }
  split(t2) {
    let e2 = [], i2 = 0, n2 = -1, r2 = 0;
    for (let l2 of this.children) {
      let h2 = i2 + l2.length;
      h2 > t2 && e2.push(i2 < t2 ? l2.split(t2 - i2) : l2), n2 < 0 && i2 >= t2 && (n2 = r2), i2 = h2, r2++;
    }
    let o2 = this.length - t2;
    return this.length = t2, n2 > -1 && (this.children.length = n2, this.markDirty()), new jt(this.mark, e2, o2);
  }
  domAtPos(t2) {
    return Al(this, t2);
  }
  coordsAt(t2, e2) {
    return Ml(this, t2, e2);
  }
}
function ws(s3, t2, e2) {
  let i2 = s3.nodeValue.length;
  t2 > i2 && (t2 = i2);
  let n2 = t2, r2 = t2, o2 = 0;
  t2 == 0 && e2 < 0 || t2 == i2 && e2 >= 0 ? x$3.chrome || x$3.gecko || (t2 ? (n2--, o2 = 1) : r2 < i2 && (r2++, o2 = -1)) : e2 < 0 ? n2-- : r2 < i2 && r2++;
  let l2 = Ke$1(s3, n2, r2).getClientRects();
  if (!l2.length)
    return gl;
  let h2 = l2[(o2 ? o2 < 0 : e2 >= 0) ? 0 : l2.length - 1];
  return x$3.safari && !o2 && h2.width == 0 && (h2 = Array.prototype.find.call(l2, (a2) => a2.width) || h2), o2 ? Ks(h2, o2 < 0) : h2 || null;
}
let le$3 = class le2 extends W$2 {
  constructor(t2, e2, i2) {
    super(), this.widget = t2, this.length = e2, this.side = i2, this.prevWidget = null;
  }
  static create(t2, e2, i2) {
    return new (t2.customView || le2)(t2, e2, i2);
  }
  split(t2) {
    let e2 = le2.create(this.widget, this.length - t2, this.side);
    return this.length -= t2, e2;
  }
  sync() {
    (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
  }
  getSide() {
    return this.side;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return i2 && (!(i2 instanceof le2) || !this.widget.compare(i2.widget) || t2 > 0 && r2 <= 0 || e2 < this.length && o2 <= 0) ? false : (this.length = t2 + (i2 ? i2.length : 0) + (this.length - e2), true);
  }
  become(t2) {
    return t2.length == this.length && t2 instanceof le2 && t2.side == this.side && this.widget.constructor == t2.widget.constructor ? (this.widget.eq(t2.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t2.widget, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t2) {
    return this.widget.ignoreEvent(t2);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return E$4.empty;
    let t2 = this;
    for (; t2.parent; )
      t2 = t2.parent;
    let e2 = t2.editorView, i2 = e2 && e2.state.doc, n2 = this.posAtStart;
    return i2 ? i2.slice(n2, n2 + this.length) : E$4.empty;
  }
  domAtPos(t2) {
    return t2 == 0 ? at.before(this.dom) : at.after(this.dom, t2 == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t2, e2) {
    let i2 = this.dom.getClientRects(), n2 = null;
    if (!i2.length)
      return gl;
    for (let r2 = t2 > 0 ? i2.length - 1 : 0; n2 = i2[r2], !(t2 > 0 ? r2 == 0 : r2 == i2.length - 1 || n2.top < n2.bottom); r2 += t2 > 0 ? -1 : 1)
      ;
    return this.length ? n2 : Ks(n2, this.side > 0);
  }
  get isEditable() {
    return false;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
};
class Sl extends le$3 {
  domAtPos(t2) {
    let { topView: e2, text: i2 } = this.widget;
    return e2 ? ys(t2, 0, e2, i2, (n2, r2) => n2.domAtPos(r2), (n2) => new at(i2, Math.min(n2, i2.nodeValue.length))) : new at(i2, Math.min(t2, i2.nodeValue.length));
  }
  sync() {
    this.setDOM(this.widget.toDOM());
  }
  localPosFromDOM(t2, e2) {
    let { topView: i2, text: n2 } = this.widget;
    return i2 ? Cl(t2, e2, i2, n2) : Math.min(e2, this.length);
  }
  ignoreMutation() {
    return false;
  }
  get overrideDOMText() {
    return null;
  }
  coordsAt(t2, e2) {
    let { topView: i2, text: n2 } = this.widget;
    return i2 ? ys(t2, e2, i2, n2, (r2, o2, l2) => r2.coordsAt(o2, l2), (r2, o2) => ws(n2, r2, o2)) : ws(n2, t2, e2);
  }
  destroy() {
    var t2;
    super.destroy(), (t2 = this.widget.topView) === null || t2 === void 0 || t2.destroy();
  }
  get isEditable() {
    return true;
  }
  canReuseDOM() {
    return true;
  }
}
function ys(s3, t2, e2, i2, n2, r2) {
  if (e2 instanceof jt) {
    for (let o2 = e2.dom.firstChild; o2; o2 = o2.nextSibling) {
      let l2 = W$2.get(o2);
      if (!l2)
        return r2(s3, t2);
      let h2 = qe$1(o2, i2), a2 = l2.length + (h2 ? i2.nodeValue.length : 0);
      if (s3 < a2 || s3 == a2 && l2.getSide() <= 0)
        return h2 ? ys(s3, t2, l2, i2, n2, r2) : n2(l2, s3, t2);
      s3 -= a2;
    }
    return n2(e2, e2.length, -1);
  } else
    return e2.dom == i2 ? r2(s3, t2) : n2(e2, s3, t2);
}
function Cl(s3, t2, e2, i2) {
  if (e2 instanceof jt)
    for (let n2 of e2.children) {
      let r2 = 0, o2 = qe$1(n2.dom, i2);
      if (qe$1(n2.dom, s3))
        return r2 + (o2 ? Cl(s3, t2, n2, i2) : n2.localPosFromDOM(s3, t2));
      r2 += o2 ? i2.nodeValue.length : n2.length;
    }
  else if (e2.dom == i2)
    return Math.min(t2, i2.nodeValue.length);
  return e2.localPosFromDOM(s3, t2);
}
let Ge$1 = class Ge2 extends W$2 {
  constructor(t2) {
    super(), this.side = t2;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(t2) {
    return t2 instanceof Ge2 && t2.side == this.side;
  }
  split() {
    return new Ge2(this.side);
  }
  sync() {
    if (!this.dom) {
      let t2 = document.createElement("img");
      t2.className = "cm-widgetBuffer", t2.setAttribute("aria-hidden", "true"), this.setDOM(t2);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(t2) {
    return at.before(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t2) {
    let e2 = this.dom.getBoundingClientRect(), i2 = nf(this, this.side > 0 ? -1 : 1);
    return i2 && i2.top < e2.bottom && i2.bottom > e2.top ? { left: e2.left, right: e2.right, top: i2.top, bottom: i2.bottom } : e2;
  }
  get overrideDOMText() {
    return E$4.empty;
  }
};
ge$3.prototype.children = le$3.prototype.children = Ge$1.prototype.children = Gs;
function nf(s3, t2) {
  let e2 = s3.parent, i2 = e2 ? e2.children.indexOf(s3) : -1;
  for (; e2 && i2 >= 0; )
    if (t2 < 0 ? i2 > 0 : i2 < e2.children.length) {
      let n2 = e2.children[i2 + t2];
      if (n2 instanceof ge$3) {
        let r2 = n2.coordsAt(t2 < 0 ? n2.length : 0, t2);
        if (r2)
          return r2;
      }
      i2 += t2;
    } else if (e2 instanceof jt && e2.parent)
      i2 = e2.parent.children.indexOf(e2) + (t2 < 0 ? 0 : 1), e2 = e2.parent;
    else {
      let n2 = e2.dom.lastChild;
      if (n2 && n2.nodeName == "BR")
        return n2.getClientRects()[0];
      break;
    }
}
function Al(s3, t2) {
  let e2 = s3.dom, { children: i2 } = s3, n2 = 0;
  for (let r2 = 0; n2 < i2.length; n2++) {
    let o2 = i2[n2], l2 = r2 + o2.length;
    if (!(l2 == r2 && o2.getSide() <= 0)) {
      if (t2 > r2 && t2 < l2 && o2.dom.parentNode == e2)
        return o2.domAtPos(t2 - r2);
      if (t2 <= r2)
        break;
      r2 = l2;
    }
  }
  for (let r2 = n2; r2 > 0; r2--) {
    let o2 = i2[r2 - 1];
    if (o2.dom.parentNode == e2)
      return o2.domAtPos(o2.length);
  }
  for (let r2 = n2; r2 < i2.length; r2++) {
    let o2 = i2[r2];
    if (o2.dom.parentNode == e2)
      return o2.domAtPos(0);
  }
  return new at(e2, 0);
}
function Ol(s3, t2, e2) {
  let i2, { children: n2 } = s3;
  e2 > 0 && t2 instanceof jt && n2.length && (i2 = n2[n2.length - 1]) instanceof jt && i2.mark.eq(t2.mark) ? Ol(i2, t2.children[0], e2 - 1) : (n2.push(t2), t2.setParent(s3)), s3.length += t2.length;
}
function Ml(s3, t2, e2) {
  let i2 = null, n2 = -1, r2 = null, o2 = -1;
  function l2(a2, c2) {
    for (let f2 = 0, u2 = 0; f2 < a2.children.length && u2 <= c2; f2++) {
      let d2 = a2.children[f2], p2 = u2 + d2.length;
      p2 >= c2 && (d2.children.length ? l2(d2, c2 - u2) : !r2 && (p2 > c2 || u2 == p2 && d2.getSide() > 0) ? (r2 = d2, o2 = c2 - u2) : (u2 < c2 || u2 == p2 && d2.getSide() < 0) && (i2 = d2, n2 = c2 - u2)), u2 = p2;
    }
  }
  l2(s3, t2);
  let h2 = (e2 < 0 ? i2 : r2) || i2 || r2;
  return h2 ? h2.coordsAt(Math.max(0, h2 == i2 ? n2 : o2), e2) : sf(s3);
}
function sf(s3) {
  let t2 = s3.dom.lastChild;
  if (!t2)
    return s3.dom.getBoundingClientRect();
  let e2 = di(t2);
  return e2[e2.length - 1] || null;
}
function bs(s3, t2) {
  for (let e2 in s3)
    e2 == "class" && t2.class ? t2.class += " " + s3.class : e2 == "style" && t2.style ? t2.style += ";" + s3.style : t2[e2] = s3[e2];
  return t2;
}
function Us(s3, t2) {
  if (s3 == t2)
    return true;
  if (!s3 || !t2)
    return false;
  let e2 = Object.keys(s3), i2 = Object.keys(t2);
  if (e2.length != i2.length)
    return false;
  for (let n2 of e2)
    if (i2.indexOf(n2) == -1 || s3[n2] !== t2[n2])
      return false;
  return true;
}
function ks(s3, t2, e2) {
  let i2 = null;
  if (t2)
    for (let n2 in t2)
      e2 && n2 in e2 || s3.removeAttribute(i2 = n2);
  if (e2)
    for (let n2 in e2)
      t2 && t2[n2] == e2[n2] || s3.setAttribute(i2 = n2, e2[n2]);
  return !!i2;
}
let ye$1 = class ye2 {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(t2) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(t2) {
    return false;
  }
  /**
  @internal
  */
  compare(t2) {
    return this == t2 || this.constructor == t2.constructor && this.eq(t2);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(t2) {
    return true;
  }
  /**
  @internal
  */
  get customView() {
    return null;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(t2) {
  }
};
var U$3 = /* @__PURE__ */ function(s3) {
  return s3[s3.Text = 0] = "Text", s3[s3.WidgetBefore = 1] = "WidgetBefore", s3[s3.WidgetAfter = 2] = "WidgetAfter", s3[s3.WidgetRange = 3] = "WidgetRange", s3;
}(U$3 || (U$3 = {}));
let T$3 = class T2 extends je$2 {
  constructor(t2, e2, i2, n2) {
    super(), this.startSide = t2, this.endSide = e2, this.widget = i2, this.spec = n2;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(t2) {
    return new On(t2);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(t2) {
    let e2 = t2.side || 0, i2 = !!t2.block;
    return e2 += i2 ? e2 > 0 ? 3e8 : -4e8 : e2 > 0 ? 1e8 : -1e8, new Te$1(t2, e2, e2, i2, t2.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(t2) {
    let e2 = !!t2.block, i2, n2;
    if (t2.isBlockGap)
      i2 = -5e8, n2 = 4e8;
    else {
      let { start: r2, end: o2 } = Dl(t2, e2);
      i2 = (r2 ? e2 ? -3e8 : -1 : 5e8) - 1, n2 = (o2 ? e2 ? 2e8 : 1 : -6e8) + 1;
    }
    return new Te$1(t2, i2, n2, e2, t2.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(t2) {
    return new ki(t2);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(t2, e2 = false) {
    return $$1.of(t2, e2);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
T$3.none = $$1.empty;
class On extends T$3 {
  constructor(t2) {
    let { start: e2, end: i2 } = Dl(t2);
    super(e2 ? -1 : 5e8, i2 ? 1 : -6e8, null, t2), this.tagName = t2.tagName || "span", this.class = t2.class || "", this.attrs = t2.attributes || null;
  }
  eq(t2) {
    return this == t2 || t2 instanceof On && this.tagName == t2.tagName && this.class == t2.class && Us(this.attrs, t2.attrs);
  }
  range(t2, e2 = t2) {
    if (t2 >= e2)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(t2, e2);
  }
}
On.prototype.point = false;
class ki extends T$3 {
  constructor(t2) {
    super(-2e8, -2e8, null, t2);
  }
  eq(t2) {
    return t2 instanceof ki && this.spec.class == t2.spec.class && Us(this.spec.attributes, t2.spec.attributes);
  }
  range(t2, e2 = t2) {
    if (e2 != t2)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(t2, e2);
  }
}
ki.prototype.mapMode = gt.TrackBefore;
ki.prototype.point = true;
let Te$1 = class Te2 extends T$3 {
  constructor(t2, e2, i2, n2, r2, o2) {
    super(e2, i2, r2, t2), this.block = n2, this.isReplace = o2, this.mapMode = n2 ? e2 <= 0 ? gt.TrackBefore : gt.TrackAfter : gt.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide < this.endSide ? U$3.WidgetRange : this.startSide <= 0 ? U$3.WidgetBefore : U$3.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
  }
  eq(t2) {
    return t2 instanceof Te2 && rf(this.widget, t2.widget) && this.block == t2.block && this.startSide == t2.startSide && this.endSide == t2.endSide;
  }
  range(t2, e2 = t2) {
    if (this.isReplace && (t2 > e2 || t2 == e2 && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && e2 != t2)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(t2, e2);
  }
};
Te$1.prototype.point = true;
function Dl(s3, t2 = false) {
  let { inclusiveStart: e2, inclusiveEnd: i2 } = s3;
  return e2 == null && (e2 = s3.inclusive), i2 == null && (i2 = s3.inclusive), { start: e2 ?? t2, end: i2 ?? t2 };
}
function rf(s3, t2) {
  return s3 == t2 || !!(s3 && t2 && s3.compare(t2));
}
function xs(s3, t2, e2, i2 = 0) {
  let n2 = e2.length - 1;
  n2 >= 0 && e2[n2] + i2 >= s3 ? e2[n2] = Math.max(e2[n2], t2) : e2.push(s3, t2);
}
class ut extends W$2 {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(t2, e2, i2, n2, r2, o2) {
    if (i2) {
      if (!(i2 instanceof ut))
        return false;
      this.dom || i2.transferDOM(this);
    }
    return n2 && this.setDeco(i2 ? i2.attrs : null), kl(this, t2, e2, i2 ? i2.children : [], r2, o2), true;
  }
  split(t2) {
    let e2 = new ut();
    if (e2.breakAfter = this.breakAfter, this.length == 0)
      return e2;
    let { i: i2, off: n2 } = this.childPos(t2);
    n2 && (e2.append(this.children[i2].split(n2), 0), this.children[i2].merge(n2, this.children[i2].length, null, false, 0, 0), i2++);
    for (let r2 = i2; r2 < this.children.length; r2++)
      e2.append(this.children[r2], 0);
    for (; i2 > 0 && this.children[i2 - 1].length == 0; )
      this.children[--i2].destroy();
    return this.children.length = i2, this.markDirty(), this.length = t2, e2;
  }
  transferDOM(t2) {
    this.dom && (this.markDirty(), t2.setDOM(this.dom), t2.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(t2) {
    Us(this.attrs, t2) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = t2);
  }
  append(t2, e2) {
    Ol(this, t2, e2);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(t2) {
    let e2 = t2.spec.attributes, i2 = t2.spec.class;
    e2 && (this.attrs = bs(e2, this.attrs || {})), i2 && (this.attrs = bs({ class: i2 }, this.attrs || {}));
  }
  domAtPos(t2) {
    return Al(this, t2);
  }
  reuseDOM(t2) {
    t2.nodeName == "DIV" && (this.setDOM(t2), this.dirty |= 6);
  }
  sync(t2) {
    var e2;
    this.dom ? this.dirty & 4 && (wl(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (ks(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(t2);
    let i2 = this.dom.lastChild;
    for (; i2 && W$2.get(i2) instanceof jt; )
      i2 = i2.lastChild;
    if (!i2 || !this.length || i2.nodeName != "BR" && ((e2 = W$2.get(i2)) === null || e2 === void 0 ? void 0 : e2.isEditable) == false && (!x$3.ios || !this.children.some((n2) => n2 instanceof ge$3))) {
      let n2 = document.createElement("BR");
      n2.cmIgnore = true, this.dom.appendChild(n2);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let t2 = 0;
    for (let e2 of this.children) {
      if (!(e2 instanceof ge$3) || /[^ -~]/.test(e2.text))
        return null;
      let i2 = di(e2.dom);
      if (i2.length != 1)
        return null;
      t2 += i2[0].width;
    }
    return t2 ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: t2 / this.length
    } : null;
  }
  coordsAt(t2, e2) {
    return Ml(this, t2, e2);
  }
  become(t2) {
    return false;
  }
  get type() {
    return U$3.Text;
  }
  static find(t2, e2) {
    for (let i2 = 0, n2 = 0; i2 < t2.children.length; i2++) {
      let r2 = t2.children[i2], o2 = n2 + r2.length;
      if (o2 >= e2) {
        if (r2 instanceof ut)
          return r2;
        if (o2 > e2)
          break;
      }
      n2 = o2 + r2.breakAfter;
    }
    return null;
  }
}
class Ae extends W$2 {
  constructor(t2, e2, i2) {
    super(), this.widget = t2, this.length = e2, this.type = i2, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return i2 && (!(i2 instanceof Ae) || !this.widget.compare(i2.widget) || t2 > 0 && r2 <= 0 || e2 < this.length && o2 <= 0) ? false : (this.length = t2 + (i2 ? i2.length : 0) + (this.length - e2), true);
  }
  domAtPos(t2) {
    return t2 == 0 ? at.before(this.dom) : at.after(this.dom, t2 == this.length);
  }
  split(t2) {
    let e2 = this.length - t2;
    this.length = t2;
    let i2 = new Ae(this.widget, e2, this.type);
    return i2.breakAfter = this.breakAfter, i2;
  }
  get children() {
    return Gs;
  }
  sync() {
    (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : E$4.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(t2) {
    return t2 instanceof Ae && t2.type == this.type && t2.widget.constructor == this.widget.constructor ? (t2.widget.eq(this.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t2.widget, this.length = t2.length, this.breakAfter = t2.breakAfter, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t2) {
    return this.widget.ignoreEvent(t2);
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Qs {
  constructor(t2, e2, i2, n2) {
    this.doc = t2, this.pos = e2, this.end = i2, this.disallowBlockEffectsFor = n2, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = true, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = t2.iter(), this.skip = e2;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let t2 = this.content[this.content.length - 1];
    return !t2.breakAfter && !(t2 instanceof Ae && t2.type == U$3.WidgetBefore);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new ut()), this.atCursorPos = true), this.curLine;
  }
  flushBuffer(t2 = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(Mi(new Ge$1(-1), t2), t2.length), this.pendingBuffer = 0);
  }
  addBlockWidget(t2) {
    this.flushBuffer(), this.curLine = null, this.content.push(t2);
  }
  finish(t2) {
    this.pendingBuffer && t2 <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, this.posCovered() || this.getLine();
  }
  buildText(t2, e2, i2) {
    for (; t2 > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: r2, lineBreak: o2, done: l2 } = this.cursor.next(this.skip);
        if (this.skip = 0, l2)
          throw new Error("Ran out of text content when drawing inline views");
        if (o2) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = true, t2--;
          continue;
        } else
          this.text = r2, this.textOff = 0;
      }
      let n2 = Math.min(
        this.text.length - this.textOff,
        t2,
        512
        /* T.Chunk */
      );
      this.flushBuffer(e2.slice(e2.length - i2)), this.getLine().append(Mi(new ge$3(this.text.slice(this.textOff, this.textOff + n2)), e2), i2), this.atCursorPos = true, this.textOff += n2, t2 -= n2, i2 = 0;
    }
  }
  span(t2, e2, i2, n2) {
    this.buildText(e2 - t2, i2, n2), this.pos = e2, this.openStart < 0 && (this.openStart = n2);
  }
  point(t2, e2, i2, n2, r2, o2) {
    if (this.disallowBlockEffectsFor[o2] && i2 instanceof Te$1) {
      if (i2.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (e2 > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l2 = e2 - t2;
    if (i2 instanceof Te$1)
      if (i2.block) {
        let { type: h2 } = i2;
        h2 == U$3.WidgetAfter && !this.posCovered() && this.getLine(), this.addBlockWidget(new Ae(i2.widget || new Pr("div"), l2, h2));
      } else {
        let h2 = le$3.create(i2.widget || new Pr("span"), l2, l2 ? 0 : i2.startSide), a2 = this.atCursorPos && !h2.isEditable && r2 <= n2.length && (t2 < e2 || i2.startSide > 0), c2 = !h2.isEditable && (t2 < e2 || r2 > n2.length || i2.startSide <= 0), f2 = this.getLine();
        this.pendingBuffer == 2 && !a2 && (this.pendingBuffer = 0), this.flushBuffer(n2), a2 && (f2.append(Mi(new Ge$1(1), n2), r2), r2 = n2.length + Math.max(0, r2 - n2.length)), f2.append(Mi(h2, n2), r2), this.atCursorPos = c2, this.pendingBuffer = c2 ? t2 < e2 || r2 > n2.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = n2.slice());
      }
    else
      this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i2);
    l2 && (this.textOff + l2 <= this.text.length ? this.textOff += l2 : (this.skip += l2 - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = e2), this.openStart < 0 && (this.openStart = r2);
  }
  static build(t2, e2, i2, n2, r2) {
    let o2 = new Qs(t2, e2, i2, r2);
    return o2.openEnd = $$1.spans(n2, e2, i2, o2), o2.openStart < 0 && (o2.openStart = o2.openEnd), o2.finish(o2.openEnd), o2;
  }
}
function Mi(s3, t2) {
  for (let e2 of t2)
    s3 = new jt(e2, [s3], s3.length);
  return s3;
}
class Pr extends ye$1 {
  constructor(t2) {
    super(), this.tag = t2;
  }
  eq(t2) {
    return t2.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(t2) {
    return t2.nodeName.toLowerCase() == this.tag;
  }
}
const Tl = /* @__PURE__ */ v$4.define(), Pl = /* @__PURE__ */ v$4.define(), Bl = /* @__PURE__ */ v$4.define(), Rl = /* @__PURE__ */ v$4.define(), vs = /* @__PURE__ */ v$4.define(), Ll = /* @__PURE__ */ v$4.define(), El = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.some((t2) => t2)
}), of = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.some((t2) => t2)
});
class rn {
  constructor(t2, e2 = "nearest", i2 = "nearest", n2 = 5, r2 = 5) {
    this.range = t2, this.y = e2, this.x = i2, this.yMargin = n2, this.xMargin = r2;
  }
  map(t2) {
    return t2.empty ? this : new rn(this.range.map(t2), this.y, this.x, this.yMargin, this.xMargin);
  }
}
const Br = /* @__PURE__ */ F$4.define({ map: (s3, t2) => s3.map(t2) });
function zt(s3, t2, e2) {
  let i2 = s3.facet(Rl);
  i2.length ? i2[0](t2) : window.onerror ? window.onerror(String(t2), e2, void 0, void 0, t2) : e2 ? console.error(e2 + ":", t2) : console.error(t2);
}
const Mn = /* @__PURE__ */ v$4.define({ combine: (s3) => s3.length ? s3[0] : true });
let lf = 0;
const si = /* @__PURE__ */ v$4.define();
class wt {
  constructor(t2, e2, i2, n2) {
    this.id = t2, this.create = e2, this.domEventHandlers = i2, this.extension = n2(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(t2, e2) {
    const { eventHandlers: i2, provide: n2, decorations: r2 } = e2 || {};
    return new wt(lf++, t2, i2, (o2) => {
      let l2 = [si.of(o2)];
      return r2 && l2.push(gi.of((h2) => {
        let a2 = h2.plugin(o2);
        return a2 ? r2(a2) : T$3.none;
      })), n2 && l2.push(n2(o2)), l2;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(t2, e2) {
    return wt.define((i2) => new t2(i2), e2);
  }
}
class Hn {
  constructor(t2) {
    this.spec = t2, this.mustUpdate = null, this.value = null;
  }
  update(t2) {
    if (this.value) {
      if (this.mustUpdate) {
        let e2 = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(e2);
          } catch (i2) {
            if (zt(e2.state, i2, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(t2);
      } catch (e2) {
        zt(t2.state, e2, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(t2) {
    var e2;
    if (!((e2 = this.value) === null || e2 === void 0) && e2.destroy)
      try {
        this.value.destroy();
      } catch (i2) {
        zt(t2.state, i2, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const Nl = /* @__PURE__ */ v$4.define(), Js = /* @__PURE__ */ v$4.define(), gi = /* @__PURE__ */ v$4.define(), Vl = /* @__PURE__ */ v$4.define(), Il = /* @__PURE__ */ v$4.define(), ri = /* @__PURE__ */ v$4.define();
class _t {
  constructor(t2, e2, i2, n2) {
    this.fromA = t2, this.toA = e2, this.fromB = i2, this.toB = n2;
  }
  join(t2) {
    return new _t(Math.min(this.fromA, t2.fromA), Math.max(this.toA, t2.toA), Math.min(this.fromB, t2.fromB), Math.max(this.toB, t2.toB));
  }
  addToSet(t2) {
    let e2 = t2.length, i2 = this;
    for (; e2 > 0; e2--) {
      let n2 = t2[e2 - 1];
      if (!(n2.fromA > i2.toA)) {
        if (n2.toA < i2.fromA)
          break;
        i2 = i2.join(n2), t2.splice(e2 - 1, 1);
      }
    }
    return t2.splice(e2, 0, i2), t2;
  }
  static extendWithRanges(t2, e2) {
    if (e2.length == 0)
      return t2;
    let i2 = [];
    for (let n2 = 0, r2 = 0, o2 = 0, l2 = 0; ; n2++) {
      let h2 = n2 == t2.length ? null : t2[n2], a2 = o2 - l2, c2 = h2 ? h2.fromB : 1e9;
      for (; r2 < e2.length && e2[r2] < c2; ) {
        let f2 = e2[r2], u2 = e2[r2 + 1], d2 = Math.max(l2, f2), p2 = Math.min(c2, u2);
        if (d2 <= p2 && new _t(d2 + a2, p2 + a2, d2, p2).addToSet(i2), u2 > c2)
          break;
        r2 += 2;
      }
      if (!h2)
        return i2;
      new _t(h2.fromA, h2.toA, h2.fromB, h2.toB).addToSet(i2), o2 = h2.toA, l2 = h2.toB;
    }
  }
}
class on {
  constructor(t2, e2, i2) {
    this.view = t2, this.state = e2, this.transactions = i2, this.flags = 0, this.startState = t2.state, this.changes = Z.empty(this.startState.doc.length);
    for (let o2 of i2)
      this.changes = this.changes.compose(o2.changes);
    let n2 = [];
    this.changes.iterChangedRanges((o2, l2, h2, a2) => n2.push(new _t(o2, l2, h2, a2))), this.changedRanges = n2;
    let r2 = t2.hasFocus;
    r2 != t2.inputState.notifiedFocused && (t2.inputState.notifiedFocused = r2, this.flags |= 1);
  }
  /**
  @internal
  */
  static create(t2, e2, i2) {
    return new on(t2, e2, i2);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((t2) => t2.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
var X$1 = /* @__PURE__ */ function(s3) {
  return s3[s3.LTR = 0] = "LTR", s3[s3.RTL = 1] = "RTL", s3;
}(X$1 || (X$1 = {}));
const Ss = X$1.LTR, hf = X$1.RTL;
function Hl(s3) {
  let t2 = [];
  for (let e2 = 0; e2 < s3.length; e2++)
    t2.push(1 << +s3[e2]);
  return t2;
}
const af = /* @__PURE__ */ Hl("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), cf = /* @__PURE__ */ Hl("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), Cs = /* @__PURE__ */ Object.create(null), Lt = [];
for (let s3 of ["()", "[]", "{}"]) {
  let t2 = /* @__PURE__ */ s3.charCodeAt(0), e2 = /* @__PURE__ */ s3.charCodeAt(1);
  Cs[t2] = e2, Cs[e2] = -t2;
}
function ff(s3) {
  return s3 <= 247 ? af[s3] : 1424 <= s3 && s3 <= 1524 ? 2 : 1536 <= s3 && s3 <= 1785 ? cf[s3 - 1536] : 1774 <= s3 && s3 <= 2220 ? 4 : 8192 <= s3 && s3 <= 8203 ? 256 : 64336 <= s3 && s3 <= 65023 ? 4 : s3 == 8204 ? 256 : 1;
}
const uf = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class Fe {
  /**
  @internal
  */
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.level = i2;
  }
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? hf : Ss;
  }
  /**
  @internal
  */
  side(t2, e2) {
    return this.dir == e2 == t2 ? this.to : this.from;
  }
  /**
  @internal
  */
  static find(t2, e2, i2, n2) {
    let r2 = -1;
    for (let o2 = 0; o2 < t2.length; o2++) {
      let l2 = t2[o2];
      if (l2.from <= e2 && l2.to >= e2) {
        if (l2.level == i2)
          return o2;
        (r2 < 0 || (n2 != 0 ? n2 < 0 ? l2.from < e2 : l2.to > e2 : t2[r2].level > l2.level)) && (r2 = o2);
      }
    }
    if (r2 < 0)
      throw new RangeError("Index out of range");
    return r2;
  }
}
const j$5 = [];
function df(s3, t2) {
  let e2 = s3.length, i2 = t2 == Ss ? 1 : 2, n2 = t2 == Ss ? 2 : 1;
  if (!s3 || i2 == 1 && !uf.test(s3))
    return $l(e2);
  for (let o2 = 0, l2 = i2, h2 = i2; o2 < e2; o2++) {
    let a2 = ff(s3.charCodeAt(o2));
    a2 == 512 ? a2 = l2 : a2 == 8 && h2 == 4 && (a2 = 16), j$5[o2] = a2 == 4 ? 2 : a2, a2 & 7 && (h2 = a2), l2 = a2;
  }
  for (let o2 = 0, l2 = i2, h2 = i2; o2 < e2; o2++) {
    let a2 = j$5[o2];
    if (a2 == 128)
      o2 < e2 - 1 && l2 == j$5[o2 + 1] && l2 & 24 ? a2 = j$5[o2] = l2 : j$5[o2] = 256;
    else if (a2 == 64) {
      let c2 = o2 + 1;
      for (; c2 < e2 && j$5[c2] == 64; )
        c2++;
      let f2 = o2 && l2 == 8 || c2 < e2 && j$5[c2] == 8 ? h2 == 1 ? 1 : 8 : 256;
      for (let u2 = o2; u2 < c2; u2++)
        j$5[u2] = f2;
      o2 = c2 - 1;
    } else
      a2 == 8 && h2 == 1 && (j$5[o2] = 1);
    l2 = a2, a2 & 7 && (h2 = a2);
  }
  for (let o2 = 0, l2 = 0, h2 = 0, a2, c2, f2; o2 < e2; o2++)
    if (c2 = Cs[a2 = s3.charCodeAt(o2)])
      if (c2 < 0) {
        for (let u2 = l2 - 3; u2 >= 0; u2 -= 3)
          if (Lt[u2 + 1] == -c2) {
            let d2 = Lt[u2 + 2], p2 = d2 & 2 ? i2 : d2 & 4 ? d2 & 1 ? n2 : i2 : 0;
            p2 && (j$5[o2] = j$5[Lt[u2]] = p2), l2 = u2;
            break;
          }
      } else {
        if (Lt.length == 189)
          break;
        Lt[l2++] = o2, Lt[l2++] = a2, Lt[l2++] = h2;
      }
    else if ((f2 = j$5[o2]) == 2 || f2 == 1) {
      let u2 = f2 == i2;
      h2 = u2 ? 0 : 1;
      for (let d2 = l2 - 3; d2 >= 0; d2 -= 3) {
        let p2 = Lt[d2 + 2];
        if (p2 & 2)
          break;
        if (u2)
          Lt[d2 + 2] |= 2;
        else {
          if (p2 & 4)
            break;
          Lt[d2 + 2] |= 4;
        }
      }
    }
  for (let o2 = 0; o2 < e2; o2++)
    if (j$5[o2] == 256) {
      let l2 = o2 + 1;
      for (; l2 < e2 && j$5[l2] == 256; )
        l2++;
      let h2 = (o2 ? j$5[o2 - 1] : i2) == 1, a2 = (l2 < e2 ? j$5[l2] : i2) == 1, c2 = h2 == a2 ? h2 ? 1 : 2 : i2;
      for (let f2 = o2; f2 < l2; f2++)
        j$5[f2] = c2;
      o2 = l2 - 1;
    }
  let r2 = [];
  if (i2 == 1)
    for (let o2 = 0; o2 < e2; ) {
      let l2 = o2, h2 = j$5[o2++] != 1;
      for (; o2 < e2 && h2 == (j$5[o2] != 1); )
        o2++;
      if (h2)
        for (let a2 = o2; a2 > l2; ) {
          let c2 = a2, f2 = j$5[--a2] != 2;
          for (; a2 > l2 && f2 == (j$5[a2 - 1] != 2); )
            a2--;
          r2.push(new Fe(a2, c2, f2 ? 2 : 1));
        }
      else
        r2.push(new Fe(l2, o2, 0));
    }
  else
    for (let o2 = 0; o2 < e2; ) {
      let l2 = o2, h2 = j$5[o2++] == 2;
      for (; o2 < e2 && h2 == (j$5[o2] == 2); )
        o2++;
      r2.push(new Fe(l2, o2, h2 ? 1 : 2));
    }
  return r2;
}
function $l(s3) {
  return [new Fe(0, s3, 0)];
}
let Fl = "";
function pf(s3, t2, e2, i2, n2) {
  var r2;
  let o2 = i2.head - s3.from, l2 = -1;
  if (o2 == 0) {
    if (!n2 || !s3.length)
      return null;
    t2[0].level != e2 && (o2 = t2[0].side(false, e2), l2 = 0);
  } else if (o2 == s3.length) {
    if (n2)
      return null;
    let u2 = t2[t2.length - 1];
    u2.level != e2 && (o2 = u2.side(true, e2), l2 = t2.length - 1);
  }
  l2 < 0 && (l2 = Fe.find(t2, o2, (r2 = i2.bidiLevel) !== null && r2 !== void 0 ? r2 : -1, i2.assoc));
  let h2 = t2[l2];
  o2 == h2.side(n2, e2) && (h2 = t2[l2 += n2 ? 1 : -1], o2 = h2.side(!n2, e2));
  let a2 = n2 == (h2.dir == e2), c2 = xt(s3.text, o2, a2);
  if (Fl = s3.text.slice(Math.min(o2, c2), Math.max(o2, c2)), c2 != h2.side(n2, e2))
    return b$2.cursor(c2 + s3.from, a2 ? -1 : 1, h2.level);
  let f2 = l2 == (n2 ? t2.length - 1 : 0) ? null : t2[l2 + (n2 ? 1 : -1)];
  return !f2 && h2.level != e2 ? b$2.cursor(n2 ? s3.to : s3.from, n2 ? -1 : 1, e2) : f2 && f2.level < h2.level ? b$2.cursor(f2.side(!n2, e2) + s3.from, n2 ? 1 : -1, f2.level) : b$2.cursor(c2 + s3.from, n2 ? -1 : 1, h2.level);
}
const he$1 = "￿";
class zl {
  constructor(t2, e2) {
    this.points = t2, this.text = "", this.lineSeparator = e2.facet(N$4.lineSeparator);
  }
  append(t2) {
    this.text += t2;
  }
  lineBreak() {
    this.text += he$1;
  }
  readRange(t2, e2) {
    if (!t2)
      return this;
    let i2 = t2.parentNode;
    for (let n2 = t2; ; ) {
      this.findPointBefore(i2, n2), this.readNode(n2);
      let r2 = n2.nextSibling;
      if (r2 == e2)
        break;
      let o2 = W$2.get(n2), l2 = W$2.get(r2);
      (o2 && l2 ? o2.breakAfter : (o2 ? o2.breakAfter : Rr(n2)) || Rr(r2) && (n2.nodeName != "BR" || n2.cmIgnore)) && this.lineBreak(), n2 = r2;
    }
    return this.findPointBefore(i2, e2), this;
  }
  readTextNode(t2) {
    let e2 = t2.nodeValue;
    for (let i2 of this.points)
      i2.node == t2 && (i2.pos = this.text.length + Math.min(i2.offset, e2.length));
    for (let i2 = 0, n2 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let r2 = -1, o2 = 1, l2;
      if (this.lineSeparator ? (r2 = e2.indexOf(this.lineSeparator, i2), o2 = this.lineSeparator.length) : (l2 = n2.exec(e2)) && (r2 = l2.index, o2 = l2[0].length), this.append(e2.slice(i2, r2 < 0 ? e2.length : r2)), r2 < 0)
        break;
      if (this.lineBreak(), o2 > 1)
        for (let h2 of this.points)
          h2.node == t2 && h2.pos > this.text.length && (h2.pos -= o2 - 1);
      i2 = r2 + o2;
    }
  }
  readNode(t2) {
    if (t2.cmIgnore)
      return;
    let e2 = W$2.get(t2), i2 = e2 && e2.overrideDOMText;
    if (i2 != null) {
      this.findPointInside(t2, i2.length);
      for (let n2 = i2.iter(); !n2.next().done; )
        n2.lineBreak ? this.lineBreak() : this.append(n2.value);
    } else
      t2.nodeType == 3 ? this.readTextNode(t2) : t2.nodeName == "BR" ? t2.nextSibling && this.lineBreak() : t2.nodeType == 1 && this.readRange(t2.firstChild, null);
  }
  findPointBefore(t2, e2) {
    for (let i2 of this.points)
      i2.node == t2 && t2.childNodes[i2.offset] == e2 && (i2.pos = this.text.length);
  }
  findPointInside(t2, e2) {
    for (let i2 of this.points)
      (t2.nodeType == 3 ? i2.node == t2 : t2.contains(i2.node)) && (i2.pos = this.text.length + Math.min(e2, i2.offset));
  }
}
function Rr(s3) {
  return s3.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(s3.nodeName);
}
class Lr {
  constructor(t2, e2) {
    this.node = t2, this.offset = e2, this.pos = -1;
  }
}
class Er extends W$2 {
  constructor(t2) {
    super(), this.view = t2, this.compositionDeco = T$3.none, this.decorations = [], this.dynamicDecorationMap = [], this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = false, this.lastUpdate = Date.now(), this.setDOM(t2.contentDOM), this.children = [new ut()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new _t(0, 0, 0, t2.state.doc.length)], 0);
  }
  get editorView() {
    return this.view;
  }
  get length() {
    return this.view.state.doc.length;
  }
  // Update the document view to a given state. scrollIntoView can be
  // used as a hint to compute a new viewport that includes that
  // position, if we know the editor is going to scroll that position
  // into view.
  update(t2) {
    let e2 = t2.changedRanges;
    this.minWidth > 0 && e2.length && (e2.every(({ fromA: o2, toA: l2 }) => l2 < this.minWidthFrom || o2 > this.minWidthTo) ? (this.minWidthFrom = t2.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = t2.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.view.inputState.composing < 0 ? this.compositionDeco = T$3.none : (t2.transactions.length || this.dirty) && (this.compositionDeco = mf(this.view, t2.changes)), (x$3.ie || x$3.chrome) && !this.compositionDeco.size && t2 && t2.state.doc.lines != t2.startState.doc.lines && (this.forceSelection = true);
    let i2 = this.decorations, n2 = this.updateDeco(), r2 = kf(i2, n2, t2.changes);
    return e2 = _t.extendWithRanges(e2, r2), this.dirty == 0 && e2.length == 0 ? false : (this.updateInner(e2, t2.startState.doc.length), t2.transactions.length && (this.lastUpdate = Date.now()), true);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(t2, e2) {
    this.view.viewState.mustMeasureContent = true, this.updateChildren(t2, e2);
    let { observer: i2 } = this.view;
    i2.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let r2 = x$3.chrome || x$3.ios ? { node: i2.selectionRange.focusNode, written: false } : void 0;
      this.sync(r2), this.dirty = 0, r2 && (r2.written || i2.selectionRange.focusNode != r2.node) && (this.forceSelection = true), this.dom.style.height = "";
    });
    let n2 = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let r2 of this.children)
        r2 instanceof Ae && r2.widget instanceof Nr && n2.push(r2.dom);
    i2.updateGaps(n2);
  }
  updateChildren(t2, e2) {
    let i2 = this.childCursor(e2);
    for (let n2 = t2.length - 1; ; n2--) {
      let r2 = n2 >= 0 ? t2[n2] : null;
      if (!r2)
        break;
      let { fromA: o2, toA: l2, fromB: h2, toB: a2 } = r2, { content: c2, breakAtStart: f2, openStart: u2, openEnd: d2 } = Qs.build(this.view.state.doc, h2, a2, this.decorations, this.dynamicDecorationMap), { i: p2, off: w2 } = i2.findPos(l2, 1), { i: g2, off: y2 } = i2.findPos(o2, -1);
      bl(this, g2, y2, p2, w2, c2, f2, u2, d2);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(t2 = false, e2 = false) {
    if ((t2 || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange(), !(e2 || this.mayControlSelection()))
      return;
    let i2 = this.forceSelection;
    this.forceSelection = false;
    let n2 = this.view.state.selection.main, r2 = this.domAtPos(n2.anchor), o2 = n2.empty ? r2 : this.domAtPos(n2.head);
    if (x$3.gecko && n2.empty && gf(r2)) {
      let h2 = document.createTextNode("");
      this.view.observer.ignore(() => r2.node.insertBefore(h2, r2.node.childNodes[r2.offset] || null)), r2 = o2 = new at(h2, 0), i2 = true;
    }
    let l2 = this.view.observer.selectionRange;
    (i2 || !l2.focusNode || !nn(r2.node, r2.offset, l2.anchorNode, l2.anchorOffset) || !nn(o2.node, o2.offset, l2.focusNode, l2.focusOffset)) && (this.view.observer.ignore(() => {
      x$3.android && x$3.chrome && this.dom.contains(l2.focusNode) && xf(l2.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: true }));
      let h2 = en(this.view.root);
      if (h2)
        if (n2.empty) {
          if (x$3.gecko) {
            let a2 = yf(r2.node, r2.offset);
            if (a2 && a2 != 3) {
              let c2 = Wl(r2.node, r2.offset, a2 == 1 ? 1 : -1);
              c2 && (r2 = new at(c2, a2 == 1 ? 0 : c2.nodeValue.length));
            }
          }
          h2.collapse(r2.node, r2.offset), n2.bidiLevel != null && l2.cursorBidiLevel != null && (l2.cursorBidiLevel = n2.bidiLevel);
        } else if (h2.extend) {
          h2.collapse(r2.node, r2.offset);
          try {
            h2.extend(o2.node, o2.offset);
          } catch {
          }
        } else {
          let a2 = document.createRange();
          n2.anchor > n2.head && ([r2, o2] = [o2, r2]), a2.setEnd(o2.node, o2.offset), a2.setStart(r2.node, r2.offset), h2.removeAllRanges(), h2.addRange(a2);
        }
    }), this.view.observer.setSelectionRange(r2, o2)), this.impreciseAnchor = r2.precise ? null : new at(l2.anchorNode, l2.anchorOffset), this.impreciseHead = o2.precise ? null : new at(l2.focusNode, l2.focusOffset);
  }
  enforceCursorAssoc() {
    if (this.compositionDeco.size)
      return;
    let { view: t2 } = this, e2 = t2.state.selection.main, i2 = en(t2.root), { anchorNode: n2, anchorOffset: r2 } = t2.observer.selectionRange;
    if (!i2 || !e2.empty || !e2.assoc || !i2.modify)
      return;
    let o2 = ut.find(this, e2.head);
    if (!o2)
      return;
    let l2 = o2.posAtStart;
    if (e2.head == l2 || e2.head == l2 + o2.length)
      return;
    let h2 = this.coordsAt(e2.head, -1), a2 = this.coordsAt(e2.head, 1);
    if (!h2 || !a2 || h2.bottom > a2.top)
      return;
    let c2 = this.domAtPos(e2.head + e2.assoc);
    i2.collapse(c2.node, c2.offset), i2.modify("move", e2.assoc < 0 ? "forward" : "backward", "lineboundary"), t2.observer.readSelectionRange();
    let f2 = t2.observer.selectionRange;
    t2.docView.posFromDOM(f2.anchorNode, f2.anchorOffset) != e2.from && i2.collapse(n2, r2);
  }
  mayControlSelection() {
    let t2 = this.view.root.activeElement;
    return t2 == this.dom || ji(this.dom, this.view.observer.selectionRange) && !(t2 && this.dom.contains(t2));
  }
  nearest(t2) {
    for (let e2 = t2; e2; ) {
      let i2 = W$2.get(e2);
      if (i2 && i2.rootView == this)
        return i2;
      e2 = e2.parentNode;
    }
    return null;
  }
  posFromDOM(t2, e2) {
    let i2 = this.nearest(t2);
    if (!i2)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i2.localPosFromDOM(t2, e2) + i2.posAtStart;
  }
  domAtPos(t2) {
    let { i: e2, off: i2 } = this.childCursor().findPos(t2, -1);
    for (; e2 < this.children.length - 1; ) {
      let n2 = this.children[e2];
      if (i2 < n2.length || n2 instanceof ut)
        break;
      e2++, i2 = 0;
    }
    return this.children[e2].domAtPos(i2);
  }
  coordsAt(t2, e2) {
    for (let i2 = this.length, n2 = this.children.length - 1; ; n2--) {
      let r2 = this.children[n2], o2 = i2 - r2.breakAfter - r2.length;
      if (t2 > o2 || t2 == o2 && r2.type != U$3.WidgetBefore && r2.type != U$3.WidgetAfter && (!n2 || e2 == 2 || this.children[n2 - 1].breakAfter || this.children[n2 - 1].type == U$3.WidgetBefore && e2 > -2))
        return r2.coordsAt(t2 - o2, e2);
      i2 = o2;
    }
  }
  measureVisibleLineHeights(t2) {
    let e2 = [], { from: i2, to: n2 } = t2, r2 = this.view.contentDOM.clientWidth, o2 = r2 > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l2 = -1, h2 = this.view.textDirection == X$1.LTR;
    for (let a2 = 0, c2 = 0; c2 < this.children.length; c2++) {
      let f2 = this.children[c2], u2 = a2 + f2.length;
      if (u2 > n2)
        break;
      if (a2 >= i2) {
        let d2 = f2.dom.getBoundingClientRect();
        if (e2.push(d2.height), o2) {
          let p2 = f2.dom.lastChild, w2 = p2 ? di(p2) : [];
          if (w2.length) {
            let g2 = w2[w2.length - 1], y2 = h2 ? g2.right - d2.left : d2.right - g2.left;
            y2 > l2 && (l2 = y2, this.minWidth = r2, this.minWidthFrom = a2, this.minWidthTo = u2);
          }
        }
      }
      a2 = u2 + f2.breakAfter;
    }
    return e2;
  }
  textDirectionAt(t2) {
    let { i: e2 } = this.childPos(t2, 1);
    return getComputedStyle(this.children[e2].dom).direction == "rtl" ? X$1.RTL : X$1.LTR;
  }
  measureTextSize() {
    for (let n2 of this.children)
      if (n2 instanceof ut) {
        let r2 = n2.measureTextSize();
        if (r2)
          return r2;
      }
    let t2 = document.createElement("div"), e2, i2;
    return t2.className = "cm-line", t2.style.width = "99999px", t2.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(t2);
      let n2 = di(t2.firstChild)[0];
      e2 = t2.getBoundingClientRect().height, i2 = n2 ? n2.width / 27 : 7, t2.remove();
    }), { lineHeight: e2, charWidth: i2 };
  }
  childCursor(t2 = this.length) {
    let e2 = this.children.length;
    return e2 && (t2 -= this.children[--e2].length), new yl(this.children, t2, e2);
  }
  computeBlockGapDeco() {
    let t2 = [], e2 = this.view.viewState;
    for (let i2 = 0, n2 = 0; ; n2++) {
      let r2 = n2 == e2.viewports.length ? null : e2.viewports[n2], o2 = r2 ? r2.from - 1 : this.length;
      if (o2 > i2) {
        let l2 = e2.lineBlockAt(o2).bottom - e2.lineBlockAt(i2).top;
        t2.push(T$3.replace({
          widget: new Nr(l2),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(i2, o2));
      }
      if (!r2)
        break;
      i2 = r2.to + 1;
    }
    return T$3.set(t2);
  }
  updateDeco() {
    let t2 = this.view.state.facet(gi).map((e2, i2) => (this.dynamicDecorationMap[i2] = typeof e2 == "function") ? e2(this.view) : e2);
    for (let e2 = t2.length; e2 < t2.length + 3; e2++)
      this.dynamicDecorationMap[e2] = false;
    return this.decorations = [
      ...t2,
      this.compositionDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(t2) {
    let { range: e2 } = t2, i2 = this.coordsAt(e2.head, e2.empty ? e2.assoc : e2.head > e2.anchor ? -1 : 1), n2;
    if (!i2)
      return;
    !e2.empty && (n2 = this.coordsAt(e2.anchor, e2.anchor > e2.head ? -1 : 1)) && (i2 = {
      left: Math.min(i2.left, n2.left),
      top: Math.min(i2.top, n2.top),
      right: Math.max(i2.right, n2.right),
      bottom: Math.max(i2.bottom, n2.bottom)
    });
    let r2 = 0, o2 = 0, l2 = 0, h2 = 0;
    for (let c2 of this.view.state.facet(Il).map((f2) => f2(this.view)))
      if (c2) {
        let { left: f2, right: u2, top: d2, bottom: p2 } = c2;
        f2 != null && (r2 = Math.max(r2, f2)), u2 != null && (o2 = Math.max(o2, u2)), d2 != null && (l2 = Math.max(l2, d2)), p2 != null && (h2 = Math.max(h2, p2));
      }
    let a2 = {
      left: i2.left - r2,
      top: i2.top - l2,
      right: i2.right + o2,
      bottom: i2.bottom + h2
    };
    Jc(this.view.scrollDOM, a2, e2.head < e2.anchor ? -1 : 1, t2.x, t2.y, t2.xMargin, t2.yMargin, this.view.textDirection == X$1.LTR);
  }
}
function gf(s3) {
  return s3.node.nodeType == 1 && s3.node.firstChild && (s3.offset == 0 || s3.node.childNodes[s3.offset - 1].contentEditable == "false") && (s3.offset == s3.node.childNodes.length || s3.node.childNodes[s3.offset].contentEditable == "false");
}
class Nr extends ye$1 {
  constructor(t2) {
    super(), this.height = t2;
  }
  toDOM() {
    let t2 = document.createElement("div");
    return this.updateDOM(t2), t2;
  }
  eq(t2) {
    return t2.height == this.height;
  }
  updateDOM(t2) {
    return t2.style.height = this.height + "px", true;
  }
  get estimatedHeight() {
    return this.height;
  }
}
function _l(s3) {
  let t2 = s3.observer.selectionRange, e2 = t2.focusNode && Wl(t2.focusNode, t2.focusOffset, 0);
  if (!e2)
    return null;
  let i2 = s3.docView.nearest(e2);
  if (!i2)
    return null;
  if (i2 instanceof ut) {
    let n2 = e2;
    for (; n2.parentNode != i2.dom; )
      n2 = n2.parentNode;
    let r2 = n2.previousSibling;
    for (; r2 && !W$2.get(r2); )
      r2 = r2.previousSibling;
    let o2 = r2 ? W$2.get(r2).posAtEnd : i2.posAtStart;
    return { from: o2, to: o2, node: n2, text: e2 };
  } else {
    for (; ; ) {
      let { parent: r2 } = i2;
      if (!r2)
        return null;
      if (r2 instanceof ut)
        break;
      i2 = r2;
    }
    let n2 = i2.posAtStart;
    return { from: n2, to: n2 + i2.length, node: i2.dom, text: e2 };
  }
}
function mf(s3, t2) {
  let e2 = _l(s3);
  if (!e2)
    return T$3.none;
  let { from: i2, to: n2, node: r2, text: o2 } = e2, l2 = t2.mapPos(i2, 1), h2 = Math.max(l2, t2.mapPos(n2, -1)), { state: a2 } = s3, c2 = r2.nodeType == 3 ? r2.nodeValue : new zl([], a2).readRange(r2.firstChild, null).text;
  if (h2 - l2 < c2.length)
    if (a2.doc.sliceString(l2, Math.min(a2.doc.length, l2 + c2.length), he$1) == c2)
      h2 = l2 + c2.length;
    else if (a2.doc.sliceString(Math.max(0, h2 - c2.length), h2, he$1) == c2)
      l2 = h2 - c2.length;
    else
      return T$3.none;
  else if (a2.doc.sliceString(l2, h2, he$1) != c2)
    return T$3.none;
  let f2 = W$2.get(r2);
  return f2 instanceof Sl ? f2 = f2.widget.topView : f2 && (f2.parent = null), T$3.set(T$3.replace({ widget: new wf(r2, o2, f2), inclusive: true }).range(l2, h2));
}
class wf extends ye$1 {
  constructor(t2, e2, i2) {
    super(), this.top = t2, this.text = e2, this.topView = i2;
  }
  eq(t2) {
    return this.top == t2.top && this.text == t2.text;
  }
  toDOM() {
    return this.top;
  }
  ignoreEvent() {
    return false;
  }
  get customView() {
    return Sl;
  }
}
function Wl(s3, t2, e2) {
  for (; ; ) {
    if (s3.nodeType == 3)
      return s3;
    if (s3.nodeType == 1 && t2 > 0 && e2 <= 0)
      s3 = s3.childNodes[t2 - 1], t2 = pi(s3);
    else if (s3.nodeType == 1 && t2 < s3.childNodes.length && e2 >= 0)
      s3 = s3.childNodes[t2], t2 = 0;
    else
      return null;
  }
}
function yf(s3, t2) {
  return s3.nodeType != 1 ? 0 : (t2 && s3.childNodes[t2 - 1].contentEditable == "false" ? 1 : 0) | (t2 < s3.childNodes.length && s3.childNodes[t2].contentEditable == "false" ? 2 : 0);
}
class bf {
  constructor() {
    this.changes = [];
  }
  compareRange(t2, e2) {
    xs(t2, e2, this.changes);
  }
  comparePoint(t2, e2) {
    xs(t2, e2, this.changes);
  }
}
function kf(s3, t2, e2) {
  let i2 = new bf();
  return $$1.compare(s3, t2, e2, i2), i2.changes;
}
function xf(s3, t2) {
  for (let e2 = s3; e2 && e2 != t2; e2 = e2.assignedSlot || e2.parentNode)
    if (e2.nodeType == 1 && e2.contentEditable == "false")
      return true;
  return false;
}
function vf(s3, t2, e2 = 1) {
  let i2 = s3.charCategorizer(t2), n2 = s3.doc.lineAt(t2), r2 = t2 - n2.from;
  if (n2.length == 0)
    return b$2.cursor(t2);
  r2 == 0 ? e2 = 1 : r2 == n2.length && (e2 = -1);
  let o2 = r2, l2 = r2;
  e2 < 0 ? o2 = xt(n2.text, r2, false) : l2 = xt(n2.text, r2);
  let h2 = i2(n2.text.slice(o2, l2));
  for (; o2 > 0; ) {
    let a2 = xt(n2.text, o2, false);
    if (i2(n2.text.slice(a2, o2)) != h2)
      break;
    o2 = a2;
  }
  for (; l2 < n2.length; ) {
    let a2 = xt(n2.text, l2);
    if (i2(n2.text.slice(l2, a2)) != h2)
      break;
    l2 = a2;
  }
  return b$2.range(o2 + n2.from, l2 + n2.from);
}
function Sf(s3, t2) {
  return t2.left > s3 ? t2.left - s3 : Math.max(0, s3 - t2.right);
}
function Cf(s3, t2) {
  return t2.top > s3 ? t2.top - s3 : Math.max(0, s3 - t2.bottom);
}
function $n(s3, t2) {
  return s3.top < t2.bottom - 1 && s3.bottom > t2.top + 1;
}
function Vr(s3, t2) {
  return t2 < s3.top ? { top: t2, left: s3.left, right: s3.right, bottom: s3.bottom } : s3;
}
function Ir(s3, t2) {
  return t2 > s3.bottom ? { top: s3.top, left: s3.left, right: s3.right, bottom: t2 } : s3;
}
function As(s3, t2, e2) {
  let i2, n2, r2, o2, l2 = false, h2, a2, c2, f2;
  for (let p2 = s3.firstChild; p2; p2 = p2.nextSibling) {
    let w2 = di(p2);
    for (let g2 = 0; g2 < w2.length; g2++) {
      let y2 = w2[g2];
      n2 && $n(n2, y2) && (y2 = Vr(Ir(y2, n2.bottom), n2.top));
      let O2 = Sf(t2, y2), S2 = Cf(e2, y2);
      if (O2 == 0 && S2 == 0)
        return p2.nodeType == 3 ? Hr(p2, t2, e2) : As(p2, t2, e2);
      if (!i2 || o2 > S2 || o2 == S2 && r2 > O2) {
        i2 = p2, n2 = y2, r2 = O2, o2 = S2;
        let D2 = S2 ? e2 < y2.top ? -1 : 1 : O2 ? t2 < y2.left ? -1 : 1 : 0;
        l2 = !D2 || (D2 > 0 ? g2 < w2.length - 1 : g2 > 0);
      }
      O2 == 0 ? e2 > y2.bottom && (!c2 || c2.bottom < y2.bottom) ? (h2 = p2, c2 = y2) : e2 < y2.top && (!f2 || f2.top > y2.top) && (a2 = p2, f2 = y2) : c2 && $n(c2, y2) ? c2 = Ir(c2, y2.bottom) : f2 && $n(f2, y2) && (f2 = Vr(f2, y2.top));
    }
  }
  if (c2 && c2.bottom >= e2 ? (i2 = h2, n2 = c2) : f2 && f2.top <= e2 && (i2 = a2, n2 = f2), !i2)
    return { node: s3, offset: 0 };
  let u2 = Math.max(n2.left, Math.min(n2.right, t2));
  if (i2.nodeType == 3)
    return Hr(i2, u2, e2);
  if (l2 && i2.contentEditable != "false")
    return As(i2, u2, e2);
  let d2 = Array.prototype.indexOf.call(s3.childNodes, i2) + (t2 >= (n2.left + n2.right) / 2 ? 1 : 0);
  return { node: s3, offset: d2 };
}
function Hr(s3, t2, e2) {
  let i2 = s3.nodeValue.length, n2 = -1, r2 = 1e9, o2 = 0;
  for (let l2 = 0; l2 < i2; l2++) {
    let h2 = Ke$1(s3, l2, l2 + 1).getClientRects();
    for (let a2 = 0; a2 < h2.length; a2++) {
      let c2 = h2[a2];
      if (c2.top == c2.bottom)
        continue;
      o2 || (o2 = t2 - c2.left);
      let f2 = (c2.top > e2 ? c2.top - e2 : e2 - c2.bottom) - 1;
      if (c2.left - 1 <= t2 && c2.right + 1 >= t2 && f2 < r2) {
        let u2 = t2 >= (c2.left + c2.right) / 2, d2 = u2;
        if ((x$3.chrome || x$3.gecko) && Ke$1(s3, l2).getBoundingClientRect().left == c2.right && (d2 = !u2), f2 <= 0)
          return { node: s3, offset: l2 + (d2 ? 1 : 0) };
        n2 = l2 + (d2 ? 1 : 0), r2 = f2;
      }
    }
  }
  return { node: s3, offset: n2 > -1 ? n2 : o2 > 0 ? s3.nodeValue.length : 0 };
}
function jl(s3, { x: t2, y: e2 }, i2, n2 = -1) {
  var r2;
  let o2 = s3.contentDOM.getBoundingClientRect(), l2 = o2.top + s3.viewState.paddingTop, h2, { docHeight: a2 } = s3.viewState, c2 = e2 - l2;
  if (c2 < 0)
    return 0;
  if (c2 > a2)
    return s3.state.doc.length;
  for (let y2 = s3.defaultLineHeight / 2, O2 = false; h2 = s3.elementAtHeight(c2), h2.type != U$3.Text; )
    for (; c2 = n2 > 0 ? h2.bottom + y2 : h2.top - y2, !(c2 >= 0 && c2 <= a2); ) {
      if (O2)
        return i2 ? null : 0;
      O2 = true, n2 = -n2;
    }
  e2 = l2 + c2;
  let f2 = h2.from;
  if (f2 < s3.viewport.from)
    return s3.viewport.from == 0 ? 0 : i2 ? null : $r(s3, o2, h2, t2, e2);
  if (f2 > s3.viewport.to)
    return s3.viewport.to == s3.state.doc.length ? s3.state.doc.length : i2 ? null : $r(s3, o2, h2, t2, e2);
  let u2 = s3.dom.ownerDocument, d2 = s3.root.elementFromPoint ? s3.root : u2, p2 = d2.elementFromPoint(t2, e2);
  p2 && !s3.contentDOM.contains(p2) && (p2 = null), p2 || (t2 = Math.max(o2.left + 1, Math.min(o2.right - 1, t2)), p2 = d2.elementFromPoint(t2, e2), p2 && !s3.contentDOM.contains(p2) && (p2 = null));
  let w2, g2 = -1;
  if (p2 && ((r2 = s3.docView.nearest(p2)) === null || r2 === void 0 ? void 0 : r2.isEditable) != false) {
    if (u2.caretPositionFromPoint) {
      let y2 = u2.caretPositionFromPoint(t2, e2);
      y2 && ({ offsetNode: w2, offset: g2 } = y2);
    } else if (u2.caretRangeFromPoint) {
      let y2 = u2.caretRangeFromPoint(t2, e2);
      y2 && ({ startContainer: w2, startOffset: g2 } = y2, (!s3.contentDOM.contains(w2) || x$3.safari && Af(w2, g2, t2) || x$3.chrome && Of(w2, g2, t2)) && (w2 = void 0));
    }
  }
  if (!w2 || !s3.docView.dom.contains(w2)) {
    let y2 = ut.find(s3.docView, f2);
    if (!y2)
      return c2 > h2.top + h2.height / 2 ? h2.to : h2.from;
    ({ node: w2, offset: g2 } = As(y2.dom, t2, e2));
  }
  return s3.docView.posFromDOM(w2, g2);
}
function $r(s3, t2, e2, i2, n2) {
  let r2 = Math.round((i2 - t2.left) * s3.defaultCharacterWidth);
  if (s3.lineWrapping && e2.height > s3.defaultLineHeight * 1.5) {
    let l2 = Math.floor((n2 - e2.top) / s3.defaultLineHeight);
    r2 += l2 * s3.viewState.heightOracle.lineLength;
  }
  let o2 = s3.state.sliceDoc(e2.from, e2.to);
  return e2.from + _c(o2, r2, s3.state.tabSize);
}
function Af(s3, t2, e2) {
  let i2;
  if (s3.nodeType != 3 || t2 != (i2 = s3.nodeValue.length))
    return false;
  for (let n2 = s3.nextSibling; n2; n2 = n2.nextSibling)
    if (n2.nodeType != 1 || n2.nodeName != "BR")
      return false;
  return Ke$1(s3, i2 - 1, i2).getBoundingClientRect().left > e2;
}
function Of(s3, t2, e2) {
  if (t2 != 0)
    return false;
  for (let n2 = s3; ; ) {
    let r2 = n2.parentNode;
    if (!r2 || r2.nodeType != 1 || r2.firstChild != n2)
      return false;
    if (r2.classList.contains("cm-line"))
      break;
    n2 = r2;
  }
  let i2 = s3.nodeType == 1 ? s3.getBoundingClientRect() : Ke$1(s3, 0, Math.max(s3.nodeValue.length, 1)).getBoundingClientRect();
  return e2 - i2.left > 5;
}
function Mf(s3, t2, e2, i2) {
  let n2 = s3.state.doc.lineAt(t2.head), r2 = !i2 || !s3.lineWrapping ? null : s3.coordsAtPos(t2.assoc < 0 && t2.head > n2.from ? t2.head - 1 : t2.head);
  if (r2) {
    let h2 = s3.dom.getBoundingClientRect(), a2 = s3.textDirectionAt(n2.from), c2 = s3.posAtCoords({
      x: e2 == (a2 == X$1.LTR) ? h2.right - 1 : h2.left + 1,
      y: (r2.top + r2.bottom) / 2
    });
    if (c2 != null)
      return b$2.cursor(c2, e2 ? -1 : 1);
  }
  let o2 = ut.find(s3.docView, t2.head), l2 = o2 ? e2 ? o2.posAtEnd : o2.posAtStart : e2 ? n2.to : n2.from;
  return b$2.cursor(l2, e2 ? -1 : 1);
}
function Fr(s3, t2, e2, i2) {
  let n2 = s3.state.doc.lineAt(t2.head), r2 = s3.bidiSpans(n2), o2 = s3.textDirectionAt(n2.from);
  for (let l2 = t2, h2 = null; ; ) {
    let a2 = pf(n2, r2, o2, l2, e2), c2 = Fl;
    if (!a2) {
      if (n2.number == (e2 ? s3.state.doc.lines : 1))
        return l2;
      c2 = `
`, n2 = s3.state.doc.line(n2.number + (e2 ? 1 : -1)), r2 = s3.bidiSpans(n2), a2 = b$2.cursor(e2 ? n2.from : n2.to);
    }
    if (h2) {
      if (!h2(c2))
        return l2;
    } else {
      if (!i2)
        return a2;
      h2 = i2(c2);
    }
    l2 = a2;
  }
}
function Df(s3, t2, e2) {
  let i2 = s3.state.charCategorizer(t2), n2 = i2(e2);
  return (r2) => {
    let o2 = i2(r2);
    return n2 == Jt.Space && (n2 = o2), n2 == o2;
  };
}
function Tf(s3, t2, e2, i2) {
  let n2 = t2.head, r2 = e2 ? 1 : -1;
  if (n2 == (e2 ? s3.state.doc.length : 0))
    return b$2.cursor(n2, t2.assoc);
  let o2 = t2.goalColumn, l2, h2 = s3.contentDOM.getBoundingClientRect(), a2 = s3.coordsAtPos(n2), c2 = s3.documentTop;
  if (a2)
    o2 == null && (o2 = a2.left - h2.left), l2 = r2 < 0 ? a2.top : a2.bottom;
  else {
    let d2 = s3.viewState.lineBlockAt(n2);
    o2 == null && (o2 = Math.min(h2.right - h2.left, s3.defaultCharacterWidth * (n2 - d2.from))), l2 = (r2 < 0 ? d2.top : d2.bottom) + c2;
  }
  let f2 = h2.left + o2, u2 = i2 ?? s3.defaultLineHeight >> 1;
  for (let d2 = 0; ; d2 += 10) {
    let p2 = l2 + (u2 + d2) * r2, w2 = jl(s3, { x: f2, y: p2 }, false, r2);
    if (p2 < h2.top || p2 > h2.bottom || (r2 < 0 ? w2 < n2 : w2 > n2))
      return b$2.cursor(w2, t2.assoc, void 0, o2);
  }
}
function Fn(s3, t2, e2) {
  let i2 = s3.state.facet(Vl).map((n2) => n2(s3));
  for (; ; ) {
    let n2 = false;
    for (let r2 of i2)
      r2.between(e2.from - 1, e2.from + 1, (o2, l2, h2) => {
        e2.from > o2 && e2.from < l2 && (e2 = t2.head > e2.from ? b$2.cursor(o2, 1) : b$2.cursor(l2, -1), n2 = true);
      });
    if (!n2)
      return e2;
  }
}
class Pf {
  constructor(t2) {
    this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.chromeScrollHack = -1, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.registeredEvents = [], this.customHandlers = [], this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.mouseSelection = null;
    let e2 = (i2, n2) => {
      this.ignoreDuringComposition(n2) || n2.type == "keydown" && this.keydown(t2, n2) || (this.mustFlushObserver(n2) && t2.observer.forceFlush(), this.runCustomHandlers(n2.type, t2, n2) ? n2.preventDefault() : i2(t2, n2));
    };
    for (let i2 in Y) {
      let n2 = Y[i2];
      t2.contentDOM.addEventListener(i2, (r2) => {
        zr(t2, r2) && e2(n2, r2);
      }, Os[i2]), this.registeredEvents.push(i2);
    }
    t2.scrollDOM.addEventListener("mousedown", (i2) => {
      i2.target == t2.scrollDOM && e2(Y.mousedown, i2);
    }), x$3.chrome && x$3.chrome_version == 102 && t2.scrollDOM.addEventListener("wheel", () => {
      this.chromeScrollHack < 0 ? t2.contentDOM.style.pointerEvents = "none" : window.clearTimeout(this.chromeScrollHack), this.chromeScrollHack = setTimeout(() => {
        this.chromeScrollHack = -1, t2.contentDOM.style.pointerEvents = "";
      }, 100);
    }, { passive: true }), this.notifiedFocused = t2.hasFocus, x$3.safari && t2.contentDOM.addEventListener("input", () => null);
  }
  setSelectionOrigin(t2) {
    this.lastSelectionOrigin = t2, this.lastSelectionTime = Date.now();
  }
  ensureHandlers(t2, e2) {
    var i2;
    let n2;
    this.customHandlers = [];
    for (let r2 of e2)
      if (n2 = (i2 = r2.update(t2).spec) === null || i2 === void 0 ? void 0 : i2.domEventHandlers) {
        this.customHandlers.push({ plugin: r2.value, handlers: n2 });
        for (let o2 in n2)
          this.registeredEvents.indexOf(o2) < 0 && o2 != "scroll" && (this.registeredEvents.push(o2), t2.contentDOM.addEventListener(o2, (l2) => {
            zr(t2, l2) && this.runCustomHandlers(o2, t2, l2) && l2.preventDefault();
          }));
      }
  }
  runCustomHandlers(t2, e2, i2) {
    for (let n2 of this.customHandlers) {
      let r2 = n2.handlers[t2];
      if (r2)
        try {
          if (r2.call(n2.plugin, i2, e2) || i2.defaultPrevented)
            return true;
        } catch (o2) {
          zt(e2.state, o2);
        }
    }
    return false;
  }
  runScrollHandlers(t2, e2) {
    this.lastScrollTop = t2.scrollDOM.scrollTop, this.lastScrollLeft = t2.scrollDOM.scrollLeft;
    for (let i2 of this.customHandlers) {
      let n2 = i2.handlers.scroll;
      if (n2)
        try {
          n2.call(i2.plugin, e2, t2);
        } catch (r2) {
          zt(t2.state, r2);
        }
    }
  }
  keydown(t2, e2) {
    if (this.lastKeyCode = e2.keyCode, this.lastKeyTime = Date.now(), e2.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return true;
    if (x$3.android && x$3.chrome && !e2.synthetic && (e2.keyCode == 13 || e2.keyCode == 8))
      return t2.observer.delayAndroidKey(e2.key, e2.keyCode), true;
    let i2;
    return x$3.ios && !e2.synthetic && !e2.altKey && !e2.metaKey && ((i2 = ql.find((n2) => n2.keyCode == e2.keyCode)) && !e2.ctrlKey || Bf.indexOf(e2.key) > -1 && e2.ctrlKey && !e2.shiftKey) ? (this.pendingIOSKey = i2 || e2, setTimeout(() => this.flushIOSKey(t2), 250), true) : false;
  }
  flushIOSKey(t2) {
    let e2 = this.pendingIOSKey;
    return e2 ? (this.pendingIOSKey = void 0, $e(t2.contentDOM, e2.key, e2.keyCode)) : false;
  }
  ignoreDuringComposition(t2) {
    return /^key/.test(t2.type) ? this.composing > 0 ? true : x$3.safari && !x$3.ios && Date.now() - this.compositionEndedAt < 100 ? (this.compositionEndedAt = 0, true) : false : false;
  }
  mustFlushObserver(t2) {
    return t2.type == "keydown" && t2.keyCode != 229;
  }
  startMouseSelection(t2) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = t2;
  }
  update(t2) {
    this.mouseSelection && this.mouseSelection.update(t2), t2.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
const ql = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], Bf = "dthko", Kl = [16, 17, 18, 20, 91, 92, 224, 225];
function Di(s3) {
  return s3 * 0.7 + 8;
}
class Rf {
  constructor(t2, e2, i2, n2) {
    this.view = t2, this.style = i2, this.mustSelect = n2, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = e2, this.scrollParent = Xc(t2.contentDOM);
    let r2 = t2.contentDOM.ownerDocument;
    r2.addEventListener("mousemove", this.move = this.move.bind(this)), r2.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = e2.shiftKey, this.multiple = t2.state.facet(N$4.allowMultipleSelections) && Lf(t2, e2), this.dragMove = Ef(t2, e2), this.dragging = Nf(t2, e2) && Jl(e2) == 1 ? null : false, this.dragging === false && (e2.preventDefault(), this.select(e2));
  }
  move(t2) {
    var e2;
    if (t2.buttons == 0)
      return this.destroy();
    if (this.dragging !== false)
      return;
    this.select(this.lastEvent = t2);
    let i2 = 0, n2 = 0, r2 = ((e2 = this.scrollParent) === null || e2 === void 0 ? void 0 : e2.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
    t2.clientX <= r2.left ? i2 = -Di(r2.left - t2.clientX) : t2.clientX >= r2.right && (i2 = Di(t2.clientX - r2.right)), t2.clientY <= r2.top ? n2 = -Di(r2.top - t2.clientY) : t2.clientY >= r2.bottom && (n2 = Di(t2.clientY - r2.bottom)), this.setScrollSpeed(i2, n2);
  }
  up(t2) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || t2.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let t2 = this.view.contentDOM.ownerDocument;
    t2.removeEventListener("mousemove", this.move), t2.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = null;
  }
  setScrollSpeed(t2, e2) {
    this.scrollSpeed = { x: t2, y: e2 }, t2 || e2 ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    this.scrollParent ? (this.scrollParent.scrollLeft += this.scrollSpeed.x, this.scrollParent.scrollTop += this.scrollSpeed.y) : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y), this.dragging === false && this.select(this.lastEvent);
  }
  select(t2) {
    let e2 = this.style.get(t2, this.extend, this.multiple);
    (this.mustSelect || !e2.eq(this.view.state.selection) || e2.main.assoc != this.view.state.selection.main.assoc) && this.view.dispatch({
      selection: e2,
      userEvent: "select.pointer"
    }), this.mustSelect = false;
  }
  update(t2) {
    t2.docChanged && this.dragging && (this.dragging = this.dragging.map(t2.changes)), this.style.update(t2) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function Lf(s3, t2) {
  let e2 = s3.state.facet(Tl);
  return e2.length ? e2[0](t2) : x$3.mac ? t2.metaKey : t2.ctrlKey;
}
function Ef(s3, t2) {
  let e2 = s3.state.facet(Pl);
  return e2.length ? e2[0](t2) : x$3.mac ? !t2.altKey : !t2.ctrlKey;
}
function Nf(s3, t2) {
  let { main: e2 } = s3.state.selection;
  if (e2.empty)
    return false;
  let i2 = en(s3.root);
  if (!i2 || i2.rangeCount == 0)
    return true;
  let n2 = i2.getRangeAt(0).getClientRects();
  for (let r2 = 0; r2 < n2.length; r2++) {
    let o2 = n2[r2];
    if (o2.left <= t2.clientX && o2.right >= t2.clientX && o2.top <= t2.clientY && o2.bottom >= t2.clientY)
      return true;
  }
  return false;
}
function zr(s3, t2) {
  if (!t2.bubbles)
    return true;
  if (t2.defaultPrevented)
    return false;
  for (let e2 = t2.target, i2; e2 != s3.contentDOM; e2 = e2.parentNode)
    if (!e2 || e2.nodeType == 11 || (i2 = W$2.get(e2)) && i2.ignoreEvent(t2))
      return false;
  return true;
}
const Y = /* @__PURE__ */ Object.create(null), Os = /* @__PURE__ */ Object.create(null), Gl = x$3.ie && x$3.ie_version < 15 || x$3.ios && x$3.webkit_version < 604;
function Vf(s3) {
  let t2 = s3.dom.parentNode;
  if (!t2)
    return;
  let e2 = t2.appendChild(document.createElement("textarea"));
  e2.style.cssText = "position: fixed; left: -10000px; top: 10px", e2.focus(), setTimeout(() => {
    s3.focus(), e2.remove(), Ul(s3, e2.value);
  }, 50);
}
function Ul(s3, t2) {
  let { state: e2 } = s3, i2, n2 = 1, r2 = e2.toText(t2), o2 = r2.lines == e2.selection.ranges.length;
  if (Ms != null && e2.selection.ranges.every((h2) => h2.empty) && Ms == r2.toString()) {
    let h2 = -1;
    i2 = e2.changeByRange((a2) => {
      let c2 = e2.doc.lineAt(a2.from);
      if (c2.from == h2)
        return { range: a2 };
      h2 = c2.from;
      let f2 = e2.toText((o2 ? r2.line(n2++).text : t2) + e2.lineBreak);
      return {
        changes: { from: c2.from, insert: f2 },
        range: b$2.cursor(a2.from + f2.length)
      };
    });
  } else
    o2 ? i2 = e2.changeByRange((h2) => {
      let a2 = r2.line(n2++);
      return {
        changes: { from: h2.from, to: h2.to, insert: a2.text },
        range: b$2.cursor(h2.from + a2.length)
      };
    }) : i2 = e2.replaceSelection(r2);
  s3.dispatch(i2, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
Y.keydown = (s3, t2) => {
  s3.inputState.setSelectionOrigin("select"), t2.keyCode == 27 ? s3.inputState.lastEscPress = Date.now() : Kl.indexOf(t2.keyCode) < 0 && (s3.inputState.lastEscPress = 0);
};
Y.touchstart = (s3, t2) => {
  s3.inputState.lastTouchTime = Date.now(), s3.inputState.setSelectionOrigin("select.pointer");
};
Y.touchmove = (s3) => {
  s3.inputState.setSelectionOrigin("select.pointer");
};
Os.touchstart = Os.touchmove = { passive: true };
Y.mousedown = (s3, t2) => {
  if (s3.observer.flush(), s3.inputState.lastTouchTime > Date.now() - 2e3)
    return;
  let e2 = null;
  for (let i2 of s3.state.facet(Bl))
    if (e2 = i2(s3, t2), e2)
      break;
  if (!e2 && t2.button == 0 && (e2 = $f(s3, t2)), e2) {
    let i2 = s3.root.activeElement != s3.contentDOM;
    i2 && s3.observer.ignore(() => ml(s3.contentDOM)), s3.inputState.startMouseSelection(new Rf(s3, t2, e2, i2));
  }
};
function _r(s3, t2, e2, i2) {
  if (i2 == 1)
    return b$2.cursor(t2, e2);
  if (i2 == 2)
    return vf(s3.state, t2, e2);
  {
    let n2 = ut.find(s3.docView, t2), r2 = s3.state.doc.lineAt(n2 ? n2.posAtEnd : t2), o2 = n2 ? n2.posAtStart : r2.from, l2 = n2 ? n2.posAtEnd : r2.to;
    return l2 < s3.state.doc.length && l2 == r2.to && l2++, b$2.range(o2, l2);
  }
}
let Ql = (s3, t2) => s3 >= t2.top && s3 <= t2.bottom, Wr = (s3, t2, e2) => Ql(t2, e2) && s3 >= e2.left && s3 <= e2.right;
function If(s3, t2, e2, i2) {
  let n2 = ut.find(s3.docView, t2);
  if (!n2)
    return 1;
  let r2 = t2 - n2.posAtStart;
  if (r2 == 0)
    return 1;
  if (r2 == n2.length)
    return -1;
  let o2 = n2.coordsAt(r2, -1);
  if (o2 && Wr(e2, i2, o2))
    return -1;
  let l2 = n2.coordsAt(r2, 1);
  return l2 && Wr(e2, i2, l2) ? 1 : o2 && Ql(i2, o2) ? -1 : 1;
}
function jr(s3, t2) {
  let e2 = s3.posAtCoords({ x: t2.clientX, y: t2.clientY }, false);
  return { pos: e2, bias: If(s3, e2, t2.clientX, t2.clientY) };
}
const Hf = x$3.ie && x$3.ie_version <= 11;
let qr = null, Kr = 0, Gr = 0;
function Jl(s3) {
  if (!Hf)
    return s3.detail;
  let t2 = qr, e2 = Gr;
  return qr = s3, Gr = Date.now(), Kr = !t2 || e2 > Date.now() - 400 && Math.abs(t2.clientX - s3.clientX) < 2 && Math.abs(t2.clientY - s3.clientY) < 2 ? (Kr + 1) % 3 : 1;
}
function $f(s3, t2) {
  let e2 = jr(s3, t2), i2 = Jl(t2), n2 = s3.state.selection;
  return {
    update(r2) {
      r2.docChanged && (e2.pos = r2.changes.mapPos(e2.pos), n2 = n2.map(r2.changes));
    },
    get(r2, o2, l2) {
      let h2 = jr(s3, r2), a2 = _r(s3, h2.pos, h2.bias, i2);
      if (e2.pos != h2.pos && !o2) {
        let c2 = _r(s3, e2.pos, e2.bias, i2), f2 = Math.min(c2.from, a2.from), u2 = Math.max(c2.to, a2.to);
        a2 = f2 < a2.from ? b$2.range(f2, u2) : b$2.range(u2, f2);
      }
      return o2 ? n2.replaceRange(n2.main.extend(a2.from, a2.to)) : l2 && n2.ranges.length > 1 && n2.ranges.some((c2) => c2.eq(a2)) ? Ff(n2, a2) : l2 ? n2.addRange(a2) : b$2.create([a2]);
    }
  };
}
function Ff(s3, t2) {
  for (let e2 = 0; ; e2++)
    if (s3.ranges[e2].eq(t2))
      return b$2.create(s3.ranges.slice(0, e2).concat(s3.ranges.slice(e2 + 1)), s3.mainIndex == e2 ? 0 : s3.mainIndex - (s3.mainIndex > e2 ? 1 : 0));
}
Y.dragstart = (s3, t2) => {
  let { selection: { main: e2 } } = s3.state, { mouseSelection: i2 } = s3.inputState;
  i2 && (i2.dragging = e2), t2.dataTransfer && (t2.dataTransfer.setData("Text", s3.state.sliceDoc(e2.from, e2.to)), t2.dataTransfer.effectAllowed = "copyMove");
};
function Ur(s3, t2, e2, i2) {
  if (!e2)
    return;
  let n2 = s3.posAtCoords({ x: t2.clientX, y: t2.clientY }, false);
  t2.preventDefault();
  let { mouseSelection: r2 } = s3.inputState, o2 = i2 && r2 && r2.dragging && r2.dragMove ? { from: r2.dragging.from, to: r2.dragging.to } : null, l2 = { from: n2, insert: e2 }, h2 = s3.state.changes(o2 ? [o2, l2] : l2);
  s3.focus(), s3.dispatch({
    changes: h2,
    selection: { anchor: h2.mapPos(n2, -1), head: h2.mapPos(n2, 1) },
    userEvent: o2 ? "move.drop" : "input.drop"
  });
}
Y.drop = (s3, t2) => {
  if (!t2.dataTransfer)
    return;
  if (s3.state.readOnly)
    return t2.preventDefault();
  let e2 = t2.dataTransfer.files;
  if (e2 && e2.length) {
    t2.preventDefault();
    let i2 = Array(e2.length), n2 = 0, r2 = () => {
      ++n2 == e2.length && Ur(s3, t2, i2.filter((o2) => o2 != null).join(s3.state.lineBreak), false);
    };
    for (let o2 = 0; o2 < e2.length; o2++) {
      let l2 = new FileReader();
      l2.onerror = r2, l2.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l2.result) || (i2[o2] = l2.result), r2();
      }, l2.readAsText(e2[o2]);
    }
  } else
    Ur(s3, t2, t2.dataTransfer.getData("Text"), true);
};
Y.paste = (s3, t2) => {
  if (s3.state.readOnly)
    return t2.preventDefault();
  s3.observer.flush();
  let e2 = Gl ? null : t2.clipboardData;
  e2 ? (Ul(s3, e2.getData("text/plain")), t2.preventDefault()) : Vf(s3);
};
function zf(s3, t2) {
  let e2 = s3.dom.parentNode;
  if (!e2)
    return;
  let i2 = e2.appendChild(document.createElement("textarea"));
  i2.style.cssText = "position: fixed; left: -10000px; top: 10px", i2.value = t2, i2.focus(), i2.selectionEnd = t2.length, i2.selectionStart = 0, setTimeout(() => {
    i2.remove(), s3.focus();
  }, 50);
}
function _f(s3) {
  let t2 = [], e2 = [], i2 = false;
  for (let n2 of s3.selection.ranges)
    n2.empty || (t2.push(s3.sliceDoc(n2.from, n2.to)), e2.push(n2));
  if (!t2.length) {
    let n2 = -1;
    for (let { from: r2 } of s3.selection.ranges) {
      let o2 = s3.doc.lineAt(r2);
      o2.number > n2 && (t2.push(o2.text), e2.push({ from: o2.from, to: Math.min(s3.doc.length, o2.to + 1) })), n2 = o2.number;
    }
    i2 = true;
  }
  return { text: t2.join(s3.lineBreak), ranges: e2, linewise: i2 };
}
let Ms = null;
Y.copy = Y.cut = (s3, t2) => {
  let { text: e2, ranges: i2, linewise: n2 } = _f(s3.state);
  if (!e2 && !n2)
    return;
  Ms = n2 ? e2 : null;
  let r2 = Gl ? null : t2.clipboardData;
  r2 ? (t2.preventDefault(), r2.clearData(), r2.setData("text/plain", e2)) : zf(s3, e2), t2.type == "cut" && !s3.state.readOnly && s3.dispatch({
    changes: i2,
    scrollIntoView: true,
    userEvent: "delete.cut"
  });
};
function Xl(s3) {
  setTimeout(() => {
    s3.hasFocus != s3.inputState.notifiedFocused && s3.update([]);
  }, 10);
}
Y.focus = (s3) => {
  s3.inputState.lastFocusTime = Date.now(), !s3.scrollDOM.scrollTop && (s3.inputState.lastScrollTop || s3.inputState.lastScrollLeft) && (s3.scrollDOM.scrollTop = s3.inputState.lastScrollTop, s3.scrollDOM.scrollLeft = s3.inputState.lastScrollLeft), Xl(s3);
};
Y.blur = (s3) => {
  s3.observer.clearSelectionRange(), Xl(s3);
};
Y.compositionstart = Y.compositionupdate = (s3) => {
  s3.inputState.compositionFirstChange == null && (s3.inputState.compositionFirstChange = true), s3.inputState.composing < 0 && (s3.inputState.composing = 0);
};
Y.compositionend = (s3) => {
  s3.inputState.composing = -1, s3.inputState.compositionEndedAt = Date.now(), s3.inputState.compositionFirstChange = null, x$3.chrome && x$3.android && s3.observer.flushSoon(), setTimeout(() => {
    s3.inputState.composing < 0 && s3.docView.compositionDeco.size && s3.update([]);
  }, 50);
};
Y.contextmenu = (s3) => {
  s3.inputState.lastContextMenu = Date.now();
};
Y.beforeinput = (s3, t2) => {
  var e2;
  let i2;
  if (x$3.chrome && x$3.android && (i2 = ql.find((n2) => n2.inputType == t2.inputType)) && (s3.observer.delayAndroidKey(i2.key, i2.keyCode), i2.key == "Backspace" || i2.key == "Delete")) {
    let n2 = ((e2 = window.visualViewport) === null || e2 === void 0 ? void 0 : e2.height) || 0;
    setTimeout(() => {
      var r2;
      (((r2 = window.visualViewport) === null || r2 === void 0 ? void 0 : r2.height) || 0) > n2 + 10 && s3.hasFocus && (s3.contentDOM.blur(), s3.focus());
    }, 100);
  }
};
const Qr = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class Wf {
  constructor(t2) {
    this.lineWrapping = t2, this.doc = E$4.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.lineLength = 30, this.heightChanged = false;
  }
  heightForGap(t2, e2) {
    let i2 = this.doc.lineAt(e2).number - this.doc.lineAt(t2).number + 1;
    return this.lineWrapping && (i2 += Math.ceil((e2 - t2 - i2 * this.lineLength * 0.5) / this.lineLength)), this.lineHeight * i2;
  }
  heightForLine(t2) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((t2 - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(t2) {
    return this.doc = t2, this;
  }
  mustRefreshForWrapping(t2) {
    return Qr.indexOf(t2) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(t2) {
    let e2 = false;
    for (let i2 = 0; i2 < t2.length; i2++) {
      let n2 = t2[i2];
      n2 < 0 ? i2++ : this.heightSamples[Math.floor(n2 * 10)] || (e2 = true, this.heightSamples[Math.floor(n2 * 10)] = true);
    }
    return e2;
  }
  refresh(t2, e2, i2, n2, r2) {
    let o2 = Qr.indexOf(t2) > -1, l2 = Math.round(e2) != Math.round(this.lineHeight) || this.lineWrapping != o2;
    if (this.lineWrapping = o2, this.lineHeight = e2, this.charWidth = i2, this.lineLength = n2, l2) {
      this.heightSamples = {};
      for (let h2 = 0; h2 < r2.length; h2++) {
        let a2 = r2[h2];
        a2 < 0 ? h2++ : this.heightSamples[Math.floor(a2 * 10)] = true;
      }
    }
    return l2;
  }
}
class jf {
  constructor(t2, e2) {
    this.from = t2, this.heights = e2, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
let ae$2 = class ae2 {
  /**
  @internal
  */
  constructor(t2, e2, i2, n2, r2) {
    this.from = t2, this.length = e2, this.top = i2, this.height = n2, this.type = r2;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  @internal
  */
  join(t2) {
    let e2 = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(t2.type) ? t2.type : [t2]);
    return new ae2(this.from, this.length + t2.length, this.top, this.height + t2.height, e2);
  }
};
var z$4 = /* @__PURE__ */ function(s3) {
  return s3[s3.ByPos = 0] = "ByPos", s3[s3.ByHeight = 1] = "ByHeight", s3[s3.ByPosNoHeight = 2] = "ByPosNoHeight", s3;
}(z$4 || (z$4 = {}));
const qi = 1e-3;
class dt {
  constructor(t2, e2, i2 = 2) {
    this.length = t2, this.height = e2, this.flags = i2;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(t2) {
    this.flags = (t2 ? 2 : 0) | this.flags & -3;
  }
  setHeight(t2, e2) {
    this.height != e2 && (Math.abs(this.height - e2) > qi && (t2.heightChanged = true), this.height = e2);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(t2, e2, i2) {
    return dt.of(i2);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(t2, e2) {
    e2.push(this);
  }
  decomposeRight(t2, e2) {
    e2.push(this);
  }
  applyChanges(t2, e2, i2, n2) {
    let r2 = this;
    for (let o2 = n2.length - 1; o2 >= 0; o2--) {
      let { fromA: l2, toA: h2, fromB: a2, toB: c2 } = n2[o2], f2 = r2.lineAt(l2, z$4.ByPosNoHeight, e2, 0, 0), u2 = f2.to >= h2 ? f2 : r2.lineAt(h2, z$4.ByPosNoHeight, e2, 0, 0);
      for (c2 += u2.to - h2, h2 = u2.to; o2 > 0 && f2.from <= n2[o2 - 1].toA; )
        l2 = n2[o2 - 1].fromA, a2 = n2[o2 - 1].fromB, o2--, l2 < f2.from && (f2 = r2.lineAt(l2, z$4.ByPosNoHeight, e2, 0, 0));
      a2 += f2.from - l2, l2 = f2.from;
      let d2 = Xs.build(i2, t2, a2, c2);
      r2 = r2.replace(l2, h2, d2);
    }
    return r2.updateHeight(i2, 0);
  }
  static empty() {
    return new bt(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(t2) {
    if (t2.length == 1)
      return t2[0];
    let e2 = 0, i2 = t2.length, n2 = 0, r2 = 0;
    for (; ; )
      if (e2 == i2)
        if (n2 > r2 * 2) {
          let l2 = t2[e2 - 1];
          l2.break ? t2.splice(--e2, 1, l2.left, null, l2.right) : t2.splice(--e2, 1, l2.left, l2.right), i2 += 1 + l2.break, n2 -= l2.size;
        } else if (r2 > n2 * 2) {
          let l2 = t2[i2];
          l2.break ? t2.splice(i2, 1, l2.left, null, l2.right) : t2.splice(i2, 1, l2.left, l2.right), i2 += 2 + l2.break, r2 -= l2.size;
        } else
          break;
      else if (n2 < r2) {
        let l2 = t2[e2++];
        l2 && (n2 += l2.size);
      } else {
        let l2 = t2[--i2];
        l2 && (r2 += l2.size);
      }
    let o2 = 0;
    return t2[e2 - 1] == null ? (o2 = 1, e2--) : t2[e2] == null && (o2 = 1, i2++), new qf(dt.of(t2.slice(0, e2)), o2, dt.of(t2.slice(i2)));
  }
}
dt.prototype.size = 1;
class Yl extends dt {
  constructor(t2, e2, i2) {
    super(t2, e2), this.type = i2;
  }
  blockAt(t2, e2, i2, n2) {
    return new ae$2(n2, this.length, i2, this.height, this.type);
  }
  lineAt(t2, e2, i2, n2, r2) {
    return this.blockAt(0, i2, n2, r2);
  }
  forEachLine(t2, e2, i2, n2, r2, o2) {
    t2 <= r2 + this.length && e2 >= r2 && o2(this.blockAt(0, i2, n2, r2));
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    return n2 && n2.from <= e2 && n2.more && this.setHeight(t2, n2.heights[n2.index++]), this.outdated = false, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class bt extends Yl {
  constructor(t2, e2) {
    super(t2, e2, U$3.Text), this.collapsed = 0, this.widgetHeight = 0;
  }
  replace(t2, e2, i2) {
    let n2 = i2[0];
    return i2.length == 1 && (n2 instanceof bt || n2 instanceof it && n2.flags & 4) && Math.abs(this.length - n2.length) < 10 ? (n2 instanceof it ? n2 = new bt(n2.length, this.height) : n2.height = this.height, this.outdated || (n2.outdated = false), n2) : dt.of(i2);
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    return n2 && n2.from <= e2 && n2.more ? this.setHeight(t2, n2.heights[n2.index++]) : (i2 || this.outdated) && this.setHeight(t2, Math.max(this.widgetHeight, t2.heightForLine(this.length - this.collapsed))), this.outdated = false, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class it extends dt {
  constructor(t2) {
    super(t2, 0);
  }
  lines(t2, e2) {
    let i2 = t2.lineAt(e2).number, n2 = t2.lineAt(e2 + this.length).number;
    return { firstLine: i2, lastLine: n2, lineHeight: this.height / (n2 - i2 + 1) };
  }
  blockAt(t2, e2, i2, n2) {
    let { firstLine: r2, lastLine: o2, lineHeight: l2 } = this.lines(e2, n2), h2 = Math.max(0, Math.min(o2 - r2, Math.floor((t2 - i2) / l2))), { from: a2, length: c2 } = e2.line(r2 + h2);
    return new ae$2(a2, c2, i2 + l2 * h2, l2, U$3.Text);
  }
  lineAt(t2, e2, i2, n2, r2) {
    if (e2 == z$4.ByHeight)
      return this.blockAt(t2, i2, n2, r2);
    if (e2 == z$4.ByPosNoHeight) {
      let { from: f2, to: u2 } = i2.lineAt(t2);
      return new ae$2(f2, u2 - f2, 0, 0, U$3.Text);
    }
    let { firstLine: o2, lineHeight: l2 } = this.lines(i2, r2), { from: h2, length: a2, number: c2 } = i2.lineAt(t2);
    return new ae$2(h2, a2, n2 + l2 * (c2 - o2), l2, U$3.Text);
  }
  forEachLine(t2, e2, i2, n2, r2, o2) {
    let { firstLine: l2, lineHeight: h2 } = this.lines(i2, r2);
    for (let a2 = Math.max(t2, r2), c2 = Math.min(r2 + this.length, e2); a2 <= c2; ) {
      let f2 = i2.lineAt(a2);
      a2 == t2 && (n2 += h2 * (f2.number - l2)), o2(new ae$2(f2.from, f2.length, n2, h2, U$3.Text)), n2 += h2, a2 = f2.to + 1;
    }
  }
  replace(t2, e2, i2) {
    let n2 = this.length - e2;
    if (n2 > 0) {
      let r2 = i2[i2.length - 1];
      r2 instanceof it ? i2[i2.length - 1] = new it(r2.length + n2) : i2.push(null, new it(n2 - 1));
    }
    if (t2 > 0) {
      let r2 = i2[0];
      r2 instanceof it ? i2[0] = new it(t2 + r2.length) : i2.unshift(new it(t2 - 1), null);
    }
    return dt.of(i2);
  }
  decomposeLeft(t2, e2) {
    e2.push(new it(t2 - 1), null);
  }
  decomposeRight(t2, e2) {
    e2.push(null, new it(this.length - t2 - 1));
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    let r2 = e2 + this.length;
    if (n2 && n2.from <= e2 + this.length && n2.more) {
      let o2 = [], l2 = Math.max(e2, n2.from), h2 = -1, a2 = t2.heightChanged;
      for (n2.from > e2 && o2.push(new it(n2.from - e2 - 1).updateHeight(t2, e2)); l2 <= r2 && n2.more; ) {
        let f2 = t2.doc.lineAt(l2).length;
        o2.length && o2.push(null);
        let u2 = n2.heights[n2.index++];
        h2 == -1 ? h2 = u2 : Math.abs(u2 - h2) >= qi && (h2 = -2);
        let d2 = new bt(f2, u2);
        d2.outdated = false, o2.push(d2), l2 += f2 + 1;
      }
      l2 <= r2 && o2.push(null, new it(r2 - l2).updateHeight(t2, l2));
      let c2 = dt.of(o2);
      return t2.heightChanged = a2 || h2 < 0 || Math.abs(c2.height - this.height) >= qi || Math.abs(h2 - this.lines(t2.doc, e2).lineHeight) >= qi, c2;
    } else
      (i2 || this.outdated) && (this.setHeight(t2, t2.heightForGap(e2, e2 + this.length)), this.outdated = false);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class qf extends dt {
  constructor(t2, e2, i2) {
    super(t2.length + e2 + i2.length, t2.height + i2.height, e2 | (t2.outdated || i2.outdated ? 2 : 0)), this.left = t2, this.right = i2, this.size = t2.size + i2.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(t2, e2, i2, n2) {
    let r2 = i2 + this.left.height;
    return t2 < r2 ? this.left.blockAt(t2, e2, i2, n2) : this.right.blockAt(t2, e2, r2, n2 + this.left.length + this.break);
  }
  lineAt(t2, e2, i2, n2, r2) {
    let o2 = n2 + this.left.height, l2 = r2 + this.left.length + this.break, h2 = e2 == z$4.ByHeight ? t2 < o2 : t2 < l2, a2 = h2 ? this.left.lineAt(t2, e2, i2, n2, r2) : this.right.lineAt(t2, e2, i2, o2, l2);
    if (this.break || (h2 ? a2.to < l2 : a2.from > l2))
      return a2;
    let c2 = e2 == z$4.ByPosNoHeight ? z$4.ByPosNoHeight : z$4.ByPos;
    return h2 ? a2.join(this.right.lineAt(l2, c2, i2, o2, l2)) : this.left.lineAt(l2, c2, i2, n2, r2).join(a2);
  }
  forEachLine(t2, e2, i2, n2, r2, o2) {
    let l2 = n2 + this.left.height, h2 = r2 + this.left.length + this.break;
    if (this.break)
      t2 < h2 && this.left.forEachLine(t2, e2, i2, n2, r2, o2), e2 >= h2 && this.right.forEachLine(t2, e2, i2, l2, h2, o2);
    else {
      let a2 = this.lineAt(h2, z$4.ByPos, i2, n2, r2);
      t2 < a2.from && this.left.forEachLine(t2, a2.from - 1, i2, n2, r2, o2), a2.to >= t2 && a2.from <= e2 && o2(a2), e2 > a2.to && this.right.forEachLine(a2.to + 1, e2, i2, l2, h2, o2);
    }
  }
  replace(t2, e2, i2) {
    let n2 = this.left.length + this.break;
    if (e2 < n2)
      return this.balanced(this.left.replace(t2, e2, i2), this.right);
    if (t2 > this.left.length)
      return this.balanced(this.left, this.right.replace(t2 - n2, e2 - n2, i2));
    let r2 = [];
    t2 > 0 && this.decomposeLeft(t2, r2);
    let o2 = r2.length;
    for (let l2 of i2)
      r2.push(l2);
    if (t2 > 0 && Jr(r2, o2 - 1), e2 < this.length) {
      let l2 = r2.length;
      this.decomposeRight(e2, r2), Jr(r2, l2);
    }
    return dt.of(r2);
  }
  decomposeLeft(t2, e2) {
    let i2 = this.left.length;
    if (t2 <= i2)
      return this.left.decomposeLeft(t2, e2);
    e2.push(this.left), this.break && (i2++, t2 >= i2 && e2.push(null)), t2 > i2 && this.right.decomposeLeft(t2 - i2, e2);
  }
  decomposeRight(t2, e2) {
    let i2 = this.left.length, n2 = i2 + this.break;
    if (t2 >= n2)
      return this.right.decomposeRight(t2 - n2, e2);
    t2 < i2 && this.left.decomposeRight(t2, e2), this.break && t2 < n2 && e2.push(null), e2.push(this.right);
  }
  balanced(t2, e2) {
    return t2.size > 2 * e2.size || e2.size > 2 * t2.size ? dt.of(this.break ? [t2, null, e2] : [t2, e2]) : (this.left = t2, this.right = e2, this.height = t2.height + e2.height, this.outdated = t2.outdated || e2.outdated, this.size = t2.size + e2.size, this.length = t2.length + this.break + e2.length, this);
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    let { left: r2, right: o2 } = this, l2 = e2 + r2.length + this.break, h2 = null;
    return n2 && n2.from <= e2 + r2.length && n2.more ? h2 = r2 = r2.updateHeight(t2, e2, i2, n2) : r2.updateHeight(t2, e2, i2), n2 && n2.from <= l2 + o2.length && n2.more ? h2 = o2 = o2.updateHeight(t2, l2, i2, n2) : o2.updateHeight(t2, l2, i2), h2 ? this.balanced(r2, o2) : (this.height = this.left.height + this.right.height, this.outdated = false, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function Jr(s3, t2) {
  let e2, i2;
  s3[t2] == null && (e2 = s3[t2 - 1]) instanceof it && (i2 = s3[t2 + 1]) instanceof it && s3.splice(t2 - 1, 3, new it(e2.length + 1 + i2.length));
}
const Kf = 5;
class Xs {
  constructor(t2, e2) {
    this.pos = t2, this.oracle = e2, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = t2;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(t2, e2) {
    if (this.lineStart > -1) {
      let i2 = Math.min(e2, this.lineEnd), n2 = this.nodes[this.nodes.length - 1];
      n2 instanceof bt ? n2.length += i2 - this.pos : (i2 > this.pos || !this.isCovered) && this.nodes.push(new bt(i2 - this.pos, -1)), this.writtenTo = i2, e2 > i2 && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = e2;
  }
  point(t2, e2, i2) {
    if (t2 < e2 || i2.heightRelevant) {
      let n2 = i2.widget ? i2.widget.estimatedHeight : 0;
      n2 < 0 && (n2 = this.oracle.lineHeight);
      let r2 = e2 - t2;
      i2.block ? this.addBlock(new Yl(r2, n2, i2.type)) : (r2 || n2 >= Kf) && this.addLineDeco(n2, r2);
    } else
      e2 > t2 && this.span(t2, e2);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: t2, to: e2 } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = t2, this.lineEnd = e2, this.writtenTo < t2 && ((this.writtenTo < t2 - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, t2 - 1)), this.nodes.push(null)), this.pos > t2 && this.nodes.push(new bt(this.pos - t2, -1)), this.writtenTo = this.pos;
  }
  blankContent(t2, e2) {
    let i2 = new it(e2 - t2);
    return this.oracle.doc.lineAt(t2).to == e2 && (i2.flags |= 4), i2;
  }
  ensureLine() {
    this.enterLine();
    let t2 = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (t2 instanceof bt)
      return t2;
    let e2 = new bt(0, -1);
    return this.nodes.push(e2), e2;
  }
  addBlock(t2) {
    this.enterLine(), t2.type == U$3.WidgetAfter && !this.isCovered && this.ensureLine(), this.nodes.push(t2), this.writtenTo = this.pos = this.pos + t2.length, t2.type != U$3.WidgetBefore && (this.covering = t2);
  }
  addLineDeco(t2, e2) {
    let i2 = this.ensureLine();
    i2.length += e2, i2.collapsed += e2, i2.widgetHeight = Math.max(i2.widgetHeight, t2), this.writtenTo = this.pos = this.pos + e2;
  }
  finish(t2) {
    let e2 = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(e2 instanceof bt) && !this.isCovered ? this.nodes.push(new bt(0, -1)) : (this.writtenTo < this.pos || e2 == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i2 = t2;
    for (let n2 of this.nodes)
      n2 instanceof bt && n2.updateHeight(this.oracle, i2), i2 += n2 ? n2.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(t2, e2, i2, n2) {
    let r2 = new Xs(i2, t2);
    return $$1.spans(e2, i2, n2, r2, 0), r2.finish(i2);
  }
}
function Gf(s3, t2, e2) {
  let i2 = new Uf();
  return $$1.compare(s3, t2, e2, i2, 0), i2.changes;
}
class Uf {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(t2, e2, i2, n2) {
    (t2 < e2 || i2 && i2.heightRelevant || n2 && n2.heightRelevant) && xs(t2, e2, this.changes, 5);
  }
}
function Qf(s3, t2) {
  let e2 = s3.getBoundingClientRect(), i2 = s3.ownerDocument, n2 = i2.defaultView || window, r2 = Math.max(0, e2.left), o2 = Math.min(n2.innerWidth, e2.right), l2 = Math.max(0, e2.top), h2 = Math.min(n2.innerHeight, e2.bottom);
  for (let a2 = s3.parentNode; a2 && a2 != i2.body; )
    if (a2.nodeType == 1) {
      let c2 = a2, f2 = window.getComputedStyle(c2);
      if ((c2.scrollHeight > c2.clientHeight || c2.scrollWidth > c2.clientWidth) && f2.overflow != "visible") {
        let u2 = c2.getBoundingClientRect();
        r2 = Math.max(r2, u2.left), o2 = Math.min(o2, u2.right), l2 = Math.max(l2, u2.top), h2 = a2 == s3.parentNode ? u2.bottom : Math.min(h2, u2.bottom);
      }
      a2 = f2.position == "absolute" || f2.position == "fixed" ? c2.offsetParent : c2.parentNode;
    } else if (a2.nodeType == 11)
      a2 = a2.host;
    else
      break;
  return {
    left: r2 - e2.left,
    right: Math.max(r2, o2) - e2.left,
    top: l2 - (e2.top + t2),
    bottom: Math.max(l2, h2) - (e2.top + t2)
  };
}
function Jf(s3, t2) {
  let e2 = s3.getBoundingClientRect();
  return {
    left: 0,
    right: e2.right - e2.left,
    top: t2,
    bottom: e2.bottom - (e2.top + t2)
  };
}
class zn {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.size = i2;
  }
  static same(t2, e2) {
    if (t2.length != e2.length)
      return false;
    for (let i2 = 0; i2 < t2.length; i2++) {
      let n2 = t2[i2], r2 = e2[i2];
      if (n2.from != r2.from || n2.to != r2.to || n2.size != r2.size)
        return false;
    }
    return true;
  }
  draw(t2) {
    return T$3.replace({ widget: new Xf(this.size, t2) }).range(this.from, this.to);
  }
}
class Xf extends ye$1 {
  constructor(t2, e2) {
    super(), this.size = t2, this.vertical = e2;
  }
  eq(t2) {
    return t2.size == this.size && t2.vertical == this.vertical;
  }
  toDOM() {
    let t2 = document.createElement("div");
    return this.vertical ? t2.style.height = this.size + "px" : (t2.style.width = this.size + "px", t2.style.height = "2px", t2.style.display = "inline-block"), t2;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class Xr {
  constructor(t2) {
    this.state = t2, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = true, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scaler = Yr, this.scrollTarget = null, this.printing = false, this.mustMeasureContent = true, this.defaultTextDirection = X$1.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = false;
    let e2 = t2.facet(Js).some((i2) => typeof i2 != "function" && i2.class == "cm-lineWrapping");
    this.heightOracle = new Wf(e2), this.stateDeco = t2.facet(gi).filter((i2) => typeof i2 != "function"), this.heightMap = dt.empty().applyChanges(this.stateDeco, E$4.empty, this.heightOracle.setDoc(t2.doc), [new _t(0, 0, 0, t2.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = T$3.set(this.lineGaps.map((i2) => i2.draw(false))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let t2 = [this.viewport], { main: e2 } = this.state.selection;
    for (let i2 = 0; i2 <= 1; i2++) {
      let n2 = i2 ? e2.head : e2.anchor;
      if (!t2.some(({ from: r2, to: o2 }) => n2 >= r2 && n2 <= o2)) {
        let { from: r2, to: o2 } = this.lineBlockAt(n2);
        t2.push(new Ti(r2, o2));
      }
    }
    this.viewports = t2.sort((i2, n2) => i2.from - n2.from), this.scaler = this.heightMap.height <= 7e6 ? Yr : new tu(this.heightOracle.doc, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, (t2) => {
      this.viewportLines.push(this.scaler.scale == 1 ? t2 : oi(t2, this.scaler));
    });
  }
  update(t2, e2 = null) {
    this.state = t2.state;
    let i2 = this.stateDeco;
    this.stateDeco = this.state.facet(gi).filter((a2) => typeof a2 != "function");
    let n2 = t2.changedRanges, r2 = _t.extendWithRanges(n2, Gf(i2, this.stateDeco, t2 ? t2.changes : Z.empty(this.state.doc.length))), o2 = this.heightMap.height;
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, t2.startState.doc, this.heightOracle.setDoc(this.state.doc), r2), this.heightMap.height != o2 && (t2.flags |= 2);
    let l2 = r2.length ? this.mapViewport(this.viewport, t2.changes) : this.viewport;
    (e2 && (e2.range.head < l2.from || e2.range.head > l2.to) || !this.viewportIsAppropriate(l2)) && (l2 = this.getViewport(0, e2));
    let h2 = !t2.changes.empty || t2.flags & 2 || l2.from != this.viewport.from || l2.to != this.viewport.to;
    this.viewport = l2, this.updateForViewport(), h2 && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, t2.changes))), t2.flags |= this.computeVisibleRanges(), e2 && (this.scrollTarget = e2), !this.mustEnforceCursorAssoc && t2.selectionSet && t2.view.lineWrapping && t2.state.selection.main.empty && t2.state.selection.main.assoc && !t2.state.facet(of) && (this.mustEnforceCursorAssoc = true);
  }
  measure(t2) {
    let e2 = t2.contentDOM, i2 = window.getComputedStyle(e2), n2 = this.heightOracle, r2 = i2.whiteSpace;
    this.defaultTextDirection = i2.direction == "rtl" ? X$1.RTL : X$1.LTR;
    let o2 = this.heightOracle.mustRefreshForWrapping(r2), l2 = o2 || this.mustMeasureContent || this.contentDOMHeight != e2.clientHeight;
    this.contentDOMHeight = e2.clientHeight, this.mustMeasureContent = false;
    let h2 = 0, a2 = 0, c2 = parseInt(i2.paddingTop) || 0, f2 = parseInt(i2.paddingBottom) || 0;
    (this.paddingTop != c2 || this.paddingBottom != f2) && (this.paddingTop = c2, this.paddingBottom = f2, h2 |= 10), this.editorWidth != t2.scrollDOM.clientWidth && (n2.lineWrapping && (l2 = true), this.editorWidth = t2.scrollDOM.clientWidth, h2 |= 8);
    let u2 = (this.printing ? Jf : Qf)(e2, this.paddingTop), d2 = u2.top - this.pixelViewport.top, p2 = u2.bottom - this.pixelViewport.bottom;
    this.pixelViewport = u2;
    let w2 = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (w2 != this.inView && (this.inView = w2, w2 && (l2 = true)), !this.inView && !this.scrollTarget)
      return 0;
    let g2 = e2.clientWidth;
    if ((this.contentDOMWidth != g2 || this.editorHeight != t2.scrollDOM.clientHeight) && (this.contentDOMWidth = g2, this.editorHeight = t2.scrollDOM.clientHeight, h2 |= 8), l2) {
      let O2 = t2.docView.measureVisibleLineHeights(this.viewport);
      if (n2.mustRefreshForHeights(O2) && (o2 = true), o2 || n2.lineWrapping && Math.abs(g2 - this.contentDOMWidth) > n2.charWidth) {
        let { lineHeight: S2, charWidth: D2 } = t2.docView.measureTextSize();
        o2 = S2 > 0 && n2.refresh(r2, S2, D2, g2 / D2, O2), o2 && (t2.docView.minWidth = 0, h2 |= 8);
      }
      d2 > 0 && p2 > 0 ? a2 = Math.max(d2, p2) : d2 < 0 && p2 < 0 && (a2 = Math.min(d2, p2)), n2.heightChanged = false;
      for (let S2 of this.viewports) {
        let D2 = S2.from == this.viewport.from ? O2 : t2.docView.measureVisibleLineHeights(S2);
        this.heightMap = (o2 ? dt.empty().applyChanges(this.stateDeco, E$4.empty, this.heightOracle, [new _t(0, 0, 0, t2.state.doc.length)]) : this.heightMap).updateHeight(n2, 0, o2, new jf(S2.from, D2));
      }
      n2.heightChanged && (h2 |= 2);
    }
    let y2 = !this.viewportIsAppropriate(this.viewport, a2) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return y2 && (this.viewport = this.getViewport(a2, this.scrollTarget)), this.updateForViewport(), (h2 & 2 || y2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1) && this.updateLineGaps(this.ensureLineGaps(o2 ? [] : this.lineGaps, t2)), h2 |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = false, t2.docView.enforceCursorAssoc()), h2;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(t2, e2) {
    let i2 = 0.5 - Math.max(-0.5, Math.min(0.5, t2 / 1e3 / 2)), n2 = this.heightMap, r2 = this.state.doc, { visibleTop: o2, visibleBottom: l2 } = this, h2 = new Ti(n2.lineAt(o2 - i2 * 1e3, z$4.ByHeight, r2, 0, 0).from, n2.lineAt(l2 + (1 - i2) * 1e3, z$4.ByHeight, r2, 0, 0).to);
    if (e2) {
      let { head: a2 } = e2.range;
      if (a2 < h2.from || a2 > h2.to) {
        let c2 = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f2 = n2.lineAt(a2, z$4.ByPos, r2, 0, 0), u2;
        e2.y == "center" ? u2 = (f2.top + f2.bottom) / 2 - c2 / 2 : e2.y == "start" || e2.y == "nearest" && a2 < h2.from ? u2 = f2.top : u2 = f2.bottom - c2, h2 = new Ti(n2.lineAt(u2 - 1e3 / 2, z$4.ByHeight, r2, 0, 0).from, n2.lineAt(u2 + c2 + 1e3 / 2, z$4.ByHeight, r2, 0, 0).to);
      }
    }
    return h2;
  }
  mapViewport(t2, e2) {
    let i2 = e2.mapPos(t2.from, -1), n2 = e2.mapPos(t2.to, 1);
    return new Ti(this.heightMap.lineAt(i2, z$4.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(n2, z$4.ByPos, this.state.doc, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: t2, to: e2 }, i2 = 0) {
    if (!this.inView)
      return true;
    let { top: n2 } = this.heightMap.lineAt(t2, z$4.ByPos, this.state.doc, 0, 0), { bottom: r2 } = this.heightMap.lineAt(e2, z$4.ByPos, this.state.doc, 0, 0), { visibleTop: o2, visibleBottom: l2 } = this;
    return (t2 == 0 || n2 <= o2 - Math.max(10, Math.min(
      -i2,
      250
      /* VP.MaxCoverMargin */
    ))) && (e2 == this.state.doc.length || r2 >= l2 + Math.max(10, Math.min(
      i2,
      250
      /* VP.MaxCoverMargin */
    ))) && n2 > o2 - 2 * 1e3 && r2 < l2 + 2 * 1e3;
  }
  mapLineGaps(t2, e2) {
    if (!t2.length || e2.empty)
      return t2;
    let i2 = [];
    for (let n2 of t2)
      e2.touchesRange(n2.from, n2.to) || i2.push(new zn(e2.mapPos(n2.from), e2.mapPos(n2.to), n2.size));
    return i2;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(t2, e2) {
    let i2 = this.heightOracle.lineWrapping, n2 = i2 ? 1e4 : 2e3, r2 = n2 >> 1, o2 = n2 << 1;
    if (this.defaultTextDirection != X$1.LTR && !i2)
      return [];
    let l2 = [], h2 = (a2, c2, f2, u2) => {
      if (c2 - a2 < r2)
        return;
      let d2 = this.state.selection.main, p2 = [d2.from];
      d2.empty || p2.push(d2.to);
      for (let g2 of p2)
        if (g2 > a2 && g2 < c2) {
          h2(a2, g2 - 10, f2, u2), h2(g2 + 10, c2, f2, u2);
          return;
        }
      let w2 = Zf(t2, (g2) => g2.from >= f2.from && g2.to <= f2.to && Math.abs(g2.from - a2) < r2 && Math.abs(g2.to - c2) < r2 && !p2.some((y2) => g2.from < y2 && g2.to > y2));
      if (!w2) {
        if (c2 < f2.to && e2 && i2 && e2.visibleRanges.some((g2) => g2.from <= c2 && g2.to >= c2)) {
          let g2 = e2.moveToLineBoundary(b$2.cursor(c2), false, true).head;
          g2 > a2 && (c2 = g2);
        }
        w2 = new zn(a2, c2, this.gapSize(f2, a2, c2, u2));
      }
      l2.push(w2);
    };
    for (let a2 of this.viewportLines) {
      if (a2.length < o2)
        continue;
      let c2 = Yf(a2.from, a2.to, this.stateDeco);
      if (c2.total < o2)
        continue;
      let f2 = this.scrollTarget ? this.scrollTarget.range.head : null, u2, d2;
      if (i2) {
        let p2 = n2 / this.heightOracle.lineLength * this.heightOracle.lineHeight, w2, g2;
        if (f2 != null) {
          let y2 = Bi(c2, f2), O2 = ((this.visibleBottom - this.visibleTop) / 2 + p2) / a2.height;
          w2 = y2 - O2, g2 = y2 + O2;
        } else
          w2 = (this.visibleTop - a2.top - p2) / a2.height, g2 = (this.visibleBottom - a2.top + p2) / a2.height;
        u2 = Pi(c2, w2), d2 = Pi(c2, g2);
      } else {
        let p2 = c2.total * this.heightOracle.charWidth, w2 = n2 * this.heightOracle.charWidth, g2, y2;
        if (f2 != null) {
          let O2 = Bi(c2, f2), S2 = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + w2) / p2;
          g2 = O2 - S2, y2 = O2 + S2;
        } else
          g2 = (this.pixelViewport.left - w2) / p2, y2 = (this.pixelViewport.right + w2) / p2;
        u2 = Pi(c2, g2), d2 = Pi(c2, y2);
      }
      u2 > a2.from && h2(a2.from, u2, a2, c2), d2 < a2.to && h2(d2, a2.to, a2, c2);
    }
    return l2;
  }
  gapSize(t2, e2, i2, n2) {
    let r2 = Bi(n2, i2) - Bi(n2, e2);
    return this.heightOracle.lineWrapping ? t2.height * r2 : n2.total * this.heightOracle.charWidth * r2;
  }
  updateLineGaps(t2) {
    zn.same(t2, this.lineGaps) || (this.lineGaps = t2, this.lineGapDeco = T$3.set(t2.map((e2) => e2.draw(this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let t2 = this.stateDeco;
    this.lineGaps.length && (t2 = t2.concat(this.lineGapDeco));
    let e2 = [];
    $$1.spans(t2, this.viewport.from, this.viewport.to, {
      span(n2, r2) {
        e2.push({ from: n2, to: r2 });
      },
      point() {
      }
    }, 20);
    let i2 = e2.length != this.visibleRanges.length || this.visibleRanges.some((n2, r2) => n2.from != e2[r2].from || n2.to != e2[r2].to);
    return this.visibleRanges = e2, i2 ? 4 : 0;
  }
  lineBlockAt(t2) {
    return t2 >= this.viewport.from && t2 <= this.viewport.to && this.viewportLines.find((e2) => e2.from <= t2 && e2.to >= t2) || oi(this.heightMap.lineAt(t2, z$4.ByPos, this.state.doc, 0, 0), this.scaler);
  }
  lineBlockAtHeight(t2) {
    return oi(this.heightMap.lineAt(this.scaler.fromDOM(t2), z$4.ByHeight, this.state.doc, 0, 0), this.scaler);
  }
  elementAtHeight(t2) {
    return oi(this.heightMap.blockAt(this.scaler.fromDOM(t2), this.state.doc, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class Ti {
  constructor(t2, e2) {
    this.from = t2, this.to = e2;
  }
}
function Yf(s3, t2, e2) {
  let i2 = [], n2 = s3, r2 = 0;
  return $$1.spans(e2, s3, t2, {
    span() {
    },
    point(o2, l2) {
      o2 > n2 && (i2.push({ from: n2, to: o2 }), r2 += o2 - n2), n2 = l2;
    }
  }, 20), n2 < t2 && (i2.push({ from: n2, to: t2 }), r2 += t2 - n2), { total: r2, ranges: i2 };
}
function Pi({ total: s3, ranges: t2 }, e2) {
  if (e2 <= 0)
    return t2[0].from;
  if (e2 >= 1)
    return t2[t2.length - 1].to;
  let i2 = Math.floor(s3 * e2);
  for (let n2 = 0; ; n2++) {
    let { from: r2, to: o2 } = t2[n2], l2 = o2 - r2;
    if (i2 <= l2)
      return r2 + i2;
    i2 -= l2;
  }
}
function Bi(s3, t2) {
  let e2 = 0;
  for (let { from: i2, to: n2 } of s3.ranges) {
    if (t2 <= n2) {
      e2 += t2 - i2;
      break;
    }
    e2 += n2 - i2;
  }
  return e2 / s3.total;
}
function Zf(s3, t2) {
  for (let e2 of s3)
    if (t2(e2))
      return e2;
}
const Yr = {
  toDOM(s3) {
    return s3;
  },
  fromDOM(s3) {
    return s3;
  },
  scale: 1
};
class tu {
  constructor(t2, e2, i2) {
    let n2 = 0, r2 = 0, o2 = 0;
    this.viewports = i2.map(({ from: l2, to: h2 }) => {
      let a2 = e2.lineAt(l2, z$4.ByPos, t2, 0, 0).top, c2 = e2.lineAt(h2, z$4.ByPos, t2, 0, 0).bottom;
      return n2 += c2 - a2, { from: l2, to: h2, top: a2, bottom: c2, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - n2) / (e2.height - n2);
    for (let l2 of this.viewports)
      l2.domTop = o2 + (l2.top - r2) * this.scale, o2 = l2.domBottom = l2.domTop + (l2.bottom - l2.top), r2 = l2.bottom;
  }
  toDOM(t2) {
    for (let e2 = 0, i2 = 0, n2 = 0; ; e2++) {
      let r2 = e2 < this.viewports.length ? this.viewports[e2] : null;
      if (!r2 || t2 < r2.top)
        return n2 + (t2 - i2) * this.scale;
      if (t2 <= r2.bottom)
        return r2.domTop + (t2 - r2.top);
      i2 = r2.bottom, n2 = r2.domBottom;
    }
  }
  fromDOM(t2) {
    for (let e2 = 0, i2 = 0, n2 = 0; ; e2++) {
      let r2 = e2 < this.viewports.length ? this.viewports[e2] : null;
      if (!r2 || t2 < r2.domTop)
        return i2 + (t2 - n2) / this.scale;
      if (t2 <= r2.domBottom)
        return r2.top + (t2 - r2.domTop);
      i2 = r2.bottom, n2 = r2.domBottom;
    }
  }
}
function oi(s3, t2) {
  if (t2.scale == 1)
    return s3;
  let e2 = t2.toDOM(s3.top), i2 = t2.toDOM(s3.bottom);
  return new ae$2(s3.from, s3.length, e2, i2 - e2, Array.isArray(s3.type) ? s3.type.map((n2) => oi(n2, t2)) : s3.type);
}
const Ri = /* @__PURE__ */ v$4.define({ combine: (s3) => s3.join(" ") }), Ds = /* @__PURE__ */ v$4.define({ combine: (s3) => s3.indexOf(true) > -1 }), Ts = /* @__PURE__ */ de$1.newName(), Zl = /* @__PURE__ */ de$1.newName(), th = /* @__PURE__ */ de$1.newName(), eh = { "&light": "." + Zl, "&dark": "." + th };
function Ps(s3, t2, e2) {
  return new de$1(t2, {
    finish(i2) {
      return /&/.test(i2) ? i2.replace(/&\w*/, (n2) => {
        if (n2 == "&")
          return s3;
        if (!e2 || !e2[n2])
          throw new RangeError(`Unsupported selector: ${n2}`);
        return e2[n2];
      }) : s3 + " " + i2;
    }
  });
}
const eu = /* @__PURE__ */ Ps("." + Ts, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  "&.cm-focused .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, eh);
class iu {
  constructor(t2, e2, i2, n2) {
    this.typeOver = n2, this.bounds = null, this.text = "";
    let { impreciseHead: r2, impreciseAnchor: o2 } = t2.docView;
    if (t2.state.readOnly && e2 > -1)
      this.newSel = null;
    else if (e2 > -1 && (this.bounds = t2.docView.domBoundsAround(e2, i2, 0))) {
      let l2 = r2 || o2 ? [] : su(t2), h2 = new zl(l2, t2.state);
      h2.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = h2.text, this.newSel = ru(l2, this.bounds.from);
    } else {
      let l2 = t2.observer.selectionRange, h2 = r2 && r2.node == l2.focusNode && r2.offset == l2.focusOffset || !qe$1(t2.contentDOM, l2.focusNode) ? t2.state.selection.main.head : t2.docView.posFromDOM(l2.focusNode, l2.focusOffset), a2 = o2 && o2.node == l2.anchorNode && o2.offset == l2.anchorOffset || !qe$1(t2.contentDOM, l2.anchorNode) ? t2.state.selection.main.anchor : t2.docView.posFromDOM(l2.anchorNode, l2.anchorOffset);
      this.newSel = b$2.single(a2, h2);
    }
  }
}
function ih(s3, t2) {
  let e2, { newSel: i2 } = t2, n2 = s3.state.selection.main;
  if (t2.bounds) {
    let { from: r2, to: o2 } = t2.bounds, l2 = n2.from, h2 = null;
    (s3.inputState.lastKeyCode === 8 && s3.inputState.lastKeyTime > Date.now() - 100 || x$3.android && t2.text.length < o2 - r2) && (l2 = n2.to, h2 = "end");
    let a2 = nu(s3.state.doc.sliceString(r2, o2, he$1), t2.text, l2 - r2, h2);
    a2 && (x$3.chrome && s3.inputState.lastKeyCode == 13 && a2.toB == a2.from + 2 && t2.text.slice(a2.from, a2.toB) == he$1 + he$1 && a2.toB--, e2 = {
      from: r2 + a2.from,
      to: r2 + a2.toA,
      insert: E$4.of(t2.text.slice(a2.from, a2.toB).split(he$1))
    });
  } else
    i2 && (!s3.hasFocus && s3.state.facet(Mn) || i2.main.eq(n2)) && (i2 = null);
  if (!e2 && !i2)
    return false;
  if (!e2 && t2.typeOver && !n2.empty && i2 && i2.main.empty ? e2 = { from: n2.from, to: n2.to, insert: s3.state.doc.slice(n2.from, n2.to) } : e2 && e2.from >= n2.from && e2.to <= n2.to && (e2.from != n2.from || e2.to != n2.to) && n2.to - n2.from - (e2.to - e2.from) <= 4 ? e2 = {
    from: n2.from,
    to: n2.to,
    insert: s3.state.doc.slice(n2.from, e2.from).append(e2.insert).append(s3.state.doc.slice(e2.to, n2.to))
  } : (x$3.mac || x$3.android) && e2 && e2.from == e2.to && e2.from == n2.head - 1 && /^\. ?$/.test(e2.insert.toString()) ? (i2 && e2.insert.length == 2 && (i2 = b$2.single(i2.main.anchor - 1, i2.main.head - 1)), e2 = { from: n2.from, to: n2.to, insert: E$4.of([" "]) }) : x$3.chrome && e2 && e2.from == e2.to && e2.from == n2.head && e2.insert.toString() == `
 ` && s3.lineWrapping && (i2 && (i2 = b$2.single(i2.main.anchor - 1, i2.main.head - 1)), e2 = { from: n2.from, to: n2.to, insert: E$4.of([" "]) }), e2) {
    let r2 = s3.state;
    if (x$3.ios && s3.inputState.flushIOSKey(s3) || x$3.android && (e2.from == n2.from && e2.to == n2.to && e2.insert.length == 1 && e2.insert.lines == 2 && $e(s3.contentDOM, "Enter", 13) || e2.from == n2.from - 1 && e2.to == n2.to && e2.insert.length == 0 && $e(s3.contentDOM, "Backspace", 8) || e2.from == n2.from && e2.to == n2.to + 1 && e2.insert.length == 0 && $e(s3.contentDOM, "Delete", 46)))
      return true;
    let o2 = e2.insert.toString();
    if (s3.state.facet(Ll).some((a2) => a2(s3, e2.from, e2.to, o2)))
      return true;
    s3.inputState.composing >= 0 && s3.inputState.composing++;
    let l2;
    if (e2.from >= n2.from && e2.to <= n2.to && e2.to - e2.from >= (n2.to - n2.from) / 3 && (!i2 || i2.main.empty && i2.main.from == e2.from + e2.insert.length) && s3.inputState.composing < 0) {
      let a2 = n2.from < e2.from ? r2.sliceDoc(n2.from, e2.from) : "", c2 = n2.to > e2.to ? r2.sliceDoc(e2.to, n2.to) : "";
      l2 = r2.replaceSelection(s3.state.toText(a2 + e2.insert.sliceString(0, void 0, s3.state.lineBreak) + c2));
    } else {
      let a2 = r2.changes(e2), c2 = i2 && !r2.selection.main.eq(i2.main) && i2.main.to <= a2.newLength ? i2.main : void 0;
      if (r2.selection.ranges.length > 1 && s3.inputState.composing >= 0 && e2.to <= n2.to && e2.to >= n2.to - 10) {
        let f2 = s3.state.sliceDoc(e2.from, e2.to), u2 = _l(s3) || s3.state.doc.lineAt(n2.head), d2 = n2.to - e2.to, p2 = n2.to - n2.from;
        l2 = r2.changeByRange((w2) => {
          if (w2.from == n2.from && w2.to == n2.to)
            return { changes: a2, range: c2 || w2.map(a2) };
          let g2 = w2.to - d2, y2 = g2 - f2.length;
          if (w2.to - w2.from != p2 || s3.state.sliceDoc(y2, g2) != f2 || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          u2 && w2.to >= u2.from && w2.from <= u2.to)
            return { range: w2 };
          let O2 = r2.changes({ from: y2, to: g2, insert: e2.insert }), S2 = w2.to - n2.to;
          return {
            changes: O2,
            range: c2 ? b$2.range(Math.max(0, c2.anchor + S2), Math.max(0, c2.head + S2)) : w2.map(O2)
          };
        });
      } else
        l2 = {
          changes: a2,
          selection: c2 && r2.selection.replaceRange(c2)
        };
    }
    let h2 = "input.type";
    return s3.composing && (h2 += ".compose", s3.inputState.compositionFirstChange && (h2 += ".start", s3.inputState.compositionFirstChange = false)), s3.dispatch(l2, { scrollIntoView: true, userEvent: h2 }), true;
  } else if (i2 && !i2.main.eq(n2)) {
    let r2 = false, o2 = "select";
    return s3.inputState.lastSelectionTime > Date.now() - 50 && (s3.inputState.lastSelectionOrigin == "select" && (r2 = true), o2 = s3.inputState.lastSelectionOrigin), s3.dispatch({ selection: i2, scrollIntoView: r2, userEvent: o2 }), true;
  } else
    return false;
}
function nu(s3, t2, e2, i2) {
  let n2 = Math.min(s3.length, t2.length), r2 = 0;
  for (; r2 < n2 && s3.charCodeAt(r2) == t2.charCodeAt(r2); )
    r2++;
  if (r2 == n2 && s3.length == t2.length)
    return null;
  let o2 = s3.length, l2 = t2.length;
  for (; o2 > 0 && l2 > 0 && s3.charCodeAt(o2 - 1) == t2.charCodeAt(l2 - 1); )
    o2--, l2--;
  if (i2 == "end") {
    let h2 = Math.max(0, r2 - Math.min(o2, l2));
    e2 -= o2 + h2 - r2;
  }
  if (o2 < r2 && s3.length < t2.length) {
    let h2 = e2 <= r2 && e2 >= o2 ? r2 - e2 : 0;
    r2 -= h2, l2 = r2 + (l2 - o2), o2 = r2;
  } else if (l2 < r2) {
    let h2 = e2 <= r2 && e2 >= l2 ? r2 - e2 : 0;
    r2 -= h2, o2 = r2 + (o2 - l2), l2 = r2;
  }
  return { from: r2, toA: o2, toB: l2 };
}
function su(s3) {
  let t2 = [];
  if (s3.root.activeElement != s3.contentDOM)
    return t2;
  let { anchorNode: e2, anchorOffset: i2, focusNode: n2, focusOffset: r2 } = s3.observer.selectionRange;
  return e2 && (t2.push(new Lr(e2, i2)), (n2 != e2 || r2 != i2) && t2.push(new Lr(n2, r2))), t2;
}
function ru(s3, t2) {
  if (s3.length == 0)
    return null;
  let e2 = s3[0].pos, i2 = s3.length == 2 ? s3[1].pos : e2;
  return e2 > -1 && i2 > -1 ? b$2.single(e2 + t2, i2 + t2) : null;
}
const ou = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
}, _n = x$3.ie && x$3.ie_version <= 11;
class lu {
  constructor(t2) {
    this.view = t2, this.active = false, this.selectionRange = new Yc(), this.selectionChanged = false, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.resizeContent = null, this.intersecting = false, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = t2.contentDOM, this.observer = new MutationObserver((e2) => {
      for (let i2 of e2)
        this.queue.push(i2);
      (x$3.ie && x$3.ie_version <= 11 || x$3.ios && t2.composing) && e2.some((i2) => i2.type == "childList" && i2.removedNodes.length || i2.type == "characterData" && i2.oldValue.length > i2.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), _n && (this.onCharData = (e2) => {
      this.queue.push({
        target: e2.target,
        type: "characterData",
        oldValue: e2.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var e2;
      ((e2 = this.view.docView) === null || e2 === void 0 ? void 0 : e2.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(t2.scrollDOM), this.resizeContent = new ResizeObserver(() => this.view.requestMeasure()), this.resizeContent.observe(t2.contentDOM)), this.addWindowListeners(this.win = t2.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((e2) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), e2.length > 0 && e2[e2.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, {}), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((e2) => {
      e2.length > 0 && e2[e2.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(t2) {
    this.view.inputState.runScrollHandlers(this.view, t2), this.intersecting && this.view.measure();
  }
  onScroll(t2) {
    this.intersecting && this.flush(false), this.onScrollChanged(t2);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint() {
    this.view.viewState.printing = true, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = false, this.view.requestMeasure();
    }, 500);
  }
  updateGaps(t2) {
    if (this.gapIntersection && (t2.length != this.gaps.length || this.gaps.some((e2, i2) => e2 != t2[i2]))) {
      this.gapIntersection.disconnect();
      for (let e2 of t2)
        this.gapIntersection.observe(e2);
      this.gaps = t2;
    }
  }
  onSelectionChange(t2) {
    let e2 = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i2 } = this, n2 = this.selectionRange;
    if (i2.state.facet(Mn) ? i2.root.activeElement != this.dom : !ji(i2.dom, n2))
      return;
    let r2 = n2.anchorNode && i2.docView.nearest(n2.anchorNode);
    if (r2 && r2.ignoreEvent(t2)) {
      e2 || (this.selectionChanged = false);
      return;
    }
    (x$3.ie && x$3.ie_version <= 11 || x$3.android && x$3.chrome) && !i2.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    n2.focusNode && nn(n2.focusNode, n2.focusOffset, n2.anchorNode, n2.anchorOffset) ? this.flushSoon() : this.flush(false);
  }
  readSelectionRange() {
    let { view: t2 } = this, e2 = x$3.safari && t2.root.nodeType == 11 && Uc(this.dom.ownerDocument) == this.dom && hu(this.view) || en(t2.root);
    if (!e2 || this.selectionRange.eq(e2))
      return false;
    let i2 = ji(this.dom, e2);
    return i2 && !this.selectionChanged && t2.inputState.lastFocusTime > Date.now() - 200 && t2.inputState.lastTouchTime < Date.now() - 300 && tf(this.dom, e2) ? (this.view.inputState.lastFocusTime = 0, t2.docView.updateSelection(), false) : (this.selectionRange.setRange(e2), i2 && (this.selectionChanged = true), true);
  }
  setSelectionRange(t2, e2) {
    this.selectionRange.set(t2.node, t2.offset, e2.node, e2.offset), this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let t2 = 0, e2 = null;
    for (let i2 = this.dom; i2; )
      if (i2.nodeType == 1)
        !e2 && t2 < this.scrollTargets.length && this.scrollTargets[t2] == i2 ? t2++ : e2 || (e2 = this.scrollTargets.slice(0, t2)), e2 && e2.push(i2), i2 = i2.assignedSlot || i2.parentNode;
      else if (i2.nodeType == 11)
        i2 = i2.host;
      else
        break;
    if (t2 < this.scrollTargets.length && !e2 && (e2 = this.scrollTargets.slice(0, t2)), e2) {
      for (let i2 of this.scrollTargets)
        i2.removeEventListener("scroll", this.onScroll);
      for (let i2 of this.scrollTargets = e2)
        i2.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(t2) {
    if (!this.active)
      return t2();
    try {
      return this.stop(), t2();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, ou), _n && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = true);
  }
  stop() {
    this.active && (this.active = false, this.observer.disconnect(), _n && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(t2, e2) {
    var i2;
    if (!this.delayedAndroidKey) {
      let n2 = () => {
        let r2 = this.delayedAndroidKey;
        r2 && (this.clearDelayedAndroidKey(), !this.flush() && r2.force && $e(this.dom, r2.key, r2.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(n2);
    }
    (!this.delayedAndroidKey || t2 == "Enter") && (this.delayedAndroidKey = {
      key: t2,
      keyCode: e2,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((i2 = this.delayedAndroidKey) === null || i2 === void 0) && i2.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  processRecords() {
    let t2 = this.queue;
    for (let r2 of this.observer.takeRecords())
      t2.push(r2);
    t2.length && (this.queue = []);
    let e2 = -1, i2 = -1, n2 = false;
    for (let r2 of t2) {
      let o2 = this.readMutation(r2);
      o2 && (o2.typeOver && (n2 = true), e2 == -1 ? { from: e2, to: i2 } = o2 : (e2 = Math.min(o2.from, e2), i2 = Math.max(o2.to, i2)));
    }
    return { from: e2, to: i2, typeOver: n2 };
  }
  readChange() {
    let { from: t2, to: e2, typeOver: i2 } = this.processRecords(), n2 = this.selectionChanged && ji(this.dom, this.selectionRange);
    return t2 < 0 && !n2 ? null : (t2 > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = false, new iu(this.view, t2, e2, i2));
  }
  // Apply pending changes, if any
  flush(t2 = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    t2 && this.readSelectionRange();
    let e2 = this.readChange();
    if (!e2)
      return false;
    let i2 = this.view.state, n2 = ih(this.view, e2);
    return this.view.state == i2 && this.view.update([]), n2;
  }
  readMutation(t2) {
    let e2 = this.view.docView.nearest(t2.target);
    if (!e2 || e2.ignoreMutation(t2))
      return null;
    if (e2.markDirty(t2.type == "attributes"), t2.type == "attributes" && (e2.dirty |= 4), t2.type == "childList") {
      let i2 = Zr(e2, t2.previousSibling || t2.target.previousSibling, -1), n2 = Zr(e2, t2.nextSibling || t2.target.nextSibling, 1);
      return {
        from: i2 ? e2.posAfter(i2) : e2.posAtStart,
        to: n2 ? e2.posBefore(n2) : e2.posAtEnd,
        typeOver: false
      };
    } else
      return t2.type == "characterData" ? { from: e2.posAtStart, to: e2.posAtEnd, typeOver: t2.target.nodeValue == t2.oldValue } : null;
  }
  setWindow(t2) {
    t2 != this.win && (this.removeWindowListeners(this.win), this.win = t2, this.addWindowListeners(this.win));
  }
  addWindowListeners(t2) {
    t2.addEventListener("resize", this.onResize), t2.addEventListener("beforeprint", this.onPrint), t2.addEventListener("scroll", this.onScroll), t2.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(t2) {
    t2.removeEventListener("scroll", this.onScroll), t2.removeEventListener("resize", this.onResize), t2.removeEventListener("beforeprint", this.onPrint), t2.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var t2, e2, i2, n2;
    this.stop(), (t2 = this.intersection) === null || t2 === void 0 || t2.disconnect(), (e2 = this.gapIntersection) === null || e2 === void 0 || e2.disconnect(), (i2 = this.resizeScroll) === null || i2 === void 0 || i2.disconnect(), (n2 = this.resizeContent) === null || n2 === void 0 || n2.disconnect();
    for (let r2 of this.scrollTargets)
      r2.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
}
function Zr(s3, t2, e2) {
  for (; t2; ) {
    let i2 = W$2.get(t2);
    if (i2 && i2.parent == s3)
      return i2;
    let n2 = t2.parentNode;
    t2 = n2 != s3.dom ? n2 : e2 > 0 ? t2.nextSibling : t2.previousSibling;
  }
  return null;
}
function hu(s3) {
  let t2 = null;
  function e2(h2) {
    h2.preventDefault(), h2.stopImmediatePropagation(), t2 = h2.getTargetRanges()[0];
  }
  if (s3.contentDOM.addEventListener("beforeinput", e2, true), s3.dom.ownerDocument.execCommand("indent"), s3.contentDOM.removeEventListener("beforeinput", e2, true), !t2)
    return null;
  let i2 = t2.startContainer, n2 = t2.startOffset, r2 = t2.endContainer, o2 = t2.endOffset, l2 = s3.docView.domAtPos(s3.state.selection.main.anchor);
  return nn(l2.node, l2.offset, r2, o2) && ([i2, n2, r2, o2] = [r2, o2, i2, n2]), { anchorNode: i2, anchorOffset: n2, focusNode: r2, focusOffset: o2 };
}
let A$4 = class A2 {
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(t2 = {}) {
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = false, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.style.cssText = "position: fixed; top: -10000px", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), this._dispatch = t2.dispatch || ((e2) => this.update([e2])), this.dispatch = this.dispatch.bind(this), this._root = t2.root || Zc(t2.parent) || document, this.viewState = new Xr(t2.state || N$4.create(t2)), this.plugins = this.state.facet(si).map((e2) => new Hn(e2));
    for (let e2 of this.plugins)
      e2.update(this);
    this.observer = new lu(this), this.inputState = new Pf(this), this.inputState.ensureHandlers(this, this.plugins), this.docView = new Er(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), t2.parent && t2.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  dispatch(...t2) {
    this._dispatch(t2.length == 1 && t2[0] instanceof ht ? t2[0] : this.state.update(...t2));
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(t2) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let e2 = false, i2 = false, n2, r2 = this.state;
    for (let a2 of t2) {
      if (a2.startState != r2)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      r2 = a2.state;
    }
    if (this.destroyed) {
      this.viewState.state = r2;
      return;
    }
    let o2 = this.observer.delayedAndroidKey, l2 = null;
    if (o2 ? (this.observer.clearDelayedAndroidKey(), l2 = this.observer.readChange(), (l2 && !this.state.doc.eq(r2.doc) || !this.state.selection.eq(r2.selection)) && (l2 = null)) : this.observer.clear(), r2.facet(N$4.phrases) != this.state.facet(N$4.phrases))
      return this.setState(r2);
    n2 = on.create(this, r2, t2);
    let h2 = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let a2 of t2) {
        if (h2 && (h2 = h2.map(a2.changes)), a2.scrollIntoView) {
          let { main: c2 } = a2.state.selection;
          h2 = new rn(c2.empty ? c2 : b$2.cursor(c2.head, c2.head > c2.anchor ? -1 : 1));
        }
        for (let c2 of a2.effects)
          c2.is(Br) && (h2 = c2.value);
      }
      this.viewState.update(n2, h2), this.bidiCache = ln.update(this.bidiCache, n2.changes), n2.empty || (this.updatePlugins(n2), this.inputState.update(n2)), e2 = this.docView.update(n2), this.state.facet(ri) != this.styleModules && this.mountStyles(), i2 = this.updateAttrs(), this.showAnnouncements(t2), this.docView.updateSelection(e2, t2.some((a2) => a2.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (n2.startState.facet(Ri) != n2.state.facet(Ri) && (this.viewState.mustMeasureContent = true), (e2 || i2 || h2 || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !n2.empty)
      for (let a2 of this.state.facet(vs))
        a2(n2);
    l2 && !ih(this, l2) && o2.force && $e(this.contentDOM, o2.key, o2.keyCode);
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(t2) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = t2;
      return;
    }
    this.updateState = 2;
    let e2 = this.hasFocus;
    try {
      for (let i2 of this.plugins)
        i2.destroy(this);
      this.viewState = new Xr(t2), this.plugins = t2.facet(si).map((i2) => new Hn(i2)), this.pluginMap.clear();
      for (let i2 of this.plugins)
        i2.update(this);
      this.docView = new Er(this), this.inputState.ensureHandlers(this, this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    e2 && this.focus(), this.requestMeasure();
  }
  updatePlugins(t2) {
    let e2 = t2.startState.facet(si), i2 = t2.state.facet(si);
    if (e2 != i2) {
      let n2 = [];
      for (let r2 of i2) {
        let o2 = e2.indexOf(r2);
        if (o2 < 0)
          n2.push(new Hn(r2));
        else {
          let l2 = this.plugins[o2];
          l2.mustUpdate = t2, n2.push(l2);
        }
      }
      for (let r2 of this.plugins)
        r2.mustUpdate != t2 && r2.destroy(this);
      this.plugins = n2, this.pluginMap.clear(), this.inputState.ensureHandlers(this, this.plugins);
    } else
      for (let n2 of this.plugins)
        n2.mustUpdate = t2;
    for (let n2 = 0; n2 < this.plugins.length; n2++)
      this.plugins[n2].update(this);
  }
  /**
  @internal
  */
  measure(t2 = true) {
    if (this.destroyed)
      return;
    this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.measureScheduled = 0, t2 && this.observer.forceFlush();
    let e2 = null, { scrollHeight: i2, scrollTop: n2, clientHeight: r2 } = this.scrollDOM, o2 = n2 > i2 - r2 - 4 ? i2 : n2;
    try {
      for (let l2 = 0; ; l2++) {
        this.updateState = 1;
        let h2 = this.viewport, a2 = this.viewState.lineBlockAtHeight(o2), c2 = this.viewState.measure(this);
        if (!c2 && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (l2 > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let f2 = [];
        c2 & 4 || ([this.measureRequests, f2] = [f2, this.measureRequests]);
        let u2 = f2.map((g2) => {
          try {
            return g2.read(this);
          } catch (y2) {
            return zt(this.state, y2), to;
          }
        }), d2 = on.create(this, this.state, []), p2 = false, w2 = false;
        d2.flags |= c2, e2 ? e2.flags |= c2 : e2 = d2, this.updateState = 2, d2.empty || (this.updatePlugins(d2), this.inputState.update(d2), this.updateAttrs(), p2 = this.docView.update(d2));
        for (let g2 = 0; g2 < f2.length; g2++)
          if (u2[g2] != to)
            try {
              let y2 = f2[g2];
              y2.write && y2.write(u2[g2], this);
            } catch (y2) {
              zt(this.state, y2);
            }
        if (this.viewState.editorHeight)
          if (this.viewState.scrollTarget)
            this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, w2 = true;
          else {
            let g2 = this.viewState.lineBlockAt(a2.from).top - a2.top;
            (g2 > 1 || g2 < -1) && (this.scrollDOM.scrollTop += g2, w2 = true);
          }
        if (p2 && this.docView.updateSelection(true), this.viewport.from == h2.from && this.viewport.to == h2.to && !w2 && this.measureRequests.length == 0)
          break;
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (e2 && !e2.empty)
      for (let l2 of this.state.facet(vs))
        l2(e2);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return Ts + " " + (this.state.facet(Ds) ? th : Zl) + " " + this.state.facet(Ri);
  }
  updateAttrs() {
    let t2 = eo(this, Nl, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), e2 = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: this.state.facet(Mn) ? "true" : "false",
      class: "cm-content",
      style: `${x$3.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (e2["aria-readonly"] = "true"), eo(this, Js, e2);
    let i2 = this.observer.ignore(() => {
      let n2 = ks(this.contentDOM, this.contentAttrs, e2), r2 = ks(this.dom, this.editorAttrs, t2);
      return n2 || r2;
    });
    return this.editorAttrs = t2, this.contentAttrs = e2, i2;
  }
  showAnnouncements(t2) {
    let e2 = true;
    for (let i2 of t2)
      for (let n2 of i2.effects)
        if (n2.is(A2.announce)) {
          e2 && (this.announceDOM.textContent = ""), e2 = false;
          let r2 = this.announceDOM.appendChild(document.createElement("div"));
          r2.textContent = n2.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(ri), de$1.mount(this.root, this.styleModules.concat(eu).reverse());
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(t2) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), t2) {
      if (this.measureRequests.indexOf(t2) > -1)
        return;
      if (t2.key != null) {
        for (let e2 = 0; e2 < this.measureRequests.length; e2++)
          if (this.measureRequests[e2].key === t2.key) {
            this.measureRequests[e2] = t2;
            return;
          }
      }
      this.measureRequests.push(t2);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(t2) {
    let e2 = this.pluginMap.get(t2);
    return (e2 === void 0 || e2 && e2.spec != t2) && this.pluginMap.set(t2, e2 = this.plugins.find((i2) => i2.spec == t2) || null), e2 && e2.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(t2) {
    return this.readMeasured(), this.viewState.elementAtHeight(t2);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(t2) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(t2);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(t2) {
    return this.viewState.lineBlockAt(t2);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(t2, e2, i2) {
    return Fn(this, t2, Fr(this, t2, e2, i2));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(t2, e2) {
    return Fn(this, t2, Fr(this, t2, e2, (i2) => Df(this, t2.head, i2)));
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(t2, e2, i2 = true) {
    return Mf(this, t2, e2, i2);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(t2, e2, i2) {
    return Fn(this, t2, Tf(this, t2, e2, i2));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(t2) {
    return this.docView.domAtPos(t2);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(t2, e2 = 0) {
    return this.docView.posFromDOM(t2, e2);
  }
  posAtCoords(t2, e2 = true) {
    return this.readMeasured(), jl(this, t2, e2);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(t2, e2 = 1) {
    this.readMeasured();
    let i2 = this.docView.coordsAt(t2, e2);
    if (!i2 || i2.left == i2.right)
      return i2;
    let n2 = this.state.doc.lineAt(t2), r2 = this.bidiSpans(n2), o2 = r2[Fe.find(r2, t2 - n2.from, -1, e2)];
    return Ks(i2, o2.dir == X$1.LTR == e2 > 0);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(t2) {
    return !this.state.facet(El) || t2 < this.viewport.from || t2 > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(t2));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(t2) {
    if (t2.length > au)
      return $l(t2.length);
    let e2 = this.textDirectionAt(t2.from);
    for (let n2 of this.bidiCache)
      if (n2.from == t2.from && n2.dir == e2)
        return n2.order;
    let i2 = df(t2.text, e2);
    return this.bidiCache.push(new ln(t2.from, t2.to, e2, i2)), i2;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var t2;
    return (this.dom.ownerDocument.hasFocus() || x$3.safari && ((t2 = this.inputState) === null || t2 === void 0 ? void 0 : t2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      ml(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(t2) {
    this._root != t2 && (this._root = t2, this.observer.setWindow((t2.nodeType == 9 ? t2 : t2.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let t2 of this.plugins)
      t2.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(t2, e2 = {}) {
    return Br.of(new rn(typeof t2 == "number" ? b$2.cursor(t2) : t2, e2.y, e2.x, e2.yMargin, e2.xMargin));
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(t2) {
    return wt.define(() => ({}), { eventHandlers: t2 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(t2, e2) {
    let i2 = de$1.newName(), n2 = [Ri.of(i2), ri.of(Ps(`.${i2}`, t2))];
    return e2 && e2.dark && n2.push(Ds.of(true)), n2;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(t2) {
    return js.lowest(ri.of(Ps("." + Ts, t2, eh)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(t2) {
    var e2;
    let i2 = t2.querySelector(".cm-content"), n2 = i2 && W$2.get(i2) || W$2.get(t2);
    return ((e2 = n2 == null ? void 0 : n2.rootView) === null || e2 === void 0 ? void 0 : e2.view) || null;
  }
};
A$4.styleModule = ri;
A$4.inputHandler = Ll;
A$4.perLineTextDirection = El;
A$4.exceptionSink = Rl;
A$4.updateListener = vs;
A$4.editable = Mn;
A$4.mouseSelectionStyle = Bl;
A$4.dragMovesSelection = Pl;
A$4.clickAddsSelectionRange = Tl;
A$4.decorations = gi;
A$4.atomicRanges = Vl;
A$4.scrollMargins = Il;
A$4.darkTheme = Ds;
A$4.contentAttributes = Js;
A$4.editorAttributes = Nl;
A$4.lineWrapping = /* @__PURE__ */ A$4.contentAttributes.of({ class: "cm-lineWrapping" });
A$4.announce = /* @__PURE__ */ F$4.define();
const au = 4096, to = {};
class ln {
  constructor(t2, e2, i2, n2) {
    this.from = t2, this.to = e2, this.dir = i2, this.order = n2;
  }
  static update(t2, e2) {
    if (e2.empty)
      return t2;
    let i2 = [], n2 = t2.length ? t2[t2.length - 1].dir : X$1.LTR;
    for (let r2 = Math.max(0, t2.length - 10); r2 < t2.length; r2++) {
      let o2 = t2[r2];
      o2.dir == n2 && !e2.touchesRange(o2.from, o2.to) && i2.push(new ln(e2.mapPos(o2.from, 1), e2.mapPos(o2.to, -1), o2.dir, o2.order));
    }
    return i2;
  }
}
function eo(s3, t2, e2) {
  for (let i2 = s3.state.facet(t2), n2 = i2.length - 1; n2 >= 0; n2--) {
    let r2 = i2[n2], o2 = typeof r2 == "function" ? r2(s3) : r2;
    o2 && bs(o2, e2);
  }
  return e2;
}
const cu = x$3.mac ? "mac" : x$3.windows ? "win" : x$3.linux ? "linux" : "key";
function fu(s3, t2) {
  const e2 = s3.split(/-(?!$)/);
  let i2 = e2[e2.length - 1];
  i2 == "Space" && (i2 = " ");
  let n2, r2, o2, l2;
  for (let h2 = 0; h2 < e2.length - 1; ++h2) {
    const a2 = e2[h2];
    if (/^(cmd|meta|m)$/i.test(a2))
      l2 = true;
    else if (/^a(lt)?$/i.test(a2))
      n2 = true;
    else if (/^(c|ctrl|control)$/i.test(a2))
      r2 = true;
    else if (/^s(hift)?$/i.test(a2))
      o2 = true;
    else if (/^mod$/i.test(a2))
      t2 == "mac" ? l2 = true : r2 = true;
    else
      throw new Error("Unrecognized modifier name: " + a2);
  }
  return n2 && (i2 = "Alt-" + i2), r2 && (i2 = "Ctrl-" + i2), l2 && (i2 = "Meta-" + i2), o2 && (i2 = "Shift-" + i2), i2;
}
function Li(s3, t2, e2) {
  return t2.altKey && (s3 = "Alt-" + s3), t2.ctrlKey && (s3 = "Ctrl-" + s3), t2.metaKey && (s3 = "Meta-" + s3), e2 !== false && t2.shiftKey && (s3 = "Shift-" + s3), s3;
}
const uu = /* @__PURE__ */ js.default(/* @__PURE__ */ A$4.domEventHandlers({
  keydown(s3, t2) {
    return mu(du(t2.state), s3, t2, "editor");
  }
})), nh = /* @__PURE__ */ v$4.define({ enables: uu }), io = /* @__PURE__ */ new WeakMap();
function du(s3) {
  let t2 = s3.facet(nh), e2 = io.get(t2);
  return e2 || io.set(t2, e2 = gu(t2.reduce((i2, n2) => i2.concat(n2), []))), e2;
}
let re$2 = null;
const pu = 4e3;
function gu(s3, t2 = cu) {
  let e2 = /* @__PURE__ */ Object.create(null), i2 = /* @__PURE__ */ Object.create(null), n2 = (o2, l2) => {
    let h2 = i2[o2];
    if (h2 == null)
      i2[o2] = l2;
    else if (h2 != l2)
      throw new Error("Key binding " + o2 + " is used both as a regular binding and as a multi-stroke prefix");
  }, r2 = (o2, l2, h2, a2) => {
    var c2, f2;
    let u2 = e2[o2] || (e2[o2] = /* @__PURE__ */ Object.create(null)), d2 = l2.split(/ (?!$)/).map((g2) => fu(g2, t2));
    for (let g2 = 1; g2 < d2.length; g2++) {
      let y2 = d2.slice(0, g2).join(" ");
      n2(y2, true), u2[y2] || (u2[y2] = {
        preventDefault: true,
        run: [(O2) => {
          let S2 = re$2 = { view: O2, prefix: y2, scope: o2 };
          return setTimeout(() => {
            re$2 == S2 && (re$2 = null);
          }, pu), true;
        }]
      });
    }
    let p2 = d2.join(" ");
    n2(p2, false);
    let w2 = u2[p2] || (u2[p2] = { preventDefault: false, run: ((f2 = (c2 = u2._any) === null || c2 === void 0 ? void 0 : c2.run) === null || f2 === void 0 ? void 0 : f2.slice()) || [] });
    h2 && w2.run.push(h2), a2 && (w2.preventDefault = true);
  };
  for (let o2 of s3) {
    let l2 = o2.scope ? o2.scope.split(" ") : ["editor"];
    if (o2.any)
      for (let a2 of l2) {
        let c2 = e2[a2] || (e2[a2] = /* @__PURE__ */ Object.create(null));
        c2._any || (c2._any = { preventDefault: false, run: [] });
        for (let f2 in c2)
          c2[f2].run.push(o2.any);
      }
    let h2 = o2[t2] || o2.key;
    if (h2)
      for (let a2 of l2)
        r2(a2, h2, o2.run, o2.preventDefault), o2.shift && r2(a2, "Shift-" + h2, o2.shift, o2.preventDefault);
  }
  return e2;
}
function mu(s3, t2, e2, i2) {
  let n2 = Gc(t2), r2 = hi(n2, 0), o2 = es(r2) == n2.length && n2 != " ", l2 = "", h2 = false;
  re$2 && re$2.view == e2 && re$2.scope == i2 && (l2 = re$2.prefix + " ", (h2 = Kl.indexOf(t2.keyCode) < 0) && (re$2 = null));
  let a2 = /* @__PURE__ */ new Set(), c2 = (p2) => {
    if (p2) {
      for (let w2 of p2.run)
        if (!a2.has(w2) && (a2.add(w2), w2(e2, t2)))
          return true;
      p2.preventDefault && (h2 = true);
    }
    return false;
  }, f2 = s3[i2], u2, d2;
  if (f2) {
    if (c2(f2[l2 + Li(n2, t2, !o2)]))
      return true;
    if (o2 && (t2.altKey || t2.metaKey || t2.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(x$3.windows && t2.ctrlKey && t2.altKey) && (u2 = pe$1[t2.keyCode]) && u2 != n2) {
      if (c2(f2[l2 + Li(u2, t2, true)]))
        return true;
      if (t2.shiftKey && (d2 = ui[t2.keyCode]) != n2 && d2 != u2 && c2(f2[l2 + Li(d2, t2, false)]))
        return true;
    } else if (o2 && t2.shiftKey && c2(f2[l2 + Li(n2, t2, true)]))
      return true;
    if (c2(f2._any))
      return true;
  }
  return h2;
}
function no(s3, t2, e2, i2, n2) {
  t2.lastIndex = 0;
  for (let r2 = s3.iterRange(e2, i2), o2 = e2, l2; !r2.next().done; o2 += r2.value.length)
    if (!r2.lineBreak)
      for (; l2 = t2.exec(r2.value); )
        n2(o2 + l2.index, l2);
}
function bu(s3, t2) {
  let e2 = s3.visibleRanges;
  if (e2.length == 1 && e2[0].from == s3.viewport.from && e2[0].to == s3.viewport.to)
    return e2;
  let i2 = [];
  for (let { from: n2, to: r2 } of e2)
    n2 = Math.max(s3.state.doc.lineAt(n2).from, n2 - t2), r2 = Math.min(s3.state.doc.lineAt(r2).to, r2 + t2), i2.length && i2[i2.length - 1].to >= n2 ? i2[i2.length - 1].to = r2 : i2.push({ from: n2, to: r2 });
  return i2;
}
class ku {
  /**
  Create a decorator.
  */
  constructor(t2) {
    const { regexp: e2, decoration: i2, decorate: n2, boundary: r2, maxLength: o2 = 1e3 } = t2;
    if (!e2.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = e2, n2)
      this.addMatch = (l2, h2, a2, c2) => n2(c2, a2, a2 + l2[0].length, l2, h2);
    else if (typeof i2 == "function")
      this.addMatch = (l2, h2, a2, c2) => {
        let f2 = i2(l2, h2, a2);
        f2 && c2(a2, a2 + l2[0].length, f2);
      };
    else if (i2)
      this.addMatch = (l2, h2, a2, c2) => c2(a2, a2 + l2[0].length, i2);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = r2, this.maxLength = o2;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(t2) {
    let e2 = new De(), i2 = e2.add.bind(e2);
    for (let { from: n2, to: r2 } of bu(t2, this.maxLength))
      no(t2.state.doc, this.regexp, n2, r2, (o2, l2) => this.addMatch(l2, t2, o2, i2));
    return e2.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(t2, e2) {
    let i2 = 1e9, n2 = -1;
    return t2.docChanged && t2.changes.iterChanges((r2, o2, l2, h2) => {
      h2 > t2.view.viewport.from && l2 < t2.view.viewport.to && (i2 = Math.min(l2, i2), n2 = Math.max(h2, n2));
    }), t2.viewportChanged || n2 - i2 > 1e3 ? this.createDeco(t2.view) : n2 > -1 ? this.updateRange(t2.view, e2.map(t2.changes), i2, n2) : e2;
  }
  updateRange(t2, e2, i2, n2) {
    for (let r2 of t2.visibleRanges) {
      let o2 = Math.max(r2.from, i2), l2 = Math.min(r2.to, n2);
      if (l2 > o2) {
        let h2 = t2.state.doc.lineAt(o2), a2 = h2.to < l2 ? t2.state.doc.lineAt(l2) : h2, c2 = Math.max(r2.from, h2.from), f2 = Math.min(r2.to, a2.to);
        if (this.boundary) {
          for (; o2 > h2.from; o2--)
            if (this.boundary.test(h2.text[o2 - 1 - h2.from])) {
              c2 = o2;
              break;
            }
          for (; l2 < a2.to; l2++)
            if (this.boundary.test(a2.text[l2 - a2.from])) {
              f2 = l2;
              break;
            }
        }
        let u2 = [], d2, p2 = (w2, g2, y2) => u2.push(y2.range(w2, g2));
        if (h2 == a2)
          for (this.regexp.lastIndex = c2 - h2.from; (d2 = this.regexp.exec(h2.text)) && d2.index < f2 - h2.from; )
            this.addMatch(d2, t2, d2.index + h2.from, p2);
        else
          no(t2.state.doc, this.regexp, c2, f2, (w2, g2) => this.addMatch(g2, t2, w2, p2));
        e2 = e2.update({ filterFrom: c2, filterTo: f2, filter: (w2, g2) => w2 < c2 || g2 > f2, add: u2 });
      }
    }
    return e2;
  }
}
const Bs = /x/.unicode != null ? "gu" : "g", xu = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Bs), vu = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let Wn = null;
function Su() {
  var s3;
  if (Wn == null && typeof document < "u" && document.body) {
    let t2 = document.body.style;
    Wn = ((s3 = t2.tabSize) !== null && s3 !== void 0 ? s3 : t2.MozTabSize) != null;
  }
  return Wn || false;
}
const Ki = /* @__PURE__ */ v$4.define({
  combine(s3) {
    let t2 = Sn(s3, {
      render: null,
      specialChars: xu,
      addSpecialChars: null
    });
    return (t2.replaceTabs = !Su()) && (t2.specialChars = new RegExp("	|" + t2.specialChars.source, Bs)), t2.addSpecialChars && (t2.specialChars = new RegExp(t2.specialChars.source + "|" + t2.addSpecialChars.source, Bs)), t2;
  }
});
function Cu(s3 = {}) {
  return [Ki.of(s3), Au()];
}
let so = null;
function Au() {
  return so || (so = wt.fromClass(class {
    constructor(s3) {
      this.view = s3, this.decorations = T$3.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(s3.state.facet(Ki)), this.decorations = this.decorator.createDeco(s3);
    }
    makeDecorator(s3) {
      return new ku({
        regexp: s3.specialChars,
        decoration: (t2, e2, i2) => {
          let { doc: n2 } = e2.state, r2 = hi(t2[0], 0);
          if (r2 == 9) {
            let o2 = n2.lineAt(i2), l2 = e2.state.tabSize, h2 = Cn(o2.text, l2, i2 - o2.from);
            return T$3.replace({ widget: new Tu((l2 - h2 % l2) * this.view.defaultCharacterWidth) });
          }
          return this.decorationCache[r2] || (this.decorationCache[r2] = T$3.replace({ widget: new Du(s3, r2) }));
        },
        boundary: s3.replaceTabs ? void 0 : /[^]/
      });
    }
    update(s3) {
      let t2 = s3.state.facet(Ki);
      s3.startState.facet(Ki) != t2 ? (this.decorator = this.makeDecorator(t2), this.decorations = this.decorator.createDeco(s3.view)) : this.decorations = this.decorator.updateDeco(s3, this.decorations);
    }
  }, {
    decorations: (s3) => s3.decorations
  }));
}
const Ou = "•";
function Mu(s3) {
  return s3 >= 32 ? Ou : s3 == 10 ? "␤" : String.fromCharCode(9216 + s3);
}
class Du extends ye$1 {
  constructor(t2, e2) {
    super(), this.options = t2, this.code = e2;
  }
  eq(t2) {
    return t2.code == this.code;
  }
  toDOM(t2) {
    let e2 = Mu(this.code), i2 = t2.state.phrase("Control character") + " " + (vu[this.code] || "0x" + this.code.toString(16)), n2 = this.options.render && this.options.render(this.code, i2, e2);
    if (n2)
      return n2;
    let r2 = document.createElement("span");
    return r2.textContent = e2, r2.title = i2, r2.setAttribute("aria-label", i2), r2.className = "cm-specialChar", r2;
  }
  ignoreEvent() {
    return false;
  }
}
class Tu extends ye$1 {
  constructor(t2) {
    super(), this.width = t2;
  }
  eq(t2) {
    return t2.width == this.width;
  }
  toDOM() {
    let t2 = document.createElement("span");
    return t2.textContent = "	", t2.className = "cm-tab", t2.style.width = this.width + "px", t2;
  }
  ignoreEvent() {
    return false;
  }
}
function Pu() {
  return Ru;
}
const Bu = /* @__PURE__ */ T$3.line({ class: "cm-activeLine" }), Ru = /* @__PURE__ */ wt.fromClass(class {
  constructor(s3) {
    this.decorations = this.getDeco(s3);
  }
  update(s3) {
    (s3.docChanged || s3.selectionSet) && (this.decorations = this.getDeco(s3.view));
  }
  getDeco(s3) {
    let t2 = -1, e2 = [];
    for (let i2 of s3.state.selection.ranges) {
      let n2 = s3.lineBlockAt(i2.head);
      n2.from > t2 && (e2.push(Bu.range(n2.from)), t2 = n2.from);
    }
    return T$3.set(e2);
  }
}, {
  decorations: (s3) => s3.decorations
}), Ei = "-10000px";
class sh {
  constructor(t2, e2, i2) {
    this.facet = e2, this.createTooltipView = i2, this.input = t2.state.facet(e2), this.tooltips = this.input.filter((n2) => n2), this.tooltipViews = this.tooltips.map(i2);
  }
  update(t2) {
    var e2;
    let i2 = t2.state.facet(this.facet), n2 = i2.filter((o2) => o2);
    if (i2 === this.input) {
      for (let o2 of this.tooltipViews)
        o2.update && o2.update(t2);
      return false;
    }
    let r2 = [];
    for (let o2 = 0; o2 < n2.length; o2++) {
      let l2 = n2[o2], h2 = -1;
      if (l2) {
        for (let a2 = 0; a2 < this.tooltips.length; a2++) {
          let c2 = this.tooltips[a2];
          c2 && c2.create == l2.create && (h2 = a2);
        }
        if (h2 < 0)
          r2[o2] = this.createTooltipView(l2);
        else {
          let a2 = r2[o2] = this.tooltipViews[h2];
          a2.update && a2.update(t2);
        }
      }
    }
    for (let o2 of this.tooltipViews)
      r2.indexOf(o2) < 0 && (o2.dom.remove(), (e2 = o2.destroy) === null || e2 === void 0 || e2.call(o2));
    return this.input = i2, this.tooltips = n2, this.tooltipViews = r2, true;
  }
}
function Lu(s3) {
  let { win: t2 } = s3;
  return { top: 0, left: 0, bottom: t2.innerHeight, right: t2.innerWidth };
}
const jn = /* @__PURE__ */ v$4.define({
  combine: (s3) => {
    var t2, e2, i2;
    return {
      position: x$3.ios ? "absolute" : ((t2 = s3.find((n2) => n2.position)) === null || t2 === void 0 ? void 0 : t2.position) || "fixed",
      parent: ((e2 = s3.find((n2) => n2.parent)) === null || e2 === void 0 ? void 0 : e2.parent) || null,
      tooltipSpace: ((i2 = s3.find((n2) => n2.tooltipSpace)) === null || i2 === void 0 ? void 0 : i2.tooltipSpace) || Lu
    };
  }
}), Eu = /* @__PURE__ */ wt.fromClass(class {
  constructor(s3) {
    this.view = s3, this.inView = true, this.lastTransaction = 0, this.measureTimeout = -1;
    let t2 = s3.state.facet(jn);
    this.position = t2.position, this.parent = t2.parent, this.classes = s3.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.manager = new sh(s3, rh, (e2) => this.createTooltip(e2)), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((e2) => {
      Date.now() > this.lastTransaction - 50 && e2.length > 0 && e2[e2.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), s3.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let s3 of this.manager.tooltipViews)
        this.intersectionObserver.observe(s3.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(s3) {
    s3.transactions.length && (this.lastTransaction = Date.now());
    let t2 = this.manager.update(s3);
    t2 && this.observeIntersection();
    let e2 = t2 || s3.geometryChanged, i2 = s3.state.facet(jn);
    if (i2.position != this.position) {
      this.position = i2.position;
      for (let n2 of this.manager.tooltipViews)
        n2.dom.style.position = this.position;
      e2 = true;
    }
    if (i2.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i2.parent, this.createContainer();
      for (let n2 of this.manager.tooltipViews)
        this.container.appendChild(n2.dom);
      e2 = true;
    } else
      this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    e2 && this.maybeMeasure();
  }
  createTooltip(s3) {
    let t2 = s3.create(this.view);
    if (t2.dom.classList.add("cm-tooltip"), s3.arrow && !t2.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let e2 = document.createElement("div");
      e2.className = "cm-tooltip-arrow", t2.dom.appendChild(e2);
    }
    return t2.dom.style.position = this.position, t2.dom.style.top = Ei, this.container.appendChild(t2.dom), t2.mount && t2.mount(this.view), t2;
  }
  destroy() {
    var s3, t2;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let e2 of this.manager.tooltipViews)
      e2.dom.remove(), (s3 = e2.destroy) === null || s3 === void 0 || s3.call(e2);
    (t2 = this.intersectionObserver) === null || t2 === void 0 || t2.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let s3 = this.view.dom.getBoundingClientRect();
    return {
      editor: s3,
      parent: this.parent ? this.container.getBoundingClientRect() : s3,
      pos: this.manager.tooltips.map((t2, e2) => {
        let i2 = this.manager.tooltipViews[e2];
        return i2.getCoords ? i2.getCoords(t2.pos) : this.view.coordsAtPos(t2.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: t2 }) => t2.getBoundingClientRect()),
      space: this.view.state.facet(jn).tooltipSpace(this.view)
    };
  }
  writeMeasure(s3) {
    let { editor: t2, space: e2 } = s3, i2 = [];
    for (let n2 = 0; n2 < this.manager.tooltips.length; n2++) {
      let r2 = this.manager.tooltips[n2], o2 = this.manager.tooltipViews[n2], { dom: l2 } = o2, h2 = s3.pos[n2], a2 = s3.size[n2];
      if (!h2 || h2.bottom <= Math.max(t2.top, e2.top) || h2.top >= Math.min(t2.bottom, e2.bottom) || h2.right < Math.max(t2.left, e2.left) - 0.1 || h2.left > Math.min(t2.right, e2.right) + 0.1) {
        l2.style.top = Ei;
        continue;
      }
      let c2 = r2.arrow ? o2.dom.querySelector(".cm-tooltip-arrow") : null, f2 = c2 ? 7 : 0, u2 = a2.right - a2.left, d2 = a2.bottom - a2.top, p2 = o2.offset || Vu, w2 = this.view.textDirection == X$1.LTR, g2 = a2.width > e2.right - e2.left ? w2 ? e2.left : e2.right - a2.width : w2 ? Math.min(h2.left - (c2 ? 14 : 0) + p2.x, e2.right - u2) : Math.max(e2.left, h2.left - u2 + (c2 ? 14 : 0) - p2.x), y2 = !!r2.above;
      !r2.strictSide && (y2 ? h2.top - (a2.bottom - a2.top) - p2.y < e2.top : h2.bottom + (a2.bottom - a2.top) + p2.y > e2.bottom) && y2 == e2.bottom - h2.bottom > h2.top - e2.top && (y2 = !y2);
      let O2 = (y2 ? h2.top - e2.top : e2.bottom - h2.bottom) - f2;
      if (O2 < d2 && o2.resize !== false) {
        if (O2 < this.view.defaultLineHeight) {
          l2.style.top = Ei;
          continue;
        }
        l2.style.height = (d2 = O2) + "px";
      } else
        l2.style.height && (l2.style.height = "");
      let S2 = y2 ? h2.top - d2 - f2 - p2.y : h2.bottom + f2 + p2.y, D2 = g2 + u2;
      if (o2.overlap !== true)
        for (let B2 of i2)
          B2.left < D2 && B2.right > g2 && B2.top < S2 + d2 && B2.bottom > S2 && (S2 = y2 ? B2.top - d2 - 2 - f2 : B2.bottom + f2 + 2);
      this.position == "absolute" ? (l2.style.top = S2 - s3.parent.top + "px", l2.style.left = g2 - s3.parent.left + "px") : (l2.style.top = S2 + "px", l2.style.left = g2 + "px"), c2 && (c2.style.left = `${h2.left + (w2 ? p2.x : -p2.x) - (g2 + 14 - 7)}px`), o2.overlap !== true && i2.push({ left: g2, top: S2, right: D2, bottom: S2 + d2 }), l2.classList.toggle("cm-tooltip-above", y2), l2.classList.toggle("cm-tooltip-below", !y2), o2.positioned && o2.positioned(s3.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let s3 of this.manager.tooltipViews)
        s3.dom.style.top = Ei;
  }
}, {
  eventHandlers: {
    scroll() {
      this.maybeMeasure();
    }
  }
}), Nu = /* @__PURE__ */ A$4.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), Vu = { x: 0, y: 0 }, rh = /* @__PURE__ */ v$4.define({
  enables: [Eu, Nu]
}), hn = /* @__PURE__ */ v$4.define();
class Ys {
  constructor(t2) {
    this.view = t2, this.mounted = false, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new sh(t2, hn, (e2) => this.createHostedView(e2));
  }
  // Needs to be static so that host tooltip instances always match
  static create(t2) {
    return new Ys(t2);
  }
  createHostedView(t2) {
    let e2 = t2.create(this.view);
    return e2.dom.classList.add("cm-tooltip-section"), this.dom.appendChild(e2.dom), this.mounted && e2.mount && e2.mount(this.view), e2;
  }
  mount(t2) {
    for (let e2 of this.manager.tooltipViews)
      e2.mount && e2.mount(t2);
    this.mounted = true;
  }
  positioned(t2) {
    for (let e2 of this.manager.tooltipViews)
      e2.positioned && e2.positioned(t2);
  }
  update(t2) {
    this.manager.update(t2);
  }
}
const Iu = /* @__PURE__ */ rh.compute([hn], (s3) => {
  let t2 = s3.facet(hn).filter((e2) => e2);
  return t2.length === 0 ? null : {
    pos: Math.min(...t2.map((e2) => e2.pos)),
    end: Math.max(...t2.filter((e2) => e2.end != null).map((e2) => e2.end)),
    create: Ys.create,
    above: t2[0].above,
    arrow: t2.some((e2) => e2.arrow)
  };
});
class Hu {
  constructor(t2, e2, i2, n2, r2) {
    this.view = t2, this.source = e2, this.field = i2, this.setHover = n2, this.hoverTime = r2, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: t2.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), t2.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), t2.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active)
      return;
    let t2 = Date.now() - this.lastMove.time;
    t2 < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - t2) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { lastMove: t2 } = this, e2 = this.view.contentDOM.contains(t2.target) ? this.view.posAtCoords(t2) : null;
    if (e2 == null)
      return;
    let i2 = this.view.coordsAtPos(e2);
    if (i2 == null || t2.y < i2.top || t2.y > i2.bottom || t2.x < i2.left - this.view.defaultCharacterWidth || t2.x > i2.right + this.view.defaultCharacterWidth)
      return;
    let n2 = this.view.bidiSpans(this.view.state.doc.lineAt(e2)).find((l2) => l2.from <= e2 && l2.to >= e2), r2 = n2 && n2.dir == X$1.RTL ? -1 : 1, o2 = this.source(this.view, e2, t2.x < i2.left ? -r2 : r2);
    if (o2 != null && o2.then) {
      let l2 = this.pending = { pos: e2 };
      o2.then((h2) => {
        this.pending == l2 && (this.pending = null, h2 && this.view.dispatch({ effects: this.setHover.of(h2) }));
      }, (h2) => zt(this.view.state, h2, "hover tooltip"));
    } else
      o2 && this.view.dispatch({ effects: this.setHover.of(o2) });
  }
  mousemove(t2) {
    var e2;
    this.lastMove = { x: t2.clientX, y: t2.clientY, target: t2.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let i2 = this.active;
    if (i2 && !ro(this.lastMove.target) || this.pending) {
      let { pos: n2 } = i2 || this.pending, r2 = (e2 = i2 == null ? void 0 : i2.end) !== null && e2 !== void 0 ? e2 : n2;
      (n2 == r2 ? this.view.posAtCoords(this.lastMove) != n2 : !$u(
        this.view,
        n2,
        r2,
        t2.clientX,
        t2.clientY,
        6
        /* Hover.MaxDist */
      )) && (this.view.dispatch({ effects: this.setHover.of(null) }), this.pending = null);
    }
  }
  mouseleave(t2) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1, this.active && !ro(t2.relatedTarget) && this.view.dispatch({ effects: this.setHover.of(null) });
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
function ro(s3) {
  for (let t2 = s3; t2; t2 = t2.parentNode)
    if (t2.nodeType == 1 && t2.classList.contains("cm-tooltip"))
      return true;
  return false;
}
function $u(s3, t2, e2, i2, n2, r2) {
  let o2 = document.createRange(), l2 = s3.domAtPos(t2), h2 = s3.domAtPos(e2);
  o2.setEnd(h2.node, h2.offset), o2.setStart(l2.node, l2.offset);
  let a2 = o2.getClientRects();
  o2.detach();
  for (let c2 = 0; c2 < a2.length; c2++) {
    let f2 = a2[c2];
    if (Math.max(f2.top - n2, n2 - f2.bottom, f2.left - i2, i2 - f2.right) <= r2)
      return true;
  }
  return false;
}
function Fu(s3, t2 = {}) {
  let e2 = F$4.define(), i2 = Bt.define({
    create() {
      return null;
    },
    update(n2, r2) {
      if (n2 && (t2.hideOnChange && (r2.docChanged || r2.selection) || t2.hideOn && t2.hideOn(r2, n2)))
        return null;
      if (n2 && r2.docChanged) {
        let o2 = r2.changes.mapPos(n2.pos, -1, gt.TrackDel);
        if (o2 == null)
          return null;
        let l2 = Object.assign(/* @__PURE__ */ Object.create(null), n2);
        l2.pos = o2, n2.end != null && (l2.end = r2.changes.mapPos(n2.end)), n2 = l2;
      }
      for (let o2 of r2.effects)
        o2.is(e2) && (n2 = o2.value), o2.is(zu) && (n2 = null);
      return n2;
    },
    provide: (n2) => hn.from(n2)
  });
  return [
    i2,
    wt.define((n2) => new Hu(
      n2,
      s3,
      i2,
      e2,
      t2.hoverTime || 300
      /* Hover.Time */
    )),
    Iu
  ];
}
const zu = /* @__PURE__ */ F$4.define(), oo = /* @__PURE__ */ v$4.define({
  combine(s3) {
    let t2, e2;
    for (let i2 of s3)
      t2 = t2 || i2.topContainer, e2 = e2 || i2.bottomContainer;
    return { topContainer: t2, bottomContainer: e2 };
  }
});
function _u(s3, t2) {
  let e2 = s3.plugin(oh), i2 = e2 ? e2.specs.indexOf(t2) : -1;
  return i2 > -1 ? e2.panels[i2] : null;
}
const oh = /* @__PURE__ */ wt.fromClass(class {
  constructor(s3) {
    this.input = s3.state.facet(Rs), this.specs = this.input.filter((e2) => e2), this.panels = this.specs.map((e2) => e2(s3));
    let t2 = s3.state.facet(oo);
    this.top = new Ni(s3, true, t2.topContainer), this.bottom = new Ni(s3, false, t2.bottomContainer), this.top.sync(this.panels.filter((e2) => e2.top)), this.bottom.sync(this.panels.filter((e2) => !e2.top));
    for (let e2 of this.panels)
      e2.dom.classList.add("cm-panel"), e2.mount && e2.mount();
  }
  update(s3) {
    let t2 = s3.state.facet(oo);
    this.top.container != t2.topContainer && (this.top.sync([]), this.top = new Ni(s3.view, true, t2.topContainer)), this.bottom.container != t2.bottomContainer && (this.bottom.sync([]), this.bottom = new Ni(s3.view, false, t2.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let e2 = s3.state.facet(Rs);
    if (e2 != this.input) {
      let i2 = e2.filter((h2) => h2), n2 = [], r2 = [], o2 = [], l2 = [];
      for (let h2 of i2) {
        let a2 = this.specs.indexOf(h2), c2;
        a2 < 0 ? (c2 = h2(s3.view), l2.push(c2)) : (c2 = this.panels[a2], c2.update && c2.update(s3)), n2.push(c2), (c2.top ? r2 : o2).push(c2);
      }
      this.specs = i2, this.panels = n2, this.top.sync(r2), this.bottom.sync(o2);
      for (let h2 of l2)
        h2.dom.classList.add("cm-panel"), h2.mount && h2.mount();
    } else
      for (let i2 of this.panels)
        i2.update && i2.update(s3);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (s3) => A$4.scrollMargins.of((t2) => {
    let e2 = t2.plugin(s3);
    return e2 && { top: e2.top.scrollMargin(), bottom: e2.bottom.scrollMargin() };
  })
});
class Ni {
  constructor(t2, e2, i2) {
    this.view = t2, this.top = e2, this.container = i2, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(t2) {
    for (let e2 of this.panels)
      e2.destroy && t2.indexOf(e2) < 0 && e2.destroy();
    this.panels = t2, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let e2 = this.container || this.view.dom;
      e2.insertBefore(this.dom, this.top ? e2.firstChild : null);
    }
    let t2 = this.dom.firstChild;
    for (let e2 of this.panels)
      if (e2.dom.parentNode == this.dom) {
        for (; t2 != e2.dom; )
          t2 = lo(t2);
        t2 = t2.nextSibling;
      } else
        this.dom.insertBefore(e2.dom, t2);
    for (; t2; )
      t2 = lo(t2);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let t2 of this.classes.split(" "))
        t2 && this.container.classList.remove(t2);
      for (let t2 of (this.classes = this.view.themeClasses).split(" "))
        t2 && this.container.classList.add(t2);
    }
  }
}
function lo(s3) {
  let t2 = s3.nextSibling;
  return s3.remove(), t2;
}
const Rs = /* @__PURE__ */ v$4.define({
  enables: oh
});
let me$2 = class me2 extends je$2 {
  /**
  @internal
  */
  compare(t2) {
    return this == t2 || this.constructor == t2.constructor && this.eq(t2);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(t2) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(t2) {
  }
};
me$2.prototype.elementClass = "";
me$2.prototype.toDOM = void 0;
me$2.prototype.mapMode = gt.TrackBefore;
me$2.prototype.startSide = me$2.prototype.endSide = -1;
me$2.prototype.point = true;
const Gi = /* @__PURE__ */ v$4.define(), Wu = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => $$1.empty,
  lineMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, Ui = /* @__PURE__ */ v$4.define();
function ju(s3) {
  return [qu(), Ui.of(Object.assign(Object.assign({}, Wu), s3))];
}
const Ls = /* @__PURE__ */ v$4.define({
  combine: (s3) => s3.some((t2) => t2)
});
function qu(s3) {
  let t2 = [
    Ku
  ];
  return s3 && s3.fixed === false && t2.push(Ls.of(true)), t2;
}
const Ku = /* @__PURE__ */ wt.fromClass(class {
  constructor(s3) {
    this.view = s3, this.prevViewport = s3.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight + "px", this.gutters = s3.state.facet(Ui).map((t2) => new ao(s3, t2));
    for (let t2 of this.gutters)
      this.dom.appendChild(t2.dom);
    this.fixed = !s3.state.facet(Ls), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(false), s3.scrollDOM.insertBefore(this.dom, s3.contentDOM);
  }
  update(s3) {
    if (this.updateGutters(s3)) {
      let t2 = this.prevViewport, e2 = s3.view.viewport, i2 = Math.min(t2.to, e2.to) - Math.max(t2.from, e2.from);
      this.syncGutters(i2 < (e2.to - e2.from) * 0.8);
    }
    s3.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + "px"), this.view.state.facet(Ls) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = s3.view.viewport;
  }
  syncGutters(s3) {
    let t2 = this.dom.nextSibling;
    s3 && this.dom.remove();
    let e2 = $$1.iter(this.view.state.facet(Gi), this.view.viewport.from), i2 = [], n2 = this.gutters.map((r2) => new Gu(r2, this.view.viewport, -this.view.documentPadding.top));
    for (let r2 of this.view.viewportLineBlocks) {
      let o2;
      if (Array.isArray(r2.type)) {
        for (let l2 of r2.type)
          if (l2.type == U$3.Text) {
            o2 = l2;
            break;
          }
      } else
        o2 = r2.type == U$3.Text ? r2 : void 0;
      if (o2) {
        i2.length && (i2 = []), lh(e2, i2, r2.from);
        for (let l2 of n2)
          l2.line(this.view, o2, i2);
      }
    }
    for (let r2 of n2)
      r2.finish();
    s3 && this.view.scrollDOM.insertBefore(this.dom, t2);
  }
  updateGutters(s3) {
    let t2 = s3.startState.facet(Ui), e2 = s3.state.facet(Ui), i2 = s3.docChanged || s3.heightChanged || s3.viewportChanged || !$$1.eq(s3.startState.facet(Gi), s3.state.facet(Gi), s3.view.viewport.from, s3.view.viewport.to);
    if (t2 == e2)
      for (let n2 of this.gutters)
        n2.update(s3) && (i2 = true);
    else {
      i2 = true;
      let n2 = [];
      for (let r2 of e2) {
        let o2 = t2.indexOf(r2);
        o2 < 0 ? n2.push(new ao(this.view, r2)) : (this.gutters[o2].update(s3), n2.push(this.gutters[o2]));
      }
      for (let r2 of this.gutters)
        r2.dom.remove(), n2.indexOf(r2) < 0 && r2.destroy();
      for (let r2 of n2)
        this.dom.appendChild(r2.dom);
      this.gutters = n2;
    }
    return i2;
  }
  destroy() {
    for (let s3 of this.gutters)
      s3.destroy();
    this.dom.remove();
  }
}, {
  provide: (s3) => A$4.scrollMargins.of((t2) => {
    let e2 = t2.plugin(s3);
    return !e2 || e2.gutters.length == 0 || !e2.fixed ? null : t2.textDirection == X$1.LTR ? { left: e2.dom.offsetWidth } : { right: e2.dom.offsetWidth };
  })
});
function ho(s3) {
  return Array.isArray(s3) ? s3 : [s3];
}
function lh(s3, t2, e2) {
  for (; s3.value && s3.from <= e2; )
    s3.from == e2 && t2.push(s3.value), s3.next();
}
class Gu {
  constructor(t2, e2, i2) {
    this.gutter = t2, this.height = i2, this.i = 0, this.cursor = $$1.iter(t2.markers, e2.from);
  }
  line(t2, e2, i2) {
    let n2 = [];
    lh(this.cursor, n2, e2.from), i2.length && (n2 = n2.concat(i2));
    let r2 = this.gutter.config.lineMarker(t2, e2, n2);
    r2 && n2.unshift(r2);
    let o2 = this.gutter;
    if (n2.length == 0 && !o2.config.renderEmptyElements)
      return;
    let l2 = e2.top - this.height;
    if (this.i == o2.elements.length) {
      let h2 = new hh(t2, e2.height, l2, n2);
      o2.elements.push(h2), o2.dom.appendChild(h2.dom);
    } else
      o2.elements[this.i].update(t2, e2.height, l2, n2);
    this.height = e2.bottom, this.i++;
  }
  finish() {
    let t2 = this.gutter;
    for (; t2.elements.length > this.i; ) {
      let e2 = t2.elements.pop();
      t2.dom.removeChild(e2.dom), e2.destroy();
    }
  }
}
class ao {
  constructor(t2, e2) {
    this.view = t2, this.config = e2, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i2 in e2.domEventHandlers)
      this.dom.addEventListener(i2, (n2) => {
        let r2 = n2.target, o2;
        if (r2 != this.dom && this.dom.contains(r2)) {
          for (; r2.parentNode != this.dom; )
            r2 = r2.parentNode;
          let h2 = r2.getBoundingClientRect();
          o2 = (h2.top + h2.bottom) / 2;
        } else
          o2 = n2.clientY;
        let l2 = t2.lineBlockAtHeight(o2 - t2.documentTop);
        e2.domEventHandlers[i2](t2, l2, n2) && n2.preventDefault();
      });
    this.markers = ho(e2.markers(t2)), e2.initialSpacer && (this.spacer = new hh(t2, 0, 0, [e2.initialSpacer(t2)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(t2) {
    let e2 = this.markers;
    if (this.markers = ho(this.config.markers(t2.view)), this.spacer && this.config.updateSpacer) {
      let n2 = this.config.updateSpacer(this.spacer.markers[0], t2);
      n2 != this.spacer.markers[0] && this.spacer.update(t2.view, 0, 0, [n2]);
    }
    let i2 = t2.view.viewport;
    return !$$1.eq(this.markers, e2, i2.from, i2.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(t2) : false);
  }
  destroy() {
    for (let t2 of this.elements)
      t2.destroy();
  }
}
class hh {
  constructor(t2, e2, i2, n2) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(t2, e2, i2, n2);
  }
  update(t2, e2, i2, n2) {
    this.height != e2 && (this.dom.style.height = (this.height = e2) + "px"), this.above != i2 && (this.dom.style.marginTop = (this.above = i2) ? i2 + "px" : ""), Uu(this.markers, n2) || this.setMarkers(t2, n2);
  }
  setMarkers(t2, e2) {
    let i2 = "cm-gutterElement", n2 = this.dom.firstChild;
    for (let r2 = 0, o2 = 0; ; ) {
      let l2 = o2, h2 = r2 < e2.length ? e2[r2++] : null, a2 = false;
      if (h2) {
        let c2 = h2.elementClass;
        c2 && (i2 += " " + c2);
        for (let f2 = o2; f2 < this.markers.length; f2++)
          if (this.markers[f2].compare(h2)) {
            l2 = f2, a2 = true;
            break;
          }
      } else
        l2 = this.markers.length;
      for (; o2 < l2; ) {
        let c2 = this.markers[o2++];
        if (c2.toDOM) {
          c2.destroy(n2);
          let f2 = n2.nextSibling;
          n2.remove(), n2 = f2;
        }
      }
      if (!h2)
        break;
      h2.toDOM && (a2 ? n2 = n2.nextSibling : this.dom.insertBefore(h2.toDOM(t2), n2)), a2 && o2++;
    }
    this.dom.className = i2, this.markers = e2;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function Uu(s3, t2) {
  if (s3.length != t2.length)
    return false;
  for (let e2 = 0; e2 < s3.length; e2++)
    if (!s3[e2].compare(t2[e2]))
      return false;
  return true;
}
const Qu = /* @__PURE__ */ new class extends me$2 {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), Ju = /* @__PURE__ */ Gi.compute(["selection"], (s3) => {
  let t2 = [], e2 = -1;
  for (let i2 of s3.selection.ranges) {
    let n2 = s3.doc.lineAt(i2.head).from;
    n2 > e2 && (e2 = n2, t2.push(Qu.range(n2)));
  }
  return $$1.of(t2);
});
function Xu() {
  return Ju;
}
const ah = 1024;
let Yu = 0;
class qn {
  constructor(t2, e2) {
    this.from = t2, this.to = e2;
  }
}
let P$3 = class P2 {
  /// Create a new node prop type.
  constructor(t2 = {}) {
    this.id = Yu++, this.perNode = !!t2.perNode, this.deserialize = t2.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /// This is meant to be used with
  /// [`NodeSet.extend`](#common.NodeSet.extend) or
  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
  /// prop values for each node type in the set. Takes a [match
  /// object](#common.NodeType^match) or function that returns undefined
  /// if the node type doesn't get this prop, and the prop's value if
  /// it does.
  add(t2) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof t2 != "function" && (t2 = yt.match(t2)), (e2) => {
      let i2 = t2(e2);
      return i2 === void 0 ? null : [this, i2];
    };
  }
};
P$3.closedBy = new P$3({ deserialize: (s3) => s3.split(" ") });
P$3.openedBy = new P$3({ deserialize: (s3) => s3.split(" ") });
P$3.group = new P$3({ deserialize: (s3) => s3.split(" ") });
P$3.contextHash = new P$3({ perNode: true });
P$3.lookAhead = new P$3({ perNode: true });
P$3.mounted = new P$3({ perNode: true });
const Zu = /* @__PURE__ */ Object.create(null);
class yt {
  /// @internal
  constructor(t2, e2, i2, n2 = 0) {
    this.name = t2, this.props = e2, this.id = i2, this.flags = n2;
  }
  /// Define a node type.
  static define(t2) {
    let e2 = t2.props && t2.props.length ? /* @__PURE__ */ Object.create(null) : Zu, i2 = (t2.top ? 1 : 0) | (t2.skipped ? 2 : 0) | (t2.error ? 4 : 0) | (t2.name == null ? 8 : 0), n2 = new yt(t2.name || "", e2, t2.id, i2);
    if (t2.props) {
      for (let r2 of t2.props)
        if (Array.isArray(r2) || (r2 = r2(n2)), r2) {
          if (r2[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          e2[r2[0].id] = r2[1];
        }
    }
    return n2;
  }
  /// Retrieves a node prop for this type. Will return `undefined` if
  /// the prop isn't present on this node.
  prop(t2) {
    return this.props[t2.id];
  }
  /// True when this is the top node of a grammar.
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /// True when this node is produced by a skip rule.
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /// Indicates whether this is an error node.
  get isError() {
    return (this.flags & 4) > 0;
  }
  /// When true, this node type doesn't correspond to a user-declared
  /// named node, for example because it is used to cache repetition.
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /// Returns true when this node's name or one of its
  /// [groups](#common.NodeProp^group) matches the given string.
  is(t2) {
    if (typeof t2 == "string") {
      if (this.name == t2)
        return true;
      let e2 = this.prop(P$3.group);
      return e2 ? e2.indexOf(t2) > -1 : false;
    }
    return this.id == t2;
  }
  /// Create a function from node types to arbitrary values by
  /// specifying an object whose property names are node or
  /// [group](#common.NodeProp^group) names. Often useful with
  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  /// names, separated by spaces, in a single property name to map
  /// multiple node names to a single value.
  static match(t2) {
    let e2 = /* @__PURE__ */ Object.create(null);
    for (let i2 in t2)
      for (let n2 of i2.split(" "))
        e2[n2] = t2[i2];
    return (i2) => {
      for (let n2 = i2.prop(P$3.group), r2 = -1; r2 < (n2 ? n2.length : 0); r2++) {
        let o2 = e2[r2 < 0 ? i2.name : n2[r2]];
        if (o2)
          return o2;
      }
    };
  }
}
yt.none = new yt(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class Zs {
  /// Create a set with the given types. The `id` property of each
  /// type should correspond to its position within the array.
  constructor(t2) {
    this.types = t2;
    for (let e2 = 0; e2 < t2.length; e2++)
      if (t2[e2].id != e2)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /// Create a copy of this set with some node properties added. The
  /// arguments to this method can be created with
  /// [`NodeProp.add`](#common.NodeProp.add).
  extend(...t2) {
    let e2 = [];
    for (let i2 of this.types) {
      let n2 = null;
      for (let r2 of t2) {
        let o2 = r2(i2);
        o2 && (n2 || (n2 = Object.assign({}, i2.props)), n2[o2[0].id] = o2[1]);
      }
      e2.push(n2 ? new yt(i2.name, n2, i2.id, i2.flags) : i2);
    }
    return new Zs(e2);
  }
}
const Vi = /* @__PURE__ */ new WeakMap(), co = /* @__PURE__ */ new WeakMap();
var st;
(function(s3) {
  s3[s3.ExcludeBuffers = 1] = "ExcludeBuffers", s3[s3.IncludeAnonymous = 2] = "IncludeAnonymous", s3[s3.IgnoreMounts = 4] = "IgnoreMounts", s3[s3.IgnoreOverlays = 8] = "IgnoreOverlays";
})(st || (st = {}));
let J$1 = class J2 {
  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  constructor(t2, e2, i2, n2, r2) {
    if (this.type = t2, this.children = e2, this.positions = i2, this.length = n2, this.props = null, r2 && r2.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o2, l2] of r2)
        this.props[typeof o2 == "number" ? o2 : o2.id] = l2;
    }
  }
  /// @internal
  toString() {
    let t2 = this.prop(P$3.mounted);
    if (t2 && !t2.overlay)
      return t2.tree.toString();
    let e2 = "";
    for (let i2 of this.children) {
      let n2 = i2.toString();
      n2 && (e2 && (e2 += ","), e2 += n2);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (e2.length ? "(" + e2 + ")" : "") : e2;
  }
  /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
  /// the tree. Mode can be used to [control](#common.IterMode) which
  /// nodes the cursor visits.
  cursor(t2 = 0) {
    return new fn(this.topNode, t2);
  }
  /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
  /// at the given position and side (see
  /// [`moveTo`](#common.TreeCursor.moveTo).
  cursorAt(t2, e2 = 0, i2 = 0) {
    let n2 = Vi.get(this) || this.topNode, r2 = new fn(n2);
    return r2.moveTo(t2, e2), Vi.set(this, r2._tree), r2;
  }
  /// Get a [syntax node](#common.SyntaxNode) object for the top of the
  /// tree.
  get topNode() {
    return new Zt(this, 0, 0, null);
  }
  /// Get the [syntax node](#common.SyntaxNode) at the given position.
  /// If `side` is -1, this will move into nodes that end at the
  /// position. If 1, it'll move into nodes that start at the
  /// position. With 0, it'll only enter nodes that cover the position
  /// from both sides.
  ///
  /// Note that this will not enter
  /// [overlays](#common.MountedTree.overlay), and you often want
  /// [`resolveInner`](#common.Tree.resolveInner) instead.
  resolve(t2, e2 = 0) {
    let i2 = Ue$3(Vi.get(this) || this.topNode, t2, e2, false);
    return Vi.set(this, i2), i2;
  }
  /// Like [`resolve`](#common.Tree.resolve), but will enter
  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  /// pointing into the innermost overlaid tree at the given position
  /// (with parent links going through all parent structure, including
  /// the host trees).
  resolveInner(t2, e2 = 0) {
    let i2 = Ue$3(co.get(this) || this.topNode, t2, e2, true);
    return co.set(this, i2), i2;
  }
  /// Iterate over the tree and its children, calling `enter` for any
  /// node that touches the `from`/`to` region (if given) before
  /// running over such a node's children, and `leave` (if given) when
  /// leaving the node. When `enter` returns `false`, that node will
  /// not have its children iterated over (or `leave` called).
  iterate(t2) {
    let { enter: e2, leave: i2, from: n2 = 0, to: r2 = this.length } = t2;
    for (let o2 = this.cursor((t2.mode || 0) | st.IncludeAnonymous); ; ) {
      let l2 = false;
      if (o2.from <= r2 && o2.to >= n2 && (o2.type.isAnonymous || e2(o2) !== false)) {
        if (o2.firstChild())
          continue;
        l2 = true;
      }
      for (; l2 && i2 && !o2.type.isAnonymous && i2(o2), !o2.nextSibling(); ) {
        if (!o2.parent())
          return;
        l2 = true;
      }
    }
  }
  /// Get the value of the given [node prop](#common.NodeProp) for this
  /// node. Works with both per-node and per-type props.
  prop(t2) {
    return t2.perNode ? this.props ? this.props[t2.id] : void 0 : this.type.prop(t2);
  }
  /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
  /// format that can be passed to the [`Tree`](#common.Tree)
  /// constructor.
  get propValues() {
    let t2 = [];
    if (this.props)
      for (let e2 in this.props)
        t2.push([+e2, this.props[e2]]);
    return t2;
  }
  /// Balance the direct children of this tree, producing a copy of
  /// which may have children grouped into subtrees with type
  /// [`NodeType.none`](#common.NodeType^none).
  balance(t2 = {}) {
    return this.children.length <= 8 ? this : ir(yt.none, this.children, this.positions, 0, this.children.length, 0, this.length, (e2, i2, n2) => new J2(this.type, e2, i2, n2, this.propValues), t2.makeTree || ((e2, i2, n2) => new J2(yt.none, e2, i2, n2)));
  }
  /// Build a tree from a postfix-ordered buffer of node information,
  /// or a cursor over such a buffer.
  static build(t2) {
    return ed(t2);
  }
};
J$1.empty = new J$1(yt.none, [], [], 0);
class tr {
  constructor(t2, e2) {
    this.buffer = t2, this.index = e2;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new tr(this.buffer, this.index);
  }
}
let Re$1 = class Re2 {
  /// Create a tree buffer.
  constructor(t2, e2, i2) {
    this.buffer = t2, this.length = e2, this.set = i2;
  }
  /// @internal
  get type() {
    return yt.none;
  }
  /// @internal
  toString() {
    let t2 = [];
    for (let e2 = 0; e2 < this.buffer.length; )
      t2.push(this.childString(e2)), e2 = this.buffer[e2 + 3];
    return t2.join(",");
  }
  /// @internal
  childString(t2) {
    let e2 = this.buffer[t2], i2 = this.buffer[t2 + 3], n2 = this.set.types[e2], r2 = n2.name;
    if (/\W/.test(r2) && !n2.isError && (r2 = JSON.stringify(r2)), t2 += 4, i2 == t2)
      return r2;
    let o2 = [];
    for (; t2 < i2; )
      o2.push(this.childString(t2)), t2 = this.buffer[t2 + 3];
    return r2 + "(" + o2.join(",") + ")";
  }
  /// @internal
  findChild(t2, e2, i2, n2, r2) {
    let { buffer: o2 } = this, l2 = -1;
    for (let h2 = t2; h2 != e2 && !(ch(r2, n2, o2[h2 + 1], o2[h2 + 2]) && (l2 = h2, i2 > 0)); h2 = o2[h2 + 3])
      ;
    return l2;
  }
  /// @internal
  slice(t2, e2, i2) {
    let n2 = this.buffer, r2 = new Uint16Array(e2 - t2), o2 = 0;
    for (let l2 = t2, h2 = 0; l2 < e2; ) {
      r2[h2++] = n2[l2++], r2[h2++] = n2[l2++] - i2;
      let a2 = r2[h2++] = n2[l2++] - i2;
      r2[h2++] = n2[l2++] - t2, o2 = Math.max(o2, a2);
    }
    return new Re2(r2, o2, this.set);
  }
};
function ch(s3, t2, e2, i2) {
  switch (s3) {
    case -2:
      return e2 < t2;
    case -1:
      return i2 >= t2 && e2 < t2;
    case 0:
      return e2 < t2 && i2 > t2;
    case 1:
      return e2 <= t2 && i2 > t2;
    case 2:
      return i2 > t2;
    case 4:
      return true;
  }
}
function fh(s3, t2) {
  let e2 = s3.childBefore(t2);
  for (; e2; ) {
    let i2 = e2.lastChild;
    if (!i2 || i2.to != e2.to)
      break;
    i2.type.isError && i2.from == i2.to ? (s3 = e2, e2 = i2.prevSibling) : e2 = i2;
  }
  return s3;
}
function Ue$3(s3, t2, e2, i2) {
  for (var n2; s3.from == s3.to || (e2 < 1 ? s3.from >= t2 : s3.from > t2) || (e2 > -1 ? s3.to <= t2 : s3.to < t2); ) {
    let o2 = !i2 && s3 instanceof Zt && s3.index < 0 ? null : s3.parent;
    if (!o2)
      return s3;
    s3 = o2;
  }
  let r2 = i2 ? 0 : st.IgnoreOverlays;
  if (i2)
    for (let o2 = s3, l2 = o2.parent; l2; o2 = l2, l2 = o2.parent)
      o2 instanceof Zt && o2.index < 0 && ((n2 = l2.enter(t2, e2, r2)) === null || n2 === void 0 ? void 0 : n2.from) != o2.from && (s3 = l2);
  for (; ; ) {
    let o2 = s3.enter(t2, e2, r2);
    if (!o2)
      return s3;
    s3 = o2;
  }
}
class Zt {
  constructor(t2, e2, i2, n2) {
    this._tree = t2, this.from = e2, this.index = i2, this._parent = n2;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(t2, e2, i2, n2, r2 = 0) {
    for (let o2 = this; ; ) {
      for (let { children: l2, positions: h2 } = o2._tree, a2 = e2 > 0 ? l2.length : -1; t2 != a2; t2 += e2) {
        let c2 = l2[t2], f2 = h2[t2] + o2.from;
        if (ch(n2, i2, f2, f2 + c2.length)) {
          if (c2 instanceof Re$1) {
            if (r2 & st.ExcludeBuffers)
              continue;
            let u2 = c2.findChild(0, c2.buffer.length, e2, i2 - f2, n2);
            if (u2 > -1)
              return new ce$4(new td(o2, c2, t2, f2), null, u2);
          } else if (r2 & st.IncludeAnonymous || !c2.type.isAnonymous || er(c2)) {
            let u2;
            if (!(r2 & st.IgnoreMounts) && c2.props && (u2 = c2.prop(P$3.mounted)) && !u2.overlay)
              return new Zt(u2.tree, f2, t2, o2);
            let d2 = new Zt(c2, f2, t2, o2);
            return r2 & st.IncludeAnonymous || !d2.type.isAnonymous ? d2 : d2.nextChild(e2 < 0 ? c2.children.length - 1 : 0, e2, i2, n2);
          }
        }
      }
      if (r2 & st.IncludeAnonymous || !o2.type.isAnonymous || (o2.index >= 0 ? t2 = o2.index + e2 : t2 = e2 < 0 ? -1 : o2._parent._tree.children.length, o2 = o2._parent, !o2))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t2) {
    return this.nextChild(
      0,
      1,
      t2,
      2
      /* Side.After */
    );
  }
  childBefore(t2) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      t2,
      -2
      /* Side.Before */
    );
  }
  enter(t2, e2, i2 = 0) {
    let n2;
    if (!(i2 & st.IgnoreOverlays) && (n2 = this._tree.prop(P$3.mounted)) && n2.overlay) {
      let r2 = t2 - this.from;
      for (let { from: o2, to: l2 } of n2.overlay)
        if ((e2 > 0 ? o2 <= r2 : o2 < r2) && (e2 < 0 ? l2 >= r2 : l2 > r2))
          return new Zt(n2.tree, n2.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, t2, e2, i2);
  }
  nextSignificantParent() {
    let t2 = this;
    for (; t2.type.isAnonymous && t2._parent; )
      t2 = t2._parent;
    return t2;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  cursor(t2 = 0) {
    return new fn(this, t2);
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  resolve(t2, e2 = 0) {
    return Ue$3(this, t2, e2, false);
  }
  resolveInner(t2, e2 = 0) {
    return Ue$3(this, t2, e2, true);
  }
  enterUnfinishedNodesBefore(t2) {
    return fh(this, t2);
  }
  getChild(t2, e2 = null, i2 = null) {
    let n2 = an(this, t2, e2, i2);
    return n2.length ? n2[0] : null;
  }
  getChildren(t2, e2 = null, i2 = null) {
    return an(this, t2, e2, i2);
  }
  /// @internal
  toString() {
    return this._tree.toString();
  }
  get node() {
    return this;
  }
  matchContext(t2) {
    return cn(this, t2);
  }
}
function an(s3, t2, e2, i2) {
  let n2 = s3.cursor(), r2 = [];
  if (!n2.firstChild())
    return r2;
  if (e2 != null) {
    for (; !n2.type.is(e2); )
      if (!n2.nextSibling())
        return r2;
  }
  for (; ; ) {
    if (i2 != null && n2.type.is(i2))
      return r2;
    if (n2.type.is(t2) && r2.push(n2.node), !n2.nextSibling())
      return i2 == null ? r2 : [];
  }
}
function cn(s3, t2, e2 = t2.length - 1) {
  for (let i2 = s3.parent; e2 >= 0; i2 = i2.parent) {
    if (!i2)
      return false;
    if (!i2.type.isAnonymous) {
      if (t2[e2] && t2[e2] != i2.name)
        return false;
      e2--;
    }
  }
  return true;
}
class td {
  constructor(t2, e2, i2, n2) {
    this.parent = t2, this.buffer = e2, this.index = i2, this.start = n2;
  }
}
let ce$4 = class ce2 {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(t2, e2, i2) {
    this.context = t2, this._parent = e2, this.index = i2, this.type = t2.buffer.set.types[t2.buffer.buffer[i2]];
  }
  child(t2, e2, i2) {
    let { buffer: n2 } = this.context, r2 = n2.findChild(this.index + 4, n2.buffer[this.index + 3], t2, e2 - this.context.start, i2);
    return r2 < 0 ? null : new ce2(this.context, this, r2);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t2) {
    return this.child(
      1,
      t2,
      2
      /* Side.After */
    );
  }
  childBefore(t2) {
    return this.child(
      -1,
      t2,
      -2
      /* Side.Before */
    );
  }
  enter(t2, e2, i2 = 0) {
    if (i2 & st.ExcludeBuffers)
      return null;
    let { buffer: n2 } = this.context, r2 = n2.findChild(this.index + 4, n2.buffer[this.index + 3], e2 > 0 ? 1 : -1, t2 - this.context.start, e2);
    return r2 < 0 ? null : new ce2(this.context, this, r2);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(t2) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + t2,
      t2,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: t2 } = this.context, e2 = t2.buffer[this.index + 3];
    return e2 < (this._parent ? t2.buffer[this._parent.index + 3] : t2.buffer.length) ? new ce2(this.context, this._parent, e2) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: t2 } = this.context, e2 = this._parent ? this._parent.index + 4 : 0;
    return this.index == e2 ? this.externalSibling(-1) : new ce2(this.context, this._parent, t2.findChild(
      e2,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  cursor(t2 = 0) {
    return new fn(this, t2);
  }
  get tree() {
    return null;
  }
  toTree() {
    let t2 = [], e2 = [], { buffer: i2 } = this.context, n2 = this.index + 4, r2 = i2.buffer[this.index + 3];
    if (r2 > n2) {
      let o2 = i2.buffer[this.index + 1];
      t2.push(i2.slice(n2, r2, o2)), e2.push(0);
    }
    return new J$1(this.type, t2, e2, this.to - this.from);
  }
  resolve(t2, e2 = 0) {
    return Ue$3(this, t2, e2, false);
  }
  resolveInner(t2, e2 = 0) {
    return Ue$3(this, t2, e2, true);
  }
  enterUnfinishedNodesBefore(t2) {
    return fh(this, t2);
  }
  /// @internal
  toString() {
    return this.context.buffer.childString(this.index);
  }
  getChild(t2, e2 = null, i2 = null) {
    let n2 = an(this, t2, e2, i2);
    return n2.length ? n2[0] : null;
  }
  getChildren(t2, e2 = null, i2 = null) {
    return an(this, t2, e2, i2);
  }
  get node() {
    return this;
  }
  matchContext(t2) {
    return cn(this, t2);
  }
};
class fn {
  /// Shorthand for `.type.name`.
  get name() {
    return this.type.name;
  }
  /// @internal
  constructor(t2, e2 = 0) {
    if (this.mode = e2, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, t2 instanceof Zt)
      this.yieldNode(t2);
    else {
      this._tree = t2.context.parent, this.buffer = t2.context;
      for (let i2 = t2._parent; i2; i2 = i2._parent)
        this.stack.unshift(i2.index);
      this.bufferNode = t2, this.yieldBuf(t2.index);
    }
  }
  yieldNode(t2) {
    return t2 ? (this._tree = t2, this.type = t2.type, this.from = t2.from, this.to = t2.to, true) : false;
  }
  yieldBuf(t2, e2) {
    this.index = t2;
    let { start: i2, buffer: n2 } = this.buffer;
    return this.type = e2 || n2.set.types[n2.buffer[t2]], this.from = i2 + n2.buffer[t2 + 1], this.to = i2 + n2.buffer[t2 + 2], true;
  }
  yield(t2) {
    return t2 ? t2 instanceof Zt ? (this.buffer = null, this.yieldNode(t2)) : (this.buffer = t2.context, this.yieldBuf(t2.index, t2.type)) : false;
  }
  /// @internal
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /// @internal
  enterChild(t2, e2, i2) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(t2 < 0 ? this._tree._tree.children.length - 1 : 0, t2, e2, i2, this.mode));
    let { buffer: n2 } = this.buffer, r2 = n2.findChild(this.index + 4, n2.buffer[this.index + 3], t2, e2 - this.buffer.start, i2);
    return r2 < 0 ? false : (this.stack.push(this.index), this.yieldBuf(r2));
  }
  /// Move the cursor to this node's first child. When this returns
  /// false, the node has no child, and the cursor has not been moved.
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /// Move the cursor to this node's last child.
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /// Move the cursor to the first child that ends after `pos`.
  childAfter(t2) {
    return this.enterChild(
      1,
      t2,
      2
      /* Side.After */
    );
  }
  /// Move to the last child that starts before `pos`.
  childBefore(t2) {
    return this.enterChild(
      -1,
      t2,
      -2
      /* Side.Before */
    );
  }
  /// Move the cursor to the child around `pos`. If side is -1 the
  /// child may end at that position, when 1 it may start there. This
  /// will also enter [overlaid](#common.MountedTree.overlay)
  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  /// set to false.
  enter(t2, e2, i2 = this.mode) {
    return this.buffer ? i2 & st.ExcludeBuffers ? false : this.enterChild(1, t2, e2) : this.yield(this._tree.enter(t2, e2, i2));
  }
  /// Move to the node's parent node, if this isn't the top node.
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & st.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let t2 = this.mode & st.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(t2);
  }
  /// @internal
  sibling(t2) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + t2, t2, 0, 4, this.mode)) : false;
    let { buffer: e2 } = this.buffer, i2 = this.stack.length - 1;
    if (t2 < 0) {
      let n2 = i2 < 0 ? 0 : this.stack[i2] + 4;
      if (this.index != n2)
        return this.yieldBuf(e2.findChild(
          n2,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let n2 = e2.buffer[this.index + 3];
      if (n2 < (i2 < 0 ? e2.buffer.length : e2.buffer[this.stack[i2] + 3]))
        return this.yieldBuf(n2);
    }
    return i2 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + t2, t2, 0, 4, this.mode)) : false;
  }
  /// Move to this node's next sibling, if any.
  nextSibling() {
    return this.sibling(1);
  }
  /// Move to this node's previous sibling, if any.
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(t2) {
    let e2, i2, { buffer: n2 } = this;
    if (n2) {
      if (t2 > 0) {
        if (this.index < n2.buffer.buffer.length)
          return false;
      } else
        for (let r2 = 0; r2 < this.index; r2++)
          if (n2.buffer.buffer[r2 + 3] < this.index)
            return false;
      ({ index: e2, parent: i2 } = n2);
    } else
      ({ index: e2, _parent: i2 } = this._tree);
    for (; i2; { index: e2, _parent: i2 } = i2)
      if (e2 > -1)
        for (let r2 = e2 + t2, o2 = t2 < 0 ? -1 : i2._tree.children.length; r2 != o2; r2 += t2) {
          let l2 = i2._tree.children[r2];
          if (this.mode & st.IncludeAnonymous || l2 instanceof Re$1 || !l2.type.isAnonymous || er(l2))
            return false;
        }
    return true;
  }
  move(t2, e2) {
    if (e2 && this.enterChild(
      t2,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(t2))
        return true;
      if (this.atLastNode(t2) || !this.parent())
        return false;
    }
  }
  /// Move to the next node in a
  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  /// traversal, going from a node to its first child or, if the
  /// current node is empty or `enter` is false, its next sibling or
  /// the next sibling of the first parent node that has one.
  next(t2 = true) {
    return this.move(1, t2);
  }
  /// Move to the next node in a last-to-first pre-order traveral. A
  /// node is followed by its last child or, if it has none, its
  /// previous sibling or the previous sibling of the first parent
  /// node that has one.
  prev(t2 = true) {
    return this.move(-1, t2);
  }
  /// Move the cursor to the innermost node that covers `pos`. If
  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  /// it will enter nodes that start at `pos`.
  moveTo(t2, e2 = 0) {
    for (; (this.from == this.to || (e2 < 1 ? this.from >= t2 : this.from > t2) || (e2 > -1 ? this.to <= t2 : this.to < t2)) && this.parent(); )
      ;
    for (; this.enterChild(1, t2, e2); )
      ;
    return this;
  }
  /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
  /// position.
  get node() {
    if (!this.buffer)
      return this._tree;
    let t2 = this.bufferNode, e2 = null, i2 = 0;
    if (t2 && t2.context == this.buffer) {
      t:
        for (let n2 = this.index, r2 = this.stack.length; r2 >= 0; ) {
          for (let o2 = t2; o2; o2 = o2._parent)
            if (o2.index == n2) {
              if (n2 == this.index)
                return o2;
              e2 = o2, i2 = r2 + 1;
              break t;
            }
          n2 = this.stack[--r2];
        }
    }
    for (let n2 = i2; n2 < this.stack.length; n2++)
      e2 = new ce$4(this.buffer, e2, this.stack[n2]);
    return this.bufferNode = new ce$4(this.buffer, e2, this.index);
  }
  /// Get the [tree](#common.Tree) that represents the current node, if
  /// any. Will return null when the node is in a [tree
  /// buffer](#common.TreeBuffer).
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /// Iterate over the current node and all its descendants, calling
  /// `enter` when entering a node and `leave`, if given, when leaving
  /// one. When `enter` returns `false`, any children of that node are
  /// skipped, and `leave` isn't called for it.
  iterate(t2, e2) {
    for (let i2 = 0; ; ) {
      let n2 = false;
      if (this.type.isAnonymous || t2(this) !== false) {
        if (this.firstChild()) {
          i2++;
          continue;
        }
        this.type.isAnonymous || (n2 = true);
      }
      for (; n2 && e2 && e2(this), n2 = this.type.isAnonymous, !this.nextSibling(); ) {
        if (!i2)
          return;
        this.parent(), i2--, n2 = true;
      }
    }
  }
  /// Test whether the current node matches a given context—a sequence
  /// of direct parent node names. Empty strings in the context array
  /// are treated as wildcards.
  matchContext(t2) {
    if (!this.buffer)
      return cn(this.node, t2);
    let { buffer: e2 } = this.buffer, { types: i2 } = e2.set;
    for (let n2 = t2.length - 1, r2 = this.stack.length - 1; n2 >= 0; r2--) {
      if (r2 < 0)
        return cn(this.node, t2, n2);
      let o2 = i2[e2.buffer[this.stack[r2]]];
      if (!o2.isAnonymous) {
        if (t2[n2] && t2[n2] != o2.name)
          return false;
        n2--;
      }
    }
    return true;
  }
}
function er(s3) {
  return s3.children.some((t2) => t2 instanceof Re$1 || !t2.type.isAnonymous || er(t2));
}
function ed(s3) {
  var t2;
  let { buffer: e2, nodeSet: i2, maxBufferLength: n2 = ah, reused: r2 = [], minRepeatType: o2 = i2.types.length } = s3, l2 = Array.isArray(e2) ? new tr(e2, e2.length) : e2, h2 = i2.types, a2 = 0, c2 = 0;
  function f2(D2, B2, M2, V2, et) {
    let { id: I2, start: L2, end: K2, size: pt } = l2, Ot = c2;
    for (; pt < 0; )
      if (l2.next(), pt == -1) {
        let ie2 = r2[I2];
        M2.push(ie2), V2.push(L2 - D2);
        return;
      } else if (pt == -3) {
        a2 = I2;
        return;
      } else if (pt == -4) {
        c2 = I2;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${pt}`);
    let Le = h2[I2], ee2, Gt, fr = L2 - D2;
    if (K2 - L2 <= n2 && (Gt = w2(l2.pos - B2, et))) {
      let ie2 = new Uint16Array(Gt.size - Gt.skip), Mt = l2.pos - Gt.size, Ut = ie2.length;
      for (; l2.pos > Mt; )
        Ut = g2(Gt.start, ie2, Ut);
      ee2 = new Re$1(ie2, K2 - Gt.start, i2), fr = Gt.start - D2;
    } else {
      let ie2 = l2.pos - pt;
      l2.next();
      let Mt = [], Ut = [], ke2 = I2 >= o2 ? I2 : -1, Ee2 = 0, Si = K2;
      for (; l2.pos > ie2; )
        ke2 >= 0 && l2.id == ke2 && l2.size >= 0 ? (l2.end <= Si - n2 && (d2(Mt, Ut, L2, Ee2, l2.end, Si, ke2, Ot), Ee2 = Mt.length, Si = l2.end), l2.next()) : f2(L2, ie2, Mt, Ut, ke2);
      if (ke2 >= 0 && Ee2 > 0 && Ee2 < Mt.length && d2(Mt, Ut, L2, Ee2, L2, Si, ke2, Ot), Mt.reverse(), Ut.reverse(), ke2 > -1 && Ee2 > 0) {
        let ur = u2(Le);
        ee2 = ir(Le, Mt, Ut, 0, Mt.length, 0, K2 - L2, ur, ur);
      } else
        ee2 = p2(Le, Mt, Ut, K2 - L2, Ot - K2);
    }
    M2.push(ee2), V2.push(fr);
  }
  function u2(D2) {
    return (B2, M2, V2) => {
      let et = 0, I2 = B2.length - 1, L2, K2;
      if (I2 >= 0 && (L2 = B2[I2]) instanceof J$1) {
        if (!I2 && L2.type == D2 && L2.length == V2)
          return L2;
        (K2 = L2.prop(P$3.lookAhead)) && (et = M2[I2] + L2.length + K2);
      }
      return p2(D2, B2, M2, V2, et);
    };
  }
  function d2(D2, B2, M2, V2, et, I2, L2, K2) {
    let pt = [], Ot = [];
    for (; D2.length > V2; )
      pt.push(D2.pop()), Ot.push(B2.pop() + M2 - et);
    D2.push(p2(i2.types[L2], pt, Ot, I2 - et, K2 - I2)), B2.push(et - M2);
  }
  function p2(D2, B2, M2, V2, et = 0, I2) {
    if (a2) {
      let L2 = [P$3.contextHash, a2];
      I2 = I2 ? [L2].concat(I2) : [L2];
    }
    if (et > 25) {
      let L2 = [P$3.lookAhead, et];
      I2 = I2 ? [L2].concat(I2) : [L2];
    }
    return new J$1(D2, B2, M2, V2, I2);
  }
  function w2(D2, B2) {
    let M2 = l2.fork(), V2 = 0, et = 0, I2 = 0, L2 = M2.end - n2, K2 = { size: 0, start: 0, skip: 0 };
    t:
      for (let pt = M2.pos - D2; M2.pos > pt; ) {
        let Ot = M2.size;
        if (M2.id == B2 && Ot >= 0) {
          K2.size = V2, K2.start = et, K2.skip = I2, I2 += 4, V2 += 4, M2.next();
          continue;
        }
        let Le = M2.pos - Ot;
        if (Ot < 0 || Le < pt || M2.start < L2)
          break;
        let ee2 = M2.id >= o2 ? 4 : 0, Gt = M2.start;
        for (M2.next(); M2.pos > Le; ) {
          if (M2.size < 0)
            if (M2.size == -3)
              ee2 += 4;
            else
              break t;
          else
            M2.id >= o2 && (ee2 += 4);
          M2.next();
        }
        et = Gt, V2 += Ot, I2 += ee2;
      }
    return (B2 < 0 || V2 == D2) && (K2.size = V2, K2.start = et, K2.skip = I2), K2.size > 4 ? K2 : void 0;
  }
  function g2(D2, B2, M2) {
    let { id: V2, start: et, end: I2, size: L2 } = l2;
    if (l2.next(), L2 >= 0 && V2 < o2) {
      let K2 = M2;
      if (L2 > 4) {
        let pt = l2.pos - (L2 - 4);
        for (; l2.pos > pt; )
          M2 = g2(D2, B2, M2);
      }
      B2[--M2] = K2, B2[--M2] = I2 - D2, B2[--M2] = et - D2, B2[--M2] = V2;
    } else
      L2 == -3 ? a2 = V2 : L2 == -4 && (c2 = V2);
    return M2;
  }
  let y2 = [], O2 = [];
  for (; l2.pos > 0; )
    f2(s3.start || 0, s3.bufferStart || 0, y2, O2, -1);
  let S2 = (t2 = s3.length) !== null && t2 !== void 0 ? t2 : y2.length ? O2[0] + y2[0].length : 0;
  return new J$1(h2[s3.topID], y2.reverse(), O2.reverse(), S2);
}
const fo = /* @__PURE__ */ new WeakMap();
function Qi(s3, t2) {
  if (!s3.isAnonymous || t2 instanceof Re$1 || t2.type != s3)
    return 1;
  let e2 = fo.get(t2);
  if (e2 == null) {
    e2 = 1;
    for (let i2 of t2.children) {
      if (i2.type != s3 || !(i2 instanceof J$1)) {
        e2 = 1;
        break;
      }
      e2 += Qi(s3, i2);
    }
    fo.set(t2, e2);
  }
  return e2;
}
function ir(s3, t2, e2, i2, n2, r2, o2, l2, h2) {
  let a2 = 0;
  for (let p2 = i2; p2 < n2; p2++)
    a2 += Qi(s3, t2[p2]);
  let c2 = Math.ceil(
    a2 * 1.5 / 8
    /* Balance.BranchFactor */
  ), f2 = [], u2 = [];
  function d2(p2, w2, g2, y2, O2) {
    for (let S2 = g2; S2 < y2; ) {
      let D2 = S2, B2 = w2[S2], M2 = Qi(s3, p2[S2]);
      for (S2++; S2 < y2; S2++) {
        let V2 = Qi(s3, p2[S2]);
        if (M2 + V2 >= c2)
          break;
        M2 += V2;
      }
      if (S2 == D2 + 1) {
        if (M2 > c2) {
          let V2 = p2[D2];
          d2(V2.children, V2.positions, 0, V2.children.length, w2[D2] + O2);
          continue;
        }
        f2.push(p2[D2]);
      } else {
        let V2 = w2[S2 - 1] + p2[S2 - 1].length - B2;
        f2.push(ir(s3, p2, w2, D2, S2, B2, V2, null, h2));
      }
      u2.push(B2 + O2 - r2);
    }
  }
  return d2(t2, e2, i2, n2, 0), (l2 || h2)(f2, u2, o2);
}
let Oe$2 = class Oe2 {
  /// Construct a tree fragment. You'll usually want to use
  /// [`addTree`](#common.TreeFragment^addTree) and
  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  /// calling this directly.
  constructor(t2, e2, i2, n2, r2 = false, o2 = false) {
    this.from = t2, this.to = e2, this.tree = i2, this.offset = n2, this.open = (r2 ? 1 : 0) | (o2 ? 2 : 0);
  }
  /// Whether the start of the fragment represents the start of a
  /// parse, or the end of a change. (In the second case, it may not
  /// be safe to reuse some nodes at the start, depending on the
  /// parsing algorithm.)
  get openStart() {
    return (this.open & 1) > 0;
  }
  /// Whether the end of the fragment represents the end of a
  /// full-document parse, or the start of a change.
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /// Create a set of fragments from a freshly parsed tree, or update
  /// an existing set of fragments by replacing the ones that overlap
  /// with a tree with content from the new tree. When `partial` is
  /// true, the parse is treated as incomplete, and the resulting
  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  /// true.
  static addTree(t2, e2 = [], i2 = false) {
    let n2 = [new Oe2(0, t2.length, t2, 0, false, i2)];
    for (let r2 of e2)
      r2.to > t2.length && n2.push(r2);
    return n2;
  }
  /// Apply a set of edits to an array of fragments, removing or
  /// splitting fragments as necessary to remove edited ranges, and
  /// adjusting offsets for fragments that moved.
  static applyChanges(t2, e2, i2 = 128) {
    if (!e2.length)
      return t2;
    let n2 = [], r2 = 1, o2 = t2.length ? t2[0] : null;
    for (let l2 = 0, h2 = 0, a2 = 0; ; l2++) {
      let c2 = l2 < e2.length ? e2[l2] : null, f2 = c2 ? c2.fromA : 1e9;
      if (f2 - h2 >= i2)
        for (; o2 && o2.from < f2; ) {
          let u2 = o2;
          if (h2 >= u2.from || f2 <= u2.to || a2) {
            let d2 = Math.max(u2.from, h2) - a2, p2 = Math.min(u2.to, f2) - a2;
            u2 = d2 >= p2 ? null : new Oe2(d2, p2, u2.tree, u2.offset + a2, l2 > 0, !!c2);
          }
          if (u2 && n2.push(u2), o2.to > f2)
            break;
          o2 = r2 < t2.length ? t2[r2++] : null;
        }
      if (!c2)
        break;
      h2 = c2.toA, a2 = c2.toA - c2.toB;
    }
    return n2;
  }
};
class uh {
  /// Start a parse, returning a [partial parse](#common.PartialParse)
  /// object. [`fragments`](#common.TreeFragment) can be passed in to
  /// make the parse incremental.
  ///
  /// By default, the entire input is parsed. You can pass `ranges`,
  /// which should be a sorted array of non-empty, non-overlapping
  /// ranges, to parse only those ranges. The tree returned in that
  /// case will start at `ranges[0].from`.
  startParse(t2, e2, i2) {
    return typeof t2 == "string" && (t2 = new id(t2)), i2 = i2 ? i2.length ? i2.map((n2) => new qn(n2.from, n2.to)) : [new qn(0, 0)] : [new qn(0, t2.length)], this.createParse(t2, e2 || [], i2);
  }
  /// Run a full parse, returning the resulting tree.
  parse(t2, e2, i2) {
    let n2 = this.startParse(t2, e2, i2);
    for (; ; ) {
      let r2 = n2.advance();
      if (r2)
        return r2;
    }
  }
}
class id {
  constructor(t2) {
    this.string = t2;
  }
  get length() {
    return this.string.length;
  }
  chunk(t2) {
    return this.string.slice(t2);
  }
  get lineChunks() {
    return false;
  }
  read(t2, e2) {
    return this.string.slice(t2, e2);
  }
}
new P$3({ perNode: true });
let nd = 0;
class It {
  /// @internal
  constructor(t2, e2, i2) {
    this.set = t2, this.base = e2, this.modified = i2, this.id = nd++;
  }
  /// Define a new tag. If `parent` is given, the tag is treated as a
  /// sub-tag of that parent, and
  /// [highlighters](#highlight.tagHighlighter) that don't mention
  /// this tag will try to fall back to the parent tag (or grandparent
  /// tag, etc).
  static define(t2) {
    if (t2 != null && t2.base)
      throw new Error("Can not derive from a modified tag");
    let e2 = new It([], null, []);
    if (e2.set.push(e2), t2)
      for (let i2 of t2.set)
        e2.set.push(i2);
    return e2;
  }
  /// Define a tag _modifier_, which is a function that, given a tag,
  /// will return a tag that is a subtag of the original. Applying the
  /// same modifier to a twice tag will return the same value (`m1(t1)
  /// == m1(t1)`) and applying multiple modifiers will, regardless or
  /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  ///
  /// When multiple modifiers are applied to a given base tag, each
  /// smaller set of modifiers is registered as a parent, so that for
  /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  /// `m1(m3(t1)`, and so on.
  static defineModifier() {
    let t2 = new un();
    return (e2) => e2.modified.indexOf(t2) > -1 ? e2 : un.get(e2.base || e2, e2.modified.concat(t2).sort((i2, n2) => i2.id - n2.id));
  }
}
let sd = 0;
class un {
  constructor() {
    this.instances = [], this.id = sd++;
  }
  static get(t2, e2) {
    if (!e2.length)
      return t2;
    let i2 = e2[0].instances.find((l2) => l2.base == t2 && rd(e2, l2.modified));
    if (i2)
      return i2;
    let n2 = [], r2 = new It(n2, t2, e2);
    for (let l2 of e2)
      l2.instances.push(r2);
    let o2 = od(e2);
    for (let l2 of t2.set)
      if (!l2.modified.length)
        for (let h2 of o2)
          n2.push(un.get(l2, h2));
    return r2;
  }
}
function rd(s3, t2) {
  return s3.length == t2.length && s3.every((e2, i2) => e2 == t2[i2]);
}
function od(s3) {
  let t2 = [[]];
  for (let e2 = 0; e2 < s3.length; e2++)
    for (let i2 = 0, n2 = t2.length; i2 < n2; i2++)
      t2.push(t2[i2].concat(s3[e2]));
  return t2.sort((e2, i2) => i2.length - e2.length);
}
function dh(s3) {
  let t2 = /* @__PURE__ */ Object.create(null);
  for (let e2 in s3) {
    let i2 = s3[e2];
    Array.isArray(i2) || (i2 = [i2]);
    for (let n2 of e2.split(" "))
      if (n2) {
        let r2 = [], o2 = 2, l2 = n2;
        for (let f2 = 0; ; ) {
          if (l2 == "..." && f2 > 0 && f2 + 3 == n2.length) {
            o2 = 1;
            break;
          }
          let u2 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(l2);
          if (!u2)
            throw new RangeError("Invalid path: " + n2);
          if (r2.push(u2[0] == "*" ? "" : u2[0][0] == '"' ? JSON.parse(u2[0]) : u2[0]), f2 += u2[0].length, f2 == n2.length)
            break;
          let d2 = n2[f2++];
          if (f2 == n2.length && d2 == "!") {
            o2 = 0;
            break;
          }
          if (d2 != "/")
            throw new RangeError("Invalid path: " + n2);
          l2 = n2.slice(f2);
        }
        let h2 = r2.length - 1, a2 = r2[h2];
        if (!a2)
          throw new RangeError("Invalid path: " + n2);
        let c2 = new dn(i2, o2, h2 > 0 ? r2.slice(0, h2) : null);
        t2[a2] = c2.sort(t2[a2]);
      }
  }
  return ph.add(t2);
}
const ph = new P$3();
class dn {
  constructor(t2, e2, i2, n2) {
    this.tags = t2, this.mode = e2, this.context = i2, this.next = n2;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(t2) {
    return !t2 || t2.depth < this.depth ? (this.next = t2, this) : (t2.next = this.sort(t2.next), t2);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
dn.empty = new dn([], 2, null);
function gh(s3, t2) {
  let e2 = /* @__PURE__ */ Object.create(null);
  for (let r2 of s3)
    if (!Array.isArray(r2.tag))
      e2[r2.tag.id] = r2.class;
    else
      for (let o2 of r2.tag)
        e2[o2.id] = r2.class;
  let { scope: i2, all: n2 = null } = t2 || {};
  return {
    style: (r2) => {
      let o2 = n2;
      for (let l2 of r2)
        for (let h2 of l2.set) {
          let a2 = e2[h2.id];
          if (a2) {
            o2 = o2 ? o2 + " " + a2 : a2;
            break;
          }
        }
      return o2;
    },
    scope: i2
  };
}
function ld(s3, t2) {
  let e2 = null;
  for (let i2 of s3) {
    let n2 = i2.style(t2);
    n2 && (e2 = e2 ? e2 + " " + n2 : n2);
  }
  return e2;
}
function hd(s3, t2, e2, i2 = 0, n2 = s3.length) {
  let r2 = new ad(i2, Array.isArray(t2) ? t2 : [t2], e2);
  r2.highlightRange(s3.cursor(), i2, n2, "", r2.highlighters), r2.flush(n2);
}
class ad {
  constructor(t2, e2, i2) {
    this.at = t2, this.highlighters = e2, this.span = i2, this.class = "";
  }
  startSpan(t2, e2) {
    e2 != this.class && (this.flush(t2), t2 > this.at && (this.at = t2), this.class = e2);
  }
  flush(t2) {
    t2 > this.at && this.class && this.span(this.at, t2, this.class);
  }
  highlightRange(t2, e2, i2, n2, r2) {
    let { type: o2, from: l2, to: h2 } = t2;
    if (l2 >= i2 || h2 <= e2)
      return;
    o2.isTop && (r2 = this.highlighters.filter((d2) => !d2.scope || d2.scope(o2)));
    let a2 = n2, c2 = cd(t2) || dn.empty, f2 = ld(r2, c2.tags);
    if (f2 && (a2 && (a2 += " "), a2 += f2, c2.mode == 1 && (n2 += (n2 ? " " : "") + f2)), this.startSpan(t2.from, a2), c2.opaque)
      return;
    let u2 = t2.tree && t2.tree.prop(P$3.mounted);
    if (u2 && u2.overlay) {
      let d2 = t2.node.enter(u2.overlay[0].from + l2, 1), p2 = this.highlighters.filter((g2) => !g2.scope || g2.scope(u2.tree.type)), w2 = t2.firstChild();
      for (let g2 = 0, y2 = l2; ; g2++) {
        let O2 = g2 < u2.overlay.length ? u2.overlay[g2] : null, S2 = O2 ? O2.from + l2 : h2, D2 = Math.max(e2, y2), B2 = Math.min(i2, S2);
        if (D2 < B2 && w2)
          for (; t2.from < B2 && (this.highlightRange(t2, D2, B2, n2, r2), this.startSpan(Math.min(B2, t2.to), a2), !(t2.to >= S2 || !t2.nextSibling())); )
            ;
        if (!O2 || S2 > i2)
          break;
        y2 = O2.to + l2, y2 > e2 && (this.highlightRange(d2.cursor(), Math.max(e2, O2.from + l2), Math.min(i2, y2), n2, p2), this.startSpan(y2, a2));
      }
      w2 && t2.parent();
    } else if (t2.firstChild()) {
      do
        if (!(t2.to <= e2)) {
          if (t2.from >= i2)
            break;
          this.highlightRange(t2, e2, i2, n2, r2), this.startSpan(Math.min(i2, t2.to), a2);
        }
      while (t2.nextSibling());
      t2.parent();
    }
  }
}
function cd(s3) {
  let t2 = s3.type.prop(ph);
  for (; t2 && t2.context && !s3.matchContext(t2.context); )
    t2 = t2.next;
  return t2 || null;
}
const k$2 = It.define, Ii = k$2(), ne$1 = k$2(), uo = k$2(ne$1), po = k$2(ne$1), se = k$2(), Hi = k$2(se), Kn = k$2(se), Vt = k$2(), xe$2 = k$2(Vt), Et = k$2(), Nt = k$2(), Es = k$2(), ei = k$2(Es), $i = k$2(), m$5 = {
  /// A comment.
  comment: Ii,
  /// A line [comment](#highlight.tags.comment).
  lineComment: k$2(Ii),
  /// A block [comment](#highlight.tags.comment).
  blockComment: k$2(Ii),
  /// A documentation [comment](#highlight.tags.comment).
  docComment: k$2(Ii),
  /// Any kind of identifier.
  name: ne$1,
  /// The [name](#highlight.tags.name) of a variable.
  variableName: k$2(ne$1),
  /// A type [name](#highlight.tags.name).
  typeName: uo,
  /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  tagName: k$2(uo),
  /// A property or field [name](#highlight.tags.name).
  propertyName: po,
  /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  attributeName: k$2(po),
  /// The [name](#highlight.tags.name) of a class.
  className: k$2(ne$1),
  /// A label [name](#highlight.tags.name).
  labelName: k$2(ne$1),
  /// A namespace [name](#highlight.tags.name).
  namespace: k$2(ne$1),
  /// The [name](#highlight.tags.name) of a macro.
  macroName: k$2(ne$1),
  /// A literal value.
  literal: se,
  /// A string [literal](#highlight.tags.literal).
  string: Hi,
  /// A documentation [string](#highlight.tags.string).
  docString: k$2(Hi),
  /// A character literal (subtag of [string](#highlight.tags.string)).
  character: k$2(Hi),
  /// An attribute value (subtag of [string](#highlight.tags.string)).
  attributeValue: k$2(Hi),
  /// A number [literal](#highlight.tags.literal).
  number: Kn,
  /// An integer [number](#highlight.tags.number) literal.
  integer: k$2(Kn),
  /// A floating-point [number](#highlight.tags.number) literal.
  float: k$2(Kn),
  /// A boolean [literal](#highlight.tags.literal).
  bool: k$2(se),
  /// Regular expression [literal](#highlight.tags.literal).
  regexp: k$2(se),
  /// An escape [literal](#highlight.tags.literal), for example a
  /// backslash escape in a string.
  escape: k$2(se),
  /// A color [literal](#highlight.tags.literal).
  color: k$2(se),
  /// A URL [literal](#highlight.tags.literal).
  url: k$2(se),
  /// A language keyword.
  keyword: Et,
  /// The [keyword](#highlight.tags.keyword) for the self or this
  /// object.
  self: k$2(Et),
  /// The [keyword](#highlight.tags.keyword) for null.
  null: k$2(Et),
  /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
  atom: k$2(Et),
  /// A [keyword](#highlight.tags.keyword) that represents a unit.
  unit: k$2(Et),
  /// A modifier [keyword](#highlight.tags.keyword).
  modifier: k$2(Et),
  /// A [keyword](#highlight.tags.keyword) that acts as an operator.
  operatorKeyword: k$2(Et),
  /// A control-flow related [keyword](#highlight.tags.keyword).
  controlKeyword: k$2(Et),
  /// A [keyword](#highlight.tags.keyword) that defines something.
  definitionKeyword: k$2(Et),
  /// A [keyword](#highlight.tags.keyword) related to defining or
  /// interfacing with modules.
  moduleKeyword: k$2(Et),
  /// An operator.
  operator: Nt,
  /// An [operator](#highlight.tags.operator) that dereferences something.
  derefOperator: k$2(Nt),
  /// Arithmetic-related [operator](#highlight.tags.operator).
  arithmeticOperator: k$2(Nt),
  /// Logical [operator](#highlight.tags.operator).
  logicOperator: k$2(Nt),
  /// Bit [operator](#highlight.tags.operator).
  bitwiseOperator: k$2(Nt),
  /// Comparison [operator](#highlight.tags.operator).
  compareOperator: k$2(Nt),
  /// [Operator](#highlight.tags.operator) that updates its operand.
  updateOperator: k$2(Nt),
  /// [Operator](#highlight.tags.operator) that defines something.
  definitionOperator: k$2(Nt),
  /// Type-related [operator](#highlight.tags.operator).
  typeOperator: k$2(Nt),
  /// Control-flow [operator](#highlight.tags.operator).
  controlOperator: k$2(Nt),
  /// Program or markup punctuation.
  punctuation: Es,
  /// [Punctuation](#highlight.tags.punctuation) that separates
  /// things.
  separator: k$2(Es),
  /// Bracket-style [punctuation](#highlight.tags.punctuation).
  bracket: ei,
  /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  /// tokens).
  angleBracket: k$2(ei),
  /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  /// tokens).
  squareBracket: k$2(ei),
  /// Parentheses (usually `(` and `)` tokens). Subtag of
  /// [bracket](#highlight.tags.bracket).
  paren: k$2(ei),
  /// Braces (usually `{` and `}` tokens). Subtag of
  /// [bracket](#highlight.tags.bracket).
  brace: k$2(ei),
  /// Content, for example plain text in XML or markup documents.
  content: Vt,
  /// [Content](#highlight.tags.content) that represents a heading.
  heading: xe$2,
  /// A level 1 [heading](#highlight.tags.heading).
  heading1: k$2(xe$2),
  /// A level 2 [heading](#highlight.tags.heading).
  heading2: k$2(xe$2),
  /// A level 3 [heading](#highlight.tags.heading).
  heading3: k$2(xe$2),
  /// A level 4 [heading](#highlight.tags.heading).
  heading4: k$2(xe$2),
  /// A level 5 [heading](#highlight.tags.heading).
  heading5: k$2(xe$2),
  /// A level 6 [heading](#highlight.tags.heading).
  heading6: k$2(xe$2),
  /// A prose separator (such as a horizontal rule).
  contentSeparator: k$2(Vt),
  /// [Content](#highlight.tags.content) that represents a list.
  list: k$2(Vt),
  /// [Content](#highlight.tags.content) that represents a quote.
  quote: k$2(Vt),
  /// [Content](#highlight.tags.content) that is emphasized.
  emphasis: k$2(Vt),
  /// [Content](#highlight.tags.content) that is styled strong.
  strong: k$2(Vt),
  /// [Content](#highlight.tags.content) that is part of a link.
  link: k$2(Vt),
  /// [Content](#highlight.tags.content) that is styled as code or
  /// monospace.
  monospace: k$2(Vt),
  /// [Content](#highlight.tags.content) that has a strike-through
  /// style.
  strikethrough: k$2(Vt),
  /// Inserted text in a change-tracking format.
  inserted: k$2(),
  /// Deleted text.
  deleted: k$2(),
  /// Changed text.
  changed: k$2(),
  /// An invalid or unsyntactic element.
  invalid: k$2(),
  /// Metadata or meta-instruction.
  meta: $i,
  /// [Metadata](#highlight.tags.meta) that applies to the entire
  /// document.
  documentMeta: k$2($i),
  /// [Metadata](#highlight.tags.meta) that annotates or adds
  /// attributes to a given syntactic element.
  annotation: k$2($i),
  /// Processing instruction or preprocessor directive. Subtag of
  /// [meta](#highlight.tags.meta).
  processingInstruction: k$2($i),
  /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
  /// given element is being defined. Expected to be used with the
  /// various [name](#highlight.tags.name) tags.
  definition: It.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) that indicates that
  /// something is constant. Mostly expected to be used with
  /// [variable names](#highlight.tags.variableName).
  constant: It.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
  /// a [variable](#highlight.tags.variableName) or [property
  /// name](#highlight.tags.propertyName) is being called or defined
  /// as a function.
  function: It.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
  /// [names](#highlight.tags.name) to indicate that they belong to
  /// the language's standard environment.
  standard: It.defineModifier(),
  /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
  /// [names](#highlight.tags.name) is local to some scope.
  local: It.defineModifier(),
  /// A generic variant [modifier](#highlight.Tag^defineModifier) that
  /// can be used to tag language-specific alternative variants of
  /// some common tag. It is recommended for themes to define special
  /// forms of at least the [string](#highlight.tags.string) and
  /// [variable name](#highlight.tags.variableName) tags, since those
  /// come up a lot.
  special: It.defineModifier()
};
gh([
  { tag: m$5.link, class: "tok-link" },
  { tag: m$5.heading, class: "tok-heading" },
  { tag: m$5.emphasis, class: "tok-emphasis" },
  { tag: m$5.strong, class: "tok-strong" },
  { tag: m$5.keyword, class: "tok-keyword" },
  { tag: m$5.atom, class: "tok-atom" },
  { tag: m$5.bool, class: "tok-bool" },
  { tag: m$5.url, class: "tok-url" },
  { tag: m$5.labelName, class: "tok-labelName" },
  { tag: m$5.inserted, class: "tok-inserted" },
  { tag: m$5.deleted, class: "tok-deleted" },
  { tag: m$5.literal, class: "tok-literal" },
  { tag: m$5.string, class: "tok-string" },
  { tag: m$5.number, class: "tok-number" },
  { tag: [m$5.regexp, m$5.escape, m$5.special(m$5.string)], class: "tok-string2" },
  { tag: m$5.variableName, class: "tok-variableName" },
  { tag: m$5.local(m$5.variableName), class: "tok-variableName tok-local" },
  { tag: m$5.definition(m$5.variableName), class: "tok-variableName tok-definition" },
  { tag: m$5.special(m$5.variableName), class: "tok-variableName2" },
  { tag: m$5.definition(m$5.propertyName), class: "tok-propertyName tok-definition" },
  { tag: m$5.typeName, class: "tok-typeName" },
  { tag: m$5.namespace, class: "tok-namespace" },
  { tag: m$5.className, class: "tok-className" },
  { tag: m$5.macroName, class: "tok-macroName" },
  { tag: m$5.propertyName, class: "tok-propertyName" },
  { tag: m$5.operator, class: "tok-operator" },
  { tag: m$5.comment, class: "tok-comment" },
  { tag: m$5.meta, class: "tok-meta" },
  { tag: m$5.invalid, class: "tok-invalid" },
  { tag: m$5.punctuation, class: "tok-punctuation" }
]);
var Gn;
const mi = /* @__PURE__ */ new P$3();
function fd(s3) {
  return v$4.define({
    combine: s3 ? (t2) => t2.concat(s3) : void 0
  });
}
class Tt {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(t2, e2, i2 = [], n2 = "") {
    this.data = t2, this.name = n2, N$4.prototype.hasOwnProperty("tree") || Object.defineProperty(N$4.prototype, "tree", { get() {
      return St(this);
    } }), this.parser = e2, this.extension = [
      we$1.of(this),
      N$4.languageData.of((r2, o2, l2) => r2.facet(go(r2, o2, l2)))
    ].concat(i2);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(t2, e2, i2 = -1) {
    return go(t2, e2, i2) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(t2) {
    let e2 = t2.facet(we$1);
    if ((e2 == null ? void 0 : e2.data) == this.data)
      return [{ from: 0, to: t2.doc.length }];
    if (!e2 || !e2.allowsNesting)
      return [];
    let i2 = [], n2 = (r2, o2) => {
      if (r2.prop(mi) == this.data) {
        i2.push({ from: o2, to: o2 + r2.length });
        return;
      }
      let l2 = r2.prop(P$3.mounted);
      if (l2) {
        if (l2.tree.prop(mi) == this.data) {
          if (l2.overlay)
            for (let h2 of l2.overlay)
              i2.push({ from: h2.from + o2, to: h2.to + o2 });
          else
            i2.push({ from: o2, to: o2 + r2.length });
          return;
        } else if (l2.overlay) {
          let h2 = i2.length;
          if (n2(l2.tree, l2.overlay[0].from + o2), i2.length > h2)
            return;
        }
      }
      for (let h2 = 0; h2 < r2.children.length; h2++) {
        let a2 = r2.children[h2];
        a2 instanceof J$1 && n2(a2, r2.positions[h2] + o2);
      }
    };
    return n2(St(t2), 0), i2;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
}
Tt.setState = /* @__PURE__ */ F$4.define();
function go(s3, t2, e2) {
  let i2 = s3.facet(we$1);
  if (!i2)
    return null;
  let n2 = i2.data;
  if (i2.allowsNesting)
    for (let r2 = St(s3).topNode; r2; r2 = r2.enter(t2, e2, st.ExcludeBuffers))
      n2 = r2.type.prop(mi) || n2;
  return n2;
}
class pn extends Tt {
  constructor(t2, e2, i2) {
    super(t2, e2, [], i2), this.parser = e2;
  }
  /**
  Define a language from a parser.
  */
  static define(t2) {
    let e2 = fd(t2.languageData);
    return new pn(e2, t2.parser.configure({
      props: [mi.add((i2) => i2.isTop ? e2 : void 0)]
    }), t2.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(t2, e2) {
    return new pn(this.data, this.parser.configure(t2), e2 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function St(s3) {
  let t2 = s3.field(Tt.state, false);
  return t2 ? t2.tree : J$1.empty;
}
class ud {
  constructor(t2, e2 = t2.length) {
    this.doc = t2, this.length = e2, this.cursorPos = 0, this.string = "", this.cursor = t2.iter();
  }
  syncTo(t2) {
    return this.string = this.cursor.next(t2 - this.cursorPos).value, this.cursorPos = t2 + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(t2) {
    return this.syncTo(t2), this.string;
  }
  get lineChunks() {
    return true;
  }
  read(t2, e2) {
    let i2 = this.cursorPos - this.string.length;
    return t2 < i2 || e2 >= this.cursorPos ? this.doc.sliceString(t2, e2) : this.string.slice(t2 - i2, e2 - i2);
  }
}
let ii = null;
class gn {
  constructor(t2, e2, i2 = [], n2, r2, o2, l2, h2) {
    this.parser = t2, this.state = e2, this.fragments = i2, this.tree = n2, this.treeLen = r2, this.viewport = o2, this.skipped = l2, this.scheduleOn = h2, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(t2, e2, i2) {
    return new gn(t2, e2, [], J$1.empty, 0, i2, [], null);
  }
  startParse() {
    return this.parser.startParse(new ud(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(t2, e2) {
    return e2 != null && e2 >= this.state.doc.length && (e2 = void 0), this.tree != J$1.empty && this.isDone(e2 ?? this.state.doc.length) ? (this.takeTree(), true) : this.withContext(() => {
      var i2;
      if (typeof t2 == "number") {
        let n2 = Date.now() + t2;
        t2 = () => Date.now() > n2;
      }
      for (this.parse || (this.parse = this.startParse()), e2 != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > e2) && e2 < this.state.doc.length && this.parse.stopAt(e2); ; ) {
        let n2 = this.parse.advance();
        if (n2)
          if (this.fragments = this.withoutTempSkipped(Oe$2.addTree(n2, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i2 = this.parse.stoppedAt) !== null && i2 !== void 0 ? i2 : this.state.doc.length, this.tree = n2, this.parse = null, this.treeLen < (e2 ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        if (t2())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let t2, e2;
    this.parse && (t2 = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > t2) && this.parse.stopAt(t2), this.withContext(() => {
      for (; !(e2 = this.parse.advance()); )
        ;
    }), this.treeLen = t2, this.tree = e2, this.fragments = this.withoutTempSkipped(Oe$2.addTree(this.tree, this.fragments, true)), this.parse = null);
  }
  withContext(t2) {
    let e2 = ii;
    ii = this;
    try {
      return t2();
    } finally {
      ii = e2;
    }
  }
  withoutTempSkipped(t2) {
    for (let e2; e2 = this.tempSkipped.pop(); )
      t2 = mo(t2, e2.from, e2.to);
    return t2;
  }
  /**
  @internal
  */
  changes(t2, e2) {
    let { fragments: i2, tree: n2, treeLen: r2, viewport: o2, skipped: l2 } = this;
    if (this.takeTree(), !t2.empty) {
      let h2 = [];
      if (t2.iterChangedRanges((a2, c2, f2, u2) => h2.push({ fromA: a2, toA: c2, fromB: f2, toB: u2 })), i2 = Oe$2.applyChanges(i2, h2), n2 = J$1.empty, r2 = 0, o2 = { from: t2.mapPos(o2.from, -1), to: t2.mapPos(o2.to, 1) }, this.skipped.length) {
        l2 = [];
        for (let a2 of this.skipped) {
          let c2 = t2.mapPos(a2.from, 1), f2 = t2.mapPos(a2.to, -1);
          c2 < f2 && l2.push({ from: c2, to: f2 });
        }
      }
    }
    return new gn(this.parser, e2, i2, n2, r2, o2, l2, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(t2) {
    if (this.viewport.from == t2.from && this.viewport.to == t2.to)
      return false;
    this.viewport = t2;
    let e2 = this.skipped.length;
    for (let i2 = 0; i2 < this.skipped.length; i2++) {
      let { from: n2, to: r2 } = this.skipped[i2];
      n2 < t2.to && r2 > t2.from && (this.fragments = mo(this.fragments, n2, r2), this.skipped.splice(i2--, 1));
    }
    return this.skipped.length >= e2 ? false : (this.reset(), true);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(t2, e2) {
    this.skipped.push({ from: t2, to: e2 });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(t2) {
    return new class extends uh {
      createParse(e2, i2, n2) {
        let r2 = n2[0].from, o2 = n2[n2.length - 1].to;
        return {
          parsedPos: r2,
          advance() {
            let h2 = ii;
            if (h2) {
              for (let a2 of n2)
                h2.tempSkipped.push(a2);
              t2 && (h2.scheduleOn = h2.scheduleOn ? Promise.all([h2.scheduleOn, t2]) : t2);
            }
            return this.parsedPos = o2, new J$1(yt.none, [], [], o2 - r2);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(t2) {
    t2 = Math.min(t2, this.state.doc.length);
    let e2 = this.fragments;
    return this.treeLen >= t2 && e2.length && e2[0].from == 0 && e2[0].to >= t2;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return ii;
  }
}
function mo(s3, t2, e2) {
  return Oe$2.applyChanges(s3, [{ fromA: t2, toA: e2, fromB: t2, toB: e2 }]);
}
let Qe$1 = class Qe2 {
  constructor(t2) {
    this.context = t2, this.tree = t2.tree;
  }
  apply(t2) {
    if (!t2.docChanged && this.tree == this.context.tree)
      return this;
    let e2 = this.context.changes(t2.changes, t2.state), i2 = this.context.treeLen == t2.startState.doc.length ? void 0 : Math.max(t2.changes.mapPos(this.context.treeLen), e2.viewport.to);
    return e2.work(20, i2) || e2.takeTree(), new Qe2(e2);
  }
  static init(t2) {
    let e2 = Math.min(3e3, t2.doc.length), i2 = gn.create(t2.facet(we$1).parser, t2, { from: 0, to: e2 });
    return i2.work(20, e2) || i2.takeTree(), new Qe2(i2);
  }
};
Tt.state = /* @__PURE__ */ Bt.define({
  create: Qe$1.init,
  update(s3, t2) {
    for (let e2 of t2.effects)
      if (e2.is(Tt.setState))
        return e2.value;
    return t2.startState.facet(we$1) != t2.state.facet(we$1) ? Qe$1.init(t2.state) : s3.apply(t2);
  }
});
let mh = (s3) => {
  let t2 = setTimeout(
    () => s3(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(t2);
};
typeof requestIdleCallback < "u" && (mh = (s3) => {
  let t2 = -1, e2 = setTimeout(
    () => {
      t2 = requestIdleCallback(s3, {
        timeout: 500 - 100
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => t2 < 0 ? clearTimeout(e2) : cancelIdleCallback(t2);
});
const Un = typeof navigator < "u" && (!((Gn = navigator.scheduling) === null || Gn === void 0) && Gn.isInputPending) ? () => navigator.scheduling.isInputPending() : null, dd = /* @__PURE__ */ wt.fromClass(class {
  constructor(t2) {
    this.view = t2, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(t2) {
    let e2 = this.view.state.field(Tt.state).context;
    (e2.updateViewport(t2.view.viewport) || this.view.viewport.to > e2.treeLen) && this.scheduleWork(), t2.docChanged && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(e2);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: t2 } = this.view, e2 = t2.field(Tt.state);
    (e2.tree != e2.context.tree || !e2.context.isDone(t2.doc.length)) && (this.working = mh(this.work));
  }
  work(t2) {
    this.working = null;
    let e2 = Date.now();
    if (this.chunkEnd < e2 && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = e2 + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i2, viewport: { to: n2 } } = this.view, r2 = i2.field(Tt.state);
    if (r2.tree == r2.context.tree && r2.context.isDone(
      n2 + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let o2 = Date.now() + Math.min(this.chunkBudget, 100, t2 && !Un ? Math.max(25, t2.timeRemaining() - 5) : 1e9), l2 = r2.context.treeLen < n2 && i2.doc.length > n2 + 1e3, h2 = r2.context.work(() => Un && Un() || Date.now() > o2, n2 + (l2 ? 0 : 1e5));
    this.chunkBudget -= Date.now() - e2, (h2 || this.chunkBudget <= 0) && (r2.context.takeTree(), this.view.dispatch({ effects: Tt.setState.of(new Qe$1(r2.context)) })), this.chunkBudget > 0 && !(h2 && !l2) && this.scheduleWork(), this.checkAsyncSchedule(r2.context);
  }
  checkAsyncSchedule(t2) {
    t2.scheduleOn && (this.workScheduled++, t2.scheduleOn.then(() => this.scheduleWork()).catch((e2) => zt(this.view.state, e2)).then(() => this.workScheduled--), t2.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), we$1 = /* @__PURE__ */ v$4.define({
  combine(s3) {
    return s3.length ? s3[0] : null;
  },
  enables: (s3) => [
    Tt.state,
    dd,
    A$4.contentAttributes.compute([s3], (t2) => {
      let e2 = t2.facet(s3);
      return e2 && e2.name ? { "data-language": e2.name } : {};
    })
  ]
});
class pd {
  /**
  Create a language support object.
  */
  constructor(t2, e2 = []) {
    this.language = t2, this.support = e2, this.extension = [t2, e2];
  }
}
const gd = /* @__PURE__ */ v$4.define(), nr = /* @__PURE__ */ v$4.define({
  combine: (s3) => {
    if (!s3.length)
      return "  ";
    if (!/^(?: +|\t+)$/.test(s3[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(s3[0]));
    return s3[0];
  }
});
function mn(s3) {
  let t2 = s3.facet(nr);
  return t2.charCodeAt(0) == 9 ? s3.tabSize * t2.length : t2.length;
}
function wi(s3, t2) {
  let e2 = "", i2 = s3.tabSize;
  if (s3.facet(nr).charCodeAt(0) == 9)
    for (; t2 >= i2; )
      e2 += "	", t2 -= i2;
  for (let n2 = 0; n2 < t2; n2++)
    e2 += " ";
  return e2;
}
function sr(s3, t2) {
  s3 instanceof N$4 && (s3 = new Dn(s3));
  for (let i2 of s3.state.facet(gd)) {
    let n2 = i2(s3, t2);
    if (n2 !== void 0)
      return n2;
  }
  let e2 = St(s3.state);
  return e2 ? md(s3, e2, t2) : null;
}
class Dn {
  /**
  Create an indent context.
  */
  constructor(t2, e2 = {}) {
    this.state = t2, this.options = e2, this.unit = mn(t2);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(t2, e2 = 1) {
    let i2 = this.state.doc.lineAt(t2), { simulateBreak: n2, simulateDoubleBreak: r2 } = this.options;
    return n2 != null && n2 >= i2.from && n2 <= i2.to ? r2 && n2 == t2 ? { text: "", from: t2 } : (e2 < 0 ? n2 < t2 : n2 <= t2) ? { text: i2.text.slice(n2 - i2.from), from: n2 } : { text: i2.text.slice(0, n2 - i2.from), from: i2.from } : i2;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(t2, e2 = 1) {
    if (this.options.simulateDoubleBreak && t2 == this.options.simulateBreak)
      return "";
    let { text: i2, from: n2 } = this.lineAt(t2, e2);
    return i2.slice(t2 - n2, Math.min(i2.length, t2 + 100 - n2));
  }
  /**
  Find the column for the given position.
  */
  column(t2, e2 = 1) {
    let { text: i2, from: n2 } = this.lineAt(t2, e2), r2 = this.countColumn(i2, t2 - n2), o2 = this.options.overrideIndentation ? this.options.overrideIndentation(n2) : -1;
    return o2 > -1 && (r2 += o2 - this.countColumn(i2, i2.search(/\S|$/))), r2;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(t2, e2 = t2.length) {
    return Cn(t2, this.state.tabSize, e2);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(t2, e2 = 1) {
    let { text: i2, from: n2 } = this.lineAt(t2, e2), r2 = this.options.overrideIndentation;
    if (r2) {
      let o2 = r2(n2);
      if (o2 > -1)
        return o2;
    }
    return this.countColumn(i2, i2.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const wh = /* @__PURE__ */ new P$3();
function md(s3, t2, e2) {
  return yh(t2.resolveInner(e2).enterUnfinishedNodesBefore(e2), e2, s3);
}
function wd(s3) {
  return s3.pos == s3.options.simulateBreak && s3.options.simulateDoubleBreak;
}
function yd(s3) {
  let t2 = s3.type.prop(wh);
  if (t2)
    return t2;
  let e2 = s3.firstChild, i2;
  if (e2 && (i2 = e2.type.prop(P$3.closedBy))) {
    let n2 = s3.lastChild, r2 = n2 && i2.indexOf(n2.name) > -1;
    return (o2) => vd(o2, true, 1, void 0, r2 && !wd(o2) ? n2.from : void 0);
  }
  return s3.parent == null ? bd : null;
}
function yh(s3, t2, e2) {
  for (; s3; s3 = s3.parent) {
    let i2 = yd(s3);
    if (i2)
      return i2(rr.create(e2, t2, s3));
  }
  return null;
}
function bd() {
  return 0;
}
class rr extends Dn {
  constructor(t2, e2, i2) {
    super(t2.state, t2.options), this.base = t2, this.pos = e2, this.node = i2;
  }
  /**
  @internal
  */
  static create(t2, e2, i2) {
    return new rr(t2, e2, i2);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    let t2 = this.state.doc.lineAt(this.node.from);
    for (; ; ) {
      let e2 = this.node.resolve(t2.from);
      for (; e2.parent && e2.parent.from == e2.from; )
        e2 = e2.parent;
      if (kd(e2, this.node))
        break;
      t2 = this.state.doc.lineAt(e2.from);
    }
    return this.lineIndent(t2.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    let t2 = this.node.parent;
    return t2 ? yh(t2, this.pos, this.base) : 0;
  }
}
function kd(s3, t2) {
  for (let e2 = t2; e2; e2 = e2.parent)
    if (s3 == e2)
      return true;
  return false;
}
function xd(s3) {
  let t2 = s3.node, e2 = t2.childAfter(t2.from), i2 = t2.lastChild;
  if (!e2)
    return null;
  let n2 = s3.options.simulateBreak, r2 = s3.state.doc.lineAt(e2.from), o2 = n2 == null || n2 <= r2.from ? r2.to : Math.min(r2.to, n2);
  for (let l2 = e2.to; ; ) {
    let h2 = t2.childAfter(l2);
    if (!h2 || h2 == i2)
      return null;
    if (!h2.type.isSkipped)
      return h2.from < o2 ? e2 : null;
    l2 = h2.to;
  }
}
function vd(s3, t2, e2, i2, n2) {
  let r2 = s3.textAfter, o2 = r2.match(/^\s*/)[0].length, l2 = i2 && r2.slice(o2, o2 + i2.length) == i2 || n2 == s3.pos + o2, h2 = t2 ? xd(s3) : null;
  return h2 ? l2 ? s3.column(h2.from) : s3.column(h2.to) : s3.baseIndent + (l2 ? 0 : s3.unit * e2);
}
function wo({ except: s3, units: t2 = 1 } = {}) {
  return (e2) => {
    let i2 = s3 && s3.test(e2.textAfter);
    return e2.baseIndent + (i2 ? 0 : t2 * e2.unit);
  };
}
const Sd = 200;
function Cd() {
  return N$4.transactionFilter.of((s3) => {
    if (!s3.docChanged || !s3.isUserEvent("input.type") && !s3.isUserEvent("input.complete"))
      return s3;
    let t2 = s3.startState.languageDataAt("indentOnInput", s3.startState.selection.main.head);
    if (!t2.length)
      return s3;
    let e2 = s3.newDoc, { head: i2 } = s3.newSelection.main, n2 = e2.lineAt(i2);
    if (i2 > n2.from + Sd)
      return s3;
    let r2 = e2.sliceString(n2.from, i2);
    if (!t2.some((a2) => a2.test(r2)))
      return s3;
    let { state: o2 } = s3, l2 = -1, h2 = [];
    for (let { head: a2 } of o2.selection.ranges) {
      let c2 = o2.doc.lineAt(a2);
      if (c2.from == l2)
        continue;
      l2 = c2.from;
      let f2 = sr(o2, c2.from);
      if (f2 == null)
        continue;
      let u2 = /^\s*/.exec(c2.text)[0], d2 = wi(o2, f2);
      u2 != d2 && h2.push({ from: c2.from, to: c2.from + u2.length, insert: d2 });
    }
    return h2.length ? [s3, { changes: h2, sequential: true }] : s3;
  });
}
const Ad = /* @__PURE__ */ v$4.define(), bh = /* @__PURE__ */ new P$3();
function Od(s3) {
  let t2 = s3.firstChild, e2 = s3.lastChild;
  return t2 && t2.to < e2.from ? { from: t2.to, to: e2.type.isError ? s3.to : e2.from } : null;
}
function Md(s3, t2, e2) {
  let i2 = St(s3);
  if (i2.length < e2)
    return null;
  let n2 = i2.resolveInner(e2, 1), r2 = null;
  for (let o2 = n2; o2; o2 = o2.parent) {
    if (o2.to <= e2 || o2.from > e2)
      continue;
    if (r2 && o2.from < t2)
      break;
    let l2 = o2.type.prop(bh);
    if (l2 && (o2.to < i2.length - 50 || i2.length == s3.doc.length || !Dd(o2))) {
      let h2 = l2(o2, s3);
      h2 && h2.from <= e2 && h2.from >= t2 && h2.to > e2 && (r2 = h2);
    }
  }
  return r2;
}
function Dd(s3) {
  let t2 = s3.lastChild;
  return t2 && t2.to == s3.to && t2.type.isError;
}
function wn(s3, t2, e2) {
  for (let i2 of s3.facet(Ad)) {
    let n2 = i2(s3, t2, e2);
    if (n2)
      return n2;
  }
  return Md(s3, t2, e2);
}
function kh(s3, t2) {
  let e2 = t2.mapPos(s3.from, 1), i2 = t2.mapPos(s3.to, -1);
  return e2 >= i2 ? void 0 : { from: e2, to: i2 };
}
const Tn = /* @__PURE__ */ F$4.define({ map: kh }), xi = /* @__PURE__ */ F$4.define({ map: kh });
function xh(s3) {
  let t2 = [];
  for (let { head: e2 } of s3.state.selection.ranges)
    t2.some((i2) => i2.from <= e2 && i2.to >= e2) || t2.push(s3.lineBlockAt(e2));
  return t2;
}
const Pe = /* @__PURE__ */ Bt.define({
  create() {
    return T$3.none;
  },
  update(s3, t2) {
    s3 = s3.map(t2.changes);
    for (let e2 of t2.effects)
      e2.is(Tn) && !Td(s3, e2.value.from, e2.value.to) ? s3 = s3.update({ add: [yo.range(e2.value.from, e2.value.to)] }) : e2.is(xi) && (s3 = s3.update({
        filter: (i2, n2) => e2.value.from != i2 || e2.value.to != n2,
        filterFrom: e2.value.from,
        filterTo: e2.value.to
      }));
    if (t2.selection) {
      let e2 = false, { head: i2 } = t2.selection.main;
      s3.between(i2, i2, (n2, r2) => {
        n2 < i2 && r2 > i2 && (e2 = true);
      }), e2 && (s3 = s3.update({
        filterFrom: i2,
        filterTo: i2,
        filter: (n2, r2) => r2 <= i2 || n2 >= i2
      }));
    }
    return s3;
  },
  provide: (s3) => A$4.decorations.from(s3),
  toJSON(s3, t2) {
    let e2 = [];
    return s3.between(0, t2.doc.length, (i2, n2) => {
      e2.push(i2, n2);
    }), e2;
  },
  fromJSON(s3) {
    if (!Array.isArray(s3) || s3.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let t2 = [];
    for (let e2 = 0; e2 < s3.length; ) {
      let i2 = s3[e2++], n2 = s3[e2++];
      if (typeof i2 != "number" || typeof n2 != "number")
        throw new RangeError("Invalid JSON for fold state");
      t2.push(yo.range(i2, n2));
    }
    return T$3.set(t2, true);
  }
});
function yn(s3, t2, e2) {
  var i2;
  let n2 = null;
  return (i2 = s3.field(Pe, false)) === null || i2 === void 0 || i2.between(t2, e2, (r2, o2) => {
    (!n2 || n2.from > r2) && (n2 = { from: r2, to: o2 });
  }), n2;
}
function Td(s3, t2, e2) {
  let i2 = false;
  return s3.between(t2, t2, (n2, r2) => {
    n2 == t2 && r2 == e2 && (i2 = true);
  }), i2;
}
function vh(s3, t2) {
  return s3.field(Pe, false) ? t2 : t2.concat(F$4.appendConfig.of(Ah()));
}
const Pd = (s3) => {
  for (let t2 of xh(s3)) {
    let e2 = wn(s3.state, t2.from, t2.to);
    if (e2)
      return s3.dispatch({ effects: vh(s3.state, [Tn.of(e2), Sh(s3, e2)]) }), true;
  }
  return false;
}, Bd = (s3) => {
  if (!s3.state.field(Pe, false))
    return false;
  let t2 = [];
  for (let e2 of xh(s3)) {
    let i2 = yn(s3.state, e2.from, e2.to);
    i2 && t2.push(xi.of(i2), Sh(s3, i2, false));
  }
  return t2.length && s3.dispatch({ effects: t2 }), t2.length > 0;
};
function Sh(s3, t2, e2 = true) {
  let i2 = s3.state.doc.lineAt(t2.from).number, n2 = s3.state.doc.lineAt(t2.to).number;
  return A$4.announce.of(`${s3.state.phrase(e2 ? "Folded lines" : "Unfolded lines")} ${i2} ${s3.state.phrase("to")} ${n2}.`);
}
const Rd = (s3) => {
  let { state: t2 } = s3, e2 = [];
  for (let i2 = 0; i2 < t2.doc.length; ) {
    let n2 = s3.lineBlockAt(i2), r2 = wn(t2, n2.from, n2.to);
    r2 && e2.push(Tn.of(r2)), i2 = (r2 ? s3.lineBlockAt(r2.to) : n2).to + 1;
  }
  return e2.length && s3.dispatch({ effects: vh(s3.state, e2) }), !!e2.length;
}, Ld = (s3) => {
  let t2 = s3.state.field(Pe, false);
  if (!t2 || !t2.size)
    return false;
  let e2 = [];
  return t2.between(0, s3.state.doc.length, (i2, n2) => {
    e2.push(xi.of({ from: i2, to: n2 }));
  }), s3.dispatch({ effects: e2 }), true;
}, Ed = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: Pd },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: Bd },
  { key: "Ctrl-Alt-[", run: Rd },
  { key: "Ctrl-Alt-]", run: Ld }
], Nd = {
  placeholderDOM: null,
  placeholderText: "…"
}, Ch = /* @__PURE__ */ v$4.define({
  combine(s3) {
    return Sn(s3, Nd);
  }
});
function Ah(s3) {
  let t2 = [Pe, Hd];
  return s3 && t2.push(Ch.of(s3)), t2;
}
const yo = /* @__PURE__ */ T$3.replace({ widget: /* @__PURE__ */ new class extends ye$1 {
  toDOM(s3) {
    let { state: t2 } = s3, e2 = t2.facet(Ch), i2 = (r2) => {
      let o2 = s3.lineBlockAt(s3.posAtDOM(r2.target)), l2 = yn(s3.state, o2.from, o2.to);
      l2 && s3.dispatch({ effects: xi.of(l2) }), r2.preventDefault();
    };
    if (e2.placeholderDOM)
      return e2.placeholderDOM(s3, i2);
    let n2 = document.createElement("span");
    return n2.textContent = e2.placeholderText, n2.setAttribute("aria-label", t2.phrase("folded code")), n2.title = t2.phrase("unfold"), n2.className = "cm-foldPlaceholder", n2.onclick = i2, n2;
  }
}() }), Vd = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => false
};
class Qn extends me$2 {
  constructor(t2, e2) {
    super(), this.config = t2, this.open = e2;
  }
  eq(t2) {
    return this.config == t2.config && this.open == t2.open;
  }
  toDOM(t2) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let e2 = document.createElement("span");
    return e2.textContent = this.open ? this.config.openText : this.config.closedText, e2.title = t2.state.phrase(this.open ? "Fold line" : "Unfold line"), e2;
  }
}
function Id(s3 = {}) {
  let t2 = Object.assign(Object.assign({}, Vd), s3), e2 = new Qn(t2, true), i2 = new Qn(t2, false), n2 = wt.fromClass(class {
    constructor(o2) {
      this.from = o2.viewport.from, this.markers = this.buildMarkers(o2);
    }
    update(o2) {
      (o2.docChanged || o2.viewportChanged || o2.startState.facet(we$1) != o2.state.facet(we$1) || o2.startState.field(Pe, false) != o2.state.field(Pe, false) || St(o2.startState) != St(o2.state) || t2.foldingChanged(o2)) && (this.markers = this.buildMarkers(o2.view));
    }
    buildMarkers(o2) {
      let l2 = new De();
      for (let h2 of o2.viewportLineBlocks) {
        let a2 = yn(o2.state, h2.from, h2.to) ? i2 : wn(o2.state, h2.from, h2.to) ? e2 : null;
        a2 && l2.add(h2.from, h2.from, a2);
      }
      return l2.finish();
    }
  }), { domEventHandlers: r2 } = t2;
  return [
    n2,
    ju({
      class: "cm-foldGutter",
      markers(o2) {
        var l2;
        return ((l2 = o2.plugin(n2)) === null || l2 === void 0 ? void 0 : l2.markers) || $$1.empty;
      },
      initialSpacer() {
        return new Qn(t2, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, r2), { click: (o2, l2, h2) => {
        if (r2.click && r2.click(o2, l2, h2))
          return true;
        let a2 = yn(o2.state, l2.from, l2.to);
        if (a2)
          return o2.dispatch({ effects: xi.of(a2) }), true;
        let c2 = wn(o2.state, l2.from, l2.to);
        return c2 ? (o2.dispatch({ effects: Tn.of(c2) }), true) : false;
      } })
    }),
    Ah()
  ];
}
const Hd = /* @__PURE__ */ A$4.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class vi {
  constructor(t2, e2) {
    this.specs = t2;
    let i2;
    function n2(l2) {
      let h2 = de$1.newName();
      return (i2 || (i2 = /* @__PURE__ */ Object.create(null)))["." + h2] = l2, h2;
    }
    const r2 = typeof e2.all == "string" ? e2.all : e2.all ? n2(e2.all) : void 0, o2 = e2.scope;
    this.scope = o2 instanceof Tt ? (l2) => l2.prop(mi) == o2.data : o2 ? (l2) => l2 == o2 : void 0, this.style = gh(t2.map((l2) => ({
      tag: l2.tag,
      class: l2.class || n2(Object.assign({}, l2, { tag: null }))
    })), {
      all: r2
    }).style, this.module = i2 ? new de$1(i2) : null, this.themeType = e2.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(t2, e2) {
    return new vi(t2, e2 || {});
  }
}
const Ns = /* @__PURE__ */ v$4.define(), Oh = /* @__PURE__ */ v$4.define({
  combine(s3) {
    return s3.length ? [s3[0]] : null;
  }
});
function Jn(s3) {
  let t2 = s3.facet(Ns);
  return t2.length ? t2 : s3.facet(Oh);
}
function bo(s3, t2) {
  let e2 = [Fd], i2;
  return s3 instanceof vi && (s3.module && e2.push(A$4.styleModule.of(s3.module)), i2 = s3.themeType), t2 != null && t2.fallback ? e2.push(Oh.of(s3)) : i2 ? e2.push(Ns.computeN([A$4.darkTheme], (n2) => n2.facet(A$4.darkTheme) == (i2 == "dark") ? [s3] : [])) : e2.push(Ns.of(s3)), e2;
}
class $d {
  constructor(t2) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = St(t2.state), this.decorations = this.buildDeco(t2, Jn(t2.state));
  }
  update(t2) {
    let e2 = St(t2.state), i2 = Jn(t2.state), n2 = i2 != Jn(t2.startState);
    e2.length < t2.view.viewport.to && !n2 && e2.type == this.tree.type ? this.decorations = this.decorations.map(t2.changes) : (e2 != this.tree || t2.viewportChanged || n2) && (this.tree = e2, this.decorations = this.buildDeco(t2.view, i2));
  }
  buildDeco(t2, e2) {
    if (!e2 || !this.tree.length)
      return T$3.none;
    let i2 = new De();
    for (let { from: n2, to: r2 } of t2.visibleRanges)
      hd(this.tree, e2, (o2, l2, h2) => {
        i2.add(o2, l2, this.markCache[h2] || (this.markCache[h2] = T$3.mark({ class: h2 })));
      }, n2, r2);
    return i2.finish();
  }
}
const Fd = /* @__PURE__ */ js.high(/* @__PURE__ */ wt.fromClass($d, {
  decorations: (s3) => s3.decorations
})), zd = /* @__PURE__ */ vi.define([
  {
    tag: m$5.meta,
    color: "#404740"
  },
  {
    tag: m$5.link,
    textDecoration: "underline"
  },
  {
    tag: m$5.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: m$5.emphasis,
    fontStyle: "italic"
  },
  {
    tag: m$5.strong,
    fontWeight: "bold"
  },
  {
    tag: m$5.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: m$5.keyword,
    color: "#708"
  },
  {
    tag: [m$5.atom, m$5.bool, m$5.url, m$5.contentSeparator, m$5.labelName],
    color: "#219"
  },
  {
    tag: [m$5.literal, m$5.inserted],
    color: "#164"
  },
  {
    tag: [m$5.string, m$5.deleted],
    color: "#a11"
  },
  {
    tag: [m$5.regexp, m$5.escape, /* @__PURE__ */ m$5.special(m$5.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ m$5.definition(m$5.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ m$5.local(m$5.variableName),
    color: "#30a"
  },
  {
    tag: [m$5.typeName, m$5.namespace],
    color: "#085"
  },
  {
    tag: m$5.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ m$5.special(m$5.variableName), m$5.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ m$5.definition(m$5.propertyName),
    color: "#00c"
  },
  {
    tag: m$5.comment,
    color: "#940"
  },
  {
    tag: m$5.invalid,
    color: "#f00"
  }
]), _d = /* @__PURE__ */ A$4.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), Mh = 1e4, Dh = "()[]{}", Th = /* @__PURE__ */ v$4.define({
  combine(s3) {
    return Sn(s3, {
      afterCursor: true,
      brackets: Dh,
      maxScanDistance: Mh,
      renderMatch: qd
    });
  }
}), Wd = /* @__PURE__ */ T$3.mark({ class: "cm-matchingBracket" }), jd = /* @__PURE__ */ T$3.mark({ class: "cm-nonmatchingBracket" });
function qd(s3) {
  let t2 = [], e2 = s3.matched ? Wd : jd;
  return t2.push(e2.range(s3.start.from, s3.start.to)), s3.end && t2.push(e2.range(s3.end.from, s3.end.to)), t2;
}
const Kd = /* @__PURE__ */ Bt.define({
  create() {
    return T$3.none;
  },
  update(s3, t2) {
    if (!t2.docChanged && !t2.selection)
      return s3;
    let e2 = [], i2 = t2.state.facet(Th);
    for (let n2 of t2.state.selection.ranges) {
      if (!n2.empty)
        continue;
      let r2 = Ft(t2.state, n2.head, -1, i2) || n2.head > 0 && Ft(t2.state, n2.head - 1, 1, i2) || i2.afterCursor && (Ft(t2.state, n2.head, 1, i2) || n2.head < t2.state.doc.length && Ft(t2.state, n2.head + 1, -1, i2));
      r2 && (e2 = e2.concat(i2.renderMatch(r2, t2.state)));
    }
    return T$3.set(e2, true);
  },
  provide: (s3) => A$4.decorations.from(s3)
}), Gd = [
  Kd,
  _d
];
function Ud(s3 = {}) {
  return [Th.of(s3), Gd];
}
const Qd = /* @__PURE__ */ new P$3();
function Vs(s3, t2, e2) {
  let i2 = s3.prop(t2 < 0 ? P$3.openedBy : P$3.closedBy);
  if (i2)
    return i2;
  if (s3.name.length == 1) {
    let n2 = e2.indexOf(s3.name);
    if (n2 > -1 && n2 % 2 == (t2 < 0 ? 1 : 0))
      return [e2[n2 + t2]];
  }
  return null;
}
function Is(s3) {
  let t2 = s3.type.prop(Qd);
  return t2 ? t2(s3.node) : s3;
}
function Ft(s3, t2, e2, i2 = {}) {
  let n2 = i2.maxScanDistance || Mh, r2 = i2.brackets || Dh, o2 = St(s3), l2 = o2.resolveInner(t2, e2);
  for (let h2 = l2; h2; h2 = h2.parent) {
    let a2 = Vs(h2.type, e2, r2);
    if (a2 && h2.from < h2.to) {
      let c2 = Is(h2);
      if (c2 && (e2 > 0 ? t2 >= c2.from && t2 < c2.to : t2 > c2.from && t2 <= c2.to))
        return Jd(s3, t2, e2, h2, c2, a2, r2);
    }
  }
  return Xd(s3, t2, e2, o2, l2.type, n2, r2);
}
function Jd(s3, t2, e2, i2, n2, r2, o2) {
  let l2 = i2.parent, h2 = { from: n2.from, to: n2.to }, a2 = 0, c2 = l2 == null ? void 0 : l2.cursor();
  if (c2 && (e2 < 0 ? c2.childBefore(i2.from) : c2.childAfter(i2.to)))
    do
      if (e2 < 0 ? c2.to <= i2.from : c2.from >= i2.to) {
        if (a2 == 0 && r2.indexOf(c2.type.name) > -1 && c2.from < c2.to) {
          let f2 = Is(c2);
          return { start: h2, end: f2 ? { from: f2.from, to: f2.to } : void 0, matched: true };
        } else if (Vs(c2.type, e2, o2))
          a2++;
        else if (Vs(c2.type, -e2, o2)) {
          if (a2 == 0) {
            let f2 = Is(c2);
            return {
              start: h2,
              end: f2 && f2.from < f2.to ? { from: f2.from, to: f2.to } : void 0,
              matched: false
            };
          }
          a2--;
        }
      }
    while (e2 < 0 ? c2.prevSibling() : c2.nextSibling());
  return { start: h2, matched: false };
}
function Xd(s3, t2, e2, i2, n2, r2, o2) {
  let l2 = e2 < 0 ? s3.sliceDoc(t2 - 1, t2) : s3.sliceDoc(t2, t2 + 1), h2 = o2.indexOf(l2);
  if (h2 < 0 || h2 % 2 == 0 != e2 > 0)
    return null;
  let a2 = { from: e2 < 0 ? t2 - 1 : t2, to: e2 > 0 ? t2 + 1 : t2 }, c2 = s3.doc.iterRange(t2, e2 > 0 ? s3.doc.length : 0), f2 = 0;
  for (let u2 = 0; !c2.next().done && u2 <= r2; ) {
    let d2 = c2.value;
    e2 < 0 && (u2 += d2.length);
    let p2 = t2 + u2 * e2;
    for (let w2 = e2 > 0 ? 0 : d2.length - 1, g2 = e2 > 0 ? d2.length : -1; w2 != g2; w2 += e2) {
      let y2 = o2.indexOf(d2[w2]);
      if (!(y2 < 0 || i2.resolveInner(p2 + w2, 1).type != n2))
        if (y2 % 2 == 0 == e2 > 0)
          f2++;
        else {
          if (f2 == 1)
            return { start: a2, end: { from: p2 + w2, to: p2 + w2 + 1 }, matched: y2 >> 1 == h2 >> 1 };
          f2--;
        }
    }
    e2 > 0 && (u2 += d2.length);
  }
  return c2.done ? { start: a2, matched: false } : null;
}
const Yd = /* @__PURE__ */ Object.create(null), ko = [yt.none], xo = [], Zd = /* @__PURE__ */ Object.create(null);
for (let [s3, t2] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  Zd[s3] = /* @__PURE__ */ tp(Yd, t2);
function Xn(s3, t2) {
  xo.indexOf(s3) > -1 || (xo.push(s3), console.warn(t2));
}
function tp(s3, t2) {
  let e2 = null;
  for (let r2 of t2.split(".")) {
    let o2 = s3[r2] || m$5[r2];
    o2 ? typeof o2 == "function" ? e2 ? e2 = o2(e2) : Xn(r2, `Modifier ${r2} used at start of tag`) : e2 ? Xn(r2, `Tag ${r2} used as modifier`) : e2 = o2 : Xn(r2, `Unknown highlighting tag ${r2}`);
  }
  if (!e2)
    return 0;
  let i2 = t2.replace(/ /g, "_"), n2 = yt.define({
    id: ko.length,
    name: i2,
    props: [dh({ [i2]: e2 })]
  });
  return ko.push(n2), n2.id;
}
const ep = (s3) => {
  let t2 = lr(s3.state);
  return t2.line ? ip(s3) : t2.block ? sp(s3) : false;
};
function or(s3, t2) {
  return ({ state: e2, dispatch: i2 }) => {
    if (e2.readOnly)
      return false;
    let n2 = s3(t2, e2);
    return n2 ? (i2(e2.update(n2)), true) : false;
  };
}
const ip = /* @__PURE__ */ or(
  lp,
  0
  /* CommentOption.Toggle */
), np = /* @__PURE__ */ or(
  Ph,
  0
  /* CommentOption.Toggle */
), sp = /* @__PURE__ */ or(
  (s3, t2) => Ph(s3, t2, op(t2)),
  0
  /* CommentOption.Toggle */
);
function lr(s3, t2 = s3.selection.main.head) {
  let e2 = s3.languageDataAt("commentTokens", t2);
  return e2.length ? e2[0] : {};
}
const ni = 50;
function rp(s3, { open: t2, close: e2 }, i2, n2) {
  let r2 = s3.sliceDoc(i2 - ni, i2), o2 = s3.sliceDoc(n2, n2 + ni), l2 = /\s*$/.exec(r2)[0].length, h2 = /^\s*/.exec(o2)[0].length, a2 = r2.length - l2;
  if (r2.slice(a2 - t2.length, a2) == t2 && o2.slice(h2, h2 + e2.length) == e2)
    return {
      open: { pos: i2 - l2, margin: l2 && 1 },
      close: { pos: n2 + h2, margin: h2 && 1 }
    };
  let c2, f2;
  n2 - i2 <= 2 * ni ? c2 = f2 = s3.sliceDoc(i2, n2) : (c2 = s3.sliceDoc(i2, i2 + ni), f2 = s3.sliceDoc(n2 - ni, n2));
  let u2 = /^\s*/.exec(c2)[0].length, d2 = /\s*$/.exec(f2)[0].length, p2 = f2.length - d2 - e2.length;
  return c2.slice(u2, u2 + t2.length) == t2 && f2.slice(p2, p2 + e2.length) == e2 ? {
    open: {
      pos: i2 + u2 + t2.length,
      margin: /\s/.test(c2.charAt(u2 + t2.length)) ? 1 : 0
    },
    close: {
      pos: n2 - d2 - e2.length,
      margin: /\s/.test(f2.charAt(p2 - 1)) ? 1 : 0
    }
  } : null;
}
function op(s3) {
  let t2 = [];
  for (let e2 of s3.selection.ranges) {
    let i2 = s3.doc.lineAt(e2.from), n2 = e2.to <= i2.to ? i2 : s3.doc.lineAt(e2.to), r2 = t2.length - 1;
    r2 >= 0 && t2[r2].to > i2.from ? t2[r2].to = n2.to : t2.push({ from: i2.from, to: n2.to });
  }
  return t2;
}
function Ph(s3, t2, e2 = t2.selection.ranges) {
  let i2 = e2.map((r2) => lr(t2, r2.from).block);
  if (!i2.every((r2) => r2))
    return null;
  let n2 = e2.map((r2, o2) => rp(t2, i2[o2], r2.from, r2.to));
  if (s3 != 2 && !n2.every((r2) => r2))
    return { changes: t2.changes(e2.map((r2, o2) => n2[o2] ? [] : [{ from: r2.from, insert: i2[o2].open + " " }, { from: r2.to, insert: " " + i2[o2].close }])) };
  if (s3 != 1 && n2.some((r2) => r2)) {
    let r2 = [];
    for (let o2 = 0, l2; o2 < n2.length; o2++)
      if (l2 = n2[o2]) {
        let h2 = i2[o2], { open: a2, close: c2 } = l2;
        r2.push({ from: a2.pos - h2.open.length, to: a2.pos + a2.margin }, { from: c2.pos - c2.margin, to: c2.pos + h2.close.length });
      }
    return { changes: r2 };
  }
  return null;
}
function lp(s3, t2, e2 = t2.selection.ranges) {
  let i2 = [], n2 = -1;
  for (let { from: r2, to: o2 } of e2) {
    let l2 = i2.length, h2 = 1e9;
    for (let a2 = r2; a2 <= o2; ) {
      let c2 = t2.doc.lineAt(a2);
      if (c2.from > n2 && (r2 == o2 || o2 > c2.from)) {
        n2 = c2.from;
        let f2 = lr(t2, a2).line;
        if (!f2)
          continue;
        let u2 = /^\s*/.exec(c2.text)[0].length, d2 = u2 == c2.length, p2 = c2.text.slice(u2, u2 + f2.length) == f2 ? u2 : -1;
        u2 < c2.text.length && u2 < h2 && (h2 = u2), i2.push({ line: c2, comment: p2, token: f2, indent: u2, empty: d2, single: false });
      }
      a2 = c2.to + 1;
    }
    if (h2 < 1e9)
      for (let a2 = l2; a2 < i2.length; a2++)
        i2[a2].indent < i2[a2].line.text.length && (i2[a2].indent = h2);
    i2.length == l2 + 1 && (i2[l2].single = true);
  }
  if (s3 != 2 && i2.some((r2) => r2.comment < 0 && (!r2.empty || r2.single))) {
    let r2 = [];
    for (let { line: l2, token: h2, indent: a2, empty: c2, single: f2 } of i2)
      (f2 || !c2) && r2.push({ from: l2.from + a2, insert: h2 + " " });
    let o2 = t2.changes(r2);
    return { changes: o2, selection: t2.selection.map(o2, 1) };
  } else if (s3 != 1 && i2.some((r2) => r2.comment >= 0)) {
    let r2 = [];
    for (let { line: o2, comment: l2, token: h2 } of i2)
      if (l2 >= 0) {
        let a2 = o2.from + l2, c2 = a2 + h2.length;
        o2.text[c2 - o2.from] == " " && c2++, r2.push({ from: a2, to: c2 });
      }
    return { changes: r2 };
  }
  return null;
}
function Ye(s3, t2) {
  return b$2.create(s3.ranges.map(t2), s3.mainIndex);
}
function Kt(s3, t2) {
  return s3.update({ selection: t2, scrollIntoView: true, userEvent: "select" });
}
function Rt({ state: s3, dispatch: t2 }, e2) {
  let i2 = Ye(s3.selection, e2);
  return i2.eq(s3.selection) ? false : (t2(Kt(s3, i2)), true);
}
function Pn(s3, t2) {
  return b$2.cursor(t2 ? s3.to : s3.from);
}
function Bh(s3, t2) {
  return Rt(s3, (e2) => e2.empty ? s3.moveByChar(e2, t2) : Pn(e2, t2));
}
function ft(s3) {
  return s3.textDirectionAt(s3.state.selection.main.head) == X$1.LTR;
}
const Rh = (s3) => Bh(s3, !ft(s3)), Lh = (s3) => Bh(s3, ft(s3));
function Eh(s3, t2) {
  return Rt(s3, (e2) => e2.empty ? s3.moveByGroup(e2, t2) : Pn(e2, t2));
}
const hp = (s3) => Eh(s3, !ft(s3)), ap = (s3) => Eh(s3, ft(s3));
function cp(s3, t2, e2) {
  if (t2.type.prop(e2))
    return true;
  let i2 = t2.to - t2.from;
  return i2 && (i2 > 2 || /[^\s,.;:]/.test(s3.sliceDoc(t2.from, t2.to))) || t2.firstChild;
}
function Bn(s3, t2, e2) {
  let i2 = St(s3).resolveInner(t2.head), n2 = e2 ? P$3.closedBy : P$3.openedBy;
  for (let h2 = t2.head; ; ) {
    let a2 = e2 ? i2.childAfter(h2) : i2.childBefore(h2);
    if (!a2)
      break;
    cp(s3, a2, n2) ? i2 = a2 : h2 = e2 ? a2.to : a2.from;
  }
  let r2 = i2.type.prop(n2), o2, l2;
  return r2 && (o2 = e2 ? Ft(s3, i2.from, 1) : Ft(s3, i2.to, -1)) && o2.matched ? l2 = e2 ? o2.end.to : o2.end.from : l2 = e2 ? i2.to : i2.from, b$2.cursor(l2, e2 ? -1 : 1);
}
const fp = (s3) => Rt(s3, (t2) => Bn(s3.state, t2, !ft(s3))), up = (s3) => Rt(s3, (t2) => Bn(s3.state, t2, ft(s3)));
function Nh(s3, t2) {
  return Rt(s3, (e2) => {
    if (!e2.empty)
      return Pn(e2, t2);
    let i2 = s3.moveVertically(e2, t2);
    return i2.head != e2.head ? i2 : s3.moveToLineBoundary(e2, t2);
  });
}
const Vh = (s3) => Nh(s3, false), Ih = (s3) => Nh(s3, true);
function Hh(s3) {
  return Math.max(s3.defaultLineHeight, Math.min(s3.dom.clientHeight, innerHeight) - 5);
}
function $h(s3, t2) {
  let { state: e2 } = s3, i2 = Ye(e2.selection, (l2) => l2.empty ? s3.moveVertically(l2, t2, Hh(s3)) : Pn(l2, t2));
  if (i2.eq(e2.selection))
    return false;
  let n2 = s3.coordsAtPos(e2.selection.main.head), r2 = s3.scrollDOM.getBoundingClientRect(), o2;
  return n2 && n2.top > r2.top && n2.bottom < r2.bottom && n2.top - r2.top <= s3.scrollDOM.scrollHeight - s3.scrollDOM.scrollTop - s3.scrollDOM.clientHeight && (o2 = A$4.scrollIntoView(i2.main.head, { y: "start", yMargin: n2.top - r2.top })), s3.dispatch(Kt(e2, i2), { effects: o2 }), true;
}
const vo = (s3) => $h(s3, false), Hs = (s3) => $h(s3, true);
function be$1(s3, t2, e2) {
  let i2 = s3.lineBlockAt(t2.head), n2 = s3.moveToLineBoundary(t2, e2);
  if (n2.head == t2.head && n2.head != (e2 ? i2.to : i2.from) && (n2 = s3.moveToLineBoundary(t2, e2, false)), !e2 && n2.head == i2.from && i2.length) {
    let r2 = /^\s*/.exec(s3.state.sliceDoc(i2.from, Math.min(i2.from + 100, i2.to)))[0].length;
    r2 && t2.head != i2.from + r2 && (n2 = b$2.cursor(i2.from + r2));
  }
  return n2;
}
const dp = (s3) => Rt(s3, (t2) => be$1(s3, t2, true)), pp = (s3) => Rt(s3, (t2) => be$1(s3, t2, false)), gp = (s3) => Rt(s3, (t2) => be$1(s3, t2, !ft(s3))), mp = (s3) => Rt(s3, (t2) => be$1(s3, t2, ft(s3))), wp = (s3) => Rt(s3, (t2) => b$2.cursor(s3.lineBlockAt(t2.head).from, 1)), yp = (s3) => Rt(s3, (t2) => b$2.cursor(s3.lineBlockAt(t2.head).to, -1));
function bp(s3, t2, e2) {
  let i2 = false, n2 = Ye(s3.selection, (r2) => {
    let o2 = Ft(s3, r2.head, -1) || Ft(s3, r2.head, 1) || r2.head > 0 && Ft(s3, r2.head - 1, 1) || r2.head < s3.doc.length && Ft(s3, r2.head + 1, -1);
    if (!o2 || !o2.end)
      return r2;
    i2 = true;
    let l2 = o2.start.from == r2.head ? o2.end.to : o2.end.from;
    return e2 ? b$2.range(r2.anchor, l2) : b$2.cursor(l2);
  });
  return i2 ? (t2(Kt(s3, n2)), true) : false;
}
const kp = ({ state: s3, dispatch: t2 }) => bp(s3, t2, false);
function At(s3, t2) {
  let e2 = Ye(s3.state.selection, (i2) => {
    let n2 = t2(i2);
    return b$2.range(i2.anchor, n2.head, n2.goalColumn, n2.bidiLevel || void 0);
  });
  return e2.eq(s3.state.selection) ? false : (s3.dispatch(Kt(s3.state, e2)), true);
}
function Fh(s3, t2) {
  return At(s3, (e2) => s3.moveByChar(e2, t2));
}
const zh = (s3) => Fh(s3, !ft(s3)), _h = (s3) => Fh(s3, ft(s3));
function Wh(s3, t2) {
  return At(s3, (e2) => s3.moveByGroup(e2, t2));
}
const xp = (s3) => Wh(s3, !ft(s3)), vp = (s3) => Wh(s3, ft(s3)), Sp = (s3) => At(s3, (t2) => Bn(s3.state, t2, !ft(s3))), Cp = (s3) => At(s3, (t2) => Bn(s3.state, t2, ft(s3)));
function jh(s3, t2) {
  return At(s3, (e2) => s3.moveVertically(e2, t2));
}
const qh = (s3) => jh(s3, false), Kh = (s3) => jh(s3, true);
function Gh(s3, t2) {
  return At(s3, (e2) => s3.moveVertically(e2, t2, Hh(s3)));
}
const So = (s3) => Gh(s3, false), Co = (s3) => Gh(s3, true), Ap = (s3) => At(s3, (t2) => be$1(s3, t2, true)), Op = (s3) => At(s3, (t2) => be$1(s3, t2, false)), Mp = (s3) => At(s3, (t2) => be$1(s3, t2, !ft(s3))), Dp = (s3) => At(s3, (t2) => be$1(s3, t2, ft(s3))), Tp = (s3) => At(s3, (t2) => b$2.cursor(s3.lineBlockAt(t2.head).from)), Pp = (s3) => At(s3, (t2) => b$2.cursor(s3.lineBlockAt(t2.head).to)), Ao = ({ state: s3, dispatch: t2 }) => (t2(Kt(s3, { anchor: 0 })), true), Oo = ({ state: s3, dispatch: t2 }) => (t2(Kt(s3, { anchor: s3.doc.length })), true), Mo = ({ state: s3, dispatch: t2 }) => (t2(Kt(s3, { anchor: s3.selection.main.anchor, head: 0 })), true), Do = ({ state: s3, dispatch: t2 }) => (t2(Kt(s3, { anchor: s3.selection.main.anchor, head: s3.doc.length })), true), Bp = ({ state: s3, dispatch: t2 }) => (t2(s3.update({ selection: { anchor: 0, head: s3.doc.length }, userEvent: "select" })), true), Rp = ({ state: s3, dispatch: t2 }) => {
  let e2 = Ln(s3).map(({ from: i2, to: n2 }) => b$2.range(i2, Math.min(n2 + 1, s3.doc.length)));
  return t2(s3.update({ selection: b$2.create(e2), userEvent: "select" })), true;
}, Lp = ({ state: s3, dispatch: t2 }) => {
  let e2 = Ye(s3.selection, (i2) => {
    var n2;
    let r2 = St(s3).resolveInner(i2.head, 1);
    for (; !(r2.from < i2.from && r2.to >= i2.to || r2.to > i2.to && r2.from <= i2.from || !(!((n2 = r2.parent) === null || n2 === void 0) && n2.parent)); )
      r2 = r2.parent;
    return b$2.range(r2.to, r2.from);
  });
  return t2(Kt(s3, e2)), true;
}, Ep = ({ state: s3, dispatch: t2 }) => {
  let e2 = s3.selection, i2 = null;
  return e2.ranges.length > 1 ? i2 = b$2.create([e2.main]) : e2.main.empty || (i2 = b$2.create([b$2.cursor(e2.main.head)])), i2 ? (t2(Kt(s3, i2)), true) : false;
};
function Rn(s3, t2) {
  if (s3.state.readOnly)
    return false;
  let e2 = "delete.selection", { state: i2 } = s3, n2 = i2.changeByRange((r2) => {
    let { from: o2, to: l2 } = r2;
    if (o2 == l2) {
      let h2 = t2(o2);
      h2 < o2 ? (e2 = "delete.backward", h2 = Fi(s3, h2, false)) : h2 > o2 && (e2 = "delete.forward", h2 = Fi(s3, h2, true)), o2 = Math.min(o2, h2), l2 = Math.max(l2, h2);
    } else
      o2 = Fi(s3, o2, false), l2 = Fi(s3, l2, true);
    return o2 == l2 ? { range: r2 } : { changes: { from: o2, to: l2 }, range: b$2.cursor(o2) };
  });
  return n2.changes.empty ? false : (s3.dispatch(i2.update(n2, {
    scrollIntoView: true,
    userEvent: e2,
    effects: e2 == "delete.selection" ? A$4.announce.of(i2.phrase("Selection deleted")) : void 0
  })), true);
}
function Fi(s3, t2, e2) {
  if (s3 instanceof A$4)
    for (let i2 of s3.state.facet(A$4.atomicRanges).map((n2) => n2(s3)))
      i2.between(t2, t2, (n2, r2) => {
        n2 < t2 && r2 > t2 && (t2 = e2 ? r2 : n2);
      });
  return t2;
}
const Uh = (s3, t2) => Rn(s3, (e2) => {
  let { state: i2 } = s3, n2 = i2.doc.lineAt(e2), r2, o2;
  if (!t2 && e2 > n2.from && e2 < n2.from + 200 && !/[^ \t]/.test(r2 = n2.text.slice(0, e2 - n2.from))) {
    if (r2[r2.length - 1] == "	")
      return e2 - 1;
    let l2 = Cn(r2, i2.tabSize), h2 = l2 % mn(i2) || mn(i2);
    for (let a2 = 0; a2 < h2 && r2[r2.length - 1 - a2] == " "; a2++)
      e2--;
    o2 = e2;
  } else
    o2 = xt(n2.text, e2 - n2.from, t2, t2) + n2.from, o2 == e2 && n2.number != (t2 ? i2.doc.lines : 1) && (o2 += t2 ? 1 : -1);
  return o2;
}), $s = (s3) => Uh(s3, false), Qh = (s3) => Uh(s3, true), Jh = (s3, t2) => Rn(s3, (e2) => {
  let i2 = e2, { state: n2 } = s3, r2 = n2.doc.lineAt(i2), o2 = n2.charCategorizer(i2);
  for (let l2 = null; ; ) {
    if (i2 == (t2 ? r2.to : r2.from)) {
      i2 == e2 && r2.number != (t2 ? n2.doc.lines : 1) && (i2 += t2 ? 1 : -1);
      break;
    }
    let h2 = xt(r2.text, i2 - r2.from, t2) + r2.from, a2 = r2.text.slice(Math.min(i2, h2) - r2.from, Math.max(i2, h2) - r2.from), c2 = o2(a2);
    if (l2 != null && c2 != l2)
      break;
    (a2 != " " || i2 != e2) && (l2 = c2), i2 = h2;
  }
  return i2;
}), Xh = (s3) => Jh(s3, false), Np = (s3) => Jh(s3, true), Yh = (s3) => Rn(s3, (t2) => {
  let e2 = s3.lineBlockAt(t2).to;
  return t2 < e2 ? e2 : Math.min(s3.state.doc.length, t2 + 1);
}), Vp = (s3) => Rn(s3, (t2) => {
  let e2 = s3.lineBlockAt(t2).from;
  return t2 > e2 ? e2 : Math.max(0, t2 - 1);
}), Ip = ({ state: s3, dispatch: t2 }) => {
  if (s3.readOnly)
    return false;
  let e2 = s3.changeByRange((i2) => ({
    changes: { from: i2.from, to: i2.to, insert: E$4.of(["", ""]) },
    range: b$2.cursor(i2.from)
  }));
  return t2(s3.update(e2, { scrollIntoView: true, userEvent: "input" })), true;
}, Hp = ({ state: s3, dispatch: t2 }) => {
  if (s3.readOnly)
    return false;
  let e2 = s3.changeByRange((i2) => {
    if (!i2.empty || i2.from == 0 || i2.from == s3.doc.length)
      return { range: i2 };
    let n2 = i2.from, r2 = s3.doc.lineAt(n2), o2 = n2 == r2.from ? n2 - 1 : xt(r2.text, n2 - r2.from, false) + r2.from, l2 = n2 == r2.to ? n2 + 1 : xt(r2.text, n2 - r2.from, true) + r2.from;
    return {
      changes: { from: o2, to: l2, insert: s3.doc.slice(n2, l2).append(s3.doc.slice(o2, n2)) },
      range: b$2.cursor(l2)
    };
  });
  return e2.changes.empty ? false : (t2(s3.update(e2, { scrollIntoView: true, userEvent: "move.character" })), true);
};
function Ln(s3) {
  let t2 = [], e2 = -1;
  for (let i2 of s3.selection.ranges) {
    let n2 = s3.doc.lineAt(i2.from), r2 = s3.doc.lineAt(i2.to);
    if (!i2.empty && i2.to == r2.from && (r2 = s3.doc.lineAt(i2.to - 1)), e2 >= n2.number) {
      let o2 = t2[t2.length - 1];
      o2.to = r2.to, o2.ranges.push(i2);
    } else
      t2.push({ from: n2.from, to: r2.to, ranges: [i2] });
    e2 = r2.number + 1;
  }
  return t2;
}
function Zh(s3, t2, e2) {
  if (s3.readOnly)
    return false;
  let i2 = [], n2 = [];
  for (let r2 of Ln(s3)) {
    if (e2 ? r2.to == s3.doc.length : r2.from == 0)
      continue;
    let o2 = s3.doc.lineAt(e2 ? r2.to + 1 : r2.from - 1), l2 = o2.length + 1;
    if (e2) {
      i2.push({ from: r2.to, to: o2.to }, { from: r2.from, insert: o2.text + s3.lineBreak });
      for (let h2 of r2.ranges)
        n2.push(b$2.range(Math.min(s3.doc.length, h2.anchor + l2), Math.min(s3.doc.length, h2.head + l2)));
    } else {
      i2.push({ from: o2.from, to: r2.from }, { from: r2.to, insert: s3.lineBreak + o2.text });
      for (let h2 of r2.ranges)
        n2.push(b$2.range(h2.anchor - l2, h2.head - l2));
    }
  }
  return i2.length ? (t2(s3.update({
    changes: i2,
    scrollIntoView: true,
    selection: b$2.create(n2, s3.selection.mainIndex),
    userEvent: "move.line"
  })), true) : false;
}
const $p = ({ state: s3, dispatch: t2 }) => Zh(s3, t2, false), Fp = ({ state: s3, dispatch: t2 }) => Zh(s3, t2, true);
function ta(s3, t2, e2) {
  if (s3.readOnly)
    return false;
  let i2 = [];
  for (let n2 of Ln(s3))
    e2 ? i2.push({ from: n2.from, insert: s3.doc.slice(n2.from, n2.to) + s3.lineBreak }) : i2.push({ from: n2.to, insert: s3.lineBreak + s3.doc.slice(n2.from, n2.to) });
  return t2(s3.update({ changes: i2, scrollIntoView: true, userEvent: "input.copyline" })), true;
}
const zp = ({ state: s3, dispatch: t2 }) => ta(s3, t2, false), _p = ({ state: s3, dispatch: t2 }) => ta(s3, t2, true), Wp = (s3) => {
  if (s3.state.readOnly)
    return false;
  let { state: t2 } = s3, e2 = t2.changes(Ln(t2).map(({ from: n2, to: r2 }) => (n2 > 0 ? n2-- : r2 < t2.doc.length && r2++, { from: n2, to: r2 }))), i2 = Ye(t2.selection, (n2) => s3.moveVertically(n2, true)).map(e2);
  return s3.dispatch({ changes: e2, selection: i2, scrollIntoView: true, userEvent: "delete.line" }), true;
};
function jp(s3, t2) {
  if (/\(\)|\[\]|\{\}/.test(s3.sliceDoc(t2 - 1, t2 + 1)))
    return { from: t2, to: t2 };
  let e2 = St(s3).resolveInner(t2), i2 = e2.childBefore(t2), n2 = e2.childAfter(t2), r2;
  return i2 && n2 && i2.to <= t2 && n2.from >= t2 && (r2 = i2.type.prop(P$3.closedBy)) && r2.indexOf(n2.name) > -1 && s3.doc.lineAt(i2.to).from == s3.doc.lineAt(n2.from).from ? { from: i2.to, to: n2.from } : null;
}
const qp = /* @__PURE__ */ ea(false), Kp = /* @__PURE__ */ ea(true);
function ea(s3) {
  return ({ state: t2, dispatch: e2 }) => {
    if (t2.readOnly)
      return false;
    let i2 = t2.changeByRange((n2) => {
      let { from: r2, to: o2 } = n2, l2 = t2.doc.lineAt(r2), h2 = !s3 && r2 == o2 && jp(t2, r2);
      s3 && (r2 = o2 = (o2 <= l2.to ? l2 : t2.doc.lineAt(o2)).to);
      let a2 = new Dn(t2, { simulateBreak: r2, simulateDoubleBreak: !!h2 }), c2 = sr(a2, r2);
      for (c2 == null && (c2 = /^\s*/.exec(t2.doc.lineAt(r2).text)[0].length); o2 < l2.to && /\s/.test(l2.text[o2 - l2.from]); )
        o2++;
      h2 ? { from: r2, to: o2 } = h2 : r2 > l2.from && r2 < l2.from + 100 && !/\S/.test(l2.text.slice(0, r2)) && (r2 = l2.from);
      let f2 = ["", wi(t2, c2)];
      return h2 && f2.push(wi(t2, a2.lineIndent(l2.from, -1))), {
        changes: { from: r2, to: o2, insert: E$4.of(f2) },
        range: b$2.cursor(r2 + 1 + f2[1].length)
      };
    });
    return e2(t2.update(i2, { scrollIntoView: true, userEvent: "input" })), true;
  };
}
function hr(s3, t2) {
  let e2 = -1;
  return s3.changeByRange((i2) => {
    let n2 = [];
    for (let o2 = i2.from; o2 <= i2.to; ) {
      let l2 = s3.doc.lineAt(o2);
      l2.number > e2 && (i2.empty || i2.to > l2.from) && (t2(l2, n2, i2), e2 = l2.number), o2 = l2.to + 1;
    }
    let r2 = s3.changes(n2);
    return {
      changes: n2,
      range: b$2.range(r2.mapPos(i2.anchor, 1), r2.mapPos(i2.head, 1))
    };
  });
}
const Gp = ({ state: s3, dispatch: t2 }) => {
  if (s3.readOnly)
    return false;
  let e2 = /* @__PURE__ */ Object.create(null), i2 = new Dn(s3, { overrideIndentation: (r2) => {
    let o2 = e2[r2];
    return o2 ?? -1;
  } }), n2 = hr(s3, (r2, o2, l2) => {
    let h2 = sr(i2, r2.from);
    if (h2 == null)
      return;
    /\S/.test(r2.text) || (h2 = 0);
    let a2 = /^\s*/.exec(r2.text)[0], c2 = wi(s3, h2);
    (a2 != c2 || l2.from < r2.from + a2.length) && (e2[r2.from] = h2, o2.push({ from: r2.from, to: r2.from + a2.length, insert: c2 }));
  });
  return n2.changes.empty || t2(s3.update(n2, { userEvent: "indent" })), true;
}, Up = ({ state: s3, dispatch: t2 }) => s3.readOnly ? false : (t2(s3.update(hr(s3, (e2, i2) => {
  i2.push({ from: e2.from, insert: s3.facet(nr) });
}), { userEvent: "input.indent" })), true), Qp = ({ state: s3, dispatch: t2 }) => s3.readOnly ? false : (t2(s3.update(hr(s3, (e2, i2) => {
  let n2 = /^\s*/.exec(e2.text)[0];
  if (!n2)
    return;
  let r2 = Cn(n2, s3.tabSize), o2 = 0, l2 = wi(s3, Math.max(0, r2 - mn(s3)));
  for (; o2 < n2.length && o2 < l2.length && n2.charCodeAt(o2) == l2.charCodeAt(o2); )
    o2++;
  i2.push({ from: e2.from + o2, to: e2.from + n2.length, insert: l2.slice(o2) });
}), { userEvent: "delete.dedent" })), true), Jp = [
  { key: "Ctrl-b", run: Rh, shift: zh, preventDefault: true },
  { key: "Ctrl-f", run: Lh, shift: _h },
  { key: "Ctrl-p", run: Vh, shift: qh },
  { key: "Ctrl-n", run: Ih, shift: Kh },
  { key: "Ctrl-a", run: wp, shift: Tp },
  { key: "Ctrl-e", run: yp, shift: Pp },
  { key: "Ctrl-d", run: Qh },
  { key: "Ctrl-h", run: $s },
  { key: "Ctrl-k", run: Yh },
  { key: "Ctrl-Alt-h", run: Xh },
  { key: "Ctrl-o", run: Ip },
  { key: "Ctrl-t", run: Hp },
  { key: "Ctrl-v", run: Hs }
], Xp = /* @__PURE__ */ [
  { key: "ArrowLeft", run: Rh, shift: zh, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: hp, shift: xp, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: gp, shift: Mp, preventDefault: true },
  { key: "ArrowRight", run: Lh, shift: _h, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: ap, shift: vp, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: mp, shift: Dp, preventDefault: true },
  { key: "ArrowUp", run: Vh, shift: qh, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: Ao, shift: Mo },
  { mac: "Ctrl-ArrowUp", run: vo, shift: So },
  { key: "ArrowDown", run: Ih, shift: Kh, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: Oo, shift: Do },
  { mac: "Ctrl-ArrowDown", run: Hs, shift: Co },
  { key: "PageUp", run: vo, shift: So },
  { key: "PageDown", run: Hs, shift: Co },
  { key: "Home", run: pp, shift: Op, preventDefault: true },
  { key: "Mod-Home", run: Ao, shift: Mo },
  { key: "End", run: dp, shift: Ap, preventDefault: true },
  { key: "Mod-End", run: Oo, shift: Do },
  { key: "Enter", run: qp },
  { key: "Mod-a", run: Bp },
  { key: "Backspace", run: $s, shift: $s },
  { key: "Delete", run: Qh },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: Xh },
  { key: "Mod-Delete", mac: "Alt-Delete", run: Np },
  { mac: "Mod-Backspace", run: Vp },
  { mac: "Mod-Delete", run: Yh }
].concat(/* @__PURE__ */ Jp.map((s3) => ({ mac: s3.key, run: s3.run, shift: s3.shift }))), Yp = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: fp, shift: Sp },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: up, shift: Cp },
  { key: "Alt-ArrowUp", run: $p },
  { key: "Shift-Alt-ArrowUp", run: zp },
  { key: "Alt-ArrowDown", run: Fp },
  { key: "Shift-Alt-ArrowDown", run: _p },
  { key: "Escape", run: Ep },
  { key: "Mod-Enter", run: Kp },
  { key: "Alt-l", mac: "Ctrl-l", run: Rp },
  { key: "Mod-i", run: Lp, preventDefault: true },
  { key: "Mod-[", run: Qp },
  { key: "Mod-]", run: Up },
  { key: "Mod-Alt-\\", run: Gp },
  { key: "Shift-Mod-k", run: Wp },
  { key: "Shift-Mod-\\", run: kp },
  { key: "Mod-/", run: ep },
  { key: "Alt-A", run: np }
].concat(Xp);
class bn {
  /// @internal
  constructor(t2, e2, i2, n2, r2, o2, l2, h2, a2, c2 = 0, f2) {
    this.p = t2, this.stack = e2, this.state = i2, this.reducePos = n2, this.pos = r2, this.score = o2, this.buffer = l2, this.bufferBase = h2, this.curContext = a2, this.lookAhead = c2, this.parent = f2;
  }
  /// @internal
  toString() {
    return `[${this.stack.filter((t2, e2) => e2 % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /// @internal
  static start(t2, e2, i2 = 0) {
    let n2 = t2.parser.context;
    return new bn(t2, [], e2, i2, i2, 0, [], 0, n2 ? new To(n2, n2.start) : null, 0, null);
  }
  /// The stack's current [context](#lr.ContextTracker) value, if
  /// any. Its type will depend on the context tracker's type
  /// parameter, or it will be `null` if there is no context
  /// tracker.
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /// @internal
  pushState(t2, e2) {
    this.stack.push(this.state, e2, this.bufferBase + this.buffer.length), this.state = t2;
  }
  // Apply a reduce action
  /// @internal
  reduce(t2) {
    var e2;
    let i2 = t2 >> 19, n2 = t2 & 65535, { parser: r2 } = this.p, o2 = r2.dynamicPrecedence(n2);
    if (o2 && (this.score += o2), i2 == 0) {
      this.pushState(r2.getGoto(this.state, n2, true), this.reducePos), n2 < r2.minRepeatTerm && this.storeNode(n2, this.reducePos, this.reducePos, 4, true), this.reduceContext(n2, this.reducePos);
      return;
    }
    let l2 = this.stack.length - (i2 - 1) * 3 - (t2 & 262144 ? 6 : 0), h2 = l2 ? this.stack[l2 - 2] : this.p.ranges[0].from, a2 = this.reducePos - h2;
    a2 >= 2e3 && !(!((e2 = this.p.parser.nodeSet.types[n2]) === null || e2 === void 0) && e2.isAnonymous) && (h2 == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = a2) : this.p.lastBigReductionSize < a2 && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = h2, this.p.lastBigReductionSize = a2));
    let c2 = l2 ? this.stack[l2 - 1] : 0, f2 = this.bufferBase + this.buffer.length - c2;
    if (n2 < r2.minRepeatTerm || t2 & 131072) {
      let u2 = r2.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(n2, h2, u2, f2 + 4, true);
    }
    if (t2 & 262144)
      this.state = this.stack[l2];
    else {
      let u2 = this.stack[l2 - 3];
      this.state = r2.getGoto(u2, n2, true);
    }
    for (; this.stack.length > l2; )
      this.stack.pop();
    this.reduceContext(n2, h2);
  }
  // Shift a value into the buffer
  /// @internal
  storeNode(t2, e2, i2, n2 = 4, r2 = false) {
    if (t2 == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o2 = this, l2 = this.buffer.length;
      if (l2 == 0 && o2.parent && (l2 = o2.bufferBase - o2.parent.bufferBase, o2 = o2.parent), l2 > 0 && o2.buffer[l2 - 4] == 0 && o2.buffer[l2 - 1] > -1) {
        if (e2 == i2)
          return;
        if (o2.buffer[l2 - 2] >= e2) {
          o2.buffer[l2 - 2] = i2;
          return;
        }
      }
    }
    if (!r2 || this.pos == i2)
      this.buffer.push(t2, e2, i2, n2);
    else {
      let o2 = this.buffer.length;
      if (o2 > 0 && this.buffer[o2 - 4] != 0)
        for (; o2 > 0 && this.buffer[o2 - 2] > i2; )
          this.buffer[o2] = this.buffer[o2 - 4], this.buffer[o2 + 1] = this.buffer[o2 - 3], this.buffer[o2 + 2] = this.buffer[o2 - 2], this.buffer[o2 + 3] = this.buffer[o2 - 1], o2 -= 4, n2 > 4 && (n2 -= 4);
      this.buffer[o2] = t2, this.buffer[o2 + 1] = e2, this.buffer[o2 + 2] = i2, this.buffer[o2 + 3] = n2;
    }
  }
  // Apply a shift action
  /// @internal
  shift(t2, e2, i2) {
    let n2 = this.pos;
    if (t2 & 131072)
      this.pushState(t2 & 65535, this.pos);
    else if (t2 & 262144)
      this.pos = i2, this.shiftContext(e2, n2), e2 <= this.p.parser.maxNode && this.buffer.push(e2, n2, i2, 4);
    else {
      let r2 = t2, { parser: o2 } = this.p;
      (i2 > this.pos || e2 <= o2.maxNode) && (this.pos = i2, o2.stateFlag(
        r2,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = i2)), this.pushState(r2, n2), this.shiftContext(e2, n2), e2 <= o2.maxNode && this.buffer.push(e2, n2, i2, 4);
    }
  }
  // Apply an action
  /// @internal
  apply(t2, e2, i2) {
    t2 & 65536 ? this.reduce(t2) : this.shift(t2, e2, i2);
  }
  // Add a prebuilt (reused) node into the buffer.
  /// @internal
  useNode(t2, e2) {
    let i2 = this.p.reused.length - 1;
    (i2 < 0 || this.p.reused[i2] != t2) && (this.p.reused.push(t2), i2++);
    let n2 = this.pos;
    this.reducePos = this.pos = n2 + t2.length, this.pushState(e2, n2), this.buffer.push(
      i2,
      n2,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, t2, this, this.p.stream.reset(this.pos - t2.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /// @internal
  split() {
    let t2 = this, e2 = t2.buffer.length;
    for (; e2 > 0 && t2.buffer[e2 - 2] > t2.reducePos; )
      e2 -= 4;
    let i2 = t2.buffer.slice(e2), n2 = t2.bufferBase + e2;
    for (; t2 && n2 == t2.bufferBase; )
      t2 = t2.parent;
    return new bn(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i2, n2, this.curContext, this.lookAhead, t2);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /// @internal
  recoverByDelete(t2, e2) {
    let i2 = t2 <= this.p.parser.maxNode;
    i2 && this.storeNode(t2, this.pos, e2, 4), this.storeNode(0, this.pos, e2, i2 ? 8 : 4), this.pos = this.reducePos = e2, this.score -= 190;
  }
  /// Check if the given term would be able to be shifted (optionally
  /// after some reductions) on this stack. This can be useful for
  /// external tokenizers that want to make sure they only provide a
  /// given token when it applies.
  canShift(t2) {
    for (let e2 = new Zp(this); ; ) {
      let i2 = this.p.parser.stateSlot(
        e2.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(e2.state, t2);
      if (i2 == 0)
        return false;
      if (!(i2 & 65536))
        return true;
      e2.reduce(i2);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /// @internal
  recoverByInsert(t2) {
    if (this.stack.length >= 300)
      return [];
    let e2 = this.p.parser.nextStates(this.state);
    if (e2.length > 4 << 1 || this.stack.length >= 120) {
      let n2 = [];
      for (let r2 = 0, o2; r2 < e2.length; r2 += 2)
        (o2 = e2[r2 + 1]) != this.state && this.p.parser.hasAction(o2, t2) && n2.push(e2[r2], o2);
      if (this.stack.length < 120)
        for (let r2 = 0; n2.length < 4 << 1 && r2 < e2.length; r2 += 2) {
          let o2 = e2[r2 + 1];
          n2.some((l2, h2) => h2 & 1 && l2 == o2) || n2.push(e2[r2], o2);
        }
      e2 = n2;
    }
    let i2 = [];
    for (let n2 = 0; n2 < e2.length && i2.length < 4; n2 += 2) {
      let r2 = e2[n2 + 1];
      if (r2 == this.state)
        continue;
      let o2 = this.split();
      o2.pushState(r2, this.pos), o2.storeNode(0, o2.pos, o2.pos, 4, true), o2.shiftContext(e2[n2], this.pos), o2.score -= 200, i2.push(o2);
    }
    return i2;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /// @internal
  forceReduce() {
    let t2 = this.p.parser.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if (!(t2 & 65536))
      return false;
    let { parser: e2 } = this.p;
    if (!e2.validAction(this.state, t2)) {
      let i2 = t2 >> 19, n2 = t2 & 65535, r2 = this.stack.length - i2 * 3;
      if (r2 < 0 || e2.getGoto(this.stack[r2], n2, false) < 0)
        return false;
      this.storeNode(0, this.reducePos, this.reducePos, 4, true), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t2), true;
  }
  /// @internal
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    return this;
  }
  /// Check whether this state has no further actions (assumed to be a direct descendant of the
  /// top state, since any other states must be able to continue
  /// somehow). @internal
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: t2 } = this.p;
    return t2.data[t2.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !t2.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /// Restart the stack (put it back in its start state). Only safe
  /// when this.stack.length == 3 (state is directly below the top
  /// state). @internal
  restart() {
    this.state = this.stack[0], this.stack.length = 0;
  }
  /// @internal
  sameState(t2) {
    if (this.state != t2.state || this.stack.length != t2.stack.length)
      return false;
    for (let e2 = 0; e2 < this.stack.length; e2 += 3)
      if (this.stack[e2] != t2.stack[e2])
        return false;
    return true;
  }
  /// Get the parser used by this stack.
  get parser() {
    return this.p.parser;
  }
  /// Test whether a given dialect (by numeric ID, as exported from
  /// the terms file) is enabled.
  dialectEnabled(t2) {
    return this.p.parser.dialect.flags[t2];
  }
  shiftContext(t2, e2) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, t2, this, this.p.stream.reset(e2)));
  }
  reduceContext(t2, e2) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, t2, this, this.p.stream.reset(e2)));
  }
  /// @internal
  emitContext() {
    let t2 = this.buffer.length - 1;
    (t2 < 0 || this.buffer[t2] != -3) && this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
  }
  /// @internal
  emitLookAhead() {
    let t2 = this.buffer.length - 1;
    (t2 < 0 || this.buffer[t2] != -4) && this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
  }
  updateContext(t2) {
    if (t2 != this.curContext.context) {
      let e2 = new To(this.curContext.tracker, t2);
      e2.hash != this.curContext.hash && this.emitContext(), this.curContext = e2;
    }
  }
  /// @internal
  setLookAhead(t2) {
    t2 > this.lookAhead && (this.emitLookAhead(), this.lookAhead = t2);
  }
  /// @internal
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class To {
  constructor(t2, e2) {
    this.tracker = t2, this.context = e2, this.hash = t2.strict ? t2.hash(e2) : 0;
  }
}
var Po;
(function(s3) {
  s3[s3.Insert = 200] = "Insert", s3[s3.Delete = 190] = "Delete", s3[s3.Reduce = 100] = "Reduce", s3[s3.MaxNext = 4] = "MaxNext", s3[s3.MaxInsertStackDepth = 300] = "MaxInsertStackDepth", s3[s3.DampenInsertStackDepth = 120] = "DampenInsertStackDepth", s3[s3.MinBigReduction = 2e3] = "MinBigReduction";
})(Po || (Po = {}));
class Zp {
  constructor(t2) {
    this.start = t2, this.state = t2.state, this.stack = t2.stack, this.base = this.stack.length;
  }
  reduce(t2) {
    let e2 = t2 & 65535, i2 = t2 >> 19;
    i2 == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i2 - 1) * 3;
    let n2 = this.start.p.parser.getGoto(this.stack[this.base - 3], e2, true);
    this.state = n2;
  }
}
class kn {
  constructor(t2, e2, i2) {
    this.stack = t2, this.pos = e2, this.index = i2, this.buffer = t2.buffer, this.index == 0 && this.maybeNext();
  }
  static create(t2, e2 = t2.bufferBase + t2.buffer.length) {
    return new kn(t2, e2, e2 - t2.bufferBase);
  }
  maybeNext() {
    let t2 = this.stack.parent;
    t2 != null && (this.index = this.stack.bufferBase - t2.bufferBase, this.stack = t2, this.buffer = t2.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new kn(this.stack, this.pos, this.index);
  }
}
function zi(s3, t2 = Uint16Array) {
  if (typeof s3 != "string")
    return s3;
  let e2 = null;
  for (let i2 = 0, n2 = 0; i2 < s3.length; ) {
    let r2 = 0;
    for (; ; ) {
      let o2 = s3.charCodeAt(i2++), l2 = false;
      if (o2 == 126) {
        r2 = 65535;
        break;
      }
      o2 >= 92 && o2--, o2 >= 34 && o2--;
      let h2 = o2 - 32;
      if (h2 >= 46 && (h2 -= 46, l2 = true), r2 += h2, l2)
        break;
      r2 *= 46;
    }
    e2 ? e2[n2++] = r2 : e2 = new t2(r2);
  }
  return e2;
}
class Ji {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const Bo = new Ji();
class tg {
  /// @internal
  constructor(t2, e2) {
    this.input = t2, this.ranges = e2, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = Bo, this.rangeIndex = 0, this.pos = this.chunkPos = e2[0].from, this.range = e2[0], this.end = e2[e2.length - 1].to, this.readNext();
  }
  /// @internal
  resolveOffset(t2, e2) {
    let i2 = this.range, n2 = this.rangeIndex, r2 = this.pos + t2;
    for (; r2 < i2.from; ) {
      if (!n2)
        return null;
      let o2 = this.ranges[--n2];
      r2 -= i2.from - o2.to, i2 = o2;
    }
    for (; e2 < 0 ? r2 > i2.to : r2 >= i2.to; ) {
      if (n2 == this.ranges.length - 1)
        return null;
      let o2 = this.ranges[++n2];
      r2 += o2.from - i2.to, i2 = o2;
    }
    return r2;
  }
  /// @internal
  clipPos(t2) {
    if (t2 >= this.range.from && t2 < this.range.to)
      return t2;
    for (let e2 of this.ranges)
      if (e2.to > t2)
        return Math.max(t2, e2.from);
    return this.end;
  }
  /// Look at a code unit near the stream position. `.peek(0)` equals
  /// `.next`, `.peek(-1)` gives you the previous character, and so
  /// on.
  ///
  /// Note that looking around during tokenizing creates dependencies
  /// on potentially far-away content, which may reduce the
  /// effectiveness incremental parsing—when looking forward—or even
  /// cause invalid reparses when looking backward more than 25 code
  /// units, since the library does not track lookbehind.
  peek(t2) {
    let e2 = this.chunkOff + t2, i2, n2;
    if (e2 >= 0 && e2 < this.chunk.length)
      i2 = this.pos + t2, n2 = this.chunk.charCodeAt(e2);
    else {
      let r2 = this.resolveOffset(t2, 1);
      if (r2 == null)
        return -1;
      if (i2 = r2, i2 >= this.chunk2Pos && i2 < this.chunk2Pos + this.chunk2.length)
        n2 = this.chunk2.charCodeAt(i2 - this.chunk2Pos);
      else {
        let o2 = this.rangeIndex, l2 = this.range;
        for (; l2.to <= i2; )
          l2 = this.ranges[++o2];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i2), i2 + this.chunk2.length > l2.to && (this.chunk2 = this.chunk2.slice(0, l2.to - i2)), n2 = this.chunk2.charCodeAt(0);
      }
    }
    return i2 >= this.token.lookAhead && (this.token.lookAhead = i2 + 1), n2;
  }
  /// Accept a token. By default, the end of the token is set to the
  /// current stream position, but you can pass an offset (relative to
  /// the stream position) to change that.
  acceptToken(t2, e2 = 0) {
    let i2 = e2 ? this.resolveOffset(e2, -1) : this.pos;
    if (i2 == null || i2 < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = t2, this.token.end = i2;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: t2, chunkPos: e2 } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = t2, this.chunk2Pos = e2, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let t2 = this.input.chunk(this.pos), e2 = this.pos + t2.length;
      this.chunk = e2 > this.range.to ? t2.slice(0, this.range.to - this.pos) : t2, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /// Move the stream forward N (defaults to 1) code units. Returns
  /// the new value of [`next`](#lr.InputStream.next).
  advance(t2 = 1) {
    for (this.chunkOff += t2; this.pos + t2 >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      t2 -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += t2, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /// @internal
  reset(t2, e2) {
    if (e2 ? (this.token = e2, e2.start = t2, e2.lookAhead = t2 + 1, e2.value = e2.extended = -1) : this.token = Bo, this.pos != t2) {
      if (this.pos = t2, t2 == this.end)
        return this.setDone(), this;
      for (; t2 < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; t2 >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      t2 >= this.chunkPos && t2 < this.chunkPos + this.chunk.length ? this.chunkOff = t2 - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /// @internal
  read(t2, e2) {
    if (t2 >= this.chunkPos && e2 <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(t2 - this.chunkPos, e2 - this.chunkPos);
    if (t2 >= this.chunk2Pos && e2 <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(t2 - this.chunk2Pos, e2 - this.chunk2Pos);
    if (t2 >= this.range.from && e2 <= this.range.to)
      return this.input.read(t2, e2);
    let i2 = "";
    for (let n2 of this.ranges) {
      if (n2.from >= e2)
        break;
      n2.to > t2 && (i2 += this.input.read(Math.max(n2.from, t2), Math.min(n2.to, e2)));
    }
    return i2;
  }
}
class ze {
  constructor(t2, e2) {
    this.data = t2, this.id = e2;
  }
  token(t2, e2) {
    let { parser: i2 } = e2.p;
    eg(this.data, t2, e2, this.id, i2.data, i2.tokenPrecTable);
  }
}
ze.prototype.contextual = ze.prototype.fallback = ze.prototype.extend = false;
ze.prototype.fallback = ze.prototype.extend = false;
function eg(s3, t2, e2, i2, n2, r2) {
  let o2 = 0, l2 = 1 << i2, { dialect: h2 } = e2.p.parser;
  t:
    for (; l2 & s3[o2]; ) {
      let a2 = s3[o2 + 1];
      for (let d2 = o2 + 3; d2 < a2; d2 += 2)
        if ((s3[d2 + 1] & l2) > 0) {
          let p2 = s3[d2];
          if (h2.allows(p2) && (t2.token.value == -1 || t2.token.value == p2 || ig(p2, t2.token.value, n2, r2))) {
            t2.acceptToken(p2);
            break;
          }
        }
      let c2 = t2.next, f2 = 0, u2 = s3[o2 + 2];
      if (t2.next < 0 && u2 > f2 && s3[a2 + u2 * 3 - 3] == 65535 && s3[a2 + u2 * 3 - 3] == 65535) {
        o2 = s3[a2 + u2 * 3 - 1];
        continue t;
      }
      for (; f2 < u2; ) {
        let d2 = f2 + u2 >> 1, p2 = a2 + d2 + (d2 << 1), w2 = s3[p2], g2 = s3[p2 + 1] || 65536;
        if (c2 < w2)
          u2 = d2;
        else if (c2 >= g2)
          f2 = d2 + 1;
        else {
          o2 = s3[p2 + 2], t2.advance();
          continue t;
        }
      }
      break;
    }
}
function Ro(s3, t2, e2) {
  for (let i2 = t2, n2; (n2 = s3[i2]) != 65535; i2++)
    if (n2 == e2)
      return i2 - t2;
  return -1;
}
function ig(s3, t2, e2, i2) {
  let n2 = Ro(e2, i2, t2);
  return n2 < 0 || Ro(e2, i2, s3) < n2;
}
const Dt = typeof process < "u" && process.env && /\bparse\b/.test({}.LOG);
let Yn = null;
var Lo;
(function(s3) {
  s3[s3.Margin = 25] = "Margin";
})(Lo || (Lo = {}));
function Eo(s3, t2, e2) {
  let i2 = s3.cursor(st.IncludeAnonymous);
  for (i2.moveTo(t2); ; )
    if (!(e2 < 0 ? i2.childBefore(t2) : i2.childAfter(t2)))
      for (; ; ) {
        if ((e2 < 0 ? i2.to < t2 : i2.from > t2) && !i2.type.isError)
          return e2 < 0 ? Math.max(0, Math.min(
            i2.to - 1,
            t2 - 25
            /* Safety.Margin */
          )) : Math.min(s3.length, Math.max(
            i2.from + 1,
            t2 + 25
            /* Safety.Margin */
          ));
        if (e2 < 0 ? i2.prevSibling() : i2.nextSibling())
          break;
        if (!i2.parent())
          return e2 < 0 ? 0 : s3.length;
      }
}
class ng {
  constructor(t2, e2) {
    this.fragments = t2, this.nodeSet = e2, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let t2 = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (t2) {
      for (this.safeFrom = t2.openStart ? Eo(t2.tree, t2.from + t2.offset, 1) - t2.offset : t2.from, this.safeTo = t2.openEnd ? Eo(t2.tree, t2.to + t2.offset, -1) - t2.offset : t2.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(t2.tree), this.start.push(-t2.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(t2) {
    if (t2 < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= t2; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let e2 = this.trees.length - 1;
      if (e2 < 0)
        return this.nextFragment(), null;
      let i2 = this.trees[e2], n2 = this.index[e2];
      if (n2 == i2.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let r2 = i2.children[n2], o2 = this.start[e2] + i2.positions[n2];
      if (o2 > t2)
        return this.nextStart = o2, null;
      if (r2 instanceof J$1) {
        if (o2 == t2) {
          if (o2 < this.safeFrom)
            return null;
          let l2 = o2 + r2.length;
          if (l2 <= this.safeTo) {
            let h2 = r2.prop(P$3.lookAhead);
            if (!h2 || l2 + h2 < this.fragment.to)
              return r2;
          }
        }
        this.index[e2]++, o2 + r2.length >= Math.max(this.safeFrom, t2) && (this.trees.push(r2), this.start.push(o2), this.index.push(0));
      } else
        this.index[e2]++, this.nextStart = o2 + r2.length;
    }
  }
}
class sg {
  constructor(t2, e2) {
    this.stream = e2, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = t2.tokenizers.map((i2) => new Ji());
  }
  getActions(t2) {
    let e2 = 0, i2 = null, { parser: n2 } = t2.p, { tokenizers: r2 } = n2, o2 = n2.stateSlot(
      t2.state,
      3
      /* ParseState.TokenizerMask */
    ), l2 = t2.curContext ? t2.curContext.hash : 0, h2 = 0;
    for (let a2 = 0; a2 < r2.length; a2++) {
      if (!(1 << a2 & o2))
        continue;
      let c2 = r2[a2], f2 = this.tokens[a2];
      if (!(i2 && !c2.fallback) && ((c2.contextual || f2.start != t2.pos || f2.mask != o2 || f2.context != l2) && (this.updateCachedToken(f2, c2, t2), f2.mask = o2, f2.context = l2), f2.lookAhead > f2.end + 25 && (h2 = Math.max(f2.lookAhead, h2)), f2.value != 0)) {
        let u2 = e2;
        if (f2.extended > -1 && (e2 = this.addActions(t2, f2.extended, f2.end, e2)), e2 = this.addActions(t2, f2.value, f2.end, e2), !c2.extend && (i2 = f2, e2 > u2))
          break;
      }
    }
    for (; this.actions.length > e2; )
      this.actions.pop();
    return h2 && t2.setLookAhead(h2), !i2 && t2.pos == this.stream.end && (i2 = new Ji(), i2.value = t2.p.parser.eofTerm, i2.start = i2.end = t2.pos, e2 = this.addActions(t2, i2.value, i2.end, e2)), this.mainToken = i2, this.actions;
  }
  getMainToken(t2) {
    if (this.mainToken)
      return this.mainToken;
    let e2 = new Ji(), { pos: i2, p: n2 } = t2;
    return e2.start = i2, e2.end = Math.min(i2 + 1, n2.stream.end), e2.value = i2 == n2.stream.end ? n2.parser.eofTerm : 0, e2;
  }
  updateCachedToken(t2, e2, i2) {
    let n2 = this.stream.clipPos(i2.pos);
    if (e2.token(this.stream.reset(n2, t2), i2), t2.value > -1) {
      let { parser: r2 } = i2.p;
      for (let o2 = 0; o2 < r2.specialized.length; o2++)
        if (r2.specialized[o2] == t2.value) {
          let l2 = r2.specializers[o2](this.stream.read(t2.start, t2.end), i2);
          if (l2 >= 0 && i2.p.parser.dialect.allows(l2 >> 1)) {
            l2 & 1 ? t2.extended = l2 >> 1 : t2.value = l2 >> 1;
            break;
          }
        }
    } else
      t2.value = 0, t2.end = this.stream.clipPos(n2 + 1);
  }
  putAction(t2, e2, i2, n2) {
    for (let r2 = 0; r2 < n2; r2 += 3)
      if (this.actions[r2] == t2)
        return n2;
    return this.actions[n2++] = t2, this.actions[n2++] = e2, this.actions[n2++] = i2, n2;
  }
  addActions(t2, e2, i2, n2) {
    let { state: r2 } = t2, { parser: o2 } = t2.p, { data: l2 } = o2;
    for (let h2 = 0; h2 < 2; h2++)
      for (let a2 = o2.stateSlot(
        r2,
        h2 ? 2 : 1
        /* ParseState.Actions */
      ); ; a2 += 3) {
        if (l2[a2] == 65535)
          if (l2[a2 + 1] == 1)
            a2 = Qt(l2, a2 + 2);
          else {
            n2 == 0 && l2[a2 + 1] == 2 && (n2 = this.putAction(Qt(l2, a2 + 2), e2, i2, n2));
            break;
          }
        l2[a2] == e2 && (n2 = this.putAction(Qt(l2, a2 + 1), e2, i2, n2));
      }
    return n2;
  }
}
var No;
(function(s3) {
  s3[s3.Distance = 5] = "Distance", s3[s3.MaxRemainingPerStep = 3] = "MaxRemainingPerStep", s3[s3.MinBufferLengthPrune = 500] = "MinBufferLengthPrune", s3[s3.ForceReduceLimit = 10] = "ForceReduceLimit", s3[s3.CutDepth = 15e3] = "CutDepth", s3[s3.CutTo = 9e3] = "CutTo", s3[s3.MaxLeftAssociativeReductionCount = 300] = "MaxLeftAssociativeReductionCount", s3[s3.MaxStackCount = 12] = "MaxStackCount";
})(No || (No = {}));
class rg {
  constructor(t2, e2, i2, n2) {
    this.parser = t2, this.input = e2, this.ranges = n2, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new tg(e2, n2), this.tokens = new sg(t2, this.stream), this.topTerm = t2.top[1];
    let { from: r2 } = n2[0];
    this.stacks = [bn.start(this, t2.top[0], r2)], this.fragments = i2.length && this.stream.end - r2 > t2.bufferLength * 4 ? new ng(i2, t2.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let t2 = this.stacks, e2 = this.minStackPos, i2 = this.stacks = [], n2, r2;
    if (this.bigReductionCount > 300 && t2.length == 1) {
      let [o2] = t2;
      for (; o2.forceReduce() && o2.stack.length && o2.stack[o2.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o2 = 0; o2 < t2.length; o2++) {
      let l2 = t2[o2];
      for (; ; ) {
        if (this.tokens.mainToken = null, l2.pos > e2)
          i2.push(l2);
        else {
          if (this.advanceStack(l2, i2, t2))
            continue;
          {
            n2 || (n2 = [], r2 = []), n2.push(l2);
            let h2 = this.tokens.getMainToken(l2);
            r2.push(h2.value, h2.end);
          }
        }
        break;
      }
    }
    if (!i2.length) {
      let o2 = n2 && lg(n2);
      if (o2)
        return this.stackToTree(o2);
      if (this.parser.strict)
        throw Dt && n2 && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + e2);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && n2) {
      let o2 = this.stoppedAt != null && n2[0].pos > this.stoppedAt ? n2[0] : this.runRecovery(n2, r2, i2);
      if (o2)
        return this.stackToTree(o2.forceAll());
    }
    if (this.recovering) {
      let o2 = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i2.length > o2)
        for (i2.sort((l2, h2) => h2.score - l2.score); i2.length > o2; )
          i2.pop();
      i2.some((l2) => l2.reducePos > e2) && this.recovering--;
    } else if (i2.length > 1) {
      t:
        for (let o2 = 0; o2 < i2.length - 1; o2++) {
          let l2 = i2[o2];
          for (let h2 = o2 + 1; h2 < i2.length; h2++) {
            let a2 = i2[h2];
            if (l2.sameState(a2) || l2.buffer.length > 500 && a2.buffer.length > 500)
              if ((l2.score - a2.score || l2.buffer.length - a2.buffer.length) > 0)
                i2.splice(h2--, 1);
              else {
                i2.splice(o2--, 1);
                continue t;
              }
          }
        }
      i2.length > 12 && i2.splice(
        12,
        i2.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i2[0].pos;
    for (let o2 = 1; o2 < i2.length; o2++)
      i2[o2].pos < this.minStackPos && (this.minStackPos = i2[o2].pos);
    return null;
  }
  stopAt(t2) {
    if (this.stoppedAt != null && this.stoppedAt < t2)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = t2;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(t2, e2, i2) {
    let n2 = t2.pos, { parser: r2 } = this, o2 = Dt ? this.stackID(t2) + " -> " : "";
    if (this.stoppedAt != null && n2 > this.stoppedAt)
      return t2.forceReduce() ? t2 : null;
    if (this.fragments) {
      let a2 = t2.curContext && t2.curContext.tracker.strict, c2 = a2 ? t2.curContext.hash : 0;
      for (let f2 = this.fragments.nodeAt(n2); f2; ) {
        let u2 = this.parser.nodeSet.types[f2.type.id] == f2.type ? r2.getGoto(t2.state, f2.type.id) : -1;
        if (u2 > -1 && f2.length && (!a2 || (f2.prop(P$3.contextHash) || 0) == c2))
          return t2.useNode(f2, u2), Dt && console.log(o2 + this.stackID(t2) + ` (via reuse of ${r2.getName(f2.type.id)})`), true;
        if (!(f2 instanceof J$1) || f2.children.length == 0 || f2.positions[0] > 0)
          break;
        let d2 = f2.children[0];
        if (d2 instanceof J$1 && f2.positions[0] == 0)
          f2 = d2;
        else
          break;
      }
    }
    let l2 = r2.stateSlot(
      t2.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (l2 > 0)
      return t2.reduce(l2), Dt && console.log(o2 + this.stackID(t2) + ` (via always-reduce ${r2.getName(
        l2 & 65535
        /* Action.ValueMask */
      )})`), true;
    if (t2.stack.length >= 15e3)
      for (; t2.stack.length > 9e3 && t2.forceReduce(); )
        ;
    let h2 = this.tokens.getActions(t2);
    for (let a2 = 0; a2 < h2.length; ) {
      let c2 = h2[a2++], f2 = h2[a2++], u2 = h2[a2++], d2 = a2 == h2.length || !i2, p2 = d2 ? t2 : t2.split();
      if (p2.apply(c2, f2, u2), Dt && console.log(o2 + this.stackID(p2) + ` (via ${c2 & 65536 ? `reduce of ${r2.getName(
        c2 & 65535
        /* Action.ValueMask */
      )}` : "shift"} for ${r2.getName(f2)} @ ${n2}${p2 == t2 ? "" : ", split"})`), d2)
        return true;
      p2.pos > n2 ? e2.push(p2) : i2.push(p2);
    }
    return false;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(t2, e2) {
    let i2 = t2.pos;
    for (; ; ) {
      if (!this.advanceStack(t2, null, null))
        return false;
      if (t2.pos > i2)
        return Vo(t2, e2), true;
    }
  }
  runRecovery(t2, e2, i2) {
    let n2 = null, r2 = false;
    for (let o2 = 0; o2 < t2.length; o2++) {
      let l2 = t2[o2], h2 = e2[o2 << 1], a2 = e2[(o2 << 1) + 1], c2 = Dt ? this.stackID(l2) + " -> " : "";
      if (l2.deadEnd && (r2 || (r2 = true, l2.restart(), Dt && console.log(c2 + this.stackID(l2) + " (restarted)"), this.advanceFully(l2, i2))))
        continue;
      let f2 = l2.split(), u2 = c2;
      for (let d2 = 0; f2.forceReduce() && d2 < 10 && (Dt && console.log(u2 + this.stackID(f2) + " (via force-reduce)"), !this.advanceFully(f2, i2)); d2++)
        Dt && (u2 = this.stackID(f2) + " -> ");
      for (let d2 of l2.recoverByInsert(h2))
        Dt && console.log(c2 + this.stackID(d2) + " (via recover-insert)"), this.advanceFully(d2, i2);
      this.stream.end > l2.pos ? (a2 == l2.pos && (a2++, h2 = 0), l2.recoverByDelete(h2, a2), Dt && console.log(c2 + this.stackID(l2) + ` (via recover-delete ${this.parser.getName(h2)})`), Vo(l2, i2)) : (!n2 || n2.score < l2.score) && (n2 = l2);
    }
    return n2;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(t2) {
    return t2.close(), J$1.build({
      buffer: kn.create(t2),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: t2.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(t2) {
    let e2 = (Yn || (Yn = /* @__PURE__ */ new WeakMap())).get(t2);
    return e2 || Yn.set(t2, e2 = String.fromCodePoint(this.nextStackID++)), e2 + t2;
  }
}
function Vo(s3, t2) {
  for (let e2 = 0; e2 < t2.length; e2++) {
    let i2 = t2[e2];
    if (i2.pos == s3.pos && i2.sameState(s3)) {
      t2[e2].score < s3.score && (t2[e2] = s3);
      return;
    }
  }
  t2.push(s3);
}
class og {
  constructor(t2, e2, i2) {
    this.source = t2, this.flags = e2, this.disabled = i2;
  }
  allows(t2) {
    return !this.disabled || this.disabled[t2] == 0;
  }
}
class xn extends uh {
  /// @internal
  constructor(t2) {
    if (super(), this.wrappers = [], t2.version != 14)
      throw new RangeError(`Parser version (${t2.version}) doesn't match runtime version (14)`);
    let e2 = t2.nodeNames.split(" ");
    this.minRepeatTerm = e2.length;
    for (let l2 = 0; l2 < t2.repeatNodeCount; l2++)
      e2.push("");
    let i2 = Object.keys(t2.topRules).map((l2) => t2.topRules[l2][1]), n2 = [];
    for (let l2 = 0; l2 < e2.length; l2++)
      n2.push([]);
    function r2(l2, h2, a2) {
      n2[l2].push([h2, h2.deserialize(String(a2))]);
    }
    if (t2.nodeProps)
      for (let l2 of t2.nodeProps) {
        let h2 = l2[0];
        typeof h2 == "string" && (h2 = P$3[h2]);
        for (let a2 = 1; a2 < l2.length; ) {
          let c2 = l2[a2++];
          if (c2 >= 0)
            r2(c2, h2, l2[a2++]);
          else {
            let f2 = l2[a2 + -c2];
            for (let u2 = -c2; u2 > 0; u2--)
              r2(l2[a2++], h2, f2);
            a2++;
          }
        }
      }
    this.nodeSet = new Zs(e2.map((l2, h2) => yt.define({
      name: h2 >= this.minRepeatTerm ? void 0 : l2,
      id: h2,
      props: n2[h2],
      top: i2.indexOf(h2) > -1,
      error: h2 == 0,
      skipped: t2.skippedNodes && t2.skippedNodes.indexOf(h2) > -1
    }))), t2.propSources && (this.nodeSet = this.nodeSet.extend(...t2.propSources)), this.strict = false, this.bufferLength = ah;
    let o2 = zi(t2.tokenData);
    this.context = t2.context, this.specializerSpecs = t2.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let l2 = 0; l2 < this.specializerSpecs.length; l2++)
      this.specialized[l2] = this.specializerSpecs[l2].term;
    this.specializers = this.specializerSpecs.map(Io), this.states = zi(t2.states, Uint32Array), this.data = zi(t2.stateData), this.goto = zi(t2.goto), this.maxTerm = t2.maxTerm, this.tokenizers = t2.tokenizers.map((l2) => typeof l2 == "number" ? new ze(o2, l2) : l2), this.topRules = t2.topRules, this.dialects = t2.dialects || {}, this.dynamicPrecedences = t2.dynamicPrecedences || null, this.tokenPrecTable = t2.tokenPrec, this.termNames = t2.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(t2, e2, i2) {
    let n2 = new rg(this, t2, e2, i2);
    for (let r2 of this.wrappers)
      n2 = r2(n2, t2, e2, i2);
    return n2;
  }
  /// Get a goto table entry @internal
  getGoto(t2, e2, i2 = false) {
    let n2 = this.goto;
    if (e2 >= n2[0])
      return -1;
    for (let r2 = n2[e2 + 1]; ; ) {
      let o2 = n2[r2++], l2 = o2 & 1, h2 = n2[r2++];
      if (l2 && i2)
        return h2;
      for (let a2 = r2 + (o2 >> 1); r2 < a2; r2++)
        if (n2[r2] == t2)
          return h2;
      if (l2)
        return -1;
    }
  }
  /// Check if this state has an action for a given terminal @internal
  hasAction(t2, e2) {
    let i2 = this.data;
    for (let n2 = 0; n2 < 2; n2++)
      for (let r2 = this.stateSlot(
        t2,
        n2 ? 2 : 1
        /* ParseState.Actions */
      ), o2; ; r2 += 3) {
        if ((o2 = i2[r2]) == 65535)
          if (i2[r2 + 1] == 1)
            o2 = i2[r2 = Qt(i2, r2 + 2)];
          else {
            if (i2[r2 + 1] == 2)
              return Qt(i2, r2 + 2);
            break;
          }
        if (o2 == e2 || o2 == 0)
          return Qt(i2, r2 + 1);
      }
    return 0;
  }
  /// @internal
  stateSlot(t2, e2) {
    return this.states[t2 * 6 + e2];
  }
  /// @internal
  stateFlag(t2, e2) {
    return (this.stateSlot(
      t2,
      0
      /* ParseState.Flags */
    ) & e2) > 0;
  }
  /// @internal
  validAction(t2, e2) {
    if (e2 == this.stateSlot(
      t2,
      4
      /* ParseState.DefaultReduce */
    ))
      return true;
    for (let i2 = this.stateSlot(
      t2,
      1
      /* ParseState.Actions */
    ); ; i2 += 3) {
      if (this.data[i2] == 65535)
        if (this.data[i2 + 1] == 1)
          i2 = Qt(this.data, i2 + 2);
        else
          return false;
      if (e2 == Qt(this.data, i2 + 1))
        return true;
    }
  }
  /// Get the states that can follow this one through shift actions or
  /// goto jumps. @internal
  nextStates(t2) {
    let e2 = [];
    for (let i2 = this.stateSlot(
      t2,
      1
      /* ParseState.Actions */
    ); ; i2 += 3) {
      if (this.data[i2] == 65535)
        if (this.data[i2 + 1] == 1)
          i2 = Qt(this.data, i2 + 2);
        else
          break;
      if (!(this.data[i2 + 2] & 1)) {
        let n2 = this.data[i2 + 1];
        e2.some((r2, o2) => o2 & 1 && r2 == n2) || e2.push(this.data[i2], n2);
      }
    }
    return e2;
  }
  /// Configure the parser. Returns a new parser instance that has the
  /// given settings modified. Settings not provided in `config` are
  /// kept from the original parser.
  configure(t2) {
    let e2 = Object.assign(Object.create(xn.prototype), this);
    if (t2.props && (e2.nodeSet = this.nodeSet.extend(...t2.props)), t2.top) {
      let i2 = this.topRules[t2.top];
      if (!i2)
        throw new RangeError(`Invalid top rule name ${t2.top}`);
      e2.top = i2;
    }
    return t2.tokenizers && (e2.tokenizers = this.tokenizers.map((i2) => {
      let n2 = t2.tokenizers.find((r2) => r2.from == i2);
      return n2 ? n2.to : i2;
    })), t2.specializers && (e2.specializers = this.specializers.slice(), e2.specializerSpecs = this.specializerSpecs.map((i2, n2) => {
      let r2 = t2.specializers.find((l2) => l2.from == i2.external);
      if (!r2)
        return i2;
      let o2 = Object.assign(Object.assign({}, i2), { external: r2.to });
      return e2.specializers[n2] = Io(o2), o2;
    })), t2.contextTracker && (e2.context = t2.contextTracker), t2.dialect && (e2.dialect = this.parseDialect(t2.dialect)), t2.strict != null && (e2.strict = t2.strict), t2.wrap && (e2.wrappers = e2.wrappers.concat(t2.wrap)), t2.bufferLength != null && (e2.bufferLength = t2.bufferLength), e2;
  }
  /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  /// are registered for this parser.
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /// Returns the name associated with a given term. This will only
  /// work for all terms when the parser was generated with the
  /// `--names` option. By default, only the names of tagged terms are
  /// stored.
  getName(t2) {
    return this.termNames ? this.termNames[t2] : String(t2 <= this.maxNode && this.nodeSet.types[t2].name || t2);
  }
  /// The eof term id is always allocated directly after the node
  /// types. @internal
  get eofTerm() {
    return this.maxNode + 1;
  }
  /// The type of top node produced by the parser.
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /// @internal
  dynamicPrecedence(t2) {
    let e2 = this.dynamicPrecedences;
    return e2 == null ? 0 : e2[t2] || 0;
  }
  /// @internal
  parseDialect(t2) {
    let e2 = Object.keys(this.dialects), i2 = e2.map(() => false);
    if (t2)
      for (let r2 of t2.split(" ")) {
        let o2 = e2.indexOf(r2);
        o2 >= 0 && (i2[o2] = true);
      }
    let n2 = null;
    for (let r2 = 0; r2 < e2.length; r2++)
      if (!i2[r2])
        for (let o2 = this.dialects[e2[r2]], l2; (l2 = this.data[o2++]) != 65535; )
          (n2 || (n2 = new Uint8Array(this.maxTerm + 1)))[l2] = 1;
    return new og(t2, i2, n2);
  }
  /// Used by the output of the parser generator. Not available to
  /// user code. @hide
  static deserialize(t2) {
    return new xn(t2);
  }
}
function Qt(s3, t2) {
  return s3[t2] | s3[t2 + 1] << 16;
}
function lg(s3) {
  let t2 = null;
  for (let e2 of s3) {
    let i2 = e2.p.stoppedAt;
    (e2.pos == e2.p.stream.end || i2 != null && e2.pos > i2) && e2.p.parser.stateFlag(
      e2.state,
      2
      /* StateFlag.Accepting */
    ) && (!t2 || t2.score < e2.score) && (t2 = e2);
  }
  return t2;
}
function Io(s3) {
  if (s3.external) {
    let t2 = s3.extend ? 1 : 0;
    return (e2, i2) => s3.external(e2, i2) << 1 | t2;
  }
  return s3.get;
}
const hg = dh({
  String: m$5.string,
  Number: m$5.number,
  "True False": m$5.bool,
  PropertyName: m$5.propertyName,
  Null: m$5.null,
  ",": m$5.separator,
  "[ ]": m$5.squareBracket,
  "{ }": m$5.brace
}), ag = xn.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["openedBy", 7, "{", 12, "["],
    ["closedBy", 8, "}", 13, "]"]
  ],
  propSources: [hg],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), cg = /* @__PURE__ */ pn.define({
  name: "json",
  parser: /* @__PURE__ */ ag.configure({
    props: [
      /* @__PURE__ */ wh.add({
        Object: /* @__PURE__ */ wo({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ wo({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ bh.add({
        "Object Array": Od
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function fg() {
  return new pd(cg);
}
function $t() {
  var s3 = arguments[0];
  typeof s3 == "string" && (s3 = document.createElement(s3));
  var t2 = 1, e2 = arguments[1];
  if (e2 && typeof e2 == "object" && e2.nodeType == null && !Array.isArray(e2)) {
    for (var i2 in e2)
      if (Object.prototype.hasOwnProperty.call(e2, i2)) {
        var n2 = e2[i2];
        typeof n2 == "string" ? s3.setAttribute(i2, n2) : n2 != null && (s3[i2] = n2);
      }
    t2++;
  }
  for (; t2 < arguments.length; t2++)
    ia(s3, arguments[t2]);
  return s3;
}
function ia(s3, t2) {
  if (typeof t2 == "string")
    s3.appendChild(document.createTextNode(t2));
  else if (t2 != null)
    if (t2.nodeType != null)
      s3.appendChild(t2);
    else if (Array.isArray(t2))
      for (var e2 = 0; e2 < t2.length; e2++)
        ia(s3, t2[e2]);
    else
      throw new RangeError("Unsupported child node: " + t2);
}
class ug {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.diagnostic = i2;
  }
}
let Se$3 = class Se2 {
  constructor(t2, e2, i2) {
    this.diagnostics = t2, this.panel = e2, this.selected = i2;
  }
  static init(t2, e2, i2) {
    let n2 = t2, r2 = i2.facet(Ve$1).markerFilter;
    r2 && (n2 = r2(n2));
    let o2 = T$3.set(n2.map((l2) => l2.from == l2.to || l2.from == l2.to - 1 && i2.doc.lineAt(l2.from).to == l2.from ? T$3.widget({
      widget: new vg(l2),
      diagnostic: l2
    }).range(l2.from) : T$3.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + l2.severity },
      diagnostic: l2
    }).range(l2.from, l2.to)), true);
    return new Se2(o2, e2, Je$1(o2));
  }
};
function Je$1(s3, t2 = null, e2 = 0) {
  let i2 = null;
  return s3.between(e2, 1e9, (n2, r2, { spec: o2 }) => {
    if (!(t2 && o2.diagnostic != t2))
      return i2 = new ug(n2, r2, o2.diagnostic), false;
  }), i2;
}
function dg(s3, t2) {
  return !!(s3.effects.some((e2) => e2.is(ar)) || s3.changes.touchesRange(t2.pos));
}
function na(s3, t2) {
  return s3.field(vt, false) ? t2 : t2.concat(F$4.appendConfig.of([
    vt,
    A$4.decorations.compute([vt], (e2) => {
      let { selected: i2, panel: n2 } = e2.field(vt);
      return !i2 || !n2 || i2.from == i2.to ? T$3.none : T$3.set([
        gg.range(i2.from, i2.to)
      ]);
    }),
    Fu(mg, { hideOn: dg }),
    Cg
  ]));
}
function pg(s3, t2) {
  return {
    effects: na(s3, [ar.of(t2)])
  };
}
const ar = /* @__PURE__ */ F$4.define(), cr = /* @__PURE__ */ F$4.define(), sa = /* @__PURE__ */ F$4.define(), vt = /* @__PURE__ */ Bt.define({
  create() {
    return new Se$3(T$3.none, null, null);
  },
  update(s3, t2) {
    if (t2.docChanged) {
      let e2 = s3.diagnostics.map(t2.changes), i2 = null;
      if (s3.selected) {
        let n2 = t2.changes.mapPos(s3.selected.from, 1);
        i2 = Je$1(e2, s3.selected.diagnostic, n2) || Je$1(e2, null, n2);
      }
      s3 = new Se$3(e2, s3.panel, i2);
    }
    for (let e2 of t2.effects)
      e2.is(ar) ? s3 = Se$3.init(e2.value, s3.panel, t2.state) : e2.is(cr) ? s3 = new Se$3(s3.diagnostics, e2.value ? En.open : null, s3.selected) : e2.is(sa) && (s3 = new Se$3(s3.diagnostics, s3.panel, e2.value));
    return s3;
  },
  provide: (s3) => [
    Rs.from(s3, (t2) => t2.panel),
    A$4.decorations.from(s3, (t2) => t2.diagnostics)
  ]
}), gg = /* @__PURE__ */ T$3.mark({ class: "cm-lintRange cm-lintRange-active" });
function mg(s3, t2, e2) {
  let { diagnostics: i2 } = s3.state.field(vt), n2 = [], r2 = 2e8, o2 = 0;
  i2.between(t2 - (e2 < 0 ? 1 : 0), t2 + (e2 > 0 ? 1 : 0), (h2, a2, { spec: c2 }) => {
    t2 >= h2 && t2 <= a2 && (h2 == a2 || (t2 > h2 || e2 > 0) && (t2 < a2 || e2 < 0)) && (n2.push(c2.diagnostic), r2 = Math.min(h2, r2), o2 = Math.max(a2, o2));
  });
  let l2 = s3.state.facet(Ve$1).tooltipFilter;
  return l2 && (n2 = l2(n2)), n2.length ? {
    pos: r2,
    end: o2,
    above: s3.state.doc.lineAt(r2).to < o2,
    create() {
      return { dom: wg(s3, n2) };
    }
  } : null;
}
function wg(s3, t2) {
  return $t("ul", { class: "cm-tooltip-lint" }, t2.map((e2) => oa(s3, e2, false)));
}
const yg = (s3) => {
  let t2 = s3.state.field(vt, false);
  (!t2 || !t2.panel) && s3.dispatch({ effects: na(s3.state, [cr.of(true)]) });
  let e2 = _u(s3, En.open);
  return e2 && e2.dom.querySelector(".cm-panel-lint ul").focus(), true;
}, Ho = (s3) => {
  let t2 = s3.state.field(vt, false);
  return !t2 || !t2.panel ? false : (s3.dispatch({ effects: cr.of(false) }), true);
}, bg = (s3) => {
  let t2 = s3.state.field(vt, false);
  if (!t2)
    return false;
  let e2 = s3.state.selection.main, i2 = t2.diagnostics.iter(e2.to + 1);
  return !i2.value && (i2 = t2.diagnostics.iter(0), !i2.value || i2.from == e2.from && i2.to == e2.to) ? false : (s3.dispatch({ selection: { anchor: i2.from, head: i2.to }, scrollIntoView: true }), true);
}, kg = [
  { key: "Mod-Shift-m", run: yg, preventDefault: true },
  { key: "F8", run: bg }
], xg = /* @__PURE__ */ wt.fromClass(class {
  constructor(s3) {
    this.view = s3, this.timeout = -1, this.set = true;
    let { delay: t2 } = s3.state.facet(Ve$1);
    this.lintTime = Date.now() + t2, this.run = this.run.bind(this), this.timeout = setTimeout(this.run, t2);
  }
  run() {
    let s3 = Date.now();
    if (s3 < this.lintTime - 10)
      setTimeout(this.run, this.lintTime - s3);
    else {
      this.set = false;
      let { state: t2 } = this.view, { sources: e2 } = t2.facet(Ve$1);
      Promise.all(e2.map((i2) => Promise.resolve(i2(this.view)))).then((i2) => {
        let n2 = i2.reduce((r2, o2) => r2.concat(o2));
        this.view.state.doc == t2.doc && this.view.dispatch(pg(this.view.state, n2));
      }, (i2) => {
        zt(this.view.state, i2);
      });
    }
  }
  update(s3) {
    let t2 = s3.state.facet(Ve$1);
    (s3.docChanged || t2 != s3.startState.facet(Ve$1)) && (this.lintTime = Date.now() + t2.delay, this.set || (this.set = true, this.timeout = setTimeout(this.run, t2.delay)));
  }
  force() {
    this.set && (this.lintTime = Date.now(), this.run());
  }
  destroy() {
    clearTimeout(this.timeout);
  }
}), Ve$1 = /* @__PURE__ */ v$4.define({
  combine(s3) {
    return Object.assign({ sources: s3.map((t2) => t2.source) }, Sn(s3.map((t2) => t2.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null
    }));
  },
  enables: xg
});
function ra(s3) {
  let t2 = [];
  if (s3)
    t:
      for (let { name: e2 } of s3) {
        for (let i2 = 0; i2 < e2.length; i2++) {
          let n2 = e2[i2];
          if (/[a-zA-Z]/.test(n2) && !t2.some((r2) => r2.toLowerCase() == n2.toLowerCase())) {
            t2.push(n2);
            continue t;
          }
        }
        t2.push("");
      }
  return t2;
}
function oa(s3, t2, e2) {
  var i2;
  let n2 = e2 ? ra(t2.actions) : [];
  return $t("li", { class: "cm-diagnostic cm-diagnostic-" + t2.severity }, $t("span", { class: "cm-diagnosticText" }, t2.renderMessage ? t2.renderMessage() : t2.message), (i2 = t2.actions) === null || i2 === void 0 ? void 0 : i2.map((r2, o2) => {
    let l2 = (f2) => {
      f2.preventDefault();
      let u2 = Je$1(s3.state.field(vt).diagnostics, t2);
      u2 && r2.apply(s3, u2.from, u2.to);
    }, { name: h2 } = r2, a2 = n2[o2] ? h2.indexOf(n2[o2]) : -1, c2 = a2 < 0 ? h2 : [
      h2.slice(0, a2),
      $t("u", h2.slice(a2, a2 + 1)),
      h2.slice(a2 + 1)
    ];
    return $t("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: l2,
      onmousedown: l2,
      "aria-label": ` Action: ${h2}${a2 < 0 ? "" : ` (access key "${n2[o2]})"`}.`
    }, c2);
  }), t2.source && $t("div", { class: "cm-diagnosticSource" }, t2.source));
}
class vg extends ye$1 {
  constructor(t2) {
    super(), this.diagnostic = t2;
  }
  eq(t2) {
    return t2.diagnostic == this.diagnostic;
  }
  toDOM() {
    return $t("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class $o {
  constructor(t2, e2) {
    this.diagnostic = e2, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = oa(t2, e2, true), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class En {
  constructor(t2) {
    this.view = t2, this.items = [];
    let e2 = (n2) => {
      if (n2.keyCode == 27)
        Ho(this.view), this.view.focus();
      else if (n2.keyCode == 38 || n2.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (n2.keyCode == 40 || n2.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (n2.keyCode == 36)
        this.moveSelection(0);
      else if (n2.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (n2.keyCode == 13)
        this.view.focus();
      else if (n2.keyCode >= 65 && n2.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: r2 } = this.items[this.selectedIndex], o2 = ra(r2.actions);
        for (let l2 = 0; l2 < o2.length; l2++)
          if (o2[l2].toUpperCase().charCodeAt(0) == n2.keyCode) {
            let h2 = Je$1(this.view.state.field(vt).diagnostics, r2);
            h2 && r2.actions[l2].apply(t2, h2.from, h2.to);
          }
      } else
        return;
      n2.preventDefault();
    }, i2 = (n2) => {
      for (let r2 = 0; r2 < this.items.length; r2++)
        this.items[r2].dom.contains(n2.target) && this.moveSelection(r2);
    };
    this.list = $t("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: e2,
      onclick: i2
    }), this.dom = $t("div", { class: "cm-panel-lint" }, this.list, $t("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => Ho(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let t2 = this.view.state.field(vt).selected;
    if (!t2)
      return -1;
    for (let e2 = 0; e2 < this.items.length; e2++)
      if (this.items[e2].diagnostic == t2.diagnostic)
        return e2;
    return -1;
  }
  update() {
    let { diagnostics: t2, selected: e2 } = this.view.state.field(vt), i2 = 0, n2 = false, r2 = null;
    for (t2.between(0, this.view.state.doc.length, (o2, l2, { spec: h2 }) => {
      let a2 = -1, c2;
      for (let f2 = i2; f2 < this.items.length; f2++)
        if (this.items[f2].diagnostic == h2.diagnostic) {
          a2 = f2;
          break;
        }
      a2 < 0 ? (c2 = new $o(this.view, h2.diagnostic), this.items.splice(i2, 0, c2), n2 = true) : (c2 = this.items[a2], a2 > i2 && (this.items.splice(i2, a2 - i2), n2 = true)), e2 && c2.diagnostic == e2.diagnostic ? c2.dom.hasAttribute("aria-selected") || (c2.dom.setAttribute("aria-selected", "true"), r2 = c2) : c2.dom.hasAttribute("aria-selected") && c2.dom.removeAttribute("aria-selected"), i2++;
    }); i2 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      n2 = true, this.items.pop();
    this.items.length == 0 && (this.items.push(new $o(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), n2 = true), r2 ? (this.list.setAttribute("aria-activedescendant", r2.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: r2.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: o2, panel: l2 }) => {
        o2.top < l2.top ? this.list.scrollTop -= l2.top - o2.top : o2.bottom > l2.bottom && (this.list.scrollTop += o2.bottom - l2.bottom);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), n2 && this.sync();
  }
  sync() {
    let t2 = this.list.firstChild;
    function e2() {
      let i2 = t2;
      t2 = i2.nextSibling, i2.remove();
    }
    for (let i2 of this.items)
      if (i2.dom.parentNode == this.list) {
        for (; t2 != i2.dom; )
          e2();
        t2 = i2.dom.nextSibling;
      } else
        this.list.insertBefore(i2.dom, t2);
    for (; t2; )
      e2();
  }
  moveSelection(t2) {
    if (this.selectedIndex < 0)
      return;
    let e2 = this.view.state.field(vt), i2 = Je$1(e2.diagnostics, this.items[t2].diagnostic);
    i2 && this.view.dispatch({
      selection: { anchor: i2.from, head: i2.to },
      scrollIntoView: true,
      effects: sa.of(i2)
    });
  }
  static open(t2) {
    return new En(t2);
  }
}
function Sg(s3, t2 = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t2}>${encodeURIComponent(s3)}</svg>')`;
}
function Zn(s3) {
  return Sg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${s3}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const Cg = /* @__PURE__ */ A$4.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ Zn("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ Zn("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ Zn("#999") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), Ag = "#e5c07b", Fo = "#e06c75", Og = "#56b6c2", Mg = "#ffffff", Xi = "#abb2bf", Fs = "#7d8799", Dg = "#61afef", Tg = "#98c379", zo = "#d19a66", Pg = "#c678dd", Bg = "#21252b", _o = "#2c313a", Wo = "#282c34", ts = "#353a42", Rg = "#3E4451", jo = "#528bff", Lg = /* @__PURE__ */ A$4.theme({
  "&": {
    color: Xi,
    backgroundColor: Wo
  },
  ".cm-content": {
    caretColor: jo
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: jo },
  "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: Rg },
  ".cm-panels": { backgroundColor: Bg, color: Xi },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847",
    outline: "1px solid #515a6b"
  },
  ".cm-gutters": {
    backgroundColor: Wo,
    color: Fs,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: _o
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: ts
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: ts,
    borderBottomColor: ts
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: _o,
      color: Xi
    }
  }
}, { dark: true }), Eg = /* @__PURE__ */ vi.define([
  {
    tag: m$5.keyword,
    color: Pg
  },
  {
    tag: [m$5.name, m$5.deleted, m$5.character, m$5.propertyName, m$5.macroName],
    color: Fo
  },
  {
    tag: [/* @__PURE__ */ m$5.function(m$5.variableName), m$5.labelName],
    color: Dg
  },
  {
    tag: [m$5.color, /* @__PURE__ */ m$5.constant(m$5.name), /* @__PURE__ */ m$5.standard(m$5.name)],
    color: zo
  },
  {
    tag: [/* @__PURE__ */ m$5.definition(m$5.name), m$5.separator],
    color: Xi
  },
  {
    tag: [m$5.typeName, m$5.className, m$5.number, m$5.changed, m$5.annotation, m$5.modifier, m$5.self, m$5.namespace],
    color: Ag
  },
  {
    tag: [m$5.operator, m$5.operatorKeyword, m$5.url, m$5.escape, m$5.regexp, m$5.link, /* @__PURE__ */ m$5.special(m$5.string)],
    color: Og
  },
  {
    tag: [m$5.meta, m$5.comment],
    color: Fs
  },
  {
    tag: m$5.strong,
    fontWeight: "bold"
  },
  {
    tag: m$5.emphasis,
    fontStyle: "italic"
  },
  {
    tag: m$5.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: m$5.link,
    color: Fs,
    textDecoration: "underline"
  },
  {
    tag: m$5.heading,
    fontWeight: "bold",
    color: Fo
  },
  {
    tag: [m$5.atom, m$5.bool, /* @__PURE__ */ m$5.special(m$5.variableName)],
    color: zo
  },
  {
    tag: [m$5.processingInstruction, m$5.string, m$5.inserted],
    color: Tg
  },
  {
    tag: m$5.invalid,
    color: Mg
  }
]), la = ref$1(false);
window.__hst_controls_dark || (window.__hst_controls_dark = []);
window.__hst_controls_dark.push(la);
var qo;
(qo = window.__hst_controls_dark_ready) == null || qo.call(window);
const Ng = {
  name: "HstJson",
  inheritAttrs: false
}, Vg = /* @__PURE__ */ defineComponent$1({
  ...Ng,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s3) => true
  },
  setup(s3, { emit: t2 }) {
    const e2 = s3;
    let i2;
    const n2 = ref$1(""), r2 = ref$1(false), o2 = ref$1(), l2 = {
      light: [A$4.baseTheme({}), bo(zd)],
      dark: [Lg, bo(Eg)]
    }, h2 = new yi(), a2 = [
      Xu(),
      Pu(),
      Cu(),
      fg(),
      Ud(),
      Cd(),
      Id(),
      nh.of([
        ...Yp,
        ...Ed,
        ...kg
      ]),
      A$4.updateListener.of((c2) => {
        n2.value = c2.view.state.doc.toString();
      }),
      h2.of(l2.light)
    ];
    return onMounted$1(() => {
      i2 = new A$4({
        doc: JSON.stringify(e2.modelValue, null, 2),
        extensions: a2,
        parent: o2.value
      }), watchEffect$1(() => {
        i2.dispatch({
          effects: [
            h2.reconfigure(l2[la.value ? "dark" : "light"])
          ]
        });
      });
    }), watch$1(() => e2.modelValue, () => {
      let c2;
      try {
        c2 = JSON.stringify(JSON.parse(n2.value)) === JSON.stringify(e2.modelValue);
      } catch {
        c2 = false;
      }
      c2 || i2.dispatch({ changes: [{ from: 0, to: i2.state.doc.length, insert: JSON.stringify(e2.modelValue, null, 2) }] });
    }, { deep: true }), watch$1(() => n2.value, () => {
      r2.value = false;
      try {
        t2("update:modelValue", JSON.parse(n2.value));
      } catch {
        r2.value = true;
      }
    }), (c2, f2) => (openBlock$1(), createBlock$1(qt, {
      title: s3.title,
      class: normalizeClass$1(["histoire-json htw-cursor-text", c2.$attrs.class]),
      style: normalizeStyle$1(c2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        r2.value ? withDirectives$1((openBlock$1(), createBlock$1(unref$1(Icon), {
          key: 0,
          icon: "carbon:warning-alt",
          class: "htw-text-orange-500"
        }, null, 512)), [
          [unref$1(VTooltip), "JSON error"]
        ]) : createCommentVNode$1("", true),
        renderSlot$1(c2.$slots, "actions", {}, void 0, true)
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", mergeProps$1({
          ref_key: "editorElement",
          ref: o2,
          class: "__histoire-json-code htw-w-full htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus-within:htw-border-primary-500 dark:focus-within:htw-border-primary-500 htw-rounded-sm htw-box-border htw-overflow-auto htw-resize-y htw-min-h-32 htw-h-48 htw-relative"
        }, { ...c2.$attrs, class: null, style: null }), null, 16)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
});
const Ig = (s3, t2) => {
  const e2 = s3.__vccOpts || s3;
  for (const [i2, n2] of t2)
    e2[i2] = n2;
  return e2;
}, Hg = /* @__PURE__ */ Ig(Vg, [["__scopeId", "data-v-e5fbff29"]]), $g = Uo, Fg = xa, zg = Oa, _g = Pa, Wg = La, jg = Na, qg = $a, Kg = _a, Gg = Ja, Ug = rc, Qg = dc, Jg = kc, Xg = Me, Yg = Ac, Zg = Hg, rm = {
  HstButton: $g,
  HstButtonGroup: Fg,
  HstCheckbox: zg,
  HstCheckboxList: _g,
  HstText: Wg,
  HstNumber: jg,
  HstSlider: qg,
  HstTextarea: Kg,
  HstSelect: Gg,
  HstRadio: Yg,
  HstJson: Zg,
  HstColorShades: Ug,
  HstTokenList: Qg,
  HstTokenGrid: Jg,
  HstCopyIcon: Xg
};
const config = markRaw$1({
  "theme": {
    "container": {
      "center": true,
      "padding": "2rem",
      "screens": {
        "2xl": "1400px"
      }
    },
    "accentColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      },
      "auto": "auto"
    },
    "animation": {
      "none": "none",
      "spin": "spin 1s linear infinite",
      "ping": "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",
      "pulse": "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
      "bounce": "bounce 1s infinite"
    },
    "aria": {
      "checked": 'checked="true"',
      "disabled": 'disabled="true"',
      "expanded": 'expanded="true"',
      "hidden": 'hidden="true"',
      "pressed": 'pressed="true"',
      "readonly": 'readonly="true"',
      "required": 'required="true"',
      "selected": 'selected="true"'
    },
    "aspectRatio": {
      "auto": "auto",
      "square": "1 / 1",
      "video": "16 / 9"
    },
    "backdropBlur": {
      "0": "0",
      "none": "0",
      "sm": "4px",
      "DEFAULT": "8px",
      "md": "12px",
      "lg": "16px",
      "xl": "24px",
      "2xl": "40px",
      "3xl": "64px"
    },
    "backdropBrightness": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "backdropContrast": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "100": "1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "backdropGrayscale": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backdropHueRotate": {
      "0": "0deg",
      "15": "15deg",
      "30": "30deg",
      "60": "60deg",
      "90": "90deg",
      "180": "180deg"
    },
    "backdropInvert": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backdropOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "backdropSaturate": {
      "0": "0",
      "50": ".5",
      "100": "1",
      "150": "1.5",
      "200": "2"
    },
    "backdropSepia": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backgroundColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "backgroundImage": {
      "none": "none",
      "gradient-to-t": "linear-gradient(to top, var(--tw-gradient-stops))",
      "gradient-to-tr": "linear-gradient(to top right, var(--tw-gradient-stops))",
      "gradient-to-r": "linear-gradient(to right, var(--tw-gradient-stops))",
      "gradient-to-br": "linear-gradient(to bottom right, var(--tw-gradient-stops))",
      "gradient-to-b": "linear-gradient(to bottom, var(--tw-gradient-stops))",
      "gradient-to-bl": "linear-gradient(to bottom left, var(--tw-gradient-stops))",
      "gradient-to-l": "linear-gradient(to left, var(--tw-gradient-stops))",
      "gradient-to-tl": "linear-gradient(to top left, var(--tw-gradient-stops))"
    },
    "backgroundOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "backgroundPosition": {
      "bottom": "bottom",
      "center": "center",
      "left": "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      "right": "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      "top": "top"
    },
    "backgroundSize": {
      "auto": "auto",
      "cover": "cover",
      "contain": "contain"
    },
    "blur": {
      "0": "0",
      "none": "0",
      "sm": "4px",
      "DEFAULT": "8px",
      "md": "12px",
      "lg": "16px",
      "xl": "24px",
      "2xl": "40px",
      "3xl": "64px"
    },
    "borderColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      },
      "DEFAULT": "#e5e7eb"
    },
    "borderOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "borderRadius": {
      "none": "0px",
      "sm": "calc(var(--radius) - 4px)",
      "DEFAULT": "0.25rem",
      "md": "calc(var(--radius) - 2px)",
      "lg": "var(--radius)",
      "xl": "0.75rem",
      "2xl": "1rem",
      "3xl": "1.5rem",
      "full": "9999px"
    },
    "borderSpacing": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "borderWidth": {
      "0": "0px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "1px"
    },
    "boxShadow": {
      "sm": "0 1px 2px 0 rgb(0 0 0 / 0.05)",
      "DEFAULT": "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
      "md": "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
      "lg": "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
      "xl": "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
      "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
      "inner": "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
      "none": "none"
    },
    "boxShadowColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "brightness": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "caretColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "colors": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "columns": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "auto": "auto",
      "3xs": "16rem",
      "2xs": "18rem",
      "xs": "20rem",
      "sm": "24rem",
      "md": "28rem",
      "lg": "32rem",
      "xl": "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem"
    },
    "content": {
      "none": "none"
    },
    "contrast": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "100": "1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "cursor": {
      "auto": "auto",
      "default": "default",
      "pointer": "pointer",
      "wait": "wait",
      "text": "text",
      "move": "move",
      "help": "help",
      "not-allowed": "not-allowed",
      "none": "none",
      "context-menu": "context-menu",
      "progress": "progress",
      "cell": "cell",
      "crosshair": "crosshair",
      "vertical-text": "vertical-text",
      "alias": "alias",
      "copy": "copy",
      "no-drop": "no-drop",
      "grab": "grab",
      "grabbing": "grabbing",
      "all-scroll": "all-scroll",
      "col-resize": "col-resize",
      "row-resize": "row-resize",
      "n-resize": "n-resize",
      "e-resize": "e-resize",
      "s-resize": "s-resize",
      "w-resize": "w-resize",
      "ne-resize": "ne-resize",
      "nw-resize": "nw-resize",
      "se-resize": "se-resize",
      "sw-resize": "sw-resize",
      "ew-resize": "ew-resize",
      "ns-resize": "ns-resize",
      "nesw-resize": "nesw-resize",
      "nwse-resize": "nwse-resize",
      "zoom-in": "zoom-in",
      "zoom-out": "zoom-out"
    },
    "divideColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      },
      "DEFAULT": "#e5e7eb"
    },
    "divideOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "divideWidth": {
      "0": "0px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "1px"
    },
    "dropShadow": {
      "sm": "0 1px 1px rgb(0 0 0 / 0.05)",
      "DEFAULT": [
        "0 1px 2px rgb(0 0 0 / 0.1)",
        "0 1px 1px rgb(0 0 0 / 0.06)"
      ],
      "md": [
        "0 4px 3px rgb(0 0 0 / 0.07)",
        "0 2px 2px rgb(0 0 0 / 0.06)"
      ],
      "lg": [
        "0 10px 8px rgb(0 0 0 / 0.04)",
        "0 4px 3px rgb(0 0 0 / 0.1)"
      ],
      "xl": [
        "0 20px 13px rgb(0 0 0 / 0.03)",
        "0 8px 5px rgb(0 0 0 / 0.08)"
      ],
      "2xl": "0 25px 25px rgb(0 0 0 / 0.15)",
      "none": "0 0 #0000"
    },
    "fill": {
      "none": "none",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "flex": {
      "1": "1 1 0%",
      "auto": "1 1 auto",
      "initial": "0 1 auto",
      "none": "none"
    },
    "flexBasis": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%"
    },
    "flexGrow": {
      "0": "0",
      "DEFAULT": "1"
    },
    "flexShrink": {
      "0": "0",
      "DEFAULT": "1"
    },
    "fontFamily": {
      "sans": [
        "ui-sans-serif",
        "system-ui",
        "-apple-system",
        "BlinkMacSystemFont",
        '"Segoe UI"',
        "Roboto",
        '"Helvetica Neue"',
        "Arial",
        '"Noto Sans"',
        "sans-serif",
        '"Apple Color Emoji"',
        '"Segoe UI Emoji"',
        '"Segoe UI Symbol"',
        '"Noto Color Emoji"'
      ],
      "serif": [
        "ui-serif",
        "Georgia",
        "Cambria",
        '"Times New Roman"',
        "Times",
        "serif"
      ],
      "mono": [
        "ui-monospace",
        "SFMono-Regular",
        "Menlo",
        "Monaco",
        "Consolas",
        '"Liberation Mono"',
        '"Courier New"',
        "monospace"
      ]
    },
    "fontSize": {
      "xs": [
        "0.75rem",
        {
          "lineHeight": "1rem"
        }
      ],
      "sm": [
        "0.875rem",
        {
          "lineHeight": "1.25rem"
        }
      ],
      "base": [
        "1rem",
        {
          "lineHeight": "1.5rem"
        }
      ],
      "lg": [
        "1.125rem",
        {
          "lineHeight": "1.75rem"
        }
      ],
      "xl": [
        "1.25rem",
        {
          "lineHeight": "1.75rem"
        }
      ],
      "2xl": [
        "1.5rem",
        {
          "lineHeight": "2rem"
        }
      ],
      "3xl": [
        "1.875rem",
        {
          "lineHeight": "2.25rem"
        }
      ],
      "4xl": [
        "2.25rem",
        {
          "lineHeight": "2.5rem"
        }
      ],
      "5xl": [
        "3rem",
        {
          "lineHeight": "1"
        }
      ],
      "6xl": [
        "3.75rem",
        {
          "lineHeight": "1"
        }
      ],
      "7xl": [
        "4.5rem",
        {
          "lineHeight": "1"
        }
      ],
      "8xl": [
        "6rem",
        {
          "lineHeight": "1"
        }
      ],
      "9xl": [
        "8rem",
        {
          "lineHeight": "1"
        }
      ]
    },
    "fontWeight": {
      "thin": "100",
      "extralight": "200",
      "light": "300",
      "normal": "400",
      "medium": "500",
      "semibold": "600",
      "bold": "700",
      "extrabold": "800",
      "black": "900"
    },
    "gap": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "gradientColorStops": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "gradientColorStopPositions": {
      "0%": "0%",
      "5%": "5%",
      "10%": "10%",
      "15%": "15%",
      "20%": "20%",
      "25%": "25%",
      "30%": "30%",
      "35%": "35%",
      "40%": "40%",
      "45%": "45%",
      "50%": "50%",
      "55%": "55%",
      "60%": "60%",
      "65%": "65%",
      "70%": "70%",
      "75%": "75%",
      "80%": "80%",
      "85%": "85%",
      "90%": "90%",
      "95%": "95%",
      "100%": "100%"
    },
    "grayscale": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "gridAutoColumns": {
      "auto": "auto",
      "min": "min-content",
      "max": "max-content",
      "fr": "minmax(0, 1fr)"
    },
    "gridAutoRows": {
      "auto": "auto",
      "min": "min-content",
      "max": "max-content",
      "fr": "minmax(0, 1fr)"
    },
    "gridColumn": {
      "auto": "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-7": "span 7 / span 7",
      "span-8": "span 8 / span 8",
      "span-9": "span 9 / span 9",
      "span-10": "span 10 / span 10",
      "span-11": "span 11 / span 11",
      "span-12": "span 12 / span 12",
      "span-full": "1 / -1"
    },
    "gridColumnEnd": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridColumnStart": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridRow": {
      "auto": "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-full": "1 / -1"
    },
    "gridRowEnd": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "auto": "auto"
    },
    "gridRowStart": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "auto": "auto"
    },
    "gridTemplateColumns": {
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "7": "repeat(7, minmax(0, 1fr))",
      "8": "repeat(8, minmax(0, 1fr))",
      "9": "repeat(9, minmax(0, 1fr))",
      "10": "repeat(10, minmax(0, 1fr))",
      "11": "repeat(11, minmax(0, 1fr))",
      "12": "repeat(12, minmax(0, 1fr))",
      "none": "none"
    },
    "gridTemplateRows": {
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "none": "none"
    },
    "height": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "full": "100%",
      "screen": "100vh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "hueRotate": {
      "0": "0deg",
      "15": "15deg",
      "30": "30deg",
      "60": "60deg",
      "90": "90deg",
      "180": "180deg"
    },
    "inset": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "full": "100%"
    },
    "invert": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "keyframes": {
      "spin": {
        "to": {
          "transform": "rotate(360deg)"
        }
      },
      "ping": {
        "75%, 100%": {
          "transform": "scale(2)",
          "opacity": "0"
        }
      },
      "pulse": {
        "50%": {
          "opacity": ".5"
        }
      },
      "bounce": {
        "0%, 100%": {
          "transform": "translateY(-25%)",
          "animationTimingFunction": "cubic-bezier(0.8,0,1,1)"
        },
        "50%": {
          "transform": "none",
          "animationTimingFunction": "cubic-bezier(0,0,0.2,1)"
        }
      }
    },
    "letterSpacing": {
      "tighter": "-0.05em",
      "tight": "-0.025em",
      "normal": "0em",
      "wide": "0.025em",
      "wider": "0.05em",
      "widest": "0.1em"
    },
    "lineHeight": {
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "none": "1",
      "tight": "1.25",
      "snug": "1.375",
      "normal": "1.5",
      "relaxed": "1.625",
      "loose": "2"
    },
    "listStyleType": {
      "none": "none",
      "disc": "disc",
      "decimal": "decimal"
    },
    "listStyleImage": {
      "none": "none"
    },
    "margin": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "lineClamp": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6"
    },
    "maxHeight": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "none": "none",
      "full": "100%",
      "screen": "100vh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "maxWidth": {
      "0": "0rem",
      "none": "none",
      "xs": "20rem",
      "sm": "24rem",
      "md": "28rem",
      "lg": "32rem",
      "xl": "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content",
      "prose": "65ch",
      "screen-sm": "640px",
      "screen-md": "768px",
      "screen-lg": "1024px",
      "screen-xl": "1280px",
      "screen-2xl": "1536px"
    },
    "minHeight": {
      "0": "0px",
      "full": "100%",
      "screen": "100vh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "minWidth": {
      "0": "0px",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "objectPosition": {
      "bottom": "bottom",
      "center": "center",
      "left": "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      "right": "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      "top": "top"
    },
    "opacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "order": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "first": "-9999",
      "last": "9999",
      "none": "0"
    },
    "outlineColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "outlineOffset": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "outlineWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "padding": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "placeholderColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "placeholderOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "ringColor": {
      "DEFAULT": "#3b82f6",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "ringOffsetColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "ringOffsetWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "ringOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1",
      "DEFAULT": "0.5"
    },
    "ringWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "3px"
    },
    "rotate": {
      "0": "0deg",
      "1": "1deg",
      "2": "2deg",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg",
      "45": "45deg",
      "90": "90deg",
      "180": "180deg"
    },
    "saturate": {
      "0": "0",
      "50": ".5",
      "100": "1",
      "150": "1.5",
      "200": "2"
    },
    "scale": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5"
    },
    "screens": {
      "sm": "640px",
      "md": "768px",
      "lg": "1024px",
      "xl": "1280px",
      "2xl": "1536px"
    },
    "scrollMargin": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "scrollPadding": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "sepia": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "skew": {
      "0": "0deg",
      "1": "1deg",
      "2": "2deg",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg"
    },
    "space": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "spacing": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "stroke": {
      "none": "none",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "strokeWidth": {
      "0": "0",
      "1": "1",
      "2": "2"
    },
    "supports": {},
    "data": {},
    "textColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "textDecorationColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a",
        "950": "#020617"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827",
        "950": "#030712"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b",
        "950": "#09090b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717",
        "950": "#0a0a0a"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917",
        "950": "#0c0a09"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d",
        "950": "#450a0a"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12",
        "950": "#431407"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f",
        "950": "#451a03"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12",
        "950": "#422006"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314",
        "950": "#1a2e05"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d",
        "950": "#052e16"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b",
        "950": "#022c22"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a",
        "950": "#042f2e"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63",
        "950": "#083344"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e",
        "950": "#082f49"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a",
        "950": "#172554"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81",
        "950": "#1e1b4b"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95",
        "950": "#2e1065"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87",
        "950": "#3b0764"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75",
        "950": "#4a044e"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843",
        "950": "#500724"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337",
        "950": "#4c0519"
      },
      "border": "hsl(var(--border))",
      "input": "hsl(var(--input))",
      "ring": "hsl(var(--ring))",
      "background": "hsl(var(--background))",
      "foreground": "hsl(var(--foreground))",
      "primary": {
        "DEFAULT": "hsl(var(--primary))",
        "foreground": "hsl(var(--primary-foreground))"
      },
      "secondary": {
        "DEFAULT": "hsl(var(--secondary))",
        "foreground": "hsl(var(--secondary-foreground))"
      },
      "destructive": {
        "DEFAULT": "hsl(var(--destructive))",
        "foreground": "hsl(var(--destructive-foreground))"
      },
      "muted": {
        "DEFAULT": "hsl(var(--muted))",
        "foreground": "hsl(var(--muted-foreground))"
      },
      "accent": {
        "DEFAULT": "hsl(var(--accent))",
        "foreground": "hsl(var(--accent-foreground))"
      },
      "popover": {
        "DEFAULT": "hsl(var(--popover))",
        "foreground": "hsl(var(--popover-foreground))"
      },
      "card": {
        "DEFAULT": "hsl(var(--card))",
        "foreground": "hsl(var(--card-foreground))"
      }
    },
    "textDecorationThickness": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "auto": "auto",
      "from-font": "from-font"
    },
    "textIndent": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "textOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "textUnderlineOffset": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "auto": "auto"
    },
    "transformOrigin": {
      "center": "center",
      "top": "top",
      "top-right": "top right",
      "right": "right",
      "bottom-right": "bottom right",
      "bottom": "bottom",
      "bottom-left": "bottom left",
      "left": "left",
      "top-left": "top left"
    },
    "transitionDelay": {
      "0": "0s",
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms"
    },
    "transitionDuration": {
      "0": "0s",
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms",
      "DEFAULT": "150ms"
    },
    "transitionProperty": {
      "none": "none",
      "all": "all",
      "DEFAULT": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
      "colors": "color, background-color, border-color, text-decoration-color, fill, stroke",
      "opacity": "opacity",
      "shadow": "box-shadow",
      "transform": "transform"
    },
    "transitionTimingFunction": {
      "DEFAULT": "cubic-bezier(0.4, 0, 0.2, 1)",
      "linear": "linear",
      "in": "cubic-bezier(0.4, 0, 1, 1)",
      "out": "cubic-bezier(0, 0, 0.2, 1)",
      "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
    },
    "translate": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "full": "100%"
    },
    "width": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%",
      "screen": "100vw",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "willChange": {
      "auto": "auto",
      "scroll": "scroll-position",
      "contents": "contents",
      "transform": "transform"
    },
    "zIndex": {
      "0": "0",
      "10": "10",
      "20": "20",
      "30": "30",
      "40": "40",
      "50": "50",
      "auto": "auto"
    }
  },
  "corePlugins": [
    "preflight",
    "container",
    "accessibility",
    "pointerEvents",
    "visibility",
    "position",
    "inset",
    "isolation",
    "zIndex",
    "order",
    "gridColumn",
    "gridColumnStart",
    "gridColumnEnd",
    "gridRow",
    "gridRowStart",
    "gridRowEnd",
    "float",
    "clear",
    "margin",
    "boxSizing",
    "lineClamp",
    "display",
    "aspectRatio",
    "height",
    "maxHeight",
    "minHeight",
    "width",
    "minWidth",
    "maxWidth",
    "flex",
    "flexShrink",
    "flexGrow",
    "flexBasis",
    "tableLayout",
    "captionSide",
    "borderCollapse",
    "borderSpacing",
    "transformOrigin",
    "translate",
    "rotate",
    "skew",
    "scale",
    "transform",
    "animation",
    "cursor",
    "touchAction",
    "userSelect",
    "resize",
    "scrollSnapType",
    "scrollSnapAlign",
    "scrollSnapStop",
    "scrollMargin",
    "scrollPadding",
    "listStylePosition",
    "listStyleType",
    "listStyleImage",
    "appearance",
    "columns",
    "breakBefore",
    "breakInside",
    "breakAfter",
    "gridAutoColumns",
    "gridAutoFlow",
    "gridAutoRows",
    "gridTemplateColumns",
    "gridTemplateRows",
    "flexDirection",
    "flexWrap",
    "placeContent",
    "placeItems",
    "alignContent",
    "alignItems",
    "justifyContent",
    "justifyItems",
    "gap",
    "space",
    "divideWidth",
    "divideStyle",
    "divideColor",
    "divideOpacity",
    "placeSelf",
    "alignSelf",
    "justifySelf",
    "overflow",
    "overscrollBehavior",
    "scrollBehavior",
    "textOverflow",
    "hyphens",
    "whitespace",
    "wordBreak",
    "borderRadius",
    "borderWidth",
    "borderStyle",
    "borderColor",
    "borderOpacity",
    "backgroundColor",
    "backgroundOpacity",
    "backgroundImage",
    "gradientColorStops",
    "boxDecorationBreak",
    "backgroundSize",
    "backgroundAttachment",
    "backgroundClip",
    "backgroundPosition",
    "backgroundRepeat",
    "backgroundOrigin",
    "fill",
    "stroke",
    "strokeWidth",
    "objectFit",
    "objectPosition",
    "padding",
    "textAlign",
    "textIndent",
    "verticalAlign",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "textTransform",
    "fontStyle",
    "fontVariantNumeric",
    "lineHeight",
    "letterSpacing",
    "textColor",
    "textOpacity",
    "textDecoration",
    "textDecorationColor",
    "textDecorationStyle",
    "textDecorationThickness",
    "textUnderlineOffset",
    "fontSmoothing",
    "placeholderColor",
    "placeholderOpacity",
    "caretColor",
    "accentColor",
    "opacity",
    "backgroundBlendMode",
    "mixBlendMode",
    "boxShadow",
    "boxShadowColor",
    "outlineStyle",
    "outlineWidth",
    "outlineOffset",
    "outlineColor",
    "ringWidth",
    "ringColor",
    "ringOpacity",
    "ringOffsetWidth",
    "ringOffsetColor",
    "blur",
    "brightness",
    "contrast",
    "dropShadow",
    "grayscale",
    "hueRotate",
    "invert",
    "saturate",
    "sepia",
    "filter",
    "backdropBlur",
    "backdropBrightness",
    "backdropContrast",
    "backdropGrayscale",
    "backdropHueRotate",
    "backdropInvert",
    "backdropOpacity",
    "backdropSaturate",
    "backdropSepia",
    "backdropFilter",
    "transitionProperty",
    "transitionDelay",
    "transitionDuration",
    "transitionTimingFunction",
    "willChange",
    "content"
  ],
  "plugins": [],
  "content": {
    "relative": false,
    "files": [
      "./index.html",
      "./src/**/*.{vue,js,ts,jsx,tsx}"
    ],
    "extract": {},
    "transform": {}
  },
  "default": {
    "content": [
      "./index.html",
      "./src/**/*.{vue,js,ts,jsx,tsx}"
    ],
    "theme": {
      "container": {
        "center": true,
        "padding": "2rem",
        "screens": {
          "2xl": "1400px"
        }
      },
      "extend": {
        "colors": {
          "border": "hsl(var(--border))",
          "input": "hsl(var(--input))",
          "ring": "hsl(var(--ring))",
          "background": "hsl(var(--background))",
          "foreground": "hsl(var(--foreground))",
          "primary": {
            "DEFAULT": "hsl(var(--primary))",
            "foreground": "hsl(var(--primary-foreground))"
          },
          "secondary": {
            "DEFAULT": "hsl(var(--secondary))",
            "foreground": "hsl(var(--secondary-foreground))"
          },
          "destructive": {
            "DEFAULT": "hsl(var(--destructive))",
            "foreground": "hsl(var(--destructive-foreground))"
          },
          "muted": {
            "DEFAULT": "hsl(var(--muted))",
            "foreground": "hsl(var(--muted-foreground))"
          },
          "accent": {
            "DEFAULT": "hsl(var(--accent))",
            "foreground": "hsl(var(--accent-foreground))"
          },
          "popover": {
            "DEFAULT": "hsl(var(--popover))",
            "foreground": "hsl(var(--popover-foreground))"
          },
          "card": {
            "DEFAULT": "hsl(var(--card))",
            "foreground": "hsl(var(--card-foreground))"
          }
        },
        "borderRadius": {
          "lg": "var(--radius)",
          "md": "calc(var(--radius) - 2px)",
          "sm": "calc(var(--radius) - 4px)"
        }
      }
    }
  },
  "presets": [],
  "darkMode": "media",
  "prefix": "",
  "important": false,
  "separator": ":",
  "safelist": [],
  "blocklist": []
});
const search = ref$1("");
const sampleText = ref$1("Cat sit like bread eat prawns daintily with a claw then lick paws clean wash down prawns with a lap of carnation milk then retire to the warmest spot on the couch to claw at the fabric before taking a catnap mrow cat cat moo moo lick ears lick paws");
const fontSize = ref$1(16);
function mountApp({ el: el2, state, onUnmount }, render2) {
  Object.assign(state, {
    search,
    sampleText,
    fontSize
  });
  const app = createApp$1({
    render: render2
  });
  app.mount(el2);
  onUnmount(() => {
    app.unmount();
  });
}
const Comp21 = {
  id: "tailwind",
  title: "Tailwind",
  group: "design-system",
  icon: "mdi:tailwind",
  responsiveDisabled: true,
  layout: { type: "single", iframe: false },
  variants: [
    {
      id: "background-color",
      title: "Background Color",
      icon: "carbon:color-palette",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.backgroundColor).map(([key, shades]) => h$4(Ug, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => (config.prefix ?? "") + (shade === "DEFAULT" ? `bg-${key}` : `bg-${key}-${shade}`),
        search: search.value
      }, ({ color }) => h$4("div", {
        class: "__hst-shade",
        style: {
          backgroundColor: color
        }
      })))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Wg, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "text-color",
      title: "Text Color",
      icon: "carbon:text-color",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.textColor).map(([key, shades]) => h$4(Ug, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => (config.prefix ?? "") + (shade === "DEFAULT" ? `text-${key}` : `text-${key}-${shade}`),
        search: search.value
      }, ({ color }) => h$4("div", {
        class: "__hst-shade __hst-text",
        style: {
          color
        }
      }, "Aa")))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Wg, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "border-color",
      title: "Border Color",
      icon: "carbon:color-palette",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.borderColor).map(([key, shades]) => h$4(Ug, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => (config.prefix ?? "") + (shade === "DEFAULT" ? `border-${key}` : `border-${key}-${shade}`),
        search: search.value
      }, ({ color }) => h$4("div", {
        class: "__hst-shade __hst-border",
        style: {
          borderColor: color
        }
      })))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Wg, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "padding",
      title: "Padding",
      icon: "carbon:area",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.padding,
        getName: (key) => `${config.prefix ?? ""}p-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-padding",
        style: {
          padding: token.value
        }
      }, [
        h$4("div", {
          class: "__hst-padding-box"
        })
      ])))
    },
    {
      id: "margin",
      title: "Margin",
      icon: "carbon:area",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.margin,
        getName: (key) => `${config.prefix ?? ""}m-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-margin"
      }, [
        h$4("div", {
          class: "__hst-margin-box",
          style: {
            margin: token.value
          }
        })
      ])))
    },
    {
      id: "font-size",
      title: "Font Size",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.fontSize,
        getName: (key) => `${config.prefix ?? ""}text-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          fontSize: token.value[0],
          ...token.value[1]
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        })
      ])
    },
    {
      id: "font-weight",
      title: "Font Weight",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.fontWeight,
        getName: (key) => `${config.prefix ?? ""}font-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          fontWeight: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$4(jg, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "font-family",
      title: "Font Family",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.fontFamily,
        getName: (key) => `${config.prefix ?? ""}font-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          fontFamily: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$4(jg, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "letter-spacing",
      title: "Letter Spacing",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.letterSpacing,
        getName: (key) => `${config.prefix ?? ""}tracking-${key}`
      }, ({ token }) => h$4("div", {
        class: "__hst-truncate",
        style: {
          letterSpacing: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$4(jg, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "line-height",
      title: "Line Height",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.lineHeight,
        getName: (key) => `${config.prefix ?? ""}leading-${key}`
      }, ({ token }) => h$4("div", {
        style: {
          lineHeight: token.value
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$4(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        })
        // @TODO select font size
      ])
    },
    {
      id: "drop-shadow",
      title: "Drop Shadow",
      icon: "carbon:shape-except",
      onMount: (api) => mountApp(api, () => h$4(Jg, {
        tokens: config.theme.dropShadow,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "drop-shadow" : `drop-shadow-${key}`),
        colSize: 180
      }, ({ token }) => h$4("div", {
        class: "__hst-drop-shadow",
        style: {
          filter: `${(Array.isArray(token.value) ? token.value : [token.value]).map((v3) => `drop-shadow(${v3})`).join(" ")}`
        }
      })))
    },
    {
      id: "border-radius",
      title: "Border Radius",
      icon: "carbon:condition-wait-point",
      onMount: (api) => mountApp(api, () => h$4(Jg, {
        tokens: config.theme.borderRadius,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "rounded" : `rounded-${key}`),
        colSize: 180
      }, ({ token }) => h$4("div", {
        class: "__hst-border-radius",
        style: {
          borderRadius: token.value
        }
      })))
    },
    {
      id: "border-width",
      title: "Border Width",
      icon: "carbon:checkbox",
      onMount: (api) => mountApp(api, () => h$4(Jg, {
        tokens: config.theme.borderWidth,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "border" : `border-${key}`),
        colSize: 180
      }, ({ token }) => h$4("div", {
        class: "__hst-border-width",
        style: {
          borderWidth: token.value
        }
      })))
    },
    {
      id: "width",
      title: "Width",
      icon: "carbon:pan-horizontal",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.width,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "w" : `w-${key}`)
      }, ({ token }) => h$4("div", {
        class: "__hst-width"
      }, [
        h$4("div", {
          class: "__hst-width-box",
          style: {
            width: token.value
          }
        })
      ])))
    },
    {
      id: "height",
      title: "Height",
      icon: "carbon:pan-vertical",
      onMount: (api) => mountApp(api, () => h$4(Qg, {
        tokens: config.theme.height,
        getName: (key) => (config.prefix ?? "") + (key === "DEFAULT" ? "h" : `h-${key}`)
      }, ({ token }) => h$4("div", {
        class: "__hst-height",
        style: {
          height: token.value
        }
      })))
    },
    {
      id: "full-config",
      title: "Full Config",
      icon: "carbon:code",
      onMount: (api) => mountApp(api, () => h$4("pre", JSON.stringify(config, null, 2)))
    }
  ]
};
/*!
  * vue-router v4.1.6
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser$1 = typeof window !== "undefined";
function isESModule$1(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign$3 = Object.assign;
function applyToParams$1(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray$3(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop$4 = () => {
};
const isArray$3 = Array.isArray;
function warn$2(msg) {
  const args = Array.from(arguments).slice(1);
  console.warn.apply(console, ["[Vue Router warn]: " + msg].concat(args));
}
const TRAILING_SLASH_RE$1 = /\/$/;
const removeTrailingSlash$1 = (path) => path.replace(TRAILING_SLASH_RE$1, "");
function parseURL$1(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath$1(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL$1(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase$1(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation$1(stringifyQuery2, a2, b3) {
  const aLastIndex = a2.matched.length - 1;
  const bLastIndex = b3.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord$1(a2.matched[aLastIndex], b3.matched[bLastIndex]) && isSameRouteLocationParams$1(a2.params, b3.params) && stringifyQuery2(a2.query) === stringifyQuery2(b3.query) && a2.hash === b3.hash;
}
function isSameRouteRecord$1(a2, b3) {
  return (a2.aliasOf || a2) === (b3.aliasOf || b3);
}
function isSameRouteLocationParams$1(a2, b3) {
  if (Object.keys(a2).length !== Object.keys(b3).length)
    return false;
  for (const key in a2) {
    if (!isSameRouteLocationParamsValue$1(a2[key], b3[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue$1(a2, b3) {
  return isArray$3(a2) ? isEquivalentArray$1(a2, b3) : isArray$3(b3) ? isEquivalentArray$1(b3, a2) : a2 === b3;
}
function isEquivalentArray$1(a2, b3) {
  return isArray$3(b3) ? a2.length === b3.length && a2.every((value, i2) => value === b3[i2]) : a2.length === 1 && a2[0] === b3;
}
function resolveRelativePath$1(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!from.startsWith("/")) {
    warn$2(`Cannot resolve a relative location without an absolute path. Trying to resolve "${to2}" from "${from}". It should look like "/${from}".`);
    return to2;
  }
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType$1;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType$1 || (NavigationType$1 = {}));
var NavigationDirection$1;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection$1 || (NavigationDirection$1 = {}));
function normalizeBase$1(base) {
  if (!base) {
    if (isBrowser$1) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash$1(base);
}
const BEFORE_HASH_RE$1 = /^[^#]+#/;
function createHref$1(base, location2) {
  return base.replace(BEFORE_HASH_RE$1, "#") + location2;
}
function getElementPosition$1(el2, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el2.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition$1 = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition$1(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    if (typeof position.el === "string") {
      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {
        try {
          const foundEl = document.querySelector(position.el);
          if (isIdSelector && foundEl) {
            warn$2(`The selector "${position.el}" should be passed as "el: document.querySelector('${position.el}')" because it starts with "#".`);
            return;
          }
        } catch (err) {
          warn$2(`The selector "${position.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);
          return;
        }
      }
    }
    const el2 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el2) {
      warn$2(`Couldn't find element using selector "${position.el}" returned by scrollBehavior.`);
      return;
    }
    scrollToOptions = getElementPosition$1(el2, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey$1(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions$1 = /* @__PURE__ */ new Map();
function saveScrollPosition$1(key, scrollPosition) {
  scrollPositions$1.set(key, scrollPosition);
}
function getSavedScrollPosition$1(key) {
  const scroll = scrollPositions$1.get(key);
  scrollPositions$1.delete(key);
  return scroll;
}
let createBaseLocation$1 = () => location.protocol + "//" + location.host;
function createCurrentLocation$1(base, location2) {
  const { pathname, search: search2, hash: hash2 } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase$1(pathFromHash, "");
  }
  const path = stripBase$1(pathname, base);
  return path + search2 + hash2;
}
function useHistoryListeners$1(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation$1(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType$1.pop,
        direction: delta ? delta > 0 ? NavigationDirection$1.forward : NavigationDirection$1.back : NavigationDirection$1.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign$3({}, history2.state, { scroll: computeScrollPosition$1() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener);
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState$1(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition$1() : null
  };
}
function useHistoryStateNavigation$1(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation$1(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation$1() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        warn$2("Error with push/replace State", err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign$3({}, history2.state, buildState$1(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign$3(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition$1()
      }
    );
    if (!history2.state) {
      warn$2(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:

history.replaceState(history.state, '', url)

You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);
    }
    changeLocation(currentState.current, currentState, true);
    const state = assign$3({}, buildState$1(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory$1(base) {
  base = normalizeBase$1(base);
  const historyNavigation = useHistoryStateNavigation$1(base);
  const historyListeners = useHistoryListeners$1(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign$3({
    // it's overridden right after
    location: "",
    base,
    go: go2,
    createHref: createHref$1.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base) {
  base = location.host ? base || location.pathname + location.search : "";
  if (!base.includes("#"))
    base += "#";
  if (!base.endsWith("#/") && !base.endsWith("#")) {
    warn$2(`A hash base must end with a "#":
"${base}" should be "${base.replace(/#.*$/, "#")}".`);
  }
  return createWebHistory$1(base);
}
function isRouteLocation$1(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName$1(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED$1 = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol$1 = Symbol("navigation failure");
var NavigationFailureType$1;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType$1 || (NavigationFailureType$1 = {}));
const ErrorTypeMessages$1 = {
  [
    1
    /* ErrorTypes.MATCHER_NOT_FOUND */
  ]({ location: location2, currentLocation }) {
    return `No match for
 ${JSON.stringify(location2)}${currentLocation ? "\nwhile being at\n" + JSON.stringify(currentLocation) : ""}`;
  },
  [
    2
    /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
  ]({ from, to: to2 }) {
    return `Redirected from "${from.fullPath}" to "${stringifyRoute$1(to2)}" via a navigation guard.`;
  },
  [
    4
    /* ErrorTypes.NAVIGATION_ABORTED */
  ]({ from, to: to2 }) {
    return `Navigation aborted from "${from.fullPath}" to "${to2.fullPath}" via a navigation guard.`;
  },
  [
    8
    /* ErrorTypes.NAVIGATION_CANCELLED */
  ]({ from, to: to2 }) {
    return `Navigation cancelled from "${from.fullPath}" to "${to2.fullPath}" with a new navigation.`;
  },
  [
    16
    /* ErrorTypes.NAVIGATION_DUPLICATED */
  ]({ from, to: to2 }) {
    return `Avoided redundant navigation to current location: "${from.fullPath}".`;
  }
};
function createRouterError$1(type, params) {
  {
    return assign$3(new Error(ErrorTypeMessages$1[type](params)), {
      type,
      [NavigationFailureSymbol$1]: true
    }, params);
  }
}
function isNavigationFailure$1(error, type) {
  return error instanceof Error && NavigationFailureSymbol$1 in error && (type == null || !!(error.type & type));
}
const propertiesToLog$1 = ["params", "query", "hash"];
function stringifyRoute$1(to2) {
  if (typeof to2 === "string")
    return to2;
  if ("path" in to2)
    return to2.path;
  const location2 = {};
  for (const key of propertiesToLog$1) {
    if (key in to2)
      location2[key] = to2[key];
  }
  return JSON.stringify(location2, null, 2);
}
const BASE_PARAM_PATTERN$1 = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS$1 = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE$1 = /[.+*?^${}()[\]/\\]/g;
function tokensToParser$1(segments, extraOptions) {
  const options = assign$3({}, BASE_PATH_PARSER_OPTIONS$1, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE$1, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re3 = regexp ? regexp : BASE_PARAM_PATTERN$1;
        if (re3 !== BASE_PARAM_PATTERN$1) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re3})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re3}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re3})(?:/(?:${re3}))*)` : `(${re3})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re3 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i2 = score.length - 1;
    score[i2][score[i2].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re2 = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse2(path) {
    const match = path.match(re2);
    const params = {};
    if (!match)
      return null;
    for (let i2 = 1; i2 < match.length; i2++) {
      const value = match[i2] || "";
      const key = keys[i2 - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray$3(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray$3(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re: re2,
    score,
    keys,
    parse: parse2,
    stringify
  };
}
function compareScoreArray$1(a2, b3) {
  let i2 = 0;
  while (i2 < a2.length && i2 < b3.length) {
    const diff = b3[i2] - a2[i2];
    if (diff)
      return diff;
    i2++;
  }
  if (a2.length < b3.length) {
    return a2.length === 1 && a2[0] === 40 + 40 ? -1 : 1;
  } else if (a2.length > b3.length) {
    return b3.length === 1 && b3[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore$1(a2, b3) {
  let i2 = 0;
  const aScore = a2.score;
  const bScore = b3.score;
  while (i2 < aScore.length && i2 < bScore.length) {
    const comp = compareScoreArray$1(aScore[i2], bScore[i2]);
    if (comp)
      return comp;
    i2++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative$1(aScore))
      return 1;
    if (isLastScoreNegative$1(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative$1(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN$1 = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE$1 = /[a-zA-Z0-9_]/;
function tokenizePath$1(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN$1]];
  if (!path.startsWith("/")) {
    throw new Error(
      `Route paths should start with a "/": "${path}" should be "/${path}".`
    );
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer2}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i2 = 0;
  let char;
  let buffer2 = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer2)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer2
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer2}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer2,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer2 = "";
  }
  function addCharToBuffer() {
    buffer2 += char;
  }
  while (i2 < path.length) {
    char = path[i2++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer2) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE$1.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i2--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i2--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer2}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher$1(record, parent, options) {
  const parser = tokensToParser$1(tokenizePath$1(record.path), options);
  {
    const existingKeys = /* @__PURE__ */ new Set();
    for (const key of parser.keys) {
      if (existingKeys.has(key.name))
        warn$2(`Found duplicated params with name "${key.name}" for path "${record.path}". Only the last one will be available on "$route.params".`);
      existingKeys.add(key.name);
    }
  }
  const matcher = assign$3(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher$1(routes2, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions$1({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord$1(record);
    {
      checkChildMissingNameWithEmptyPath$1(mainNormalizedRecord, parent);
    }
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions$1(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign$3({}, mainNormalizedRecord, {
          // this allows us to hold a copy of the `components` option
          // so that async components cache is hold on the original record
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          // we might be the child of an alias
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
          // the aliases are always of the same kind as the original since they
          // are defined on the same record
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      if (normalizedRecord.path === "*") {
        throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');
      }
      matcher = createRouteRecordMatcher$1(normalizedRecord, parent, options);
      if (parent && path[0] === "/")
        checkMissingParamsInAbsolutePath$1(matcher, parent);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
        {
          checkSameParams$1(originalRecord, matcher);
        }
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord$1(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i2 = 0; i2 < children.length; i2++) {
          addRoute(children[i2], matcher, originalRecord && originalRecord.children[i2]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop$4;
  }
  function removeRoute(matcherRef) {
    if (isRouteName$1(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i2 = 0;
    while (i2 < matchers.length && comparePathParserScore$1(matcher, matchers[i2]) >= 0 && // Adding children with empty path should still appear before the parent
    // https://github.com/vuejs/router/issues/1124
    (matcher.record.path !== matchers[i2].record.path || !isRecordChildOf$1(matcher, matchers[i2])))
      i2++;
    matchers.splice(i2, 0, matcher);
    if (matcher.record.name && !isAliasRecord$1(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError$1(1, {
          location: location2
        });
      {
        const invalidParams = Object.keys(location2.params || {}).filter((paramName) => !matcher.keys.find((k2) => k2.name === paramName));
        if (invalidParams.length) {
          warn$2(`Discarded invalid param(s) "${invalidParams.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`);
        }
      }
      name = matcher.record.name;
      params = assign$3(
        // paramsFromLocation is a new object
        paramsFromLocation$1(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // TODO: only keep optional params coming from a parent record
          matcher.keys.filter((k2) => !k2.optional).map((k2) => k2.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation$1(location2.params, matcher.keys.map((k2) => k2.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      if (!path.startsWith("/")) {
        warn$2(`The Matcher cannot resolve relative paths but received "${path}". Unless you directly called \`matcher.resolve("${path}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`);
      }
      matcher = matchers.find((m2) => m2.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m2) => m2.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError$1(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign$3({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields$1(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation$1(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord$1(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps$1(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps$1(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "boolean" ? props : props[name];
  }
  return propsObject;
}
function isAliasRecord$1(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields$1(matched) {
  return matched.reduce((meta, record) => assign$3(meta, record.meta), {});
}
function mergeOptions$1(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isSameParam$1(a2, b3) {
  return a2.name === b3.name && a2.optional === b3.optional && a2.repeatable === b3.repeatable;
}
function checkSameParams$1(a2, b3) {
  for (const key of a2.keys) {
    if (!key.optional && !b3.keys.find(isSameParam$1.bind(null, key)))
      return warn$2(`Alias "${b3.record.path}" and the original record: "${a2.record.path}" must have the exact same param named "${key.name}"`);
  }
  for (const key of b3.keys) {
    if (!key.optional && !a2.keys.find(isSameParam$1.bind(null, key)))
      return warn$2(`Alias "${b3.record.path}" and the original record: "${a2.record.path}" must have the exact same param named "${key.name}"`);
  }
}
function checkChildMissingNameWithEmptyPath$1(mainNormalizedRecord, parent) {
  if (parent && parent.record.name && !mainNormalizedRecord.name && !mainNormalizedRecord.path) {
    warn$2(`The route named "${String(parent.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);
  }
}
function checkMissingParamsInAbsolutePath$1(record, parent) {
  for (const key of parent.keys) {
    if (!record.keys.find(isSameParam$1.bind(null, key)))
      return warn$2(`Absolute path "${record.record.path}" must have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
  }
}
function isRecordChildOf$1(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf$1(record, child));
}
const HASH_RE$1 = /#/g;
const AMPERSAND_RE$1 = /&/g;
const SLASH_RE$1 = /\//g;
const EQUAL_RE$1 = /=/g;
const IM_RE$1 = /\?/g;
const PLUS_RE$1 = /\+/g;
const ENC_BRACKET_OPEN_RE$1 = /%5B/g;
const ENC_BRACKET_CLOSE_RE$1 = /%5D/g;
const ENC_CARET_RE$1 = /%5E/g;
const ENC_BACKTICK_RE$1 = /%60/g;
const ENC_CURLY_OPEN_RE$1 = /%7B/g;
const ENC_PIPE_RE$1 = /%7C/g;
const ENC_CURLY_CLOSE_RE$1 = /%7D/g;
const ENC_SPACE_RE$1 = /%20/g;
function commonEncode$1(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE$1, "|").replace(ENC_BRACKET_OPEN_RE$1, "[").replace(ENC_BRACKET_CLOSE_RE$1, "]");
}
function encodeHash$1(text) {
  return commonEncode$1(text).replace(ENC_CURLY_OPEN_RE$1, "{").replace(ENC_CURLY_CLOSE_RE$1, "}").replace(ENC_CARET_RE$1, "^");
}
function encodeQueryValue$1(text) {
  return commonEncode$1(text).replace(PLUS_RE$1, "%2B").replace(ENC_SPACE_RE$1, "+").replace(HASH_RE$1, "%23").replace(AMPERSAND_RE$1, "%26").replace(ENC_BACKTICK_RE$1, "`").replace(ENC_CURLY_OPEN_RE$1, "{").replace(ENC_CURLY_CLOSE_RE$1, "}").replace(ENC_CARET_RE$1, "^");
}
function encodeQueryKey$1(text) {
  return encodeQueryValue$1(text).replace(EQUAL_RE$1, "%3D");
}
function encodePath$1(text) {
  return commonEncode$1(text).replace(HASH_RE$1, "%23").replace(IM_RE$1, "%3F");
}
function encodeParam$1(text) {
  return text == null ? "" : encodePath$1(text).replace(SLASH_RE$1, "%2F");
}
function decode$1(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
    warn$2(`Error decoding "${text}". Using original value`);
  }
  return "" + text;
}
function parseQuery$1(search2) {
  const query = {};
  if (search2 === "" || search2 === "?")
    return query;
  const hasLeadingIM = search2[0] === "?";
  const searchParams = (hasLeadingIM ? search2.slice(1) : search2).split("&");
  for (let i2 = 0; i2 < searchParams.length; ++i2) {
    const searchParam = searchParams[i2].replace(PLUS_RE$1, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode$1(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode$1(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray$3(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery$1(query) {
  let search2 = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey$1(key);
    if (value == null) {
      if (value !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray$3(value) ? value.map((v3) => v3 && encodeQueryValue$1(v3)) : [value && encodeQueryValue$1(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
        if (value2 != null)
          search2 += "=" + value2;
      }
    });
  }
  return search2;
}
function normalizeQuery$1(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray$3(value) ? value.map((v3) => v3 == null ? null : "" + v3) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey$1 = Symbol("router view location matched");
const viewDepthKey$1 = Symbol("router view depth");
const routerKey$1 = Symbol("router");
const routeLocationKey$1 = Symbol("route location");
const routerViewLocationKey$1 = Symbol("router view location");
function useCallbacks$1() {
  let handlers2 = [];
  function add2(handler) {
    handlers2.push(handler);
    return () => {
      const i2 = handlers2.indexOf(handler);
      if (i2 > -1)
        handlers2.splice(i2, 1);
    };
  }
  function reset() {
    handlers2 = [];
  }
  return {
    add: add2,
    list: () => handlers2,
    reset
  };
}
function guardToPromiseFn$1(guard, to2, from, record, name) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError$1(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation$1(valid)) {
        reject(createRouterError$1(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to2, from, canOnlyBeCalledOnce$1(next, to2, from));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    if (guard.length > 2) {
      const message = `The "next" callback was never called inside of ${guard.name ? '"' + guard.name + '"' : ""}:
${guard.toString()}
. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;
      if (typeof guardReturn === "object" && "then" in guardReturn) {
        guardCall = guardCall.then((resolvedValue) => {
          if (!next._called) {
            warn$2(message);
            return Promise.reject(new Error("Invalid navigation guard"));
          }
          return resolvedValue;
        });
      } else if (guardReturn !== void 0) {
        if (!next._called) {
          warn$2(message);
          reject(new Error("Invalid navigation guard"));
          return;
        }
      }
    }
    guardCall.catch((err) => reject(err));
  });
}
function canOnlyBeCalledOnce$1(next, to2, from) {
  let called = 0;
  return function() {
    if (called++ === 1)
      warn$2(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to2.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
    next._called = true;
    if (called === 1)
      next.apply(null, arguments);
  };
}
function extractComponentsGuards$1(matched, guardType, to2, from) {
  const guards = [];
  for (const record of matched) {
    if (!record.components && !record.children.length) {
      warn$2(`Record with path "${record.path}" is either missing a "component(s)" or "children" property.`);
    }
    for (const name in record.components) {
      let rawComponent = record.components[name];
      {
        if (!rawComponent || typeof rawComponent !== "object" && typeof rawComponent !== "function") {
          warn$2(`Component "${name}" in record with path "${record.path}" is not a valid component. Received "${String(rawComponent)}".`);
          throw new Error("Invalid route component");
        } else if ("then" in rawComponent) {
          warn$2(`Component "${name}" in record with path "${record.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);
          const promise = rawComponent;
          rawComponent = () => promise;
        } else if (rawComponent.__asyncLoader && // warn only once per component
        !rawComponent.__warnedDefineAsync) {
          rawComponent.__warnedDefineAsync = true;
          warn$2(`Component "${name}" in record with path "${record.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`);
        }
      }
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent$1(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn$1(guard, to2, from, record, name));
      } else {
        let componentPromise = rawComponent();
        if (!("catch" in componentPromise)) {
          warn$2(`Component "${name}" in record with path "${record.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`);
          componentPromise = Promise.resolve(componentPromise);
        }
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule$1(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn$1(guard, to2, from, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent$1(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink$1(props) {
  const router2 = inject$1(routerKey$1);
  const currentRoute = inject$1(routeLocationKey$1);
  const route = computed$2(() => router2.resolve(unref$1(props.to)));
  const activeRecordIndex = computed$2(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord$1.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath$1(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath$1(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord$1.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed$2(() => activeRecordIndex.value > -1 && includesParams$1(currentRoute.params, route.value.params));
  const isExactActive = computed$2(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams$1(currentRoute.params, route.value.params));
  function navigate(e2 = {}) {
    if (guardEvent$1(e2)) {
      return router2[unref$1(props.replace) ? "replace" : "push"](
        unref$1(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop$4);
    }
    return Promise.resolve();
  }
  if (isBrowser$1) {
    const instance = getCurrentInstance$1();
    if (instance) {
      const linkContextDevtools = {
        route: route.value,
        isActive: isActive.value,
        isExactActive: isExactActive.value
      };
      instance.__vrl_devtools = instance.__vrl_devtools || [];
      instance.__vrl_devtools.push(linkContextDevtools);
      watchEffect$1(() => {
        linkContextDevtools.route = route.value;
        linkContextDevtools.isActive = isActive.value;
        linkContextDevtools.isExactActive = isExactActive.value;
      }, { flush: "post" });
    }
  }
  return {
    route,
    href: computed$2(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl$1 = /* @__PURE__ */ defineComponent$1({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink: useLink$1,
  setup(props, { slots }) {
    const link = reactive$1(useLink$1(props));
    const { options } = inject$1(routerKey$1);
    const elClass = computed$2(() => ({
      [getLinkClass$1(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass$1(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h$4("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink$1 = RouterLinkImpl$1;
function guardEvent$1(e2) {
  if (e2.metaKey || e2.altKey || e2.ctrlKey || e2.shiftKey)
    return;
  if (e2.defaultPrevented)
    return;
  if (e2.button !== void 0 && e2.button !== 0)
    return;
  if (e2.currentTarget && e2.currentTarget.getAttribute) {
    const target = e2.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e2.preventDefault)
    e2.preventDefault();
  return true;
}
function includesParams$1(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray$3(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i2) => value !== outerValue[i2]))
        return false;
    }
  }
  return true;
}
function getOriginalPath$1(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass$1 = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl$1 = /* @__PURE__ */ defineComponent$1({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    warnDeprecatedUsage$1();
    const injectedRoute = inject$1(routerViewLocationKey$1);
    const routeToDisplay = computed$2(() => props.route || injectedRoute.value);
    const injectedDepth = inject$1(viewDepthKey$1, 0);
    const depth = computed$2(() => {
      let initialDepth = unref$1(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed$2(() => routeToDisplay.value.matched[depth.value]);
    provide$1(viewDepthKey$1, computed$2(() => depth.value + 1));
    provide$1(matchedRouteKey$1, matchedRouteRef);
    provide$1(routerViewLocationKey$1, routeToDisplay);
    const viewRef = ref$1();
    watch$1(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord$1(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot$1(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$4(ViewComponent, assign$3({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      if (isBrowser$1 && component.ref) {
        const info = {
          depth: depth.value,
          name: matchedRoute.name,
          path: matchedRoute.path,
          meta: matchedRoute.meta
        };
        const internalInstances = isArray$3(component.ref) ? component.ref.map((r2) => r2.i) : [component.ref.i];
        internalInstances.forEach((instance) => {
          instance.__vrv_devtools = info;
        });
      }
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot$1(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot$1(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView$1 = RouterViewImpl$1;
function warnDeprecatedUsage$1() {
  const instance = getCurrentInstance$1();
  const parentName = instance.parent && instance.parent.type.name;
  if (parentName && (parentName === "KeepAlive" || parentName.includes("Transition"))) {
    const comp = parentName === "KeepAlive" ? "keep-alive" : "transition";
    warn$2(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.
Use slot props instead:

<router-view v-slot="{ Component }">
  <${comp}>
    <component :is="Component" />
  </${comp}>
</router-view>`);
  }
}
function formatRouteLocation$1(routeLocation, tooltip) {
  const copy = assign$3({}, routeLocation, {
    // remove variables that can contain vue instances
    matched: routeLocation.matched.map((matched) => omit$2(matched, ["instances", "children", "aliasOf"]))
  });
  return {
    _custom: {
      type: null,
      readOnly: true,
      display: routeLocation.fullPath,
      tooltip,
      value: copy
    }
  };
}
function formatDisplay$2(display) {
  return {
    _custom: {
      display
    }
  };
}
let routerId$1 = 0;
function addDevtools$1(app, router2, matcher) {
  if (router2.__hasDevtools)
    return;
  router2.__hasDevtools = true;
  const id2 = routerId$1++;
  setupDevtoolsPlugin$2({
    id: "org.vuejs.router" + (id2 ? "." + id2 : ""),
    label: "Vue Router",
    packageName: "vue-router",
    homepage: "https://router.vuejs.org",
    logo: "https://router.vuejs.org/logo.png",
    componentStateTypes: ["Routing"],
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.on.inspectComponent((payload, ctx) => {
      if (payload.instanceData) {
        payload.instanceData.state.push({
          type: "Routing",
          key: "$route",
          editable: false,
          value: formatRouteLocation$1(router2.currentRoute.value, "Current Route")
        });
      }
    });
    api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {
      if (componentInstance.__vrv_devtools) {
        const info = componentInstance.__vrv_devtools;
        node.tags.push({
          label: (info.name ? `${info.name.toString()}: ` : "") + info.path,
          textColor: 0,
          tooltip: "This component is rendered by &lt;router-view&gt;",
          backgroundColor: PINK_500$1
        });
      }
      if (isArray$3(componentInstance.__vrl_devtools)) {
        componentInstance.__devtoolsApi = api;
        componentInstance.__vrl_devtools.forEach((devtoolsData) => {
          let backgroundColor = ORANGE_400$1;
          let tooltip = "";
          if (devtoolsData.isExactActive) {
            backgroundColor = LIME_500$1;
            tooltip = "This is exactly active";
          } else if (devtoolsData.isActive) {
            backgroundColor = BLUE_600$1;
            tooltip = "This link is active";
          }
          node.tags.push({
            label: devtoolsData.route.path,
            textColor: 0,
            tooltip,
            backgroundColor
          });
        });
      }
    });
    watch$1(router2.currentRoute, () => {
      refreshRoutesView();
      api.notifyComponentUpdate();
      api.sendInspectorTree(routerInspectorId);
      api.sendInspectorState(routerInspectorId);
    });
    const navigationsLayerId = "router:navigations:" + id2;
    api.addTimelineLayer({
      id: navigationsLayerId,
      label: `Router${id2 ? " " + id2 : ""} Navigations`,
      color: 4237508
    });
    router2.onError((error, to2) => {
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "Error during Navigation",
          subtitle: to2.fullPath,
          logType: "error",
          time: api.now(),
          data: { error },
          groupId: to2.meta.__navigationId
        }
      });
    });
    let navigationId = 0;
    router2.beforeEach((to2, from) => {
      const data = {
        guard: formatDisplay$2("beforeEach"),
        from: formatRouteLocation$1(from, "Current Location during this navigation"),
        to: formatRouteLocation$1(to2, "Target location")
      };
      Object.defineProperty(to2.meta, "__navigationId", {
        value: navigationId++
      });
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          time: api.now(),
          title: "Start of navigation",
          subtitle: to2.fullPath,
          data,
          groupId: to2.meta.__navigationId
        }
      });
    });
    router2.afterEach((to2, from, failure) => {
      const data = {
        guard: formatDisplay$2("afterEach")
      };
      if (failure) {
        data.failure = {
          _custom: {
            type: Error,
            readOnly: true,
            display: failure ? failure.message : "",
            tooltip: "Navigation Failure",
            value: failure
          }
        };
        data.status = formatDisplay$2("❌");
      } else {
        data.status = formatDisplay$2("✅");
      }
      data.from = formatRouteLocation$1(from, "Current Location during this navigation");
      data.to = formatRouteLocation$1(to2, "Target location");
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "End of navigation",
          subtitle: to2.fullPath,
          time: api.now(),
          data,
          logType: failure ? "warning" : "default",
          groupId: to2.meta.__navigationId
        }
      });
    });
    const routerInspectorId = "router-inspector:" + id2;
    api.addInspector({
      id: routerInspectorId,
      label: "Routes" + (id2 ? " " + id2 : ""),
      icon: "book",
      treeFilterPlaceholder: "Search routes"
    });
    function refreshRoutesView() {
      if (!activeRoutesPayload)
        return;
      const payload = activeRoutesPayload;
      let routes2 = matcher.getRoutes().filter((route) => !route.parent);
      routes2.forEach(resetMatchStateOnRouteRecord$1);
      if (payload.filter) {
        routes2 = routes2.filter((route) => (
          // save matches state based on the payload
          isRouteMatching$1(route, payload.filter.toLowerCase())
        ));
      }
      routes2.forEach((route) => markRouteRecordActive$1(route, router2.currentRoute.value));
      payload.rootNodes = routes2.map(formatRouteRecordForInspector$1);
    }
    let activeRoutesPayload;
    api.on.getInspectorTree((payload) => {
      activeRoutesPayload = payload;
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        refreshRoutesView();
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        const routes2 = matcher.getRoutes();
        const route = routes2.find((route2) => route2.record.__vd_id === payload.nodeId);
        if (route) {
          payload.state = {
            options: formatRouteRecordMatcherForStateInspector$1(route)
          };
        }
      }
    });
    api.sendInspectorTree(routerInspectorId);
    api.sendInspectorState(routerInspectorId);
  });
}
function modifierForKey$1(key) {
  if (key.optional) {
    return key.repeatable ? "*" : "?";
  } else {
    return key.repeatable ? "+" : "";
  }
}
function formatRouteRecordMatcherForStateInspector$1(route) {
  const { record } = route;
  const fields = [
    { editable: false, key: "path", value: record.path }
  ];
  if (record.name != null) {
    fields.push({
      editable: false,
      key: "name",
      value: record.name
    });
  }
  fields.push({ editable: false, key: "regexp", value: route.re });
  if (route.keys.length) {
    fields.push({
      editable: false,
      key: "keys",
      value: {
        _custom: {
          type: null,
          readOnly: true,
          display: route.keys.map((key) => `${key.name}${modifierForKey$1(key)}`).join(" "),
          tooltip: "Param keys",
          value: route.keys
        }
      }
    });
  }
  if (record.redirect != null) {
    fields.push({
      editable: false,
      key: "redirect",
      value: record.redirect
    });
  }
  if (route.alias.length) {
    fields.push({
      editable: false,
      key: "aliases",
      value: route.alias.map((alias) => alias.record.path)
    });
  }
  if (Object.keys(route.record.meta).length) {
    fields.push({
      editable: false,
      key: "meta",
      value: route.record.meta
    });
  }
  fields.push({
    key: "score",
    editable: false,
    value: {
      _custom: {
        type: null,
        readOnly: true,
        display: route.score.map((score) => score.join(", ")).join(" | "),
        tooltip: "Score used to sort routes",
        value: route.score
      }
    }
  });
  return fields;
}
const PINK_500$1 = 15485081;
const BLUE_600$1 = 2450411;
const LIME_500$1 = 8702998;
const CYAN_400$1 = 2282478;
const ORANGE_400$1 = 16486972;
const DARK$1 = 6710886;
function formatRouteRecordForInspector$1(route) {
  const tags = [];
  const { record } = route;
  if (record.name != null) {
    tags.push({
      label: String(record.name),
      textColor: 0,
      backgroundColor: CYAN_400$1
    });
  }
  if (record.aliasOf) {
    tags.push({
      label: "alias",
      textColor: 0,
      backgroundColor: ORANGE_400$1
    });
  }
  if (route.__vd_match) {
    tags.push({
      label: "matches",
      textColor: 0,
      backgroundColor: PINK_500$1
    });
  }
  if (route.__vd_exactActive) {
    tags.push({
      label: "exact",
      textColor: 0,
      backgroundColor: LIME_500$1
    });
  }
  if (route.__vd_active) {
    tags.push({
      label: "active",
      textColor: 0,
      backgroundColor: BLUE_600$1
    });
  }
  if (record.redirect) {
    tags.push({
      label: typeof record.redirect === "string" ? `redirect: ${record.redirect}` : "redirects",
      textColor: 16777215,
      backgroundColor: DARK$1
    });
  }
  let id2 = record.__vd_id;
  if (id2 == null) {
    id2 = String(routeRecordId$1++);
    record.__vd_id = id2;
  }
  return {
    id: id2,
    label: record.path,
    tags,
    children: route.children.map(formatRouteRecordForInspector$1)
  };
}
let routeRecordId$1 = 0;
const EXTRACT_REGEXP_RE$1 = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive$1(route, currentRoute) {
  const isExactActive = currentRoute.matched.length && isSameRouteRecord$1(currentRoute.matched[currentRoute.matched.length - 1], route.record);
  route.__vd_exactActive = route.__vd_active = isExactActive;
  if (!isExactActive) {
    route.__vd_active = currentRoute.matched.some((match) => isSameRouteRecord$1(match, route.record));
  }
  route.children.forEach((childRoute) => markRouteRecordActive$1(childRoute, currentRoute));
}
function resetMatchStateOnRouteRecord$1(route) {
  route.__vd_match = false;
  route.children.forEach(resetMatchStateOnRouteRecord$1);
}
function isRouteMatching$1(route, filter2) {
  const found = String(route.re).match(EXTRACT_REGEXP_RE$1);
  route.__vd_match = false;
  if (!found || found.length < 3) {
    return false;
  }
  const nonEndingRE = new RegExp(found[1].replace(/\$$/, ""), found[2]);
  if (nonEndingRE.test(filter2)) {
    route.children.forEach((child) => isRouteMatching$1(child, filter2));
    if (route.record.path !== "/" || filter2 === "/") {
      route.__vd_match = route.re.test(filter2);
      return true;
    }
    return false;
  }
  const path = route.record.path.toLowerCase();
  const decodedPath = decode$1(path);
  if (!filter2.startsWith("/") && (decodedPath.includes(filter2) || path.includes(filter2)))
    return true;
  if (decodedPath.startsWith(filter2) || path.startsWith(filter2))
    return true;
  if (route.record.name && String(route.record.name).includes(filter2))
    return true;
  return route.children.some((child) => isRouteMatching$1(child, filter2));
}
function omit$2(obj, keys) {
  const ret = {};
  for (const key in obj) {
    if (!keys.includes(key)) {
      ret[key] = obj[key];
    }
  }
  return ret;
}
function createRouter$1(options) {
  const matcher = createRouterMatcher$1(options.routes, options);
  const parseQuery$1$1 = options.parseQuery || parseQuery$1;
  const stringifyQuery$1$1 = options.stringifyQuery || stringifyQuery$1;
  const routerHistory = options.history;
  if (!routerHistory)
    throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');
  const beforeGuards = useCallbacks$1();
  const beforeResolveGuards = useCallbacks$1();
  const afterGuards = useCallbacks$1();
  const currentRoute = shallowRef$1(START_LOCATION_NORMALIZED$1);
  let pendingLocation = START_LOCATION_NORMALIZED$1;
  if (isBrowser$1 && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams$1.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams$1.bind(null, encodeParam$1);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams$1.bind(null, decode$1)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName$1(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    } else {
      warn$2(`Cannot remove non-existent route "${String(name)}"`);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign$3({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL$1(parseQuery$1$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      {
        if (href2.startsWith("//"))
          warn$2(`Location "${rawLocation}" resolved to "${href2}". A resolved location cannot start with multiple slashes.`);
        else if (!matchedRoute2.matched.length) {
          warn$2(`No match found for location with path "${rawLocation}"`);
        }
      }
      return assign$3(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode$1(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      if ("params" in rawLocation && !("name" in rawLocation) && // @ts-expect-error: the type is never
      Object.keys(rawLocation.params).length) {
        warn$2(`Path "${// @ts-expect-error: the type is never
        rawLocation.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`);
      }
      matcherLocation = assign$3({}, rawLocation, {
        path: parseURL$1(parseQuery$1$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign$3({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign$3({}, rawLocation, {
        params: encodeParams(rawLocation.params)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    if (hash2 && !hash2.startsWith("#")) {
      warn$2(`A \`hash\` should always start with the character "#". Replace "${hash2}" with "#${hash2}".`);
    }
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL$1(stringifyQuery$1$1, assign$3({}, rawLocation, {
      hash: encodeHash$1(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    {
      if (href.startsWith("//")) {
        warn$2(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
      } else if (!matchedRoute.matched.length) {
        warn$2(`No match found for location with path "${"path" in rawLocation ? rawLocation.path : rawLocation}"`);
      }
    }
    return assign$3({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash: hash2,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$1$1 === stringifyQuery$1 ? normalizeQuery$1(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL$1(parseQuery$1$1, to2, currentRoute.value.path) : assign$3({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError$1(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign$3(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      if (!("path" in newTargetLocation) && !("name" in newTargetLocation)) {
        warn$2(`Invalid redirect found:
${JSON.stringify(newTargetLocation, null, 2)}
 when navigating to "${to2.fullPath}". A redirect must contain a name or path. This will break in production.`);
        throw new Error("Invalid redirect");
      }
      return assign$3({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: "path" in newTargetLocation ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign$3(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign$3({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation$1(stringifyQuery$1$1, from, targetLocation)) {
      failure = createRouterError$1(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure$1(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure$1(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure$1(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          if (
            // we are redirecting to the same location we were already at
            isSameRouteLocation$1(stringifyQuery$1$1, resolve2(failure2.to), toLocation) && // and we have done it a couple of times
            redirectedFrom && // @ts-expect-error: added only in dev
            (redirectedFrom._count = redirectedFrom._count ? (
              // @ts-expect-error
              redirectedFrom._count + 1
            ) : 1) > 10
          ) {
            warn$2(`Detected an infinite redirection in a navigation guard when going from "${from.fullPath}" to "${toLocation.fullPath}". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);
            return Promise.reject(new Error("Infinite redirect in navigation guard"));
          }
          return pushWithRedirect(
            // keep options
            assign$3({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign$3({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords$1(to2, from);
    guards = extractComponentsGuards$1(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn$1(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn$1(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards$1(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn$1(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of to2.matched) {
        if (record.beforeEnter && !from.matched.includes(record)) {
          if (isArray$3(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn$1(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn$1(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards$1(enteringRecords, "beforeRouteEnter", to2, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn$1(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure$1(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    for (const guard of afterGuards.list())
      guard(to2, from, failure);
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED$1;
    const state = !isBrowser$1 ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign$3({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign$3(shouldRedirect, { replace: true }), toLocation).catch(noop$4);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser$1) {
        saveScrollPosition$1(getScrollKey$1(from.fullPath, info.delta), computeScrollPosition$1());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure$1(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure$1(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure$1(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType$1.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop$4);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure$1(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType$1.pop && isNavigationFailure$1(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop$4);
    });
  }
  let readyHandlers = useCallbacks$1();
  let errorHandlers = useCallbacks$1();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorHandlers.list();
    if (list.length) {
      list.forEach((handler) => handler(error, to2, from));
    } else {
      {
        warn$2("uncaught error during route navigation:");
      }
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED$1)
      return Promise.resolve();
    return new Promise((resolve3, reject) => {
      readyHandlers.add([resolve3, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve3, reject]) => err ? reject(err) : resolve3());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser$1 || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition$1(getScrollKey$1(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick$1().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition$1(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorHandlers.add,
    isReady,
    install(app) {
      const router3 = this;
      app.component("RouterLink", RouterLink$1);
      app.component("RouterView", RouterView$1);
      app.config.globalProperties.$router = router3;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref$1(currentRoute)
      });
      if (isBrowser$1 && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED$1) {
        started = true;
        push(routerHistory.location).catch((err) => {
          warn$2("Unexpected error when starting the router:", err);
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED$1) {
        reactiveRoute[key] = computed$2(() => currentRoute.value[key]);
      }
      app.provide(routerKey$1, router3);
      app.provide(routeLocationKey$1, reactive$1(reactiveRoute));
      app.provide(routerViewLocationKey$1, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED$1;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED$1;
          started = false;
          ready = false;
        }
        unmountApp();
      };
      if (isBrowser$1) {
        addDevtools$1(app, router3, matcher);
      }
    }
  };
  return router2;
}
function runGuardQueue(guards) {
  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());
}
function extractChangingRecords$1(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i2 = 0; i2 < len; i2++) {
    const recordFrom = from.matched[i2];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord$1(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i2];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord$1(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRouter$1() {
  return inject$1(routerKey$1);
}
function useRoute$1() {
  return inject$1(routeLocationKey$1);
}
function t$5(t2) {
  return "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
}
function e$3(t2, e2) {
  return (!e2 || "hidden" !== t2) && "visible" !== t2 && "clip" !== t2;
}
function n$7(t2, n2) {
  if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
    var r2 = getComputedStyle(t2, null);
    return e$3(r2.overflowY, n2) || e$3(r2.overflowX, n2) || function(t3) {
      var e2 = function(t4) {
        if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
          return null;
        try {
          return t4.ownerDocument.defaultView.frameElement;
        } catch (t5) {
          return null;
        }
      }(t3);
      return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);
    }(t2);
  }
  return false;
}
function r$5(t2, e2, n2, r2, i2, o2, l2, d2) {
  return o2 < t2 && l2 > e2 || o2 > t2 && l2 < e2 ? 0 : o2 <= t2 && d2 <= n2 || l2 >= e2 && d2 >= n2 ? o2 - t2 - r2 : l2 > e2 && d2 < n2 || o2 < t2 && d2 > n2 ? l2 - e2 + i2 : 0;
}
var i$5 = function(e2, i2) {
  var o2 = window, l2 = i2.scrollMode, d2 = i2.block, f2 = i2.inline, h2 = i2.boundary, u2 = i2.skipOverflowHiddenElements, s3 = "function" == typeof h2 ? h2 : function(t2) {
    return t2 !== h2;
  };
  if (!t$5(e2))
    throw new TypeError("Invalid target");
  for (var a2, c2, g2 = document.scrollingElement || document.documentElement, p2 = [], m2 = e2; t$5(m2) && s3(m2); ) {
    if ((m2 = null == (c2 = (a2 = m2).parentElement) ? a2.getRootNode().host || null : c2) === g2) {
      p2.push(m2);
      break;
    }
    null != m2 && m2 === document.body && n$7(m2) && !n$7(document.documentElement) || null != m2 && n$7(m2, u2) && p2.push(m2);
  }
  for (var w2 = o2.visualViewport ? o2.visualViewport.width : innerWidth, v3 = o2.visualViewport ? o2.visualViewport.height : innerHeight, W3 = window.scrollX || pageXOffset, H2 = window.scrollY || pageYOffset, b3 = e2.getBoundingClientRect(), y2 = b3.height, E3 = b3.width, M2 = b3.top, V2 = b3.right, x2 = b3.bottom, I2 = b3.left, C2 = "start" === d2 || "nearest" === d2 ? M2 : "end" === d2 ? x2 : M2 + y2 / 2, R2 = "center" === f2 ? I2 + E3 / 2 : "end" === f2 ? V2 : I2, T3 = [], k2 = 0; k2 < p2.length; k2++) {
    var B2 = p2[k2], D2 = B2.getBoundingClientRect(), O2 = D2.height, X2 = D2.width, Y2 = D2.top, L2 = D2.right, S2 = D2.bottom, j2 = D2.left;
    if ("if-needed" === l2 && M2 >= 0 && I2 >= 0 && x2 <= v3 && V2 <= w2 && M2 >= Y2 && x2 <= S2 && I2 >= j2 && V2 <= L2)
      return T3;
    var N3 = getComputedStyle(B2), q = parseInt(N3.borderLeftWidth, 10), z2 = parseInt(N3.borderTopWidth, 10), A3 = parseInt(N3.borderRightWidth, 10), F3 = parseInt(N3.borderBottomWidth, 10), G3 = 0, J3 = 0, K2 = "offsetWidth" in B2 ? B2.offsetWidth - B2.clientWidth - q - A3 : 0, P3 = "offsetHeight" in B2 ? B2.offsetHeight - B2.clientHeight - z2 - F3 : 0, Q2 = "offsetWidth" in B2 ? 0 === B2.offsetWidth ? 0 : X2 / B2.offsetWidth : 0, U2 = "offsetHeight" in B2 ? 0 === B2.offsetHeight ? 0 : O2 / B2.offsetHeight : 0;
    if (g2 === B2)
      G3 = "start" === d2 ? C2 : "end" === d2 ? C2 - v3 : "nearest" === d2 ? r$5(H2, H2 + v3, v3, z2, F3, H2 + C2, H2 + C2 + y2, y2) : C2 - v3 / 2, J3 = "start" === f2 ? R2 : "center" === f2 ? R2 - w2 / 2 : "end" === f2 ? R2 - w2 : r$5(W3, W3 + w2, w2, q, A3, W3 + R2, W3 + R2 + E3, E3), G3 = Math.max(0, G3 + H2), J3 = Math.max(0, J3 + W3);
    else {
      G3 = "start" === d2 ? C2 - Y2 - z2 : "end" === d2 ? C2 - S2 + F3 + P3 : "nearest" === d2 ? r$5(Y2, S2, O2, z2, F3 + P3, C2, C2 + y2, y2) : C2 - (Y2 + O2 / 2) + P3 / 2, J3 = "start" === f2 ? R2 - j2 - q : "center" === f2 ? R2 - (j2 + X2 / 2) + K2 / 2 : "end" === f2 ? R2 - L2 + A3 + K2 : r$5(j2, L2, X2, q, A3 + K2, R2, R2 + E3, E3);
      var Z2 = B2.scrollLeft, $3 = B2.scrollTop;
      C2 += $3 - (G3 = Math.max(0, Math.min($3 + G3 / U2, B2.scrollHeight - O2 / U2 + P3))), R2 += Z2 - (J3 = Math.max(0, Math.min(Z2 + J3 / Q2, B2.scrollWidth - X2 / Q2 + K2)));
    }
    T3.push({ el: B2, top: G3, left: J3 });
  }
  return T3;
};
function isOptionsObject(options) {
  return options === Object(options) && Object.keys(options).length !== 0;
}
function defaultBehavior(actions, behavior) {
  if (behavior === void 0) {
    behavior = "auto";
  }
  var canSmoothScroll = "scrollBehavior" in document.body.style;
  actions.forEach(function(_ref) {
    var el2 = _ref.el, top = _ref.top, left = _ref.left;
    if (el2.scroll && canSmoothScroll) {
      el2.scroll({
        top,
        left,
        behavior
      });
    } else {
      el2.scrollTop = top;
      el2.scrollLeft = left;
    }
  });
}
function getOptions(options) {
  if (options === false) {
    return {
      block: "end",
      inline: "nearest"
    };
  }
  if (isOptionsObject(options)) {
    return options;
  }
  return {
    block: "start",
    inline: "nearest"
  };
}
function scrollIntoView(target, options) {
  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
  if (isOptionsObject(options) && typeof options.behavior === "function") {
    return options.behavior(isTargetAttached ? i$5(target, options) : []);
  }
  if (!isTargetAttached) {
    return;
  }
  var computeOptions = getOptions(options);
  return defaultBehavior(i$5(target, computeOptions), computeOptions.behavior);
}
const voidElements = [
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
];
const KEY_ESCAPE_REG = /[\s-.:|#@$£*%]/;
const MAX_SINGLE_LINE_ARRAY_LENGTH = 3;
function serializeJs(value) {
  const seen2 = /* @__PURE__ */ new Set();
  if (value === void 0) {
    return "undefined";
  }
  if (value === null) {
    return "null";
  }
  if (typeof value === "string") {
    return `'${value}'`;
  }
  if (typeof value === "boolean") {
    return value ? "true" : "false";
  }
  if (Array.isArray(value)) {
    return printLines(arrayToSourceLines(value, seen2));
  }
  if (typeof value === "object") {
    return printLines(objectToSourceLines(value, seen2));
  }
  if (value == null ? void 0 : value.__autoBuildingObject) {
    return value;
  }
  if (typeof value === "function" && value.name) {
    return value.name;
  }
  return value.toString();
}
function printLines(lines) {
  return lines.map((line) => "  ".repeat(line.spaces) + line.line).join("\n");
}
function objectToSourceLines(object, seen2, indentCount = 0) {
  if (seen2.has(object)) {
    object = {};
  } else {
    seen2.add(object);
  }
  return createLines(indentCount, (lines) => {
    lines.push("{");
    lines.push(...createLines(1, (lines2) => {
      for (const key in object) {
        const value = object[key];
        let printedKey = key;
        if (KEY_ESCAPE_REG.test(key)) {
          printedKey = `'${printedKey}'`;
        }
        addLinesFromValue(lines2, value, `${printedKey}: `, ",", seen2);
      }
    }));
    lines.push("}");
  });
}
function arrayToSourceLines(array, seen2, indentCount = 0) {
  if (seen2.has(array)) {
    array = [];
  } else {
    seen2.add(array);
  }
  return createLines(indentCount, (lines) => {
    const contentLines = createLines(1, (lines2) => {
      for (const value of array) {
        addLinesFromValue(lines2, value, "", ",", seen2);
      }
    });
    if (contentLines.length === 0) {
      lines.push("[]");
    } else if (contentLines.length <= MAX_SINGLE_LINE_ARRAY_LENGTH && !contentLines.some((line) => line.spaces > 1)) {
      const [first] = contentLines;
      first.line = contentLines.map(({ line }) => line.substring(0, line.length - 1)).join(", ");
      first.line = `[${first.line}]`;
      first.spaces--;
      lines.push(first);
    } else {
      lines.push("[", ...contentLines, "]");
    }
  });
}
function createLines(indentCount, handler) {
  const lines = [];
  handler(lines);
  return lines.map((line) => {
    if (line.spaces != null) {
      line.spaces += indentCount;
      return line;
    }
    return { spaces: indentCount, line };
  });
}
function addLinesFromValue(lines, value, before, after, seen2) {
  let result;
  if (Array.isArray(value)) {
    lines.push(...wrap(arrayToSourceLines(value, seen2), before, after));
    return;
  } else if (value && typeof value === "object") {
    lines.push(...wrap(objectToSourceLines(value, seen2), before, after));
    return;
  } else if (typeof value === "string") {
    result = value.includes("'") ? `\`${value}\`` : `'${value}'`;
  } else if (typeof value === "undefined") {
    result = "undefined";
  } else if (value === null) {
    result = "null";
  } else if (typeof value === "boolean") {
    result = value ? "true" : "false";
  } else {
    result = value;
  }
  lines.push(before + result + after);
}
function wrap(lines, before, after) {
  lines[0].line = before + lines[0].line;
  lines[lines.length - 1].line += after;
  return lines;
}
function indent(lines, count2 = 1) {
  return lines.map((line) => `${"  ".repeat(count2)}${line}`);
}
function unindent(code2) {
  const lines = code2.split("\n");
  let indentLevel = -1;
  let indentText;
  const linesToAnalyze = lines.filter((line) => line.trim().length > 0);
  for (const line of linesToAnalyze) {
    const match = /^\s*/.exec(line);
    if (match && (indentLevel === -1 || indentLevel > match[0].length)) {
      indentLevel = match[0].length;
      indentText = match[0];
    }
  }
  const result = [];
  for (const line of lines) {
    result.push(line.replace(indentText, ""));
  }
  return result.join("\n").trim();
}
function createAutoBuildingObject(format2, specialKeysHandler, key = "", depth = 0) {
  const cache2 = {};
  if (depth > 32)
    return { key, cache: cache2, target: {}, proxy: () => key };
  const target = () => {
    const k2 = key + "()";
    return format2 ? format2(k2) : k2;
  };
  const proxy = new Proxy(target, {
    get(_2, p2) {
      if (p2 === "__autoBuildingObject") {
        return true;
      }
      if (p2 === "__autoBuildingObjectGetKey") {
        return key;
      }
      if (specialKeysHandler) {
        const fn2 = specialKeysHandler(target, p2);
        if (fn2) {
          return fn2();
        }
      }
      if (p2 === "toString") {
        const k2 = key + ".toString()";
        return () => format2 ? format2(k2) : k2;
      }
      if (p2 === Symbol.toPrimitive) {
        return () => format2 ? format2(key) : key;
      }
      if (!cache2[p2]) {
        const childKey = key ? `${key}.${p2.toString()}` : p2.toString();
        const child = createAutoBuildingObject(format2, specialKeysHandler, childKey, depth + 1);
        cache2[p2] = { key: childKey, ...child };
      }
      return cache2[p2].proxy;
    },
    apply(_2, thisArg, args) {
      const k2 = `${key}(${args.join(", ")})`;
      return format2 ? format2(k2) : k2;
    }
  });
  return {
    key,
    cache: cache2,
    target,
    proxy
  };
}
function clone(data) {
  try {
    return structuredClone(data);
  } catch (e2) {
    console.warn(e2, `Fallback to JSON cloning`);
    try {
      return JSON.parse(JSON.stringify(data));
    } catch (e3) {
      console.error(e3);
    }
    return data;
  }
}
function omit$1(data, keys) {
  const copy = {};
  for (const key in data) {
    if (!keys.includes(key)) {
      copy[key] = data[key];
    }
  }
  return copy;
}
function applyState(target, state, override = false) {
  for (const key in state) {
    if (!override && target[key] && !key.startsWith("_h") && typeof target[key] === "object" && !Array.isArray(target[key])) {
      Object.assign(target[key], state[key]);
    } else {
      target[key] = state[key];
    }
  }
}
const omitInheritStoryProps = [
  "id",
  "title",
  "group",
  "layout",
  "variants",
  "file",
  "slots",
  "lastSelectedVariant"
];
function u$4(r2, n2, ...a2) {
  if (r2 in n2) {
    let e2 = n2[r2];
    return typeof e2 == "function" ? e2(...a2) : e2;
  }
  let t2 = new Error(`Tried to handle "${r2}" but there is no handler defined. Only defined handlers are: ${Object.keys(n2).map((e2) => `"${e2}"`).join(", ")}.`);
  throw Error.captureStackTrace && Error.captureStackTrace(t2, u$4), t2;
}
var N$3 = ((o2) => (o2[o2.None = 0] = "None", o2[o2.RenderStrategy = 1] = "RenderStrategy", o2[o2.Static = 2] = "Static", o2))(N$3 || {}), S$4 = ((e2) => (e2[e2.Unmount = 0] = "Unmount", e2[e2.Hidden = 1] = "Hidden", e2))(S$4 || {});
function H$4({ visible: r2 = true, features: t2 = 0, ourProps: e2, theirProps: o2, ...i2 }) {
  var a2;
  let n2 = j$4(o2, e2), l2 = Object.assign(i2, { props: n2 });
  if (r2 || t2 & 2 && n2.static)
    return y$1(l2);
  if (t2 & 1) {
    let d2 = (a2 = n2.unmount) == null || a2 ? 0 : 1;
    return u$4(d2, { [0]() {
      return null;
    }, [1]() {
      return y$1({ ...i2, props: { ...n2, hidden: true, style: { display: "none" } } });
    } });
  }
  return y$1(l2);
}
function y$1({ props: r2, attrs: t2, slots: e2, slot: o2, name: i2 }) {
  var m2, h2;
  let { as: n2, ...l2 } = T$2(r2, ["unmount", "static"]), a2 = (m2 = e2.default) == null ? void 0 : m2.call(e2, o2), d2 = {};
  if (o2) {
    let u2 = false, c2 = [];
    for (let [p2, f2] of Object.entries(o2))
      typeof f2 == "boolean" && (u2 = true), f2 === true && c2.push(p2);
    u2 && (d2["data-headlessui-state"] = c2.join(" "));
  }
  if (n2 === "template") {
    if (a2 = b$1(a2 != null ? a2 : []), Object.keys(l2).length > 0 || Object.keys(t2).length > 0) {
      let [u2, ...c2] = a2 != null ? a2 : [];
      if (!v$3(u2) || c2.length > 0)
        throw new Error(['Passing props on "template"!', "", `The current component <${i2} /> is rendering a "template".`, "However we need to passthrough the following props:", Object.keys(l2).concat(Object.keys(t2)).map((s3) => s3.trim()).filter((s3, g2, R2) => R2.indexOf(s3) === g2).sort((s3, g2) => s3.localeCompare(g2)).map((s3) => `  - ${s3}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "template".', "Render a single element as the child so that we can forward the props onto that element."].map((s3) => `  - ${s3}`).join(`
`)].join(`
`));
      let p2 = j$4((h2 = u2.props) != null ? h2 : {}, l2), f2 = cloneVNode(u2, p2);
      for (let s3 in p2)
        s3.startsWith("on") && (f2.props || (f2.props = {}), f2.props[s3] = p2[s3]);
      return f2;
    }
    return Array.isArray(a2) && a2.length === 1 ? a2[0] : a2;
  }
  return h$3(n2, Object.assign({}, l2, d2), { default: () => a2 });
}
function b$1(r2) {
  return r2.flatMap((t2) => t2.type === Fragment ? b$1(t2.children) : [t2]);
}
function j$4(...r2) {
  if (r2.length === 0)
    return {};
  if (r2.length === 1)
    return r2[0];
  let t2 = {}, e2 = {};
  for (let i2 of r2)
    for (let n2 in i2)
      n2.startsWith("on") && typeof i2[n2] == "function" ? (e2[n2] != null || (e2[n2] = []), e2[n2].push(i2[n2])) : t2[n2] = i2[n2];
  if (t2.disabled || t2["aria-disabled"])
    return Object.assign(t2, Object.fromEntries(Object.keys(e2).map((i2) => [i2, void 0])));
  for (let i2 in e2)
    Object.assign(t2, { [i2](n2, ...l2) {
      let a2 = e2[i2];
      for (let d2 of a2) {
        if (n2 instanceof Event && n2.defaultPrevented)
          return;
        d2(n2, ...l2);
      }
    } });
  return t2;
}
function K$1(r2) {
  let t2 = Object.assign({}, r2);
  for (let e2 in t2)
    t2[e2] === void 0 && delete t2[e2];
  return t2;
}
function T$2(r2, t2 = []) {
  let e2 = Object.assign({}, r2);
  for (let o2 of t2)
    o2 in e2 && delete e2[o2];
  return e2;
}
function v$3(r2) {
  return r2 == null ? false : typeof r2.type == "string" || typeof r2.type == "object" || typeof r2.type == "function";
}
let e$2 = 0;
function n$6() {
  return ++e$2;
}
function t$4() {
  return n$6();
}
var o$3 = ((r2) => (r2.Space = " ", r2.Enter = "Enter", r2.Escape = "Escape", r2.Backspace = "Backspace", r2.Delete = "Delete", r2.ArrowLeft = "ArrowLeft", r2.ArrowUp = "ArrowUp", r2.ArrowRight = "ArrowRight", r2.ArrowDown = "ArrowDown", r2.Home = "Home", r2.End = "End", r2.PageUp = "PageUp", r2.PageDown = "PageDown", r2.Tab = "Tab", r2))(o$3 || {});
function f$4(r2) {
  throw new Error("Unexpected object: " + r2);
}
var a$5 = ((e2) => (e2[e2.First = 0] = "First", e2[e2.Previous = 1] = "Previous", e2[e2.Next = 2] = "Next", e2[e2.Last = 3] = "Last", e2[e2.Specific = 4] = "Specific", e2[e2.Nothing = 5] = "Nothing", e2))(a$5 || {});
function x$2(r2, n2) {
  let t2 = n2.resolveItems();
  if (t2.length <= 0)
    return null;
  let l2 = n2.resolveActiveIndex(), s3 = l2 != null ? l2 : -1, d2 = (() => {
    switch (r2.focus) {
      case 0:
        return t2.findIndex((e2) => !n2.resolveDisabled(e2));
      case 1: {
        let e2 = t2.slice().reverse().findIndex((i2, c2, u2) => s3 !== -1 && u2.length - c2 - 1 >= s3 ? false : !n2.resolveDisabled(i2));
        return e2 === -1 ? e2 : t2.length - 1 - e2;
      }
      case 2:
        return t2.findIndex((e2, i2) => i2 <= s3 ? false : !n2.resolveDisabled(e2));
      case 3: {
        let e2 = t2.slice().reverse().findIndex((i2) => !n2.resolveDisabled(i2));
        return e2 === -1 ? e2 : t2.length - 1 - e2;
      }
      case 4:
        return t2.findIndex((e2) => n2.resolveId(e2) === r2.id);
      case 5:
        return null;
      default:
        f$4(r2);
    }
  })();
  return d2 === -1 ? l2 : d2;
}
function o$2(n2) {
  var l2;
  return n2 == null || n2.value == null ? null : (l2 = n2.value.$el) != null ? l2 : n2.value;
}
let n$5 = Symbol("Context");
var l$3 = ((e2) => (e2[e2.Open = 1] = "Open", e2[e2.Closed = 2] = "Closed", e2[e2.Closing = 4] = "Closing", e2[e2.Opening = 8] = "Opening", e2))(l$3 || {});
function C$3() {
  return p$6() !== null;
}
function p$6() {
  return inject(n$5, null);
}
function c$4(o2) {
  provide(n$5, o2);
}
function r$4(t2, e2) {
  if (t2)
    return t2;
  let n2 = e2 != null ? e2 : "button";
  if (typeof n2 == "string" && n2.toLowerCase() === "button")
    return "button";
}
function b(t2, e2) {
  let n2 = ref(r$4(t2.value.type, t2.value.as));
  return onMounted(() => {
    n2.value = r$4(t2.value.type, t2.value.as);
  }), watchEffect(() => {
    var o2;
    n2.value || o$2(e2) && o$2(e2) instanceof HTMLButtonElement && !((o2 = o$2(e2)) != null && o2.hasAttribute("type")) && (n2.value = "button");
  }), n2;
}
var i$4 = Object.defineProperty;
var d$8 = (t2, e2, r2) => e2 in t2 ? i$4(t2, e2, { enumerable: true, configurable: true, writable: true, value: r2 }) : t2[e2] = r2;
var n$4 = (t2, e2, r2) => (d$8(t2, typeof e2 != "symbol" ? e2 + "" : e2, r2), r2);
let s$1 = class s2 {
  constructor() {
    n$4(this, "current", this.detect());
    n$4(this, "currentId", 0);
  }
  set(e2) {
    this.current !== e2 && (this.currentId = 0, this.current = e2);
  }
  reset() {
    this.set(this.detect());
  }
  nextId() {
    return ++this.currentId;
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window == "undefined" || typeof document == "undefined" ? "server" : "client";
  }
};
let c$3 = new s$1();
function m$4(r2) {
  if (c$3.isServer)
    return null;
  if (r2 instanceof Node)
    return r2.ownerDocument;
  if (r2 != null && r2.hasOwnProperty("value")) {
    let n2 = o$2(r2);
    if (n2)
      return n2.ownerDocument;
  }
  return document;
}
function p$5({ container: e2, accept: t2, walk: d2, enabled: o2 }) {
  watchEffect(() => {
    let r2 = e2.value;
    if (!r2 || o2 !== void 0 && !o2.value)
      return;
    let l2 = m$4(e2);
    if (!l2)
      return;
    let c2 = Object.assign((f2) => t2(f2), { acceptNode: t2 }), n2 = l2.createTreeWalker(r2, NodeFilter.SHOW_ELEMENT, c2, false);
    for (; n2.nextNode(); )
      d2(n2.currentNode);
  });
}
let c$2 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map((e2) => `${e2}:not([tabindex='-1'])`).join(",");
var N$2 = ((n2) => (n2[n2.First = 1] = "First", n2[n2.Previous = 2] = "Previous", n2[n2.Next = 4] = "Next", n2[n2.Last = 8] = "Last", n2[n2.WrapAround = 16] = "WrapAround", n2[n2.NoScroll = 32] = "NoScroll", n2))(N$2 || {}), T$1 = ((o2) => (o2[o2.Error = 0] = "Error", o2[o2.Overflow = 1] = "Overflow", o2[o2.Success = 2] = "Success", o2[o2.Underflow = 3] = "Underflow", o2))(T$1 || {}), F$3 = ((t2) => (t2[t2.Previous = -1] = "Previous", t2[t2.Next = 1] = "Next", t2))(F$3 || {});
function E$3(e2 = document.body) {
  return e2 == null ? [] : Array.from(e2.querySelectorAll(c$2)).sort((r2, t2) => Math.sign((r2.tabIndex || Number.MAX_SAFE_INTEGER) - (t2.tabIndex || Number.MAX_SAFE_INTEGER)));
}
var h$2 = ((t2) => (t2[t2.Strict = 0] = "Strict", t2[t2.Loose = 1] = "Loose", t2))(h$2 || {});
function w$1(e2, r2 = 0) {
  var t2;
  return e2 === ((t2 = m$4(e2)) == null ? void 0 : t2.body) ? false : u$4(r2, { [0]() {
    return e2.matches(c$2);
  }, [1]() {
    let l2 = e2;
    for (; l2 !== null; ) {
      if (l2.matches(c$2))
        return true;
      l2 = l2.parentElement;
    }
    return false;
  } });
}
var y = ((t2) => (t2[t2.Keyboard = 0] = "Keyboard", t2[t2.Mouse = 1] = "Mouse", t2))(y || {});
typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("keydown", (e2) => {
  e2.metaKey || e2.altKey || e2.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = "");
}, true), document.addEventListener("click", (e2) => {
  e2.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : e2.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = "");
}, true));
function S$3(e2) {
  e2 == null || e2.focus({ preventScroll: true });
}
let H$3 = ["textarea", "input"].join(",");
function I$1(e2) {
  var r2, t2;
  return (t2 = (r2 = e2 == null ? void 0 : e2.matches) == null ? void 0 : r2.call(e2, H$3)) != null ? t2 : false;
}
function O(e2, r2 = (t2) => t2) {
  return e2.slice().sort((t2, l2) => {
    let o2 = r2(t2), i2 = r2(l2);
    if (o2 === null || i2 === null)
      return 0;
    let n2 = o2.compareDocumentPosition(i2);
    return n2 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : n2 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
  });
}
function P$2(e2, r2, { sorted: t2 = true, relativeTo: l2 = null, skipElements: o2 = [] } = {}) {
  var m2;
  let i2 = (m2 = Array.isArray(e2) ? e2.length > 0 ? e2[0].ownerDocument : document : e2 == null ? void 0 : e2.ownerDocument) != null ? m2 : document, n2 = Array.isArray(e2) ? t2 ? O(e2) : e2 : E$3(e2);
  o2.length > 0 && n2.length > 1 && (n2 = n2.filter((s3) => !o2.includes(s3))), l2 = l2 != null ? l2 : i2.activeElement;
  let x2 = (() => {
    if (r2 & 5)
      return 1;
    if (r2 & 10)
      return -1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), p2 = (() => {
    if (r2 & 1)
      return 0;
    if (r2 & 2)
      return Math.max(0, n2.indexOf(l2)) - 1;
    if (r2 & 4)
      return Math.max(0, n2.indexOf(l2)) + 1;
    if (r2 & 8)
      return n2.length - 1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), L2 = r2 & 32 ? { preventScroll: true } : {}, a2 = 0, d2 = n2.length, u2;
  do {
    if (a2 >= d2 || a2 + d2 <= 0)
      return 0;
    let s3 = p2 + a2;
    if (r2 & 16)
      s3 = (s3 + d2) % d2;
    else {
      if (s3 < 0)
        return 3;
      if (s3 >= d2)
        return 1;
    }
    u2 = n2[s3], u2 == null || u2.focus(L2), a2 += x2;
  } while (u2 !== i2.activeElement);
  return r2 & 6 && I$1(u2) && u2.select(), 2;
}
function u$3(e2, t2, n2) {
  c$3.isServer || watchEffect((o2) => {
    document.addEventListener(e2, t2, n2), o2(() => document.removeEventListener(e2, t2, n2));
  });
}
function w(e2, n2, t2) {
  c$3.isServer || watchEffect((o2) => {
    window.addEventListener(e2, n2, t2), o2(() => window.removeEventListener(e2, n2, t2));
  });
}
function F$2(f2, m2, l2 = computed(() => true)) {
  function i2(e2, u2) {
    if (!l2.value || e2.defaultPrevented)
      return;
    let n2 = u2(e2);
    if (n2 === null || !n2.getRootNode().contains(n2))
      return;
    let c2 = function o2(t2) {
      return typeof t2 == "function" ? o2(t2()) : Array.isArray(t2) || t2 instanceof Set ? t2 : [t2];
    }(f2);
    for (let o2 of c2) {
      if (o2 === null)
        continue;
      let t2 = o2 instanceof HTMLElement ? o2 : o$2(o2);
      if (t2 != null && t2.contains(n2) || e2.composed && e2.composedPath().includes(t2))
        return;
    }
    return !w$1(n2, h$2.Loose) && n2.tabIndex !== -1 && e2.preventDefault(), m2(e2, n2);
  }
  let r2 = ref(null);
  u$3("mousedown", (e2) => {
    var u2, n2;
    l2.value && (r2.value = ((n2 = (u2 = e2.composedPath) == null ? void 0 : u2.call(e2)) == null ? void 0 : n2[0]) || e2.target);
  }, true), u$3("click", (e2) => {
    r2.value && (i2(e2, () => r2.value), r2.value = null);
  }, true), w("blur", (e2) => i2(e2, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), true);
}
var a$4 = ((e2) => (e2[e2.None = 1] = "None", e2[e2.Focusable = 2] = "Focusable", e2[e2.Hidden = 4] = "Hidden", e2))(a$4 || {});
let f$3 = defineComponent({ name: "Hidden", props: { as: { type: [Object, String], default: "div" }, features: { type: Number, default: 1 } }, setup(r2, { slots: t2, attrs: d2 }) {
  return () => {
    let { features: e2, ...o2 } = r2, n2 = { "aria-hidden": (e2 & 2) === 2 ? true : void 0, style: { position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0", ...(e2 & 4) === 4 && (e2 & 2) !== 2 && { display: "none" } } };
    return H$4({ ourProps: n2, theirProps: o2, slot: {}, attrs: d2, slots: t2, name: "Hidden" });
  };
} });
function e$1(n2 = {}, r2 = null, t2 = []) {
  for (let [i2, o2] of Object.entries(n2))
    f$2(t2, s(r2, i2), o2);
  return t2;
}
function s(n2, r2) {
  return n2 ? n2 + "[" + r2 + "]" : r2;
}
function f$2(n2, r2, t2) {
  if (Array.isArray(t2))
    for (let [i2, o2] of t2.entries())
      f$2(n2, s(r2, i2.toString()), o2);
  else
    t2 instanceof Date ? n2.push([r2, t2.toISOString()]) : typeof t2 == "boolean" ? n2.push([r2, t2 ? "1" : "0"]) : typeof t2 == "string" ? n2.push([r2, t2]) : typeof t2 == "number" ? n2.push([r2, `${t2}`]) : t2 == null ? n2.push([r2, ""]) : e$1(t2, r2, n2);
}
function p$4(n2) {
  var t2;
  let r2 = (t2 = n2 == null ? void 0 : n2.form) != null ? t2 : n2.closest("form");
  if (r2) {
    for (let i2 of r2.elements)
      if (i2.tagName === "INPUT" && i2.type === "submit" || i2.tagName === "BUTTON" && i2.type === "submit" || i2.nodeName === "INPUT" && i2.type === "image") {
        i2.click();
        return;
      }
  }
}
function d$7(u2, e2, r2) {
  let i2 = ref(r2 == null ? void 0 : r2.value), f2 = computed(() => u2.value !== void 0);
  return [computed(() => f2.value ? u2.value : i2.value), function(t2) {
    return f2.value || (i2.value = t2), e2 == null ? void 0 : e2(t2);
  }];
}
function r$3(e2) {
  return [e2.screenX, e2.screenY];
}
function u$2() {
  let e2 = ref([-1, -1]);
  return { wasMoved(n2) {
    let t2 = r$3(n2);
    return e2.value[0] === t2[0] && e2.value[1] === t2[1] ? false : (e2.value = t2, true);
  }, update(n2) {
    e2.value = r$3(n2);
  } };
}
function t$3() {
  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;
}
function i$3() {
  return /Android/gi.test(window.navigator.userAgent);
}
function n$3() {
  return t$3() || i$3();
}
function r$2() {
  let n2 = [], s3 = { addEventListener(e2, t2, i2, a2) {
    return e2.addEventListener(t2, i2, a2), s3.add(() => e2.removeEventListener(t2, i2, a2));
  }, requestAnimationFrame(...e2) {
    let t2 = requestAnimationFrame(...e2);
    s3.add(() => cancelAnimationFrame(t2));
  }, nextFrame(...e2) {
    s3.requestAnimationFrame(() => {
      s3.requestAnimationFrame(...e2);
    });
  }, setTimeout(...e2) {
    let t2 = setTimeout(...e2);
    s3.add(() => clearTimeout(t2));
  }, style(e2, t2, i2) {
    let a2 = e2.style.getPropertyValue(t2);
    return Object.assign(e2.style, { [t2]: i2 }), this.add(() => {
      Object.assign(e2.style, { [t2]: a2 });
    });
  }, group(e2) {
    let t2 = r$2();
    return e2(t2), this.add(() => t2.dispose());
  }, add(e2) {
    return n2.push(e2), () => {
      let t2 = n2.indexOf(e2);
      if (t2 >= 0)
        for (let i2 of n2.splice(t2, 1))
          i2();
    };
  }, dispose() {
    for (let e2 of n2.splice(0))
      e2();
  } };
  return s3;
}
function ve(l2, g2) {
  return l2 === g2;
}
var ce$3 = ((s3) => (s3[s3.Open = 0] = "Open", s3[s3.Closed = 1] = "Closed", s3))(ce$3 || {}), me$1 = ((s3) => (s3[s3.Single = 0] = "Single", s3[s3.Multi = 1] = "Multi", s3))(me$1 || {}), xe$1 = ((s3) => (s3[s3.Pointer = 0] = "Pointer", s3[s3.Other = 1] = "Other", s3))(xe$1 || {});
let G = Symbol("ComboboxContext");
function H$2(l2) {
  let g2 = inject(G, null);
  if (g2 === null) {
    let s3 = new Error(`<${l2} /> is missing a parent <Combobox /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(s3, H$2), s3;
  }
  return g2;
}
let Ke = defineComponent({ name: "Combobox", emits: { "update:modelValue": (l2) => true }, props: { as: { type: [Object, String], default: "template" }, disabled: { type: [Boolean], default: false }, by: { type: [String, Function], default: () => ve }, modelValue: { type: [Object, String, Number, Boolean], default: void 0 }, defaultValue: { type: [Object, String, Number, Boolean], default: void 0 }, form: { type: String, optional: true }, name: { type: String, optional: true }, nullable: { type: Boolean, default: false }, multiple: { type: [Boolean], default: false } }, inheritAttrs: false, setup(l2, { slots: g2, attrs: s3, emit: P3 }) {
  let e2 = ref(1), t2 = ref(null), p2 = ref(null), T3 = ref(null), r2 = ref(null), b3 = ref({ static: false, hold: false }), x2 = ref([]), C2 = ref(null), y2 = ref(1), h2 = ref(false);
  function k2(a2 = (i2) => i2) {
    let i2 = C2.value !== null ? x2.value[C2.value] : null, d2 = O(a2(x2.value.slice()), (f2) => o$2(f2.dataRef.domRef)), n2 = i2 ? d2.indexOf(i2) : null;
    return n2 === -1 && (n2 = null), { options: d2, activeOptionIndex: n2 };
  }
  let w2 = computed(() => l2.multiple ? 1 : 0), o2 = computed(() => l2.nullable), [v3, c2] = d$7(computed(() => l2.modelValue === void 0 ? u$4(w2.value, { [1]: [], [0]: void 0 }) : l2.modelValue), (a2) => P3("update:modelValue", a2), computed(() => l2.defaultValue)), u2 = { comboboxState: e2, value: v3, mode: w2, compare(a2, i2) {
    if (typeof l2.by == "string") {
      let d2 = l2.by;
      return (a2 == null ? void 0 : a2[d2]) === (i2 == null ? void 0 : i2[d2]);
    }
    return l2.by(a2, i2);
  }, defaultValue: computed(() => l2.defaultValue), nullable: o2, inputRef: p2, labelRef: t2, buttonRef: T3, optionsRef: r2, disabled: computed(() => l2.disabled), options: x2, change(a2) {
    c2(a2);
  }, activeOptionIndex: computed(() => {
    if (h2.value && C2.value === null && x2.value.length > 0) {
      let a2 = x2.value.findIndex((i2) => !i2.dataRef.disabled);
      a2 !== -1 && (C2.value = a2);
    }
    return C2.value;
  }), activationTrigger: y2, optionsPropsRef: b3, closeCombobox() {
    h2.value = false, !l2.disabled && e2.value !== 1 && (e2.value = 1, C2.value = null);
  }, openCombobox() {
    if (h2.value = true, l2.disabled || e2.value === 0)
      return;
    let a2 = x2.value.findIndex((i2) => {
      let d2 = toRaw(i2.dataRef.value);
      return u$4(w2.value, { [0]: () => u2.compare(toRaw(u2.value.value), toRaw(d2)), [1]: () => toRaw(u2.value.value).some((f2) => u2.compare(toRaw(f2), toRaw(d2))) });
    });
    a2 !== -1 && (C2.value = a2), e2.value = 0;
  }, goToOption(a2, i2, d2) {
    if (h2.value = false, l2.disabled || r2.value && !b3.value.static && e2.value === 1)
      return;
    let n2 = k2();
    if (n2.activeOptionIndex === null) {
      let S2 = n2.options.findIndex((F3) => !F3.dataRef.disabled);
      S2 !== -1 && (n2.activeOptionIndex = S2);
    }
    let f2 = x$2(a2 === a$5.Specific ? { focus: a$5.Specific, id: i2 } : { focus: a2 }, { resolveItems: () => n2.options, resolveActiveIndex: () => n2.activeOptionIndex, resolveId: (S2) => S2.id, resolveDisabled: (S2) => S2.dataRef.disabled });
    C2.value = f2, y2.value = d2 != null ? d2 : 1, x2.value = n2.options;
  }, selectOption(a2) {
    let i2 = x2.value.find((n2) => n2.id === a2);
    if (!i2)
      return;
    let { dataRef: d2 } = i2;
    c2(u$4(w2.value, { [0]: () => d2.value, [1]: () => {
      let n2 = toRaw(u2.value.value).slice(), f2 = toRaw(d2.value), S2 = n2.findIndex((F3) => u2.compare(f2, toRaw(F3)));
      return S2 === -1 ? n2.push(f2) : n2.splice(S2, 1), n2;
    } }));
  }, selectActiveOption() {
    if (u2.activeOptionIndex.value === null)
      return;
    let { dataRef: a2, id: i2 } = x2.value[u2.activeOptionIndex.value];
    c2(u$4(w2.value, { [0]: () => a2.value, [1]: () => {
      let d2 = toRaw(u2.value.value).slice(), n2 = toRaw(a2.value), f2 = d2.findIndex((S2) => u2.compare(n2, toRaw(S2)));
      return f2 === -1 ? d2.push(n2) : d2.splice(f2, 1), d2;
    } })), u2.goToOption(a$5.Specific, i2);
  }, registerOption(a2, i2) {
    let d2 = { id: a2, dataRef: i2 }, n2 = k2((f2) => [...f2, d2]);
    if (C2.value === null) {
      let f2 = i2.value.value;
      u$4(w2.value, { [0]: () => u2.compare(toRaw(u2.value.value), toRaw(f2)), [1]: () => toRaw(u2.value.value).some((F3) => u2.compare(toRaw(F3), toRaw(f2))) }) && (n2.activeOptionIndex = n2.options.indexOf(d2));
    }
    x2.value = n2.options, C2.value = n2.activeOptionIndex, y2.value = 1, n2.options.some((f2) => !o$2(f2.dataRef.domRef)) && requestAnimationFrame(() => {
      let f2 = k2();
      x2.value = f2.options, C2.value = f2.activeOptionIndex;
    });
  }, unregisterOption(a2) {
    var d2;
    u2.activeOptionIndex.value !== null && ((d2 = u2.options.value[u2.activeOptionIndex.value]) == null ? void 0 : d2.id) === a2 && (h2.value = true);
    let i2 = k2((n2) => {
      let f2 = n2.findIndex((S2) => S2.id === a2);
      return f2 !== -1 && n2.splice(f2, 1), n2;
    });
    x2.value = i2.options, C2.value = i2.activeOptionIndex, y2.value = 1;
  } };
  F$2([p2, T3, r2], () => u2.closeCombobox(), computed(() => e2.value === 0)), provide(G, u2), c$4(computed(() => u$4(e2.value, { [0]: l$3.Open, [1]: l$3.Closed })));
  let D2 = computed(() => u2.activeOptionIndex.value === null ? null : x2.value[u2.activeOptionIndex.value].dataRef.value), E3 = computed(() => {
    var a2;
    return (a2 = o$2(p2)) == null ? void 0 : a2.closest("form");
  });
  return onMounted(() => {
    watch([E3], () => {
      if (!E3.value || l2.defaultValue === void 0)
        return;
      function a2() {
        u2.change(l2.defaultValue);
      }
      return E3.value.addEventListener("reset", a2), () => {
        var i2;
        (i2 = E3.value) == null || i2.removeEventListener("reset", a2);
      };
    }, { immediate: true });
  }), () => {
    let { name: a2, disabled: i2, form: d2, ...n2 } = l2, f2 = { open: e2.value === 0, disabled: i2, activeIndex: u2.activeOptionIndex.value, activeOption: D2.value, value: v3.value };
    return h$3(Fragment, [...a2 != null && v3.value != null ? e$1({ [a2]: v3.value }).map(([S2, F3]) => h$3(f$3, K$1({ features: a$4.Hidden, key: S2, as: "input", type: "hidden", hidden: true, readOnly: true, form: d2, name: S2, value: F3 }))) : [], H$4({ theirProps: { ...s3, ...T$2(n2, ["modelValue", "defaultValue", "nullable", "multiple", "onUpdate:modelValue", "by"]) }, ourProps: {}, slot: f2, slots: g2, attrs: s3, name: "Combobox" })]);
  };
} }), Ue$2 = defineComponent({ name: "ComboboxButton", props: { as: { type: [Object, String], default: "button" }, id: { type: String, default: () => `headlessui-combobox-button-${t$4()}` } }, setup(l2, { attrs: g2, slots: s3, expose: P3 }) {
  let e2 = H$2("ComboboxButton");
  P3({ el: e2.buttonRef, $el: e2.buttonRef });
  function t2(r2) {
    e2.disabled.value || (e2.comboboxState.value === 0 ? e2.closeCombobox() : (r2.preventDefault(), e2.openCombobox()), nextTick(() => {
      var b3;
      return (b3 = o$2(e2.inputRef)) == null ? void 0 : b3.focus({ preventScroll: true });
    }));
  }
  function p2(r2) {
    switch (r2.key) {
      case o$3.ArrowDown:
        r2.preventDefault(), r2.stopPropagation(), e2.comboboxState.value === 1 && e2.openCombobox(), nextTick(() => {
          var b3;
          return (b3 = e2.inputRef.value) == null ? void 0 : b3.focus({ preventScroll: true });
        });
        return;
      case o$3.ArrowUp:
        r2.preventDefault(), r2.stopPropagation(), e2.comboboxState.value === 1 && (e2.openCombobox(), nextTick(() => {
          e2.value.value || e2.goToOption(a$5.Last);
        })), nextTick(() => {
          var b3;
          return (b3 = e2.inputRef.value) == null ? void 0 : b3.focus({ preventScroll: true });
        });
        return;
      case o$3.Escape:
        if (e2.comboboxState.value !== 0)
          return;
        r2.preventDefault(), e2.optionsRef.value && !e2.optionsPropsRef.value.static && r2.stopPropagation(), e2.closeCombobox(), nextTick(() => {
          var b3;
          return (b3 = e2.inputRef.value) == null ? void 0 : b3.focus({ preventScroll: true });
        });
        return;
    }
  }
  let T3 = b(computed(() => ({ as: l2.as, type: g2.type })), e2.buttonRef);
  return () => {
    var y2, h2;
    let r2 = { open: e2.comboboxState.value === 0, disabled: e2.disabled.value, value: e2.value.value }, { id: b3, ...x2 } = l2, C2 = { ref: e2.buttonRef, id: b3, type: T3.value, tabindex: "-1", "aria-haspopup": "listbox", "aria-controls": (y2 = o$2(e2.optionsRef)) == null ? void 0 : y2.id, "aria-expanded": e2.disabled.value ? void 0 : e2.comboboxState.value === 0, "aria-labelledby": e2.labelRef.value ? [(h2 = o$2(e2.labelRef)) == null ? void 0 : h2.id, b3].join(" ") : void 0, disabled: e2.disabled.value === true ? true : void 0, onKeydown: p2, onClick: t2 };
    return H$4({ ourProps: C2, theirProps: x2, slot: r2, attrs: g2, slots: s3, name: "ComboboxButton" });
  };
} }), _e = defineComponent({ name: "ComboboxInput", props: { as: { type: [Object, String], default: "input" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, displayValue: { type: Function }, defaultValue: { type: String, default: void 0 }, id: { type: String, default: () => `headlessui-combobox-input-${t$4()}` } }, emits: { change: (l2) => true }, setup(l2, { emit: g2, attrs: s3, slots: P3, expose: e2 }) {
  let t2 = H$2("ComboboxInput"), p2 = { value: false };
  e2({ el: t2.inputRef, $el: t2.inputRef });
  let T3 = computed(() => {
    var v3;
    let o2 = t2.value.value;
    return o$2(t2.inputRef) ? typeof l2.displayValue != "undefined" && o2 !== void 0 ? (v3 = l2.displayValue(o2)) != null ? v3 : "" : typeof o2 == "string" ? o2 : "" : "";
  });
  onMounted(() => {
    watch([T3, t2.comboboxState], ([o2, v3], [c2, u2]) => {
      if (p2.value)
        return;
      let D2 = o$2(t2.inputRef);
      D2 && (u2 === 0 && v3 === 1 || o2 !== c2) && (D2.value = o2);
    }, { immediate: true }), watch([t2.comboboxState], ([o2], [v3]) => {
      if (o2 === 0 && v3 === 1) {
        let c2 = o$2(t2.inputRef);
        if (!c2)
          return;
        let u2 = c2.value, { selectionStart: D2, selectionEnd: E3, selectionDirection: a2 } = c2;
        c2.value = "", c2.value = u2, a2 !== null ? c2.setSelectionRange(D2, E3, a2) : c2.setSelectionRange(D2, E3);
      }
    });
  });
  let r2 = ref(false), b3 = ref(null);
  function x2() {
    r2.value = true;
  }
  function C2() {
    r$2().nextFrame(() => {
      r2.value = false, b3.value && (t2.openCombobox(), g2("change", b3.value), b3.value = null);
    });
  }
  function y2(o2) {
    switch (p2.value = true, o2.key) {
      case o$3.Backspace:
      case o$3.Delete:
        if (t2.mode.value !== 0 || !t2.nullable.value)
          return;
        let v3 = o2.currentTarget;
        requestAnimationFrame(() => {
          if (v3.value === "") {
            t2.change(null);
            let c2 = o$2(t2.optionsRef);
            c2 && (c2.scrollTop = 0), t2.goToOption(a$5.Nothing);
          }
        });
        break;
      case o$3.Enter:
        if (p2.value = false, t2.comboboxState.value !== 0 || r2.value)
          return;
        if (o2.preventDefault(), o2.stopPropagation(), t2.activeOptionIndex.value === null) {
          t2.closeCombobox();
          return;
        }
        t2.selectActiveOption(), t2.mode.value === 0 && t2.closeCombobox();
        break;
      case o$3.ArrowDown:
        return p2.value = false, o2.preventDefault(), o2.stopPropagation(), u$4(t2.comboboxState.value, { [0]: () => t2.goToOption(a$5.Next), [1]: () => t2.openCombobox() });
      case o$3.ArrowUp:
        return p2.value = false, o2.preventDefault(), o2.stopPropagation(), u$4(t2.comboboxState.value, { [0]: () => t2.goToOption(a$5.Previous), [1]: () => {
          t2.openCombobox(), nextTick(() => {
            t2.value.value || t2.goToOption(a$5.Last);
          });
        } });
      case o$3.Home:
        if (o2.shiftKey)
          break;
        return p2.value = false, o2.preventDefault(), o2.stopPropagation(), t2.goToOption(a$5.First);
      case o$3.PageUp:
        return p2.value = false, o2.preventDefault(), o2.stopPropagation(), t2.goToOption(a$5.First);
      case o$3.End:
        if (o2.shiftKey)
          break;
        return p2.value = false, o2.preventDefault(), o2.stopPropagation(), t2.goToOption(a$5.Last);
      case o$3.PageDown:
        return p2.value = false, o2.preventDefault(), o2.stopPropagation(), t2.goToOption(a$5.Last);
      case o$3.Escape:
        if (p2.value = false, t2.comboboxState.value !== 0)
          return;
        o2.preventDefault(), t2.optionsRef.value && !t2.optionsPropsRef.value.static && o2.stopPropagation(), t2.closeCombobox();
        break;
      case o$3.Tab:
        if (p2.value = false, t2.comboboxState.value !== 0)
          return;
        t2.mode.value === 0 && t2.selectActiveOption(), t2.closeCombobox();
        break;
    }
  }
  function h2(o2) {
    if (r2.value) {
      b3.value = o2;
      return;
    }
    t2.openCombobox(), g2("change", o2);
  }
  function k2() {
    p2.value = false;
  }
  let w2 = computed(() => {
    var o2, v3, c2, u2;
    return (u2 = (c2 = (v3 = l2.defaultValue) != null ? v3 : t2.defaultValue.value !== void 0 ? (o2 = l2.displayValue) == null ? void 0 : o2.call(l2, t2.defaultValue.value) : null) != null ? c2 : t2.defaultValue.value) != null ? u2 : "";
  });
  return () => {
    var a2, i2, d2, n2, f2, S2;
    let o2 = { open: t2.comboboxState.value === 0 }, { id: v3, displayValue: c2, onChange: u2, ...D2 } = l2, E3 = { "aria-controls": (a2 = t2.optionsRef.value) == null ? void 0 : a2.id, "aria-expanded": t2.disabled.value ? void 0 : t2.comboboxState.value === 0, "aria-activedescendant": t2.activeOptionIndex.value === null || (i2 = t2.options.value[t2.activeOptionIndex.value]) == null ? void 0 : i2.id, "aria-labelledby": (f2 = (d2 = o$2(t2.labelRef)) == null ? void 0 : d2.id) != null ? f2 : (n2 = o$2(t2.buttonRef)) == null ? void 0 : n2.id, "aria-autocomplete": "list", id: v3, onCompositionstart: x2, onCompositionend: C2, onKeydown: y2, onInput: h2, onBlur: k2, role: "combobox", type: (S2 = s3.type) != null ? S2 : "text", tabIndex: 0, ref: t2.inputRef, defaultValue: w2.value, disabled: t2.disabled.value === true ? true : void 0 };
    return H$4({ ourProps: E3, theirProps: D2, slot: o2, attrs: s3, slots: P3, features: N$3.RenderStrategy | N$3.Static, name: "ComboboxInput" });
  };
} }), qe = defineComponent({ name: "ComboboxOptions", props: { as: { type: [Object, String], default: "ul" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, hold: { type: [Boolean], default: false } }, setup(l2, { attrs: g2, slots: s3, expose: P3 }) {
  let e2 = H$2("ComboboxOptions"), t2 = `headlessui-combobox-options-${t$4()}`;
  P3({ el: e2.optionsRef, $el: e2.optionsRef }), watchEffect(() => {
    e2.optionsPropsRef.value.static = l2.static;
  }), watchEffect(() => {
    e2.optionsPropsRef.value.hold = l2.hold;
  });
  let p2 = p$6(), T3 = computed(() => p2 !== null ? (p2.value & l$3.Open) === l$3.Open : e2.comboboxState.value === 0);
  return p$5({ container: computed(() => o$2(e2.optionsRef)), enabled: computed(() => e2.comboboxState.value === 0), accept(r2) {
    return r2.getAttribute("role") === "option" ? NodeFilter.FILTER_REJECT : r2.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
  }, walk(r2) {
    r2.setAttribute("role", "none");
  } }), () => {
    var C2, y2, h2;
    let r2 = { open: e2.comboboxState.value === 0 }, b3 = { "aria-labelledby": (h2 = (C2 = o$2(e2.labelRef)) == null ? void 0 : C2.id) != null ? h2 : (y2 = o$2(e2.buttonRef)) == null ? void 0 : y2.id, id: t2, ref: e2.optionsRef, role: "listbox", "aria-multiselectable": e2.mode.value === 1 ? true : void 0 }, x2 = T$2(l2, ["hold"]);
    return H$4({ ourProps: b3, theirProps: x2, slot: r2, attrs: g2, slots: s3, features: N$3.RenderStrategy | N$3.Static, visible: T3.value, name: "ComboboxOptions" });
  };
} }), Je = defineComponent({ name: "ComboboxOption", props: { as: { type: [Object, String], default: "li" }, value: { type: [Object, String, Number, Boolean] }, disabled: { type: Boolean, default: false } }, setup(l2, { slots: g2, attrs: s3, expose: P3 }) {
  let e2 = H$2("ComboboxOption"), t2 = `headlessui-combobox-option-${t$4()}`, p2 = ref(null);
  P3({ el: p2, $el: p2 });
  let T3 = computed(() => e2.activeOptionIndex.value !== null ? e2.options.value[e2.activeOptionIndex.value].id === t2 : false), r2 = computed(() => u$4(e2.mode.value, { [0]: () => e2.compare(toRaw(e2.value.value), toRaw(l2.value)), [1]: () => toRaw(e2.value.value).some((o2) => e2.compare(toRaw(o2), toRaw(l2.value))) })), b3 = computed(() => ({ disabled: l2.disabled, value: l2.value, domRef: p2 }));
  onMounted(() => e2.registerOption(t2, b3)), onUnmounted(() => e2.unregisterOption(t2)), watchEffect(() => {
    e2.comboboxState.value === 0 && T3.value && e2.activationTrigger.value !== 0 && nextTick(() => {
      var o2, v3;
      return (v3 = (o2 = o$2(p2)) == null ? void 0 : o2.scrollIntoView) == null ? void 0 : v3.call(o2, { block: "nearest" });
    });
  });
  function x2(o2) {
    if (l2.disabled)
      return o2.preventDefault();
    e2.selectOption(t2), e2.mode.value === 0 && e2.closeCombobox(), n$3() || requestAnimationFrame(() => {
      var v3;
      return (v3 = o$2(e2.inputRef)) == null ? void 0 : v3.focus();
    });
  }
  function C2() {
    if (l2.disabled)
      return e2.goToOption(a$5.Nothing);
    e2.goToOption(a$5.Specific, t2);
  }
  let y2 = u$2();
  function h2(o2) {
    y2.update(o2);
  }
  function k2(o2) {
    y2.wasMoved(o2) && (l2.disabled || T3.value || e2.goToOption(a$5.Specific, t2, 0));
  }
  function w2(o2) {
    y2.wasMoved(o2) && (l2.disabled || T3.value && (e2.optionsPropsRef.value.hold || e2.goToOption(a$5.Nothing)));
  }
  return () => {
    let { disabled: o2 } = l2, v3 = { active: T3.value, selected: r2.value, disabled: o2 }, c2 = { id: t2, ref: p2, role: "option", tabIndex: o2 === true ? void 0 : -1, "aria-disabled": o2 === true ? true : void 0, "aria-selected": r2.value, disabled: void 0, onClick: x2, onFocus: C2, onPointerenter: h2, onMouseenter: h2, onPointermove: k2, onMousemove: k2, onPointerleave: w2, onMouseleave: w2 };
    return H$4({ ourProps: c2, theirProps: l2, slot: v3, attrs: s3, slots: g2, name: "ComboboxOption" });
  };
} });
var d$6 = ((r2) => (r2[r2.Forwards = 0] = "Forwards", r2[r2.Backwards = 1] = "Backwards", r2))(d$6 || {});
function n$2() {
  let o2 = ref(0);
  return w("keydown", (e2) => {
    e2.key === "Tab" && (o2.value = e2.shiftKey ? 1 : 0);
  }), o2;
}
function E$2(n2, e2, o2, r2) {
  c$3.isServer || watchEffect((t2) => {
    n2 = n2 != null ? n2 : window, n2.addEventListener(e2, o2, r2), t2(() => n2.removeEventListener(e2, o2, r2));
  });
}
function t$2(e2) {
  typeof queueMicrotask == "function" ? queueMicrotask(e2) : Promise.resolve().then(e2).catch((o2) => setTimeout(() => {
    throw o2;
  }));
}
function t$1(n2) {
  function e2() {
    document.readyState !== "loading" && (n2(), document.removeEventListener("DOMContentLoaded", e2));
  }
  typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("DOMContentLoaded", e2), e2());
}
function B$1(e2) {
  if (!e2)
    return /* @__PURE__ */ new Set();
  if (typeof e2 == "function")
    return new Set(e2());
  let t2 = /* @__PURE__ */ new Set();
  for (let l2 of e2.value) {
    let o2 = o$2(l2);
    o2 instanceof HTMLElement && t2.add(o2);
  }
  return t2;
}
var A$3 = ((n2) => (n2[n2.None = 1] = "None", n2[n2.InitialFocus = 2] = "InitialFocus", n2[n2.TabLock = 4] = "TabLock", n2[n2.FocusLock = 8] = "FocusLock", n2[n2.RestoreFocus = 16] = "RestoreFocus", n2[n2.All = 30] = "All", n2))(A$3 || {});
let ce$2 = Object.assign(defineComponent({ name: "FocusTrap", props: { as: { type: [Object, String], default: "div" }, initialFocus: { type: Object, default: null }, features: { type: Number, default: 30 }, containers: { type: [Object, Function], default: ref(/* @__PURE__ */ new Set()) } }, inheritAttrs: false, setup(e2, { attrs: t2, slots: l2, expose: o2 }) {
  let r2 = ref(null);
  o2({ el: r2, $el: r2 });
  let i2 = computed(() => m$4(r2)), n2 = ref(false);
  onMounted(() => n2.value = true), onUnmounted(() => n2.value = false), z$3({ ownerDocument: i2 }, computed(() => n2.value && Boolean(e2.features & 16)));
  let m2 = J({ ownerDocument: i2, container: r2, initialFocus: computed(() => e2.initialFocus) }, computed(() => n2.value && Boolean(e2.features & 2)));
  Q$3({ ownerDocument: i2, container: r2, containers: e2.containers, previousActiveElement: m2 }, computed(() => n2.value && Boolean(e2.features & 8)));
  let c2 = n$2();
  function u2(a2) {
    let d2 = o$2(r2);
    if (!d2)
      return;
    ((g2) => g2())(() => {
      u$4(c2.value, { [d$6.Forwards]: () => {
        P$2(d2, N$2.First, { skipElements: [a2.relatedTarget] });
      }, [d$6.Backwards]: () => {
        P$2(d2, N$2.Last, { skipElements: [a2.relatedTarget] });
      } });
    });
  }
  let s3 = ref(false);
  function H2(a2) {
    a2.key === "Tab" && (s3.value = true, requestAnimationFrame(() => {
      s3.value = false;
    }));
  }
  function M2(a2) {
    if (!n2.value)
      return;
    let d2 = B$1(e2.containers);
    o$2(r2) instanceof HTMLElement && d2.add(o$2(r2));
    let E3 = a2.relatedTarget;
    E3 instanceof HTMLElement && E3.dataset.headlessuiFocusGuard !== "true" && (N$1(d2, E3) || (s3.value ? P$2(o$2(r2), u$4(c2.value, { [d$6.Forwards]: () => N$2.Next, [d$6.Backwards]: () => N$2.Previous }) | N$2.WrapAround, { relativeTo: a2.target }) : a2.target instanceof HTMLElement && S$3(a2.target)));
  }
  return () => {
    let a2 = {}, d2 = { ref: r2, onKeydown: H2, onFocusout: M2 }, { features: E3, initialFocus: g2, containers: X2, ...O2 } = e2;
    return h$3(Fragment, [Boolean(E3 & 4) && h$3(f$3, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: u2, features: a$4.Focusable }), H$4({ ourProps: d2, theirProps: { ...t2, ...O2 }, slot: a2, attrs: t2, slots: l2, name: "FocusTrap" }), Boolean(E3 & 4) && h$3(f$3, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: u2, features: a$4.Focusable })]);
  };
} }), { features: A$3 }), L$3 = [];
t$1(() => {
  function e2(t2) {
    t2.target instanceof HTMLElement && t2.target !== document.body && L$3[0] !== t2.target && (L$3.unshift(t2.target), L$3 = L$3.filter((l2) => l2 != null && l2.isConnected), L$3.splice(10));
  }
  window.addEventListener("click", e2, { capture: true }), window.addEventListener("mousedown", e2, { capture: true }), window.addEventListener("focus", e2, { capture: true }), document.body.addEventListener("click", e2, { capture: true }), document.body.addEventListener("mousedown", e2, { capture: true }), document.body.addEventListener("focus", e2, { capture: true });
});
function x$1(e2) {
  let t2 = ref(L$3.slice());
  return watch([e2], ([l2], [o2]) => {
    o2 === true && l2 === false ? t$2(() => {
      t2.value.splice(0);
    }) : o2 === false && l2 === true && (t2.value = L$3.slice());
  }, { flush: "post" }), () => {
    var l2;
    return (l2 = t2.value.find((o2) => o2 != null && o2.isConnected)) != null ? l2 : null;
  };
}
function z$3({ ownerDocument: e2 }, t2) {
  let l2 = x$1(t2);
  onMounted(() => {
    watchEffect(() => {
      var o2, r2;
      t2.value || ((o2 = e2.value) == null ? void 0 : o2.activeElement) === ((r2 = e2.value) == null ? void 0 : r2.body) && S$3(l2());
    }, { flush: "post" });
  }), onUnmounted(() => {
    t2.value && S$3(l2());
  });
}
function J({ ownerDocument: e2, container: t2, initialFocus: l2 }, o2) {
  let r2 = ref(null), i2 = ref(false);
  return onMounted(() => i2.value = true), onUnmounted(() => i2.value = false), onMounted(() => {
    watch([t2, l2, o2], (n2, m2) => {
      if (n2.every((u2, s3) => (m2 == null ? void 0 : m2[s3]) === u2) || !o2.value)
        return;
      let c2 = o$2(t2);
      c2 && t$2(() => {
        var H2, M2;
        if (!i2.value)
          return;
        let u2 = o$2(l2), s3 = (H2 = e2.value) == null ? void 0 : H2.activeElement;
        if (u2) {
          if (u2 === s3) {
            r2.value = s3;
            return;
          }
        } else if (c2.contains(s3)) {
          r2.value = s3;
          return;
        }
        u2 ? S$3(u2) : P$2(c2, N$2.First | N$2.NoScroll) === T$1.Error && console.warn("There are no focusable elements inside the <FocusTrap />"), r2.value = (M2 = e2.value) == null ? void 0 : M2.activeElement;
      });
    }, { immediate: true, flush: "post" });
  }), r2;
}
function Q$3({ ownerDocument: e2, container: t2, containers: l2, previousActiveElement: o2 }, r2) {
  var i2;
  E$2((i2 = e2.value) == null ? void 0 : i2.defaultView, "focus", (n2) => {
    if (!r2.value)
      return;
    let m2 = B$1(l2);
    o$2(t2) instanceof HTMLElement && m2.add(o$2(t2));
    let c2 = o2.value;
    if (!c2)
      return;
    let u2 = n2.target;
    u2 && u2 instanceof HTMLElement ? N$1(m2, u2) ? (o2.value = u2, S$3(u2)) : (n2.preventDefault(), n2.stopPropagation(), S$3(c2)) : S$3(o2.value);
  }, true);
}
function N$1(e2, t2) {
  for (let l2 of e2)
    if (l2.contains(t2))
      return true;
  return false;
}
let i$2 = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Map();
function E$1(d2, f2 = ref(true)) {
  watchEffect((o2) => {
    var a2;
    if (!f2.value)
      return;
    let e2 = o$2(d2);
    if (!e2)
      return;
    o2(function() {
      var u2;
      if (!e2)
        return;
      let r2 = (u2 = t.get(e2)) != null ? u2 : 1;
      if (r2 === 1 ? t.delete(e2) : t.set(e2, r2 - 1), r2 !== 1)
        return;
      let n2 = i$2.get(e2);
      n2 && (n2["aria-hidden"] === null ? e2.removeAttribute("aria-hidden") : e2.setAttribute("aria-hidden", n2["aria-hidden"]), e2.inert = n2.inert, i$2.delete(e2));
    });
    let l2 = (a2 = t.get(e2)) != null ? a2 : 0;
    t.set(e2, l2 + 1), l2 === 0 && (i$2.set(e2, { "aria-hidden": e2.getAttribute("aria-hidden"), inert: e2.inert }), e2.setAttribute("aria-hidden", "true"), e2.inert = true);
  });
}
let e = Symbol("ForcePortalRootContext");
function u$1() {
  return inject(e, false);
}
let P$1 = defineComponent({ name: "ForcePortalRoot", props: { as: { type: [Object, String], default: "template" }, force: { type: Boolean, default: false } }, setup(o2, { slots: t2, attrs: r2 }) {
  return provide(e, o2.force), () => {
    let { force: f2, ...n2 } = o2;
    return H$4({ theirProps: n2, ourProps: {}, slot: {}, slots: t2, attrs: r2, name: "ForcePortalRoot" });
  };
} });
function E(t2) {
  let e2 = m$4(t2);
  if (!e2) {
    if (t2 === null)
      return null;
    throw new Error(`[Headless UI]: Cannot find ownerDocument for contextElement: ${t2}`);
  }
  let u2 = e2.getElementById("headlessui-portal-root");
  if (u2)
    return u2;
  let r2 = e2.createElement("div");
  return r2.setAttribute("id", "headlessui-portal-root"), e2.body.appendChild(r2);
}
let U$2 = defineComponent({ name: "Portal", props: { as: { type: [Object, String], default: "div" } }, setup(t2, { slots: e2, attrs: u2 }) {
  let r2 = ref(null), i2 = computed(() => m$4(r2)), l2 = u$1(), n2 = inject(h$1, null), o2 = ref(l2 === true || n2 == null ? E(r2.value) : n2.resolveTarget());
  watchEffect(() => {
    l2 || n2 != null && (o2.value = n2.resolveTarget());
  });
  let d2 = inject(f$1, null);
  return onMounted(() => {
    let a2 = o$2(r2);
    a2 && d2 && onUnmounted(d2.register(a2));
  }), onUnmounted(() => {
    var v3, P3;
    let a2 = (v3 = i2.value) == null ? void 0 : v3.getElementById("headlessui-portal-root");
    a2 && o2.value === a2 && o2.value.children.length <= 0 && ((P3 = o2.value.parentElement) == null || P3.removeChild(o2.value));
  }), () => {
    if (o2.value === null)
      return null;
    let a2 = { ref: r2, "data-headlessui-portal": "" };
    return h$3(Teleport, { to: o2.value }, H$4({ ourProps: a2, theirProps: t2, slot: {}, attrs: u2, slots: e2, name: "Portal" }));
  };
} }), f$1 = Symbol("PortalParentContext");
function V$1() {
  let t2 = inject(f$1, null), e2 = ref([]);
  function u2(l2) {
    return e2.value.push(l2), t2 && t2.register(l2), () => r2(l2);
  }
  function r2(l2) {
    let n2 = e2.value.indexOf(l2);
    n2 !== -1 && e2.value.splice(n2, 1), t2 && t2.unregister(l2);
  }
  let i2 = { register: u2, unregister: r2, portals: e2 };
  return [e2, defineComponent({ name: "PortalWrapper", setup(l2, { slots: n2 }) {
    return provide(f$1, i2), () => {
      var o2;
      return (o2 = n2.default) == null ? void 0 : o2.call(n2);
    };
  } })];
}
let h$1 = Symbol("PortalGroupContext"), _$1 = defineComponent({ name: "PortalGroup", props: { as: { type: [Object, String], default: "template" }, target: { type: Object, default: null } }, setup(t2, { attrs: e2, slots: u2 }) {
  let r2 = reactive({ resolveTarget() {
    return t2.target;
  } });
  return provide(h$1, r2), () => {
    let { target: i2, ...l2 } = t2;
    return H$4({ theirProps: l2, ourProps: {}, slot: {}, attrs: e2, slots: u2, name: "PortalGroup" });
  };
} });
let u = Symbol("StackContext");
var p$3 = ((e2) => (e2[e2.Add = 0] = "Add", e2[e2.Remove = 1] = "Remove", e2))(p$3 || {});
function v$2() {
  return inject(u, () => {
  });
}
function S$2({ type: o2, enabled: r2, element: e2, onUpdate: i2 }) {
  let a2 = v$2();
  function t2(...n2) {
    i2 == null || i2(...n2), a2(...n2);
  }
  onMounted(() => {
    watch(r2, (n2, d2) => {
      n2 ? t2(0, o2, e2) : d2 === true && t2(1, o2, e2);
    }, { immediate: true, flush: "sync" });
  }), onUnmounted(() => {
    r2.value && t2(1, o2, e2);
  }), provide(u, t2);
}
let p$2 = Symbol("DescriptionContext");
function M$2({ slot: t2 = ref({}), name: i2 = "Description", props: o2 = {} } = {}) {
  let e2 = ref([]);
  function s3(n2) {
    return e2.value.push(n2), () => {
      let r2 = e2.value.indexOf(n2);
      r2 !== -1 && e2.value.splice(r2, 1);
    };
  }
  return provide(p$2, { register: s3, slot: t2, name: i2, props: o2 }), computed(() => e2.value.length > 0 ? e2.value.join(" ") : void 0);
}
function m$3(t2) {
  let e2 = shallowRef(t2.getSnapshot());
  return onUnmounted(t2.subscribe(() => {
    e2.value = t2.getSnapshot();
  })), e2;
}
function a$3(o2, r2) {
  let t2 = o2(), n2 = /* @__PURE__ */ new Set();
  return { getSnapshot() {
    return t2;
  }, subscribe(e2) {
    return n2.add(e2), () => n2.delete(e2);
  }, dispatch(e2, ...s3) {
    let i2 = r2[e2].call(t2, ...s3);
    i2 && (t2 = i2, n2.forEach((c2) => c2()));
  } };
}
function c$1() {
  let o2;
  return { before({ doc: e2 }) {
    var l2;
    let n2 = e2.documentElement;
    o2 = ((l2 = e2.defaultView) != null ? l2 : window).innerWidth - n2.clientWidth;
  }, after({ doc: e2, d: n2 }) {
    let t2 = e2.documentElement, l2 = t2.clientWidth - t2.offsetWidth, r2 = o2 - l2;
    n2.style(t2, "paddingRight", `${r2}px`);
  } };
}
function p$1() {
  if (!t$3())
    return {};
  let o2;
  return { before() {
    o2 = window.pageYOffset;
  }, after({ doc: r2, d: l2, meta: s3 }) {
    function i2(e2) {
      return s3.containers.flatMap((t2) => t2()).some((t2) => t2.contains(e2));
    }
    l2.style(r2.body, "marginTop", `-${o2}px`), window.scrollTo(0, 0);
    let n2 = null;
    l2.addEventListener(r2, "click", (e2) => {
      if (e2.target instanceof HTMLElement)
        try {
          let t2 = e2.target.closest("a");
          if (!t2)
            return;
          let { hash: c2 } = new URL(t2.href), a2 = r2.querySelector(c2);
          a2 && !i2(a2) && (n2 = a2);
        } catch {
        }
    }, true), l2.addEventListener(r2, "touchmove", (e2) => {
      e2.target instanceof HTMLElement && !i2(e2.target) && e2.preventDefault();
    }, { passive: false }), l2.add(() => {
      window.scrollTo(0, window.pageYOffset + o2), n2 && n2.isConnected && (n2.scrollIntoView({ block: "nearest" }), n2 = null);
    });
  } };
}
function l$2() {
  return { before({ doc: e2, d: o2 }) {
    o2.style(e2.documentElement, "overflow", "hidden");
  } };
}
function m$2(e2) {
  let n2 = {};
  for (let t2 of e2)
    Object.assign(n2, t2(n2));
  return n2;
}
let a$2 = a$3(() => /* @__PURE__ */ new Map(), { PUSH(e2, n2) {
  var o2;
  let t2 = (o2 = this.get(e2)) != null ? o2 : { doc: e2, count: 0, d: r$2(), meta: /* @__PURE__ */ new Set() };
  return t2.count++, t2.meta.add(n2), this.set(e2, t2), this;
}, POP(e2, n2) {
  let t2 = this.get(e2);
  return t2 && (t2.count--, t2.meta.delete(n2)), this;
}, SCROLL_PREVENT({ doc: e2, d: n2, meta: t2 }) {
  let o2 = { doc: e2, d: n2, meta: m$2(t2) }, c2 = [p$1(), c$1(), l$2()];
  c2.forEach(({ before: r2 }) => r2 == null ? void 0 : r2(o2)), c2.forEach(({ after: r2 }) => r2 == null ? void 0 : r2(o2));
}, SCROLL_ALLOW({ d: e2 }) {
  e2.dispose();
}, TEARDOWN({ doc: e2 }) {
  this.delete(e2);
} });
a$2.subscribe(() => {
  let e2 = a$2.getSnapshot(), n2 = /* @__PURE__ */ new Map();
  for (let [t2] of e2)
    n2.set(t2, t2.documentElement.style.overflow);
  for (let t2 of e2.values()) {
    let o2 = n2.get(t2.doc) === "hidden", c2 = t2.count !== 0;
    (c2 && !o2 || !c2 && o2) && a$2.dispatch(t2.count > 0 ? "SCROLL_PREVENT" : "SCROLL_ALLOW", t2), t2.count === 0 && a$2.dispatch("TEARDOWN", t2);
  }
});
function d$5(t2, a2, n2) {
  let i2 = m$3(a$2), l2 = computed(() => {
    let e2 = t2.value ? i2.value.get(t2.value) : void 0;
    return e2 ? e2.count > 0 : false;
  });
  return watch([t2, a2], ([e2, m2], [r2], o2) => {
    if (!e2 || !m2)
      return;
    a$2.dispatch("PUSH", e2, n2);
    let f2 = false;
    o2(() => {
      f2 || (a$2.dispatch("POP", r2 != null ? r2 : e2, n2), f2 = true);
    });
  }, { immediate: true }), l2;
}
function p({ defaultContainers: r2 = [], portals: t2 } = {}) {
  let o2 = ref(null), l2 = m$4(o2);
  function u2() {
    var i2;
    let n2 = [];
    for (let e2 of r2)
      e2 !== null && (e2 instanceof HTMLElement ? n2.push(e2) : "value" in e2 && e2.value instanceof HTMLElement && n2.push(e2.value));
    if (t2 != null && t2.value)
      for (let e2 of t2.value)
        n2.push(e2);
    for (let e2 of (i2 = l2 == null ? void 0 : l2.querySelectorAll("html > *, body > *")) != null ? i2 : [])
      e2 !== document.body && e2 !== document.head && e2 instanceof HTMLElement && e2.id !== "headlessui-portal-root" && (e2.contains(o$2(o2)) || n2.some((f2) => e2.contains(f2)) || n2.push(e2));
    return n2;
  }
  return { resolveContainers: u2, contains(n2) {
    return u2().some((i2) => i2.contains(n2));
  }, mainTreeNodeRef: o2, MainTreeNode() {
    return h$3(f$3, { features: a$4.Hidden, ref: o2 });
  } };
}
var Oe$1 = ((t2) => (t2[t2.Open = 0] = "Open", t2[t2.Closed = 1] = "Closed", t2))(Oe$1 || {});
let F$1 = Symbol("DialogContext");
function C$2(o2) {
  let n2 = inject(F$1, null);
  if (n2 === null) {
    let t2 = new Error(`<${o2} /> is missing a parent <Dialog /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(t2, C$2), t2;
  }
  return n2;
}
let M$1 = "DC8F892D-2EBD-447C-A4C8-A03058436FF4", Ue$1 = defineComponent({ name: "Dialog", inheritAttrs: false, props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, open: { type: [Boolean, String], default: M$1 }, initialFocus: { type: Object, default: null }, id: { type: String, default: () => `headlessui-dialog-${t$4()}` } }, emits: { close: (o2) => true }, setup(o2, { emit: n2, attrs: t2, slots: u2, expose: i2 }) {
  var N3;
  let r2 = ref(false);
  onMounted(() => {
    r2.value = true;
  });
  let s3 = ref(0), p$12 = p$6(), m2 = computed(() => o2.open === M$1 && p$12 !== null ? (p$12.value & l$3.Open) === l$3.Open : o2.open), v3 = ref(null), T3 = computed(() => m$4(v3));
  if (i2({ el: v3, $el: v3 }), !(o2.open !== M$1 || p$12 !== null))
    throw new Error("You forgot to provide an `open` prop to the `Dialog`.");
  if (typeof m2.value != "boolean")
    throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${m2.value === M$1 ? void 0 : o2.open}`);
  let c2 = computed(() => r2.value && m2.value ? 0 : 1), R2 = computed(() => c2.value === 0), E3 = computed(() => s3.value > 1), $3 = inject(F$1, null) !== null, [G3, V2] = V$1(), { resolveContainers: x2, mainTreeNodeRef: j2, MainTreeNode: W3 } = p({ portals: G3, defaultContainers: [computed(() => {
    var e2;
    return (e2 = y2.panelRef.value) != null ? e2 : v3.value;
  })] }), J3 = computed(() => E3.value ? "parent" : "leaf"), H2 = computed(() => p$12 !== null ? (p$12.value & l$3.Closing) === l$3.Closing : false), Q2 = computed(() => $3 || H2.value ? false : R2.value), X2 = computed(() => {
    var e2, l2, f2;
    return (f2 = Array.from((l2 = (e2 = T3.value) == null ? void 0 : e2.querySelectorAll("body > *")) != null ? l2 : []).find((d2) => d2.id === "headlessui-portal-root" ? false : d2.contains(o$2(j2)) && d2 instanceof HTMLElement)) != null ? f2 : null;
  });
  E$1(X2, Q2);
  let Z2 = computed(() => E3.value ? true : R2.value), ee2 = computed(() => {
    var e2, l2, f2;
    return (f2 = Array.from((l2 = (e2 = T3.value) == null ? void 0 : e2.querySelectorAll("[data-headlessui-portal]")) != null ? l2 : []).find((d2) => d2.contains(o$2(j2)) && d2 instanceof HTMLElement)) != null ? f2 : null;
  });
  E$1(ee2, Z2), S$2({ type: "Dialog", enabled: computed(() => c2.value === 0), element: v3, onUpdate: (e2, l2) => {
    if (l2 === "Dialog")
      return u$4(e2, { [p$3.Add]: () => s3.value += 1, [p$3.Remove]: () => s3.value -= 1 });
  } });
  let te2 = M$2({ name: "DialogDescription", slot: computed(() => ({ open: m2.value })) }), k2 = ref(null), y2 = { titleId: k2, panelRef: ref(null), dialogState: c2, setTitleId(e2) {
    k2.value !== e2 && (k2.value = e2);
  }, close() {
    n2("close", false);
  } };
  provide(F$1, y2);
  let le3 = computed(() => !(!R2.value || E3.value));
  F$2(x2, (e2, l2) => {
    y2.close(), nextTick(() => l2 == null ? void 0 : l2.focus());
  }, le3);
  let oe2 = computed(() => !(E3.value || c2.value !== 0));
  E$2((N3 = T3.value) == null ? void 0 : N3.defaultView, "keydown", (e2) => {
    oe2.value && (e2.defaultPrevented || e2.key === o$3.Escape && (e2.preventDefault(), e2.stopPropagation(), y2.close()));
  });
  let re2 = computed(() => !(H2.value || c2.value !== 0 || $3));
  return d$5(T3, re2, (e2) => {
    var l2;
    return { containers: [...(l2 = e2.containers) != null ? l2 : [], x2] };
  }), watchEffect((e2) => {
    if (c2.value !== 0)
      return;
    let l2 = o$2(v3);
    if (!l2)
      return;
    let f2 = new ResizeObserver((d2) => {
      for (let A3 of d2) {
        let D2 = A3.target.getBoundingClientRect();
        D2.x === 0 && D2.y === 0 && D2.width === 0 && D2.height === 0 && y2.close();
      }
    });
    f2.observe(l2), e2(() => f2.disconnect());
  }), () => {
    let { id: e2, open: l2, initialFocus: f2, ...d2 } = o2, A3 = { ...t2, ref: v3, id: e2, role: "dialog", "aria-modal": c2.value === 0 ? true : void 0, "aria-labelledby": k2.value, "aria-describedby": te2.value }, D2 = { open: c2.value === 0 };
    return h$3(P$1, { force: true }, () => [h$3(U$2, () => h$3(_$1, { target: v3.value }, () => h$3(P$1, { force: false }, () => h$3(ce$2, { initialFocus: f2, containers: x2, features: R2.value ? u$4(J3.value, { parent: ce$2.features.RestoreFocus, leaf: ce$2.features.All & ~ce$2.features.FocusLock }) : ce$2.features.None }, () => h$3(V2, {}, () => H$4({ ourProps: A3, theirProps: { ...d2, ...t2 }, slot: D2, attrs: t2, slots: u2, visible: c2.value === 0, features: N$3.RenderStrategy | N$3.Static, name: "Dialog" })))))), h$3(W3)]);
  };
} }), Ge = defineComponent({ name: "DialogPanel", props: { as: { type: [Object, String], default: "div" }, id: { type: String, default: () => `headlessui-dialog-panel-${t$4()}` } }, setup(o2, { attrs: n2, slots: t2, expose: u2 }) {
  let i2 = C$2("DialogPanel");
  u2({ el: i2.panelRef, $el: i2.panelRef });
  function r2(s3) {
    s3.stopPropagation();
  }
  return () => {
    let { id: s3, ...p2 } = o2, m2 = { id: s3, ref: i2.panelRef, onClick: r2 };
    return H$4({ ourProps: m2, theirProps: p2, slot: { open: i2.dialogState.value === 0 }, attrs: n2, slots: t2, name: "DialogPanel" });
  };
} }), Ve = defineComponent({ name: "DialogTitle", props: { as: { type: [Object, String], default: "h2" }, id: { type: String, default: () => `headlessui-dialog-title-${t$4()}` } }, setup(o2, { attrs: n2, slots: t2 }) {
  let u2 = C$2("DialogTitle");
  return onMounted(() => {
    u2.setTitleId(o2.id), onUnmounted(() => u2.setTitleId(null));
  }), () => {
    let { id: i2, ...r2 } = o2;
    return H$4({ ourProps: { id: i2 }, theirProps: r2, slot: { open: u2.dialogState.value === 0 }, attrs: n2, slots: t2, name: "DialogTitle" });
  };
} });
var j$3 = ((o2) => (o2[o2.Open = 0] = "Open", o2[o2.Closed = 1] = "Closed", o2))(j$3 || {});
let x = Symbol("DisclosureContext");
function g$3(t2) {
  let r2 = inject(x, null);
  if (r2 === null) {
    let o2 = new Error(`<${t2} /> is missing a parent <Disclosure /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(o2, g$3), o2;
  }
  return r2;
}
let B = Symbol("DisclosurePanelContext");
function $() {
  return inject(B, null);
}
let Q$2 = defineComponent({ name: "Disclosure", props: { as: { type: [Object, String], default: "template" }, defaultOpen: { type: [Boolean], default: false } }, setup(t2, { slots: r2, attrs: o2 }) {
  let u2 = ref(t2.defaultOpen ? 0 : 1), e2 = ref(null), i2 = ref(null), s3 = { buttonId: ref(null), panelId: ref(null), disclosureState: u2, panel: e2, button: i2, toggleDisclosure() {
    u2.value = u$4(u2.value, { [0]: 1, [1]: 0 });
  }, closeDisclosure() {
    u2.value !== 1 && (u2.value = 1);
  }, close(l2) {
    s3.closeDisclosure();
    let a2 = (() => l2 ? l2 instanceof HTMLElement ? l2 : l2.value instanceof HTMLElement ? o$2(l2) : o$2(s3.button) : o$2(s3.button))();
    a2 == null || a2.focus();
  } };
  return provide(x, s3), c$4(computed(() => u$4(u2.value, { [0]: l$3.Open, [1]: l$3.Closed }))), () => {
    let { defaultOpen: l2, ...a2 } = t2, c2 = { open: u2.value === 0, close: s3.close };
    return H$4({ theirProps: a2, ourProps: {}, slot: c2, slots: r2, attrs: o2, name: "Disclosure" });
  };
} }), V = defineComponent({ name: "DisclosureButton", props: { as: { type: [Object, String], default: "button" }, disabled: { type: [Boolean], default: false }, id: { type: String, default: () => `headlessui-disclosure-button-${t$4()}` } }, setup(t2, { attrs: r2, slots: o2, expose: u2 }) {
  let e2 = g$3("DisclosureButton");
  onMounted(() => {
    e2.buttonId.value = t2.id;
  }), onUnmounted(() => {
    e2.buttonId.value = null;
  });
  let i2 = $(), s3 = computed(() => i2 === null ? false : i2.value === e2.panelId.value), l2 = ref(null);
  u2({ el: l2, $el: l2 }), s3.value || watchEffect(() => {
    e2.button.value = l2.value;
  });
  let a2 = b(computed(() => ({ as: t2.as, type: r2.type })), l2);
  function c2() {
    var n2;
    t2.disabled || (s3.value ? (e2.toggleDisclosure(), (n2 = o$2(e2.button)) == null || n2.focus()) : e2.toggleDisclosure());
  }
  function D2(n2) {
    var S2;
    if (!t2.disabled)
      if (s3.value)
        switch (n2.key) {
          case o$3.Space:
          case o$3.Enter:
            n2.preventDefault(), n2.stopPropagation(), e2.toggleDisclosure(), (S2 = o$2(e2.button)) == null || S2.focus();
            break;
        }
      else
        switch (n2.key) {
          case o$3.Space:
          case o$3.Enter:
            n2.preventDefault(), n2.stopPropagation(), e2.toggleDisclosure();
            break;
        }
  }
  function T3(n2) {
    switch (n2.key) {
      case o$3.Space:
        n2.preventDefault();
        break;
    }
  }
  return () => {
    let n2 = { open: e2.disclosureState.value === 0 }, { id: S2, ...k2 } = t2, K2 = s3.value ? { ref: l2, type: a2.value, onClick: c2, onKeydown: D2 } : { id: S2, ref: l2, type: a2.value, "aria-expanded": t2.disabled ? void 0 : e2.disclosureState.value === 0, "aria-controls": o$2(e2.panel) ? e2.panelId.value : void 0, disabled: t2.disabled ? true : void 0, onClick: c2, onKeydown: D2, onKeyup: T3 };
    return H$4({ ourProps: K2, theirProps: k2, slot: n2, attrs: r2, slots: o2, name: "DisclosureButton" });
  };
} }), X = defineComponent({ name: "DisclosurePanel", props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, id: { type: String, default: () => `headlessui-disclosure-panel-${t$4()}` } }, setup(t2, { attrs: r2, slots: o2, expose: u2 }) {
  let e2 = g$3("DisclosurePanel");
  onMounted(() => {
    e2.panelId.value = t2.id;
  }), onUnmounted(() => {
    e2.panelId.value = null;
  }), u2({ el: e2.panel, $el: e2.panel }), provide(B, e2.panelId);
  let i2 = p$6(), s3 = computed(() => i2 !== null ? (i2.value & l$3.Open) === l$3.Open : e2.disclosureState.value === 0);
  return () => {
    let l2 = { open: e2.disclosureState.value === 0, close: e2.close }, { id: a2, ...c2 } = t2, D2 = { id: a2, ref: e2.panel };
    return H$4({ ourProps: D2, theirProps: c2, slot: l2, attrs: r2, slots: o2, features: N$3.RenderStrategy | N$3.Static, visible: s3.value, name: "DisclosurePanel" });
  };
} });
var be = ((p2) => (p2[p2.Open = 0] = "Open", p2[p2.Closed = 1] = "Closed", p2))(be || {});
let re$1 = Symbol("PopoverContext");
function A$2(d2) {
  let S2 = inject(re$1, null);
  if (S2 === null) {
    let p2 = new Error(`<${d2} /> is missing a parent <${ge$2.name} /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(p2, A$2), p2;
  }
  return S2;
}
let le$2 = Symbol("PopoverGroupContext");
function ae$1() {
  return inject(le$2, null);
}
let ue$1 = Symbol("PopoverPanelContext");
function Se$2() {
  return inject(ue$1, null);
}
let ge$2 = defineComponent({ name: "Popover", props: { as: { type: [Object, String], default: "div" } }, setup(d2, { slots: S2, attrs: p$12, expose: h2 }) {
  var v3;
  let t2 = ref(null);
  h2({ el: t2, $el: t2 });
  let e2 = ref(1), c2 = ref(null), P3 = ref(null), F3 = ref(null), f2 = ref(null), g2 = computed(() => m$4(t2)), m2 = computed(() => {
    var X2, Y2;
    if (!o$2(c2) || !o$2(f2))
      return false;
    for (let k2 of document.querySelectorAll("body > *"))
      if (Number(k2 == null ? void 0 : k2.contains(o$2(c2))) ^ Number(k2 == null ? void 0 : k2.contains(o$2(f2))))
        return true;
    let o2 = E$3(), l2 = o2.indexOf(o$2(c2)), b3 = (l2 + o2.length - 1) % o2.length, E3 = (l2 + 1) % o2.length, K2 = o2[b3], j2 = o2[E3];
    return !((X2 = o$2(f2)) != null && X2.contains(K2)) && !((Y2 = o$2(f2)) != null && Y2.contains(j2));
  }), a2 = { popoverState: e2, buttonId: ref(null), panelId: ref(null), panel: f2, button: c2, isPortalled: m2, beforePanelSentinel: P3, afterPanelSentinel: F3, togglePopover() {
    e2.value = u$4(e2.value, { [0]: 1, [1]: 0 });
  }, closePopover() {
    e2.value !== 1 && (e2.value = 1);
  }, close(o2) {
    a2.closePopover();
    let l2 = (() => o2 ? o2 instanceof HTMLElement ? o2 : o2.value instanceof HTMLElement ? o$2(o2) : o$2(a2.button) : o$2(a2.button))();
    l2 == null || l2.focus();
  } };
  provide(re$1, a2), c$4(computed(() => u$4(e2.value, { [0]: l$3.Open, [1]: l$3.Closed })));
  let w2 = { buttonId: a2.buttonId, panelId: a2.panelId, close() {
    a2.closePopover();
  } }, y2 = ae$1(), O2 = y2 == null ? void 0 : y2.registerPopover, [u2, i2] = V$1(), s3 = p({ portals: u2, defaultContainers: [c2, f2] });
  function n2() {
    var o2, l2, b3, E3;
    return (E3 = y2 == null ? void 0 : y2.isFocusWithinPopoverGroup()) != null ? E3 : ((o2 = g2.value) == null ? void 0 : o2.activeElement) && (((l2 = o$2(c2)) == null ? void 0 : l2.contains(g2.value.activeElement)) || ((b3 = o$2(f2)) == null ? void 0 : b3.contains(g2.value.activeElement)));
  }
  return watchEffect(() => O2 == null ? void 0 : O2(w2)), E$2((v3 = g2.value) == null ? void 0 : v3.defaultView, "focus", (o2) => {
    var l2, b3;
    o2.target !== window && o2.target instanceof HTMLElement && e2.value === 0 && (n2() || c2 && f2 && (s3.contains(o2.target) || (l2 = o$2(a2.beforePanelSentinel)) != null && l2.contains(o2.target) || (b3 = o$2(a2.afterPanelSentinel)) != null && b3.contains(o2.target) || a2.closePopover()));
  }, true), F$2(s3.resolveContainers, (o2, l2) => {
    var b3;
    a2.closePopover(), w$1(l2, h$2.Loose) || (o2.preventDefault(), (b3 = o$2(c2)) == null || b3.focus());
  }, computed(() => e2.value === 0)), () => {
    let o2 = { open: e2.value === 0, close: a2.close };
    return h$3(i2, {}, () => H$4({ theirProps: { ...d2, ...p$12 }, ourProps: { ref: t2 }, slot: o2, slots: S2, attrs: p$12, name: "Popover" }));
  };
} }), je$1 = defineComponent({ name: "PopoverButton", props: { as: { type: [Object, String], default: "button" }, disabled: { type: [Boolean], default: false }, id: { type: String, default: () => `headlessui-popover-button-${t$4()}` } }, inheritAttrs: false, setup(d2, { attrs: S2, slots: p2, expose: h2 }) {
  let t2 = A$2("PopoverButton"), e2 = computed(() => m$4(t2.button));
  h2({ el: t2.button, $el: t2.button }), onMounted(() => {
    t2.buttonId.value = d2.id;
  }), onUnmounted(() => {
    t2.buttonId.value = null;
  });
  let c2 = ae$1(), P3 = c2 == null ? void 0 : c2.closeOthers, F3 = Se$2(), f2 = computed(() => F3 === null ? false : F3.value === t2.panelId.value), g2 = ref(null), m2 = `headlessui-focus-sentinel-${t$4()}`;
  f2.value || watchEffect(() => {
    t2.button.value = g2.value;
  });
  let a2 = b(computed(() => ({ as: d2.as, type: S2.type })), g2);
  function w2(n2) {
    var v3, o2, l2, b3, E3;
    if (f2.value) {
      if (t2.popoverState.value === 1)
        return;
      switch (n2.key) {
        case o$3.Space:
        case o$3.Enter:
          n2.preventDefault(), (o2 = (v3 = n2.target).click) == null || o2.call(v3), t2.closePopover(), (l2 = o$2(t2.button)) == null || l2.focus();
          break;
      }
    } else
      switch (n2.key) {
        case o$3.Space:
        case o$3.Enter:
          n2.preventDefault(), n2.stopPropagation(), t2.popoverState.value === 1 && (P3 == null || P3(t2.buttonId.value)), t2.togglePopover();
          break;
        case o$3.Escape:
          if (t2.popoverState.value !== 0)
            return P3 == null ? void 0 : P3(t2.buttonId.value);
          if (!o$2(t2.button) || (b3 = e2.value) != null && b3.activeElement && !((E3 = o$2(t2.button)) != null && E3.contains(e2.value.activeElement)))
            return;
          n2.preventDefault(), n2.stopPropagation(), t2.closePopover();
          break;
      }
  }
  function y2(n2) {
    f2.value || n2.key === o$3.Space && n2.preventDefault();
  }
  function O2(n2) {
    var v3, o2;
    d2.disabled || (f2.value ? (t2.closePopover(), (v3 = o$2(t2.button)) == null || v3.focus()) : (n2.preventDefault(), n2.stopPropagation(), t2.popoverState.value === 1 && (P3 == null || P3(t2.buttonId.value)), t2.togglePopover(), (o2 = o$2(t2.button)) == null || o2.focus()));
  }
  function u2(n2) {
    n2.preventDefault(), n2.stopPropagation();
  }
  let i2 = n$2();
  function s3() {
    let n2 = o$2(t2.panel);
    if (!n2)
      return;
    function v3() {
      u$4(i2.value, { [d$6.Forwards]: () => P$2(n2, N$2.First), [d$6.Backwards]: () => P$2(n2, N$2.Last) }) === T$1.Error && P$2(E$3().filter((l2) => l2.dataset.headlessuiFocusGuard !== "true"), u$4(i2.value, { [d$6.Forwards]: N$2.Next, [d$6.Backwards]: N$2.Previous }), { relativeTo: o$2(t2.button) });
    }
    v3();
  }
  return () => {
    let n2 = t2.popoverState.value === 0, v3 = { open: n2 }, { id: o2, ...l2 } = d2, b3 = f2.value ? { ref: g2, type: a2.value, onKeydown: w2, onClick: O2 } : { ref: g2, id: o2, type: a2.value, "aria-expanded": d2.disabled ? void 0 : t2.popoverState.value === 0, "aria-controls": o$2(t2.panel) ? t2.panelId.value : void 0, disabled: d2.disabled ? true : void 0, onKeydown: w2, onKeyup: y2, onClick: O2, onMousedown: u2 };
    return h$3(Fragment, [H$4({ ourProps: b3, theirProps: { ...S2, ...l2 }, slot: v3, attrs: S2, slots: p2, name: "PopoverButton" }), n2 && !f2.value && t2.isPortalled.value && h$3(f$3, { id: m2, features: a$4.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: s3 })]);
  };
} }), We = defineComponent({ name: "PopoverPanel", props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, focus: { type: Boolean, default: false }, id: { type: String, default: () => `headlessui-popover-panel-${t$4()}` } }, inheritAttrs: false, setup(d2, { attrs: S2, slots: p2, expose: h2 }) {
  let { focus: t2 } = d2, e2 = A$2("PopoverPanel"), c2 = computed(() => m$4(e2.panel)), P3 = `headlessui-focus-sentinel-before-${t$4()}`, F3 = `headlessui-focus-sentinel-after-${t$4()}`;
  h2({ el: e2.panel, $el: e2.panel }), onMounted(() => {
    e2.panelId.value = d2.id;
  }), onUnmounted(() => {
    e2.panelId.value = null;
  }), provide(ue$1, e2.panelId), watchEffect(() => {
    var i2, s3;
    if (!t2 || e2.popoverState.value !== 0 || !e2.panel)
      return;
    let u2 = (i2 = c2.value) == null ? void 0 : i2.activeElement;
    (s3 = o$2(e2.panel)) != null && s3.contains(u2) || P$2(o$2(e2.panel), N$2.First);
  });
  let f2 = p$6(), g2 = computed(() => f2 !== null ? (f2.value & l$3.Open) === l$3.Open : e2.popoverState.value === 0);
  function m2(u2) {
    var i2, s3;
    switch (u2.key) {
      case o$3.Escape:
        if (e2.popoverState.value !== 0 || !o$2(e2.panel) || c2.value && !((i2 = o$2(e2.panel)) != null && i2.contains(c2.value.activeElement)))
          return;
        u2.preventDefault(), u2.stopPropagation(), e2.closePopover(), (s3 = o$2(e2.button)) == null || s3.focus();
        break;
    }
  }
  function a2(u2) {
    var s3, n2, v3, o2, l2;
    let i2 = u2.relatedTarget;
    i2 && o$2(e2.panel) && ((s3 = o$2(e2.panel)) != null && s3.contains(i2) || (e2.closePopover(), ((v3 = (n2 = o$2(e2.beforePanelSentinel)) == null ? void 0 : n2.contains) != null && v3.call(n2, i2) || (l2 = (o2 = o$2(e2.afterPanelSentinel)) == null ? void 0 : o2.contains) != null && l2.call(o2, i2)) && i2.focus({ preventScroll: true })));
  }
  let w2 = n$2();
  function y2() {
    let u2 = o$2(e2.panel);
    if (!u2)
      return;
    function i2() {
      u$4(w2.value, { [d$6.Forwards]: () => {
        var n2;
        P$2(u2, N$2.First) === T$1.Error && ((n2 = o$2(e2.afterPanelSentinel)) == null || n2.focus());
      }, [d$6.Backwards]: () => {
        var s3;
        (s3 = o$2(e2.button)) == null || s3.focus({ preventScroll: true });
      } });
    }
    i2();
  }
  function O2() {
    let u2 = o$2(e2.panel);
    if (!u2)
      return;
    function i2() {
      u$4(w2.value, { [d$6.Forwards]: () => {
        let s3 = o$2(e2.button), n2 = o$2(e2.panel);
        if (!s3)
          return;
        let v3 = E$3(), o2 = v3.indexOf(s3), l2 = v3.slice(0, o2 + 1), E3 = [...v3.slice(o2 + 1), ...l2];
        for (let K2 of E3.slice())
          if (K2.dataset.headlessuiFocusGuard === "true" || n2 != null && n2.contains(K2)) {
            let j2 = E3.indexOf(K2);
            j2 !== -1 && E3.splice(j2, 1);
          }
        P$2(E3, N$2.First, { sorted: false });
      }, [d$6.Backwards]: () => {
        var n2;
        P$2(u2, N$2.Previous) === T$1.Error && ((n2 = o$2(e2.button)) == null || n2.focus());
      } });
    }
    i2();
  }
  return () => {
    let u2 = { open: e2.popoverState.value === 0, close: e2.close }, { id: i2, focus: s3, ...n2 } = d2, v3 = { ref: e2.panel, id: i2, onKeydown: m2, onFocusout: t2 && e2.popoverState.value === 0 ? a2 : void 0, tabIndex: -1 };
    return H$4({ ourProps: v3, theirProps: { ...S2, ...n2 }, attrs: S2, slot: u2, slots: { ...p2, default: (...o2) => {
      var l2;
      return [h$3(Fragment, [g2.value && e2.isPortalled.value && h$3(f$3, { id: P3, ref: e2.beforePanelSentinel, features: a$4.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: y2 }), (l2 = p2.default) == null ? void 0 : l2.call(p2, ...o2), g2.value && e2.isPortalled.value && h$3(f$3, { id: F3, ref: e2.afterPanelSentinel, features: a$4.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: O2 })])];
    } }, features: N$3.RenderStrategy | N$3.Static, visible: g2.value, name: "PopoverPanel" });
  };
} });
let a$1 = Symbol("LabelContext");
function d$4() {
  let t2 = inject(a$1, null);
  if (t2 === null) {
    let n2 = new Error("You used a <Label /> component, but it is not inside a parent.");
    throw Error.captureStackTrace && Error.captureStackTrace(n2, d$4), n2;
  }
  return t2;
}
function K({ slot: t2 = {}, name: n2 = "Label", props: i2 = {} } = {}) {
  let e2 = ref([]);
  function l2(r2) {
    return e2.value.push(r2), () => {
      let o2 = e2.value.indexOf(r2);
      o2 !== -1 && e2.value.splice(o2, 1);
    };
  }
  return provide(a$1, { register: l2, slot: t2, name: n2, props: i2 }), computed(() => e2.value.length > 0 ? e2.value.join(" ") : void 0);
}
let T = defineComponent({ name: "Label", props: { as: { type: [Object, String], default: "label" }, passive: { type: [Boolean], default: false }, id: { type: String, default: () => `headlessui-label-${t$4()}` } }, setup(t2, { slots: n2, attrs: i2 }) {
  let e2 = d$4();
  return onMounted(() => onUnmounted(e2.register(t2.id))), () => {
    let { name: l2 = "Label", slot: r2 = {}, props: o2 = {} } = e2, { id: p2, passive: c2, ...u2 } = t2, s3 = { ...Object.entries(o2).reduce((f2, [b3, g2]) => Object.assign(f2, { [b3]: unref(g2) }), {}), id: p2 };
    return c2 && (delete s3.onClick, delete s3.htmlFor, delete u2.onClick), H$4({ ourProps: s3, theirProps: u2, slot: r2, attrs: i2, slots: n2, name: l2 });
  };
} });
function re(t2, c2) {
  return t2 === c2;
}
let j$2 = Symbol("RadioGroupContext");
function H$1(t2) {
  let c2 = inject(j$2, null);
  if (c2 === null) {
    let u2 = new Error(`<${t2} /> is missing a parent <RadioGroup /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(u2, H$1), u2;
  }
  return c2;
}
let ke = defineComponent({ name: "RadioGroup", emits: { "update:modelValue": (t2) => true }, props: { as: { type: [Object, String], default: "div" }, disabled: { type: [Boolean], default: false }, by: { type: [String, Function], default: () => re }, modelValue: { type: [Object, String, Number, Boolean], default: void 0 }, defaultValue: { type: [Object, String, Number, Boolean], default: void 0 }, form: { type: String, optional: true }, name: { type: String, optional: true }, id: { type: String, default: () => `headlessui-radiogroup-${t$4()}` } }, inheritAttrs: false, setup(t2, { emit: c2, attrs: u2, slots: E3, expose: d2 }) {
  let s3 = ref(null), i2 = ref([]), R2 = K({ name: "RadioGroupLabel" }), w2 = M$2({ name: "RadioGroupDescription" });
  d2({ el: s3, $el: s3 });
  let [f2, S2] = d$7(computed(() => t2.modelValue), (e2) => c2("update:modelValue", e2), computed(() => t2.defaultValue)), p2 = { options: i2, value: f2, disabled: computed(() => t2.disabled), firstOption: computed(() => i2.value.find((e2) => !e2.propsRef.disabled)), containsCheckedOption: computed(() => i2.value.some((e2) => p2.compare(toRaw(e2.propsRef.value), toRaw(t2.modelValue)))), compare(e2, a2) {
    if (typeof t2.by == "string") {
      let n2 = t2.by;
      return (e2 == null ? void 0 : e2[n2]) === (a2 == null ? void 0 : a2[n2]);
    }
    return t2.by(e2, a2);
  }, change(e2) {
    var n2;
    if (t2.disabled || p2.compare(toRaw(f2.value), toRaw(e2)))
      return false;
    let a2 = (n2 = i2.value.find((l2) => p2.compare(toRaw(l2.propsRef.value), toRaw(e2)))) == null ? void 0 : n2.propsRef;
    return a2 != null && a2.disabled ? false : (S2(e2), true);
  }, registerOption(e2) {
    i2.value.push(e2), i2.value = O(i2.value, (a2) => a2.element);
  }, unregisterOption(e2) {
    let a2 = i2.value.findIndex((n2) => n2.id === e2);
    a2 !== -1 && i2.value.splice(a2, 1);
  } };
  provide(j$2, p2), p$5({ container: computed(() => o$2(s3)), accept(e2) {
    return e2.getAttribute("role") === "radio" ? NodeFilter.FILTER_REJECT : e2.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
  }, walk(e2) {
    e2.setAttribute("role", "none");
  } });
  function m2(e2) {
    if (!s3.value || !s3.value.contains(e2.target))
      return;
    let a2 = i2.value.filter((n2) => n2.propsRef.disabled === false).map((n2) => n2.element);
    switch (e2.key) {
      case o$3.Enter:
        p$4(e2.currentTarget);
        break;
      case o$3.ArrowLeft:
      case o$3.ArrowUp:
        if (e2.preventDefault(), e2.stopPropagation(), P$2(a2, N$2.Previous | N$2.WrapAround) === T$1.Success) {
          let l2 = i2.value.find((r2) => {
            var b3;
            return r2.element === ((b3 = m$4(s3)) == null ? void 0 : b3.activeElement);
          });
          l2 && p2.change(l2.propsRef.value);
        }
        break;
      case o$3.ArrowRight:
      case o$3.ArrowDown:
        if (e2.preventDefault(), e2.stopPropagation(), P$2(a2, N$2.Next | N$2.WrapAround) === T$1.Success) {
          let l2 = i2.value.find((r2) => {
            var b3;
            return r2.element === ((b3 = m$4(r2.element)) == null ? void 0 : b3.activeElement);
          });
          l2 && p2.change(l2.propsRef.value);
        }
        break;
      case o$3.Space:
        {
          e2.preventDefault(), e2.stopPropagation();
          let n2 = i2.value.find((l2) => {
            var r2;
            return l2.element === ((r2 = m$4(l2.element)) == null ? void 0 : r2.activeElement);
          });
          n2 && p2.change(n2.propsRef.value);
        }
        break;
    }
  }
  let v3 = computed(() => {
    var e2;
    return (e2 = o$2(s3)) == null ? void 0 : e2.closest("form");
  });
  return onMounted(() => {
    watch([v3], () => {
      if (!v3.value || t2.defaultValue === void 0)
        return;
      function e2() {
        p2.change(t2.defaultValue);
      }
      return v3.value.addEventListener("reset", e2), () => {
        var a2;
        (a2 = v3.value) == null || a2.removeEventListener("reset", e2);
      };
    }, { immediate: true });
  }), () => {
    let { disabled: e2, name: a2, id: n2, form: l2, ...r2 } = t2, b3 = { ref: s3, id: n2, role: "radiogroup", "aria-labelledby": R2.value, "aria-describedby": w2.value, onKeydown: m2 };
    return h$3(Fragment, [...a2 != null && f2.value != null ? e$1({ [a2]: f2.value }).map(([T3, G3]) => h$3(f$3, K$1({ features: a$4.Hidden, key: T3, as: "input", type: "hidden", hidden: true, readOnly: true, form: l2, name: T3, value: G3 }))) : [], H$4({ ourProps: b3, theirProps: { ...u2, ...T$2(r2, ["modelValue", "defaultValue", "by"]) }, slot: {}, attrs: u2, slots: E3, name: "RadioGroup" })]);
  };
} });
var ie$1 = ((u2) => (u2[u2.Empty = 1] = "Empty", u2[u2.Active = 2] = "Active", u2))(ie$1 || {});
let Ee = defineComponent({ name: "RadioGroupOption", props: { as: { type: [Object, String], default: "div" }, value: { type: [Object, String, Number, Boolean] }, disabled: { type: Boolean, default: false }, id: { type: String, default: () => `headlessui-radiogroup-option-${t$4()}` } }, setup(t2, { attrs: c2, slots: u2, expose: E3 }) {
  let d2 = H$1("RadioGroupOption"), s3 = K({ name: "RadioGroupLabel" }), i2 = M$2({ name: "RadioGroupDescription" }), R2 = ref(null), w2 = computed(() => ({ value: t2.value, disabled: t2.disabled })), f2 = ref(1);
  E3({ el: R2, $el: R2 });
  let S2 = computed(() => o$2(R2));
  onMounted(() => d2.registerOption({ id: t2.id, element: S2, propsRef: w2 })), onUnmounted(() => d2.unregisterOption(t2.id));
  let p2 = computed(() => {
    var r2;
    return ((r2 = d2.firstOption.value) == null ? void 0 : r2.id) === t2.id;
  }), m2 = computed(() => d2.disabled.value || t2.disabled), v3 = computed(() => d2.compare(toRaw(d2.value.value), toRaw(t2.value))), e2 = computed(() => m2.value ? -1 : v3.value || !d2.containsCheckedOption.value && p2.value ? 0 : -1);
  function a2() {
    var r2;
    d2.change(t2.value) && (f2.value |= 2, (r2 = o$2(R2)) == null || r2.focus());
  }
  function n2() {
    f2.value |= 2;
  }
  function l2() {
    f2.value &= -3;
  }
  return () => {
    let { id: r2, value: b3, disabled: T3, ...G3 } = t2, N3 = { checked: v3.value, disabled: m2.value, active: Boolean(f2.value & 2) }, K2 = { id: r2, ref: R2, role: "radio", "aria-checked": v3.value ? "true" : "false", "aria-labelledby": s3.value, "aria-describedby": i2.value, "aria-disabled": m2.value ? true : void 0, tabIndex: e2.value, onClick: m2.value ? void 0 : a2, onFocus: m2.value ? void 0 : n2, onBlur: m2.value ? void 0 : l2 };
    return H$4({ ourProps: K2, theirProps: G3, slot: N3, attrs: c2, slots: u2, name: "RadioGroupOption" });
  };
} }), we = T;
let S$1 = Symbol("GroupContext"), ue = defineComponent({ name: "Switch", emits: { "update:modelValue": (l2) => true }, props: { as: { type: [Object, String], default: "button" }, modelValue: { type: Boolean, default: void 0 }, defaultChecked: { type: Boolean, optional: true }, form: { type: String, optional: true }, name: { type: String, optional: true }, value: { type: String, optional: true }, id: { type: String, default: () => `headlessui-switch-${t$4()}` } }, inheritAttrs: false, setup(l2, { emit: p2, attrs: a2, slots: o2, expose: f2 }) {
  let t2 = inject(S$1, null), [i2, r2] = d$7(computed(() => l2.modelValue), (e2) => p2("update:modelValue", e2), computed(() => l2.defaultChecked));
  function s3() {
    r2(!i2.value);
  }
  let w2 = ref(null), u2 = t2 === null ? w2 : t2.switchRef, g2 = b(computed(() => ({ as: l2.as, type: a2.type })), u2);
  f2({ el: u2, $el: u2 });
  function k2(e2) {
    e2.preventDefault(), s3();
  }
  function C2(e2) {
    e2.key === o$3.Space ? (e2.preventDefault(), s3()) : e2.key === o$3.Enter && p$4(e2.currentTarget);
  }
  function E3(e2) {
    e2.preventDefault();
  }
  let c2 = computed(() => {
    var e2, n2;
    return (n2 = (e2 = o$2(u2)) == null ? void 0 : e2.closest) == null ? void 0 : n2.call(e2, "form");
  });
  return onMounted(() => {
    watch([c2], () => {
      if (!c2.value || l2.defaultChecked === void 0)
        return;
      function e2() {
        r2(l2.defaultChecked);
      }
      return c2.value.addEventListener("reset", e2), () => {
        var n2;
        (n2 = c2.value) == null || n2.removeEventListener("reset", e2);
      };
    }, { immediate: true });
  }), () => {
    let { id: e2, name: n2, value: L2, form: D2, ...R2 } = l2, K2 = { checked: i2.value }, x2 = { id: e2, ref: u2, role: "switch", type: g2.value, tabIndex: 0, "aria-checked": i2.value, "aria-labelledby": t2 == null ? void 0 : t2.labelledby.value, "aria-describedby": t2 == null ? void 0 : t2.describedby.value, onClick: k2, onKeyup: C2, onKeypress: E3 };
    return h$3(Fragment, [n2 != null && i2.value != null ? h$3(f$3, K$1({ features: a$4.Hidden, as: "input", type: "checkbox", hidden: true, readOnly: true, checked: i2.value, form: D2, name: n2, value: L2 })) : null, H$4({ ourProps: x2, theirProps: { ...a2, ...T$2(R2, ["modelValue", "defaultChecked"]) }, slot: K2, attrs: a2, slots: o2, name: "Switch" })]);
  };
} });
let d$3 = defineComponent({ props: { onFocus: { type: Function, required: true } }, setup(t2) {
  let n2 = ref(true);
  return () => n2.value ? h$3(f$3, { as: "button", type: "button", features: a$4.Focusable, onFocus(o2) {
    o2.preventDefault();
    let e2, a2 = 50;
    function r2() {
      var u2;
      if (a2-- <= 0) {
        e2 && cancelAnimationFrame(e2);
        return;
      }
      if ((u2 = t2.onFocus) != null && u2.call(t2)) {
        n2.value = false, cancelAnimationFrame(e2);
        return;
      }
      e2 = requestAnimationFrame(r2);
    }
    e2 = requestAnimationFrame(r2);
  } }) : null;
} });
var te$2 = ((i2) => (i2[i2.Forwards = 0] = "Forwards", i2[i2.Backwards = 1] = "Backwards", i2))(te$2 || {}), le$1 = ((s3) => (s3[s3.Less = -1] = "Less", s3[s3.Equal = 0] = "Equal", s3[s3.Greater = 1] = "Greater", s3))(le$1 || {});
let U$1 = Symbol("TabsContext");
function k$1(a2) {
  let v3 = inject(U$1, null);
  if (v3 === null) {
    let i2 = new Error(`<${a2} /> is missing a parent <TabGroup /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(i2, k$1), i2;
  }
  return v3;
}
let j$1 = Symbol("TabsSSRContext"), xe = defineComponent({ name: "TabGroup", emits: { change: (a2) => true }, props: { as: { type: [Object, String], default: "template" }, selectedIndex: { type: [Number], default: null }, defaultIndex: { type: [Number], default: 0 }, vertical: { type: [Boolean], default: false }, manual: { type: [Boolean], default: false } }, inheritAttrs: false, setup(a2, { slots: v3, attrs: i2, emit: s3 }) {
  var h2;
  let l2 = ref((h2 = a2.selectedIndex) != null ? h2 : a2.defaultIndex), n2 = ref([]), o2 = ref([]), T3 = computed(() => a2.selectedIndex !== null), b3 = computed(() => T3.value ? a2.selectedIndex : l2.value);
  function m2(t2) {
    var S2;
    let e2 = O(r2.tabs.value, o$2), u2 = O(r2.panels.value, o$2), f2 = e2.filter((p2) => {
      var E3;
      return !((E3 = o$2(p2)) != null && E3.hasAttribute("disabled"));
    });
    if (t2 < 0 || t2 > e2.length - 1) {
      let p2 = u$4(l2.value === null ? 0 : Math.sign(t2 - l2.value), { [-1]: () => 1, [0]: () => u$4(Math.sign(t2), { [-1]: () => 0, [0]: () => 0, [1]: () => 1 }), [1]: () => 0 });
      l2.value = u$4(p2, { [0]: () => e2.indexOf(f2[0]), [1]: () => e2.indexOf(f2[f2.length - 1]) }), r2.tabs.value = e2, r2.panels.value = u2;
    } else {
      let p2 = e2.slice(0, t2), G3 = [...e2.slice(t2), ...p2].find((W3) => f2.includes(W3));
      if (!G3)
        return;
      let B2 = (S2 = e2.indexOf(G3)) != null ? S2 : r2.selectedIndex.value;
      B2 === -1 && (B2 = r2.selectedIndex.value), l2.value = B2, r2.tabs.value = e2, r2.panels.value = u2;
    }
  }
  let r2 = { selectedIndex: computed(() => {
    var t2, e2;
    return (e2 = (t2 = l2.value) != null ? t2 : a2.defaultIndex) != null ? e2 : null;
  }), orientation: computed(() => a2.vertical ? "vertical" : "horizontal"), activation: computed(() => a2.manual ? "manual" : "auto"), tabs: n2, panels: o2, setSelectedIndex(t2) {
    b3.value !== t2 && s3("change", t2), T3.value || m2(t2);
  }, registerTab(t2) {
    var f2;
    if (n2.value.includes(t2))
      return;
    let e2 = n2.value[l2.value];
    n2.value.push(t2), n2.value = O(n2.value, o$2);
    let u2 = (f2 = n2.value.indexOf(e2)) != null ? f2 : l2.value;
    u2 !== -1 && (l2.value = u2);
  }, unregisterTab(t2) {
    let e2 = n2.value.indexOf(t2);
    e2 !== -1 && n2.value.splice(e2, 1);
  }, registerPanel(t2) {
    o2.value.includes(t2) || (o2.value.push(t2), o2.value = O(o2.value, o$2));
  }, unregisterPanel(t2) {
    let e2 = o2.value.indexOf(t2);
    e2 !== -1 && o2.value.splice(e2, 1);
  } };
  provide(U$1, r2);
  let R2 = ref({ tabs: [], panels: [] }), y2 = ref(false);
  onMounted(() => {
    y2.value = true;
  }), provide(j$1, computed(() => y2.value ? null : R2.value));
  let w2 = computed(() => a2.selectedIndex);
  return onMounted(() => {
    watch([w2], () => {
      var t2;
      return m2((t2 = a2.selectedIndex) != null ? t2 : a2.defaultIndex);
    }, { immediate: true });
  }), watchEffect(() => {
    if (!T3.value || b3.value == null || r2.tabs.value.length <= 0)
      return;
    let t2 = O(r2.tabs.value, o$2);
    t2.some((u2, f2) => o$2(r2.tabs.value[f2]) !== o$2(u2)) && r2.setSelectedIndex(t2.findIndex((u2) => o$2(u2) === o$2(r2.tabs.value[b3.value])));
  }), () => {
    let t2 = { selectedIndex: l2.value };
    return h$3(Fragment, [n2.value.length <= 0 && h$3(d$3, { onFocus: () => {
      for (let e2 of n2.value) {
        let u2 = o$2(e2);
        if ((u2 == null ? void 0 : u2.tabIndex) === 0)
          return u2.focus(), true;
      }
      return false;
    } }), H$4({ theirProps: { ...i2, ...T$2(a2, ["selectedIndex", "defaultIndex", "manual", "vertical", "onChange"]) }, ourProps: {}, slot: t2, slots: v3, attrs: i2, name: "TabGroup" })]);
  };
} }), Ie$1 = defineComponent({ name: "TabList", props: { as: { type: [Object, String], default: "div" } }, setup(a2, { attrs: v3, slots: i2 }) {
  let s3 = k$1("TabList");
  return () => {
    let l2 = { selectedIndex: s3.selectedIndex.value }, n2 = { role: "tablist", "aria-orientation": s3.orientation.value };
    return H$4({ ourProps: n2, theirProps: a2, slot: l2, attrs: v3, slots: i2, name: "TabList" });
  };
} }), ye = defineComponent({ name: "Tab", props: { as: { type: [Object, String], default: "button" }, disabled: { type: [Boolean], default: false }, id: { type: String, default: () => `headlessui-tabs-tab-${t$4()}` } }, setup(a2, { attrs: v3, slots: i2, expose: s3 }) {
  let l2 = k$1("Tab"), n2 = ref(null);
  s3({ el: n2, $el: n2 }), onMounted(() => l2.registerTab(n2)), onUnmounted(() => l2.unregisterTab(n2));
  let o2 = inject(j$1), T3 = computed(() => {
    if (o2.value) {
      let e2 = o2.value.tabs.indexOf(a2.id);
      return e2 === -1 ? o2.value.tabs.push(a2.id) - 1 : e2;
    }
    return -1;
  }), b$12 = computed(() => {
    let e2 = l2.tabs.value.indexOf(n2);
    return e2 === -1 ? T3.value : e2;
  }), m2 = computed(() => b$12.value === l2.selectedIndex.value);
  function r2(e2) {
    var f2;
    let u2 = e2();
    if (u2 === T$1.Success && l2.activation.value === "auto") {
      let S2 = (f2 = m$4(n2)) == null ? void 0 : f2.activeElement, p2 = l2.tabs.value.findIndex((E3) => o$2(E3) === S2);
      p2 !== -1 && l2.setSelectedIndex(p2);
    }
    return u2;
  }
  function R2(e2) {
    let u2 = l2.tabs.value.map((S2) => o$2(S2)).filter(Boolean);
    if (e2.key === o$3.Space || e2.key === o$3.Enter) {
      e2.preventDefault(), e2.stopPropagation(), l2.setSelectedIndex(b$12.value);
      return;
    }
    switch (e2.key) {
      case o$3.Home:
      case o$3.PageUp:
        return e2.preventDefault(), e2.stopPropagation(), r2(() => P$2(u2, N$2.First));
      case o$3.End:
      case o$3.PageDown:
        return e2.preventDefault(), e2.stopPropagation(), r2(() => P$2(u2, N$2.Last));
    }
    if (r2(() => u$4(l2.orientation.value, { vertical() {
      return e2.key === o$3.ArrowUp ? P$2(u2, N$2.Previous | N$2.WrapAround) : e2.key === o$3.ArrowDown ? P$2(u2, N$2.Next | N$2.WrapAround) : T$1.Error;
    }, horizontal() {
      return e2.key === o$3.ArrowLeft ? P$2(u2, N$2.Previous | N$2.WrapAround) : e2.key === o$3.ArrowRight ? P$2(u2, N$2.Next | N$2.WrapAround) : T$1.Error;
    } })) === T$1.Success)
      return e2.preventDefault();
  }
  let y2 = ref(false);
  function w2() {
    var e2;
    y2.value || (y2.value = true, !a2.disabled && ((e2 = o$2(n2)) == null || e2.focus(), l2.setSelectedIndex(b$12.value), t$2(() => {
      y2.value = false;
    })));
  }
  function h2(e2) {
    e2.preventDefault();
  }
  let t2 = b(computed(() => ({ as: a2.as, type: v3.type })), n2);
  return () => {
    var p2;
    let e2 = { selected: m2.value }, { id: u2, ...f2 } = a2, S2 = { ref: n2, onKeydown: R2, onMousedown: h2, onClick: w2, id: u2, role: "tab", type: t2.value, "aria-controls": (p2 = o$2(l2.panels.value[b$12.value])) == null ? void 0 : p2.id, "aria-selected": m2.value, tabIndex: m2.value ? 0 : -1, disabled: a2.disabled ? true : void 0 };
    return H$4({ ourProps: S2, theirProps: f2, slot: e2, attrs: v3, slots: i2, name: "Tab" });
  };
} }), Se$1 = defineComponent({ name: "TabPanels", props: { as: { type: [Object, String], default: "div" } }, setup(a2, { slots: v3, attrs: i2 }) {
  let s3 = k$1("TabPanels");
  return () => {
    let l2 = { selectedIndex: s3.selectedIndex.value };
    return H$4({ theirProps: a2, ourProps: {}, slot: l2, attrs: i2, slots: v3, name: "TabPanels" });
  };
} }), ge$1 = defineComponent({ name: "TabPanel", props: { as: { type: [Object, String], default: "div" }, static: { type: Boolean, default: false }, unmount: { type: Boolean, default: true }, id: { type: String, default: () => `headlessui-tabs-panel-${t$4()}` }, tabIndex: { type: Number, default: 0 } }, setup(a2, { attrs: v3, slots: i2, expose: s3 }) {
  let l2 = k$1("TabPanel"), n2 = ref(null);
  s3({ el: n2, $el: n2 }), onMounted(() => l2.registerPanel(n2)), onUnmounted(() => l2.unregisterPanel(n2));
  let o2 = inject(j$1), T3 = computed(() => {
    if (o2.value) {
      let r2 = o2.value.panels.indexOf(a2.id);
      return r2 === -1 ? o2.value.panels.push(a2.id) - 1 : r2;
    }
    return -1;
  }), b3 = computed(() => {
    let r2 = l2.panels.value.indexOf(n2);
    return r2 === -1 ? T3.value : r2;
  }), m2 = computed(() => b3.value === l2.selectedIndex.value);
  return () => {
    var t2;
    let r2 = { selected: m2.value }, { id: R2, tabIndex: y2, ...w2 } = a2, h2 = { ref: n2, id: R2, role: "tabpanel", "aria-labelledby": (t2 = o$2(l2.tabs.value[b3.value])) == null ? void 0 : t2.id, tabIndex: m2.value ? y2 : -1 };
    return !m2.value && a2.unmount && !a2.static ? h$3(f$3, { as: "span", ...h2 }) : H$4({ ourProps: h2, theirProps: w2, slot: r2, attrs: v3, slots: i2, features: N$3.Static | N$3.RenderStrategy, visible: m2.value, name: "TabPanel" });
  };
} });
function l$1(r2) {
  let e2 = { called: false };
  return (...t2) => {
    if (!e2.called)
      return e2.called = true, r2(...t2);
  };
}
function m$1(e2, ...t2) {
  e2 && t2.length > 0 && e2.classList.add(...t2);
}
function d$2(e2, ...t2) {
  e2 && t2.length > 0 && e2.classList.remove(...t2);
}
var g$2 = ((i2) => (i2.Finished = "finished", i2.Cancelled = "cancelled", i2))(g$2 || {});
function F(e2, t2) {
  let i2 = r$2();
  if (!e2)
    return i2.dispose;
  let { transitionDuration: n2, transitionDelay: a2 } = getComputedStyle(e2), [l2, s3] = [n2, a2].map((o2) => {
    let [u2 = 0] = o2.split(",").filter(Boolean).map((r2) => r2.includes("ms") ? parseFloat(r2) : parseFloat(r2) * 1e3).sort((r2, c2) => c2 - r2);
    return u2;
  });
  return l2 !== 0 ? i2.setTimeout(() => t2("finished"), l2 + s3) : t2("finished"), i2.add(() => t2("cancelled")), i2.dispose;
}
function L$2(e2, t2, i2, n2, a2, l2) {
  let s3 = r$2(), o2 = l2 !== void 0 ? l$1(l2) : () => {
  };
  return d$2(e2, ...a2), m$1(e2, ...t2, ...i2), s3.nextFrame(() => {
    d$2(e2, ...i2), m$1(e2, ...n2), s3.add(F(e2, (u2) => (d$2(e2, ...n2, ...t2), m$1(e2, ...a2), o2(u2))));
  }), s3.add(() => d$2(e2, ...t2, ...i2, ...n2, ...a2)), s3.add(() => o2("cancelled")), s3.dispose;
}
function g$1(e2 = "") {
  return e2.split(" ").filter((t2) => t2.trim().length > 1);
}
let R$2 = Symbol("TransitionContext");
var pe = ((a2) => (a2.Visible = "visible", a2.Hidden = "hidden", a2))(pe || {});
function me() {
  return inject(R$2, null) !== null;
}
function Te() {
  let e2 = inject(R$2, null);
  if (e2 === null)
    throw new Error("A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.");
  return e2;
}
function ge() {
  let e2 = inject(N, null);
  if (e2 === null)
    throw new Error("A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.");
  return e2;
}
let N = Symbol("NestingContext");
function L$1(e2) {
  return "children" in e2 ? L$1(e2.children) : e2.value.filter(({ state: t2 }) => t2 === "visible").length > 0;
}
function Q$1(e2) {
  let t2 = ref([]), a2 = ref(false);
  onMounted(() => a2.value = true), onUnmounted(() => a2.value = false);
  function s3(n2, r2 = S$4.Hidden) {
    let l2 = t2.value.findIndex(({ id: f2 }) => f2 === n2);
    l2 !== -1 && (u$4(r2, { [S$4.Unmount]() {
      t2.value.splice(l2, 1);
    }, [S$4.Hidden]() {
      t2.value[l2].state = "hidden";
    } }), !L$1(t2) && a2.value && (e2 == null || e2()));
  }
  function h2(n2) {
    let r2 = t2.value.find(({ id: l2 }) => l2 === n2);
    return r2 ? r2.state !== "visible" && (r2.state = "visible") : t2.value.push({ id: n2, state: "visible" }), () => s3(n2, S$4.Unmount);
  }
  return { children: t2, register: h2, unregister: s3 };
}
let W$1 = N$3.RenderStrategy, he = defineComponent({ props: { as: { type: [Object, String], default: "div" }, show: { type: [Boolean], default: null }, unmount: { type: [Boolean], default: true }, appear: { type: [Boolean], default: false }, enter: { type: [String], default: "" }, enterFrom: { type: [String], default: "" }, enterTo: { type: [String], default: "" }, entered: { type: [String], default: "" }, leave: { type: [String], default: "" }, leaveFrom: { type: [String], default: "" }, leaveTo: { type: [String], default: "" } }, emits: { beforeEnter: () => true, afterEnter: () => true, beforeLeave: () => true, afterLeave: () => true }, setup(e2, { emit: t2, attrs: a2, slots: s3, expose: h2 }) {
  let n2 = ref(0);
  function r2() {
    n2.value |= l$3.Opening, t2("beforeEnter");
  }
  function l2() {
    n2.value &= ~l$3.Opening, t2("afterEnter");
  }
  function f2() {
    n2.value |= l$3.Closing, t2("beforeLeave");
  }
  function S2() {
    n2.value &= ~l$3.Closing, t2("afterLeave");
  }
  if (!me() && C$3())
    return () => h$3(Se, { ...e2, onBeforeEnter: r2, onAfterEnter: l2, onBeforeLeave: f2, onAfterLeave: S2 }, s3);
  let d2 = ref(null), b3 = computed(() => e2.unmount ? S$4.Unmount : S$4.Hidden);
  h2({ el: d2, $el: d2 });
  let { show: v3, appear: A3 } = Te(), { register: D2, unregister: H2 } = ge(), i2 = ref(v3.value ? "visible" : "hidden"), I2 = { value: true }, c2 = t$4(), y2 = { value: false }, P3 = Q$1(() => {
    !y2.value && i2.value !== "hidden" && (i2.value = "hidden", H2(c2), S2());
  });
  onMounted(() => {
    let o2 = D2(c2);
    onUnmounted(o2);
  }), watchEffect(() => {
    if (b3.value === S$4.Hidden && c2) {
      if (v3.value && i2.value !== "visible") {
        i2.value = "visible";
        return;
      }
      u$4(i2.value, { ["hidden"]: () => H2(c2), ["visible"]: () => D2(c2) });
    }
  });
  let j2 = g$1(e2.enter), M2 = g$1(e2.enterFrom), X2 = g$1(e2.enterTo), _2 = g$1(e2.entered), Y2 = g$1(e2.leave), Z2 = g$1(e2.leaveFrom), ee2 = g$1(e2.leaveTo);
  onMounted(() => {
    watchEffect(() => {
      if (i2.value === "visible") {
        let o2 = o$2(d2);
        if (o2 instanceof Comment && o2.data === "")
          throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
      }
    });
  });
  function te2(o2) {
    let E3 = I2.value && !A3.value, p2 = o$2(d2);
    !p2 || !(p2 instanceof HTMLElement) || E3 || (y2.value = true, v3.value && r2(), v3.value || f2(), o2(v3.value ? L$2(p2, j2, M2, X2, _2, (V2) => {
      y2.value = false, V2 === g$2.Finished && l2();
    }) : L$2(p2, Y2, Z2, ee2, _2, (V2) => {
      y2.value = false, V2 === g$2.Finished && (L$1(P3) || (i2.value = "hidden", H2(c2), S2()));
    })));
  }
  return onMounted(() => {
    watch([v3], (o2, E3, p2) => {
      te2(p2), I2.value = false;
    }, { immediate: true });
  }), provide(N, P3), c$4(computed(() => u$4(i2.value, { ["visible"]: l$3.Open, ["hidden"]: l$3.Closed }) | n2.value)), () => {
    let { appear: o2, show: E3, enter: p2, enterFrom: V2, enterTo: Ce2, entered: be2, leave: ye3, leaveFrom: Ee2, leaveTo: Ve2, ...U2 } = e2, ne2 = { ref: d2 }, re2 = { ...U2, ...A3.value && v3.value && c$3.isServer ? { class: normalizeClass([a2.class, U2.class, ...j2, ...M2]) } : {} };
    return H$4({ theirProps: re2, ourProps: ne2, slot: {}, slots: s3, attrs: a2, features: W$1, visible: i2.value === "visible", name: "TransitionChild" });
  };
} }), ce$1 = he, Se = defineComponent({ inheritAttrs: false, props: { as: { type: [Object, String], default: "div" }, show: { type: [Boolean], default: null }, unmount: { type: [Boolean], default: true }, appear: { type: [Boolean], default: false }, enter: { type: [String], default: "" }, enterFrom: { type: [String], default: "" }, enterTo: { type: [String], default: "" }, entered: { type: [String], default: "" }, leave: { type: [String], default: "" }, leaveFrom: { type: [String], default: "" }, leaveTo: { type: [String], default: "" } }, emits: { beforeEnter: () => true, afterEnter: () => true, beforeLeave: () => true, afterLeave: () => true }, setup(e2, { emit: t2, attrs: a2, slots: s3 }) {
  let h2 = p$6(), n2 = computed(() => e2.show === null && h2 !== null ? (h2.value & l$3.Open) === l$3.Open : e2.show);
  watchEffect(() => {
    if (![true, false].includes(n2.value))
      throw new Error('A <Transition /> is used but it is missing a `:show="true | false"` prop.');
  });
  let r2 = ref(n2.value ? "visible" : "hidden"), l2 = Q$1(() => {
    r2.value = "hidden";
  }), f2 = ref(true), S2 = { show: n2, appear: computed(() => e2.appear || !f2.value) };
  return onMounted(() => {
    watchEffect(() => {
      f2.value = false, n2.value ? r2.value = "visible" : L$1(l2) || (r2.value = "hidden");
    });
  }), provide(N, l2), provide(R$2, S2), () => {
    let d2 = T$2(e2, ["show", "appear", "unmount", "onBeforeEnter", "onBeforeLeave", "onAfterEnter", "onAfterLeave"]), b3 = { unmount: e2.unmount };
    return H$4({ ourProps: { ...b3, as: "template" }, theirProps: {}, slot: {}, slots: { ...s3, default: () => [h$3(ce$1, { onBeforeEnter: () => t2("beforeEnter"), onAfterEnter: () => t2("afterEnter"), onBeforeLeave: () => t2("beforeLeave"), onAfterLeave: () => t2("afterLeave"), ...a2, ...b3, ...d2 }, s3.default)] }, attrs: {}, features: W$1, visible: r2.value === "visible", name: "Transition" });
  };
} });
function r$1(e2) {
  var t2, f2, n2 = "";
  if ("string" == typeof e2 || "number" == typeof e2)
    n2 += e2;
  else if ("object" == typeof e2)
    if (Array.isArray(e2))
      for (t2 = 0; t2 < e2.length; t2++)
        e2[t2] && (f2 = r$1(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
    else
      for (t2 in e2)
        e2[t2] && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
function clsx() {
  for (var e2, t2, f2 = 0, n2 = ""; f2 < arguments.length; )
    (e2 = arguments[f2++]) && (t2 = r$1(e2)) && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
const falsyToString = (value) => typeof value === "boolean" ? "".concat(value) : value === 0 ? "0" : value;
const cx = clsx;
const cva = (base, config2) => {
  return (props) => {
    var ref2;
    if ((config2 === null || config2 === void 0 ? void 0 : config2.variants) == null)
      return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    const { variants, defaultVariants } = config2;
    const getVariantClassNames = Object.keys(variants).map((variant) => {
      const variantProp = props === null || props === void 0 ? void 0 : props[variant];
      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
      if (variantProp === null)
        return null;
      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
      return variants[variant][variantKey];
    });
    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
      let [key, value] = param;
      if (value === void 0) {
        return acc;
      }
      acc[key] = value;
      return acc;
    }, {});
    const getCompoundVariantClassNames = config2 === null || config2 === void 0 ? void 0 : (ref2 = config2.compoundVariants) === null || ref2 === void 0 ? void 0 : ref2.reduce((acc, param1) => {
      let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param1;
      return Object.entries(compoundVariantOptions).every((param) => {
        let [key, value] = param;
        return Array.isArray(value) ? value.includes({
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key]) : {
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key] === value;
      }) ? [
        ...acc,
        cvClass,
        cvClassName
      ] : acc;
    }, []);
    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  };
};
var isVue2 = false;
function tryOnScopeDispose(fn2) {
  if (getCurrentScope()) {
    onScopeDispose(fn2);
    return true;
  }
  return false;
}
function toValue(r2) {
  return typeof r2 === "function" ? r2() : unref(r2);
}
const isClient = typeof window !== "undefined";
const notNullish = (val) => val != null;
const noop$3 = () => {
};
function createFilterWrapper(filter2, fn2) {
  function wrapper(...args) {
    return new Promise((resolve2, reject) => {
      Promise.resolve(filter2(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve2).catch(reject);
    });
  }
  return wrapper;
}
const bypassFilter = (invoke) => {
  return invoke();
};
function debounceFilter(ms2, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop$3;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop$3;
  };
  const filter2 = (invoke) => {
    const duration = toValue(ms2);
    const maxDuration = toValue(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve2, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve2;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve2(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve2(invoke());
      }, duration);
    });
  };
  return filter2;
}
function tryOnMounted(fn2, sync = true) {
  if (getCurrentInstance())
    onMounted(fn2);
  else if (sync)
    fn2();
  else
    nextTick(fn2);
}
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __objRest$5 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchWithFilter(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter = bypassFilter
  } = _a2, watchOptions = __objRest$5(_a2, [
    "eventFilter"
  ]);
  return watch(
    source,
    createFilterWrapper(
      eventFilter,
      cb
    ),
    watchOptions
  );
}
var __defProp$6 = Object.defineProperty;
var __defProps$6 = Object.defineProperties;
var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$6 = (a2, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp$6.call(b3, prop))
      __defNormalProp$6(a2, prop, b3[prop]);
  if (__getOwnPropSymbols$6)
    for (var prop of __getOwnPropSymbols$6(b3)) {
      if (__propIsEnum$6.call(b3, prop))
        __defNormalProp$6(a2, prop, b3[prop]);
    }
  return a2;
};
var __spreadProps$6 = (a2, b3) => __defProps$6(a2, __getOwnPropDescs$6(b3));
var __objRest$3 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$6.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$6)
    for (var prop of __getOwnPropSymbols$6(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$6.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchDebounced(source, cb, options = {}) {
  const _a2 = options, {
    debounce = 0,
    maxWait = void 0
  } = _a2, watchOptions = __objRest$3(_a2, [
    "debounce",
    "maxWait"
  ]);
  return watchWithFilter(
    source,
    cb,
    __spreadProps$6(__spreadValues$6({}, watchOptions), {
      eventFilter: debounceFilter(debounce, { maxWait })
    })
  );
}
function unrefElement(elRef) {
  var _a2;
  const plain = toValue(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow = isClient ? window : void 0;
function useEventListener(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (typeof args[0] === "string" || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop$3;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register = (el2, event, listener, options2) => {
    el2.addEventListener(event, listener, options2);
    return () => el2.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch(
    () => [unrefElement(target), toValue(options)],
    ([el2, options2]) => {
      cleanup();
      if (!el2)
        return;
      cleanups.push(
        ...events.flatMap((event) => {
          return listeners.map((listener) => register(el2, event, listener, options2));
        })
      );
    },
    { immediate: true, flush: "post" }
  );
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return stop;
}
function createKeyPredicate(keyFilter) {
  if (typeof keyFilter === "function")
    return keyFilter;
  else if (typeof keyFilter === "string")
    return (event) => event.key === keyFilter;
  else if (Array.isArray(keyFilter))
    return (event) => keyFilter.includes(event.key);
  return () => true;
}
function onKeyStroke(...args) {
  let key;
  let handler;
  let options = {};
  if (args.length === 3) {
    key = args[0];
    handler = args[1];
    options = args[2];
  } else if (args.length === 2) {
    if (typeof args[1] === "object") {
      key = true;
      handler = args[0];
      options = args[1];
    } else {
      key = args[0];
      handler = args[1];
    }
  } else {
    key = true;
    handler = args[0];
  }
  const {
    target = defaultWindow,
    eventName = "keydown",
    passive = false,
    dedupe = false
  } = options;
  const predicate = createKeyPredicate(key);
  const listener = (e2) => {
    if (e2.repeat && toValue(dedupe))
      return;
    if (predicate(e2))
      handler(e2);
  };
  return useEventListener(target, eventName, listener, passive);
}
function useMounted() {
  const isMounted = ref(false);
  if (getCurrentInstance()) {
    onMounted(() => {
      isMounted.value = true;
    });
  }
  return isMounted;
}
function useSupported(callback) {
  const isMounted = useMounted();
  return computed(() => {
    isMounted.value;
    return Boolean(callback());
  });
}
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$g.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$g)
    for (var prop of __getOwnPropSymbols$g(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$g.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const targets = computed(
    () => Array.isArray(target) ? target.map((el2) => unrefElement(el2)) : [unrefElement(target)]
  );
  const stopWatch = watch(
    targets,
    (els) => {
      cleanup();
      if (isSupported2.value && window2) {
        observer = new ResizeObserver(callback);
        for (const _el of els)
          _el && observer.observe(_el, observerOptions);
      }
    },
    { immediate: true, flush: "post", deep: true }
  );
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported: isSupported2,
    stop
  };
}
function useElementBounding(target, options = {}) {
  const {
    reset = true,
    windowResize = true,
    windowScroll = true,
    immediate = true
  } = options;
  const height = ref(0);
  const bottom = ref(0);
  const left = ref(0);
  const right = ref(0);
  const top = ref(0);
  const width = ref(0);
  const x2 = ref(0);
  const y2 = ref(0);
  function update() {
    const el2 = unrefElement(target);
    if (!el2) {
      if (reset) {
        height.value = 0;
        bottom.value = 0;
        left.value = 0;
        right.value = 0;
        top.value = 0;
        width.value = 0;
        x2.value = 0;
        y2.value = 0;
      }
      return;
    }
    const rect = el2.getBoundingClientRect();
    height.value = rect.height;
    bottom.value = rect.bottom;
    left.value = rect.left;
    right.value = rect.right;
    top.value = rect.top;
    width.value = rect.width;
    x2.value = rect.x;
    y2.value = rect.y;
  }
  useResizeObserver(target, update);
  watch(() => unrefElement(target), (ele) => !ele && update());
  if (windowScroll)
    useEventListener("scroll", update, { capture: true, passive: true });
  if (windowResize)
    useEventListener("resize", update, { passive: true });
  tryOnMounted(() => {
    if (immediate)
      update();
  });
  return {
    height,
    bottom,
    left,
    right,
    top,
    width,
    x: x2,
    y: y2,
    update
  };
}
function useElementHover(el2, options = {}) {
  const {
    delayEnter = 0,
    delayLeave = 0,
    window: window2 = defaultWindow
  } = options;
  const isHovered = ref(false);
  let timer;
  const toggle = (entering) => {
    const delay = entering ? delayEnter : delayLeave;
    if (timer) {
      clearTimeout(timer);
      timer = void 0;
    }
    if (delay)
      timer = setTimeout(() => isHovered.value = entering, delay);
    else
      isHovered.value = entering;
  };
  if (!window2)
    return isHovered;
  useEventListener(el2, "mouseenter", () => toggle(true), { passive: true });
  useEventListener(el2, "mouseleave", () => toggle(false), { passive: true });
  return isHovered;
}
function useIntersectionObserver(target, callback, options = {}) {
  const {
    root,
    rootMargin = "0px",
    threshold = 0.1,
    window: window2 = defaultWindow,
    immediate = true
  } = options;
  const isSupported2 = useSupported(() => window2 && "IntersectionObserver" in window2);
  const targets = computed(() => {
    const _target = toValue(target);
    return (Array.isArray(_target) ? _target : [_target]).map(unrefElement).filter(notNullish);
  });
  let cleanup = noop$3;
  const isActive = ref(immediate);
  const stopWatch = isSupported2.value ? watch(
    () => [targets.value, unrefElement(root), isActive.value],
    ([targets2, root2]) => {
      cleanup();
      if (!isActive.value)
        return;
      if (!targets2.length)
        return;
      const observer = new IntersectionObserver(
        callback,
        {
          root: unrefElement(root2),
          rootMargin,
          threshold
        }
      );
      targets2.forEach((el2) => el2 && observer.observe(el2));
      cleanup = () => {
        observer.disconnect();
        cleanup = noop$3;
      };
    },
    { immediate, flush: "post" }
  ) : noop$3;
  const stop = () => {
    cleanup();
    stopWatch();
    isActive.value = false;
  };
  tryOnScopeDispose(stop);
  return {
    isSupported: isSupported2,
    isActive,
    pause() {
      cleanup();
      isActive.value = false;
    },
    resume() {
      isActive.value = true;
    },
    stop
  };
}
function useElementVisibility(element, { window: window2 = defaultWindow, scrollTarget } = {}) {
  const elementIsVisible = ref(false);
  useIntersectionObserver(
    element,
    ([{ isIntersecting }]) => {
      elementIsVisible.value = isIntersecting;
    },
    {
      root: scrollTarget,
      window: window2
    }
  );
  return elementIsVisible;
}
function useFocus(target, options = {}) {
  const { initialValue = false } = options;
  const innerFocused = ref(false);
  const targetElement = computed(() => unrefElement(target));
  useEventListener(targetElement, "focus", () => innerFocused.value = true);
  useEventListener(targetElement, "blur", () => innerFocused.value = false);
  const focused = computed({
    get: () => innerFocused.value,
    set(value) {
      var _a2, _b;
      if (!value && innerFocused.value)
        (_a2 = targetElement.value) == null ? void 0 : _a2.blur();
      else if (value && !innerFocused.value)
        (_b = targetElement.value) == null ? void 0 : _b.focus();
    }
  });
  watch(
    targetElement,
    () => {
      focused.value = initialValue;
    },
    { immediate: true, flush: "post" }
  );
  return { focused };
}
const BuiltinExtractors = {
  page: (event) => [event.pageX, event.pageY],
  client: (event) => [event.clientX, event.clientY],
  screen: (event) => [event.screenX, event.screenY],
  movement: (event) => event instanceof Touch ? null : [event.movementX, event.movementY]
};
function useMouse(options = {}) {
  const {
    type = "page",
    touch = true,
    resetOnTouchEnds = false,
    initialValue = { x: 0, y: 0 },
    window: window2 = defaultWindow,
    target = window2,
    eventFilter
  } = options;
  const x2 = ref(initialValue.x);
  const y2 = ref(initialValue.y);
  const sourceType = ref(null);
  const extractor = typeof type === "function" ? type : BuiltinExtractors[type];
  const mouseHandler = (event) => {
    const result = extractor(event);
    if (result) {
      [x2.value, y2.value] = result;
      sourceType.value = "mouse";
    }
  };
  const touchHandler = (event) => {
    if (event.touches.length > 0) {
      const result = extractor(event.touches[0]);
      if (result) {
        [x2.value, y2.value] = result;
        sourceType.value = "touch";
      }
    }
  };
  const reset = () => {
    x2.value = initialValue.x;
    y2.value = initialValue.y;
  };
  const mouseHandlerWrapper = eventFilter ? (event) => eventFilter(() => mouseHandler(event), {}) : (event) => mouseHandler(event);
  const touchHandlerWrapper = eventFilter ? (event) => eventFilter(() => touchHandler(event), {}) : (event) => touchHandler(event);
  if (target) {
    useEventListener(target, "mousemove", mouseHandlerWrapper, { passive: true });
    useEventListener(target, "dragover", mouseHandlerWrapper, { passive: true });
    if (touch && type !== "movement") {
      useEventListener(target, "touchstart", touchHandlerWrapper, { passive: true });
      useEventListener(target, "touchmove", touchHandlerWrapper, { passive: true });
      if (resetOnTouchEnds)
        useEventListener(target, "touchend", reset, { passive: true });
    }
  }
  return {
    x: x2,
    y: y2,
    sourceType
  };
}
function useMouseInElement(target, options = {}) {
  const {
    handleOutside = true,
    window: window2 = defaultWindow
  } = options;
  const { x: x2, y: y2, sourceType } = useMouse(options);
  const targetRef = ref(target != null ? target : window2 == null ? void 0 : window2.document.body);
  const elementX = ref(0);
  const elementY = ref(0);
  const elementPositionX = ref(0);
  const elementPositionY = ref(0);
  const elementHeight = ref(0);
  const elementWidth = ref(0);
  const isOutside = ref(true);
  let stop = () => {
  };
  if (window2) {
    stop = watch(
      [targetRef, x2, y2],
      () => {
        const el2 = unrefElement(targetRef);
        if (!el2)
          return;
        const {
          left,
          top,
          width,
          height
        } = el2.getBoundingClientRect();
        elementPositionX.value = left + window2.pageXOffset;
        elementPositionY.value = top + window2.pageYOffset;
        elementHeight.value = height;
        elementWidth.value = width;
        const elX = x2.value - elementPositionX.value;
        const elY = y2.value - elementPositionY.value;
        isOutside.value = width === 0 || height === 0 || elX < 0 || elY < 0 || elX > width || elY > height;
        if (handleOutside || !isOutside.value) {
          elementX.value = elX;
          elementY.value = elY;
        }
      },
      { immediate: true }
    );
    useEventListener(document, "mouseleave", () => {
      isOutside.value = true;
    });
  }
  return {
    x: x2,
    y: y2,
    sourceType,
    elementX,
    elementY,
    elementPositionX,
    elementPositionY,
    elementHeight,
    elementWidth,
    isOutside,
    stop
  };
}
function useMousePressed(options = {}) {
  const {
    touch = true,
    drag = true,
    initialValue = false,
    window: window2 = defaultWindow
  } = options;
  const pressed = ref(initialValue);
  const sourceType = ref(null);
  if (!window2) {
    return {
      pressed,
      sourceType
    };
  }
  const onPressed = (srcType) => () => {
    pressed.value = true;
    sourceType.value = srcType;
  };
  const onReleased = () => {
    pressed.value = false;
    sourceType.value = null;
  };
  const target = computed(() => unrefElement(options.target) || window2);
  useEventListener(target, "mousedown", onPressed("mouse"), { passive: true });
  useEventListener(window2, "mouseleave", onReleased, { passive: true });
  useEventListener(window2, "mouseup", onReleased, { passive: true });
  if (drag) {
    useEventListener(target, "dragstart", onPressed("mouse"), { passive: true });
    useEventListener(window2, "drop", onReleased, { passive: true });
    useEventListener(window2, "dragend", onReleased, { passive: true });
  }
  if (touch) {
    useEventListener(target, "touchstart", onPressed("touch"), { passive: true });
    useEventListener(window2, "touchend", onReleased, { passive: true });
    useEventListener(window2, "touchcancel", onReleased, { passive: true });
  }
  return {
    pressed,
    sourceType
  };
}
function getDevtoolsGlobalHook$1() {
  return getTarget$1().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget$1() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable$1 = typeof Proxy === "function";
const HOOK_SETUP$1 = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET$1 = "plugin:settings:set";
let supported$1;
let perf$1;
function isPerformanceSupported$1() {
  var _a2;
  if (supported$1 !== void 0) {
    return supported$1;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$1 = true;
    perf$1 = window.performance;
  } else if (typeof global !== "undefined" && ((_a2 = global.perf_hooks) === null || _a2 === void 0 ? void 0 : _a2.performance)) {
    supported$1 = true;
    perf$1 = global.perf_hooks.performance;
  } else {
    supported$1 = false;
  }
  return supported$1;
}
function now$1() {
  return isPerformanceSupported$1() ? perf$1.now() : Date.now();
}
let ApiProxy$1 = class ApiProxy3 {
  constructor(plugin2, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin2;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin2.settings) {
      for (const id2 in plugin2.settings) {
        const item = plugin2.settings[id2];
        defaultSettings[id2] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin2.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e2) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e2) {
        }
        currentSettings = value;
      },
      now() {
        return now$1();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET$1, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
};
function setupDevtoolsPlugin$1(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget$1();
  const hook = getDevtoolsGlobalHook$1();
  const enableProxy = isProxyAvailable$1 && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP$1, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy$1(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy)
      setupFn(proxy.proxiedTarget);
  }
}
/*!
  * vue-router v4.2.2
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign$2 = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray$2(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop$2 = () => {
};
const isArray$2 = Array.isArray;
function warn$1(msg) {
  const args = Array.from(arguments).slice(1);
  console.warn.apply(console, ["[Vue Router warn]: " + msg].concat(args));
}
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a2, b3) {
  const aLastIndex = a2.matched.length - 1;
  const bLastIndex = b3.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a2.matched[aLastIndex], b3.matched[bLastIndex]) && isSameRouteLocationParams(a2.params, b3.params) && stringifyQuery2(a2.query) === stringifyQuery2(b3.query) && a2.hash === b3.hash;
}
function isSameRouteRecord(a2, b3) {
  return (a2.aliasOf || a2) === (b3.aliasOf || b3);
}
function isSameRouteLocationParams(a2, b3) {
  if (Object.keys(a2).length !== Object.keys(b3).length)
    return false;
  for (const key in a2) {
    if (!isSameRouteLocationParamsValue(a2[key], b3[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a2, b3) {
  return isArray$2(a2) ? isEquivalentArray(a2, b3) : isArray$2(b3) ? isEquivalentArray(b3, a2) : a2 === b3;
}
function isEquivalentArray(a2, b3) {
  return isArray$2(b3) ? a2.length === b3.length && a2.every((value, i2) => value === b3[i2]) : a2.length === 1 && a2[0] === b3;
}
function resolveRelativePath(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!from.startsWith("/")) {
    warn$1(`Cannot resolve a relative location without an absolute path. Trying to resolve "${to2}" from "${from}". It should look like "/${from}".`);
    return to2;
  }
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  const lastToSegment = toSegments[toSegments.length - 1];
  if (lastToSegment === ".." || lastToSegment === ".") {
    toSegments.push("");
  }
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el2, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el2.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    if (typeof position.el === "string") {
      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {
        try {
          const foundEl = document.querySelector(position.el);
          if (isIdSelector && foundEl) {
            warn$1(`The selector "${position.el}" should be passed as "el: document.querySelector('${position.el}')" because it starts with "#".`);
            return;
          }
        } catch (err) {
          warn$1(`The selector "${position.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);
          return;
        }
      }
    }
    const el2 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el2) {
      warn$1(`Couldn't find element using selector "${position.el}" returned by scrollBehavior.`);
      return;
    }
    scrollToOptions = getElementPosition(el2, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search: search2, hash: hash2 } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search2 + hash2;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign$2({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener, {
    passive: true
  });
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        warn$1("Error with push/replace State", err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign$2({}, history2.state, buildState(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign$2(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition()
      }
    );
    if (!history2.state) {
      warn$1(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:

history.replaceState(history.state, '', url)

You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);
    }
    changeLocation(currentState.current, currentState, true);
    const state = assign$2({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign$2({
    // it's overridden right after
    location: "",
    base,
    go: go2,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = Symbol("navigation failure");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
const ErrorTypeMessages = {
  [
    1
    /* ErrorTypes.MATCHER_NOT_FOUND */
  ]({ location: location2, currentLocation }) {
    return `No match for
 ${JSON.stringify(location2)}${currentLocation ? "\nwhile being at\n" + JSON.stringify(currentLocation) : ""}`;
  },
  [
    2
    /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
  ]({ from, to: to2 }) {
    return `Redirected from "${from.fullPath}" to "${stringifyRoute(to2)}" via a navigation guard.`;
  },
  [
    4
    /* ErrorTypes.NAVIGATION_ABORTED */
  ]({ from, to: to2 }) {
    return `Navigation aborted from "${from.fullPath}" to "${to2.fullPath}" via a navigation guard.`;
  },
  [
    8
    /* ErrorTypes.NAVIGATION_CANCELLED */
  ]({ from, to: to2 }) {
    return `Navigation cancelled from "${from.fullPath}" to "${to2.fullPath}" with a new navigation.`;
  },
  [
    16
    /* ErrorTypes.NAVIGATION_DUPLICATED */
  ]({ from, to: to2 }) {
    return `Avoided redundant navigation to current location: "${from.fullPath}".`;
  }
};
function createRouterError(type, params) {
  {
    return assign$2(new Error(ErrorTypeMessages[type](params)), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error, type) {
  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));
}
const propertiesToLog = ["params", "query", "hash"];
function stringifyRoute(to2) {
  if (typeof to2 === "string")
    return to2;
  if ("path" in to2)
    return to2.path;
  const location2 = {};
  for (const key of propertiesToLog) {
    if (key in to2)
      location2[key] = to2[key];
  }
  return JSON.stringify(location2, null, 2);
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign$2({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re3 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re3 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re3})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re3}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re3})(?:/(?:${re3}))*)` : `(${re3})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re3 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i2 = score.length - 1;
    score[i2][score[i2].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re2 = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse2(path) {
    const match = path.match(re2);
    const params = {};
    if (!match)
      return null;
    for (let i2 = 1; i2 < match.length; i2++) {
      const value = match[i2] || "";
      const key = keys[i2 - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray$2(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray$2(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re: re2,
    score,
    keys,
    parse: parse2,
    stringify
  };
}
function compareScoreArray(a2, b3) {
  let i2 = 0;
  while (i2 < a2.length && i2 < b3.length) {
    const diff = b3[i2] - a2[i2];
    if (diff)
      return diff;
    i2++;
  }
  if (a2.length < b3.length) {
    return a2.length === 1 && a2[0] === 40 + 40 ? -1 : 1;
  } else if (a2.length > b3.length) {
    return b3.length === 1 && b3[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a2, b3) {
  let i2 = 0;
  const aScore = a2.score;
  const bScore = b3.score;
  while (i2 < aScore.length && i2 < bScore.length) {
    const comp = compareScoreArray(aScore[i2], bScore[i2]);
    if (comp)
      return comp;
    i2++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(
      `Route paths should start with a "/": "${path}" should be "/${path}".`
    );
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer2}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i2 = 0;
  let char;
  let buffer2 = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer2)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer2
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer2}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer2,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer2 = "";
  }
  function addCharToBuffer() {
    buffer2 += char;
  }
  while (i2 < path.length) {
    char = path[i2++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer2) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i2--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i2--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer2}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  {
    const existingKeys = /* @__PURE__ */ new Set();
    for (const key of parser.keys) {
      if (existingKeys.has(key.name))
        warn$1(`Found duplicated params with name "${key.name}" for path "${record.path}". Only the last one will be available on "$route.params".`);
      existingKeys.add(key.name);
    }
  }
  const matcher = assign$2(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes2, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    {
      checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent);
    }
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign$2({}, mainNormalizedRecord, {
          // this allows us to hold a copy of the `components` option
          // so that async components cache is hold on the original record
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          // we might be the child of an alias
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
          // the aliases are always of the same kind as the original since they
          // are defined on the same record
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      if (normalizedRecord.path === "*") {
        throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (parent && path[0] === "/")
        checkMissingParamsInAbsolutePath(matcher, parent);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
        {
          checkSameParams(originalRecord, matcher);
        }
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i2 = 0; i2 < children.length; i2++) {
          addRoute(children[i2], matcher, originalRecord && originalRecord.children[i2]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop$2;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i2 = 0;
    while (i2 < matchers.length && comparePathParserScore(matcher, matchers[i2]) >= 0 && // Adding children with empty path should still appear before the parent
    // https://github.com/vuejs/router/issues/1124
    (matcher.record.path !== matchers[i2].record.path || !isRecordChildOf(matcher, matchers[i2])))
      i2++;
    matchers.splice(i2, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      {
        const invalidParams = Object.keys(location2.params || {}).filter((paramName) => !matcher.keys.find((k2) => k2.name === paramName));
        if (invalidParams.length) {
          warn$1(`Discarded invalid param(s) "${invalidParams.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`);
        }
      }
      name = matcher.record.name;
      params = assign$2(
        // paramsFromLocation is a new object
        paramsFromLocation(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // TODO: only keep optional params coming from a parent record
          matcher.keys.filter((k2) => !k2.optional).map((k2) => k2.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k2) => k2.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      if (!path.startsWith("/")) {
        warn$1(`The Matcher cannot resolve relative paths but received "${path}". Unless you directly called \`matcher.resolve("${path}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`);
      }
      matcher = matchers.find((m2) => m2.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m2) => m2.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign$2({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "boolean" ? props : props[name];
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign$2(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isSameParam(a2, b3) {
  return a2.name === b3.name && a2.optional === b3.optional && a2.repeatable === b3.repeatable;
}
function checkSameParams(a2, b3) {
  for (const key of a2.keys) {
    if (!key.optional && !b3.keys.find(isSameParam.bind(null, key)))
      return warn$1(`Alias "${b3.record.path}" and the original record: "${a2.record.path}" must have the exact same param named "${key.name}"`);
  }
  for (const key of b3.keys) {
    if (!key.optional && !a2.keys.find(isSameParam.bind(null, key)))
      return warn$1(`Alias "${b3.record.path}" and the original record: "${a2.record.path}" must have the exact same param named "${key.name}"`);
  }
}
function checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent) {
  if (parent && parent.record.name && !mainNormalizedRecord.name && !mainNormalizedRecord.path) {
    warn$1(`The route named "${String(parent.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);
  }
}
function checkMissingParamsInAbsolutePath(record, parent) {
  for (const key of parent.keys) {
    if (!record.keys.find(isSameParam.bind(null, key)))
      return warn$1(`Absolute path "${record.record.path}" must have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
  }
}
function isRecordChildOf(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf(record, child));
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
    warn$1(`Error decoding "${text}". Using original value`);
  }
  return "" + text;
}
function parseQuery(search2) {
  const query = {};
  if (search2 === "" || search2 === "?")
    return query;
  const hasLeadingIM = search2[0] === "?";
  const searchParams = (hasLeadingIM ? search2.slice(1) : search2).split("&");
  for (let i2 = 0; i2 < searchParams.length; ++i2) {
    const searchParam = searchParams[i2].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray$2(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search2 = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray$2(value) ? value.map((v3) => v3 && encodeQueryValue(v3)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
        if (value2 != null)
          search2 += "=" + value2;
      }
    });
  }
  return search2;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray$2(value) ? value.map((v3) => v3 == null ? null : "" + v3) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("router view location matched");
const viewDepthKey = Symbol("router view depth");
const routerKey = Symbol("router");
const routeLocationKey = Symbol("route location");
const routerViewLocationKey = Symbol("router view location");
function useCallbacks() {
  let handlers2 = [];
  function add2(handler) {
    handlers2.push(handler);
    return () => {
      const i2 = handlers2.indexOf(handler);
      if (i2 > -1)
        handlers2.splice(i2, 1);
    };
  }
  function reset() {
    handlers2 = [];
  }
  return {
    add: add2,
    list: () => handlers2,
    reset
  };
}
function guardToPromiseFn(guard, to2, from, record, name) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to2, from, canOnlyBeCalledOnce(next, to2, from));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    if (guard.length > 2) {
      const message = `The "next" callback was never called inside of ${guard.name ? '"' + guard.name + '"' : ""}:
${guard.toString()}
. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;
      if (typeof guardReturn === "object" && "then" in guardReturn) {
        guardCall = guardCall.then((resolvedValue) => {
          if (!next._called) {
            warn$1(message);
            return Promise.reject(new Error("Invalid navigation guard"));
          }
          return resolvedValue;
        });
      } else if (guardReturn !== void 0) {
        if (!next._called) {
          warn$1(message);
          reject(new Error("Invalid navigation guard"));
          return;
        }
      }
    }
    guardCall.catch((err) => reject(err));
  });
}
function canOnlyBeCalledOnce(next, to2, from) {
  let called = 0;
  return function() {
    if (called++ === 1)
      warn$1(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to2.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
    next._called = true;
    if (called === 1)
      next.apply(null, arguments);
  };
}
function extractComponentsGuards(matched, guardType, to2, from) {
  const guards = [];
  for (const record of matched) {
    if (!record.components && !record.children.length) {
      warn$1(`Record with path "${record.path}" is either missing a "component(s)" or "children" property.`);
    }
    for (const name in record.components) {
      let rawComponent = record.components[name];
      {
        if (!rawComponent || typeof rawComponent !== "object" && typeof rawComponent !== "function") {
          warn$1(`Component "${name}" in record with path "${record.path}" is not a valid component. Received "${String(rawComponent)}".`);
          throw new Error("Invalid route component");
        } else if ("then" in rawComponent) {
          warn$1(`Component "${name}" in record with path "${record.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);
          const promise = rawComponent;
          rawComponent = () => promise;
        } else if (rawComponent.__asyncLoader && // warn only once per component
        !rawComponent.__warnedDefineAsync) {
          rawComponent.__warnedDefineAsync = true;
          warn$1(`Component "${name}" in record with path "${record.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`);
        }
      }
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from, record, name));
      } else {
        let componentPromise = rawComponent();
        if (!("catch" in componentPromise)) {
          warn$1(`Component "${name}" in record with path "${record.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`);
          componentPromise = Promise.resolve(componentPromise);
        }
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to2, from, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink(props) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => router2.resolve(unref(props.to)));
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e2 = {}) {
    if (guardEvent(e2)) {
      return router2[unref(props.replace) ? "replace" : "push"](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop$2);
    }
    return Promise.resolve();
  }
  if (isBrowser) {
    const instance = getCurrentInstance();
    if (instance) {
      const linkContextDevtools = {
        route: route.value,
        isActive: isActive.value,
        isExactActive: isExactActive.value
      };
      instance.__vrl_devtools = instance.__vrl_devtools || [];
      instance.__vrl_devtools.push(linkContextDevtools);
      watchEffect(() => {
        linkContextDevtools.route = route.value;
        linkContextDevtools.isActive = isActive.value;
        linkContextDevtools.isExactActive = isExactActive.value;
      }, { flush: "post" });
    }
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props, { slots }) {
    const link = reactive(useLink(props));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h$3("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e2) {
  if (e2.metaKey || e2.altKey || e2.ctrlKey || e2.shiftKey)
    return;
  if (e2.defaultPrevented)
    return;
  if (e2.button !== void 0 && e2.button !== 0)
    return;
  if (e2.currentTarget && e2.currentTarget.getAttribute) {
    const target = e2.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e2.preventDefault)
    e2.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray$2(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i2) => value !== outerValue[i2]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    warnDeprecatedUsage();
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props.route || injectedRoute.value);
    const injectedDepth = inject(viewDepthKey, 0);
    const depth = computed(() => {
      let initialDepth = unref(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);
    provide(viewDepthKey, computed(() => depth.value + 1));
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$3(ViewComponent, assign$2({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      if (isBrowser && component.ref) {
        const info = {
          depth: depth.value,
          name: matchedRoute.name,
          path: matchedRoute.path,
          meta: matchedRoute.meta
        };
        const internalInstances = isArray$2(component.ref) ? component.ref.map((r2) => r2.i) : [component.ref.i];
        internalInstances.forEach((instance) => {
          instance.__vrv_devtools = info;
        });
      }
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function warnDeprecatedUsage() {
  const instance = getCurrentInstance();
  const parentName = instance.parent && instance.parent.type.name;
  const parentSubTreeType = instance.parent && instance.parent.subTree && instance.parent.subTree.type;
  if (parentName && (parentName === "KeepAlive" || parentName.includes("Transition")) && typeof parentSubTreeType === "object" && parentSubTreeType.name === "RouterView") {
    const comp = parentName === "KeepAlive" ? "keep-alive" : "transition";
    warn$1(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.
Use slot props instead:

<router-view v-slot="{ Component }">
  <${comp}>
    <component :is="Component" />
  </${comp}>
</router-view>`);
  }
}
function formatRouteLocation(routeLocation, tooltip) {
  const copy = assign$2({}, routeLocation, {
    // remove variables that can contain vue instances
    matched: routeLocation.matched.map((matched) => omit(matched, ["instances", "children", "aliasOf"]))
  });
  return {
    _custom: {
      type: null,
      readOnly: true,
      display: routeLocation.fullPath,
      tooltip,
      value: copy
    }
  };
}
function formatDisplay$1(display) {
  return {
    _custom: {
      display
    }
  };
}
let routerId = 0;
function addDevtools(app, router2, matcher) {
  if (router2.__hasDevtools)
    return;
  router2.__hasDevtools = true;
  const id2 = routerId++;
  setupDevtoolsPlugin$1({
    id: "org.vuejs.router" + (id2 ? "." + id2 : ""),
    label: "Vue Router",
    packageName: "vue-router",
    homepage: "https://router.vuejs.org",
    logo: "https://router.vuejs.org/logo.png",
    componentStateTypes: ["Routing"],
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.on.inspectComponent((payload, ctx) => {
      if (payload.instanceData) {
        payload.instanceData.state.push({
          type: "Routing",
          key: "$route",
          editable: false,
          value: formatRouteLocation(router2.currentRoute.value, "Current Route")
        });
      }
    });
    api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {
      if (componentInstance.__vrv_devtools) {
        const info = componentInstance.__vrv_devtools;
        node.tags.push({
          label: (info.name ? `${info.name.toString()}: ` : "") + info.path,
          textColor: 0,
          tooltip: "This component is rendered by &lt;router-view&gt;",
          backgroundColor: PINK_500
        });
      }
      if (isArray$2(componentInstance.__vrl_devtools)) {
        componentInstance.__devtoolsApi = api;
        componentInstance.__vrl_devtools.forEach((devtoolsData) => {
          let backgroundColor = ORANGE_400;
          let tooltip = "";
          if (devtoolsData.isExactActive) {
            backgroundColor = LIME_500;
            tooltip = "This is exactly active";
          } else if (devtoolsData.isActive) {
            backgroundColor = BLUE_600;
            tooltip = "This link is active";
          }
          node.tags.push({
            label: devtoolsData.route.path,
            textColor: 0,
            tooltip,
            backgroundColor
          });
        });
      }
    });
    watch(router2.currentRoute, () => {
      refreshRoutesView();
      api.notifyComponentUpdate();
      api.sendInspectorTree(routerInspectorId);
      api.sendInspectorState(routerInspectorId);
    });
    const navigationsLayerId = "router:navigations:" + id2;
    api.addTimelineLayer({
      id: navigationsLayerId,
      label: `Router${id2 ? " " + id2 : ""} Navigations`,
      color: 4237508
    });
    router2.onError((error, to2) => {
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "Error during Navigation",
          subtitle: to2.fullPath,
          logType: "error",
          time: api.now(),
          data: { error },
          groupId: to2.meta.__navigationId
        }
      });
    });
    let navigationId = 0;
    router2.beforeEach((to2, from) => {
      const data = {
        guard: formatDisplay$1("beforeEach"),
        from: formatRouteLocation(from, "Current Location during this navigation"),
        to: formatRouteLocation(to2, "Target location")
      };
      Object.defineProperty(to2.meta, "__navigationId", {
        value: navigationId++
      });
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          time: api.now(),
          title: "Start of navigation",
          subtitle: to2.fullPath,
          data,
          groupId: to2.meta.__navigationId
        }
      });
    });
    router2.afterEach((to2, from, failure) => {
      const data = {
        guard: formatDisplay$1("afterEach")
      };
      if (failure) {
        data.failure = {
          _custom: {
            type: Error,
            readOnly: true,
            display: failure ? failure.message : "",
            tooltip: "Navigation Failure",
            value: failure
          }
        };
        data.status = formatDisplay$1("❌");
      } else {
        data.status = formatDisplay$1("✅");
      }
      data.from = formatRouteLocation(from, "Current Location during this navigation");
      data.to = formatRouteLocation(to2, "Target location");
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "End of navigation",
          subtitle: to2.fullPath,
          time: api.now(),
          data,
          logType: failure ? "warning" : "default",
          groupId: to2.meta.__navigationId
        }
      });
    });
    const routerInspectorId = "router-inspector:" + id2;
    api.addInspector({
      id: routerInspectorId,
      label: "Routes" + (id2 ? " " + id2 : ""),
      icon: "book",
      treeFilterPlaceholder: "Search routes"
    });
    function refreshRoutesView() {
      if (!activeRoutesPayload)
        return;
      const payload = activeRoutesPayload;
      let routes2 = matcher.getRoutes().filter((route) => !route.parent);
      routes2.forEach(resetMatchStateOnRouteRecord);
      if (payload.filter) {
        routes2 = routes2.filter((route) => (
          // save matches state based on the payload
          isRouteMatching(route, payload.filter.toLowerCase())
        ));
      }
      routes2.forEach((route) => markRouteRecordActive(route, router2.currentRoute.value));
      payload.rootNodes = routes2.map(formatRouteRecordForInspector);
    }
    let activeRoutesPayload;
    api.on.getInspectorTree((payload) => {
      activeRoutesPayload = payload;
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        refreshRoutesView();
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        const routes2 = matcher.getRoutes();
        const route = routes2.find((route2) => route2.record.__vd_id === payload.nodeId);
        if (route) {
          payload.state = {
            options: formatRouteRecordMatcherForStateInspector(route)
          };
        }
      }
    });
    api.sendInspectorTree(routerInspectorId);
    api.sendInspectorState(routerInspectorId);
  });
}
function modifierForKey(key) {
  if (key.optional) {
    return key.repeatable ? "*" : "?";
  } else {
    return key.repeatable ? "+" : "";
  }
}
function formatRouteRecordMatcherForStateInspector(route) {
  const { record } = route;
  const fields = [
    { editable: false, key: "path", value: record.path }
  ];
  if (record.name != null) {
    fields.push({
      editable: false,
      key: "name",
      value: record.name
    });
  }
  fields.push({ editable: false, key: "regexp", value: route.re });
  if (route.keys.length) {
    fields.push({
      editable: false,
      key: "keys",
      value: {
        _custom: {
          type: null,
          readOnly: true,
          display: route.keys.map((key) => `${key.name}${modifierForKey(key)}`).join(" "),
          tooltip: "Param keys",
          value: route.keys
        }
      }
    });
  }
  if (record.redirect != null) {
    fields.push({
      editable: false,
      key: "redirect",
      value: record.redirect
    });
  }
  if (route.alias.length) {
    fields.push({
      editable: false,
      key: "aliases",
      value: route.alias.map((alias) => alias.record.path)
    });
  }
  if (Object.keys(route.record.meta).length) {
    fields.push({
      editable: false,
      key: "meta",
      value: route.record.meta
    });
  }
  fields.push({
    key: "score",
    editable: false,
    value: {
      _custom: {
        type: null,
        readOnly: true,
        display: route.score.map((score) => score.join(", ")).join(" | "),
        tooltip: "Score used to sort routes",
        value: route.score
      }
    }
  });
  return fields;
}
const PINK_500 = 15485081;
const BLUE_600 = 2450411;
const LIME_500 = 8702998;
const CYAN_400 = 2282478;
const ORANGE_400 = 16486972;
const DARK = 6710886;
function formatRouteRecordForInspector(route) {
  const tags = [];
  const { record } = route;
  if (record.name != null) {
    tags.push({
      label: String(record.name),
      textColor: 0,
      backgroundColor: CYAN_400
    });
  }
  if (record.aliasOf) {
    tags.push({
      label: "alias",
      textColor: 0,
      backgroundColor: ORANGE_400
    });
  }
  if (route.__vd_match) {
    tags.push({
      label: "matches",
      textColor: 0,
      backgroundColor: PINK_500
    });
  }
  if (route.__vd_exactActive) {
    tags.push({
      label: "exact",
      textColor: 0,
      backgroundColor: LIME_500
    });
  }
  if (route.__vd_active) {
    tags.push({
      label: "active",
      textColor: 0,
      backgroundColor: BLUE_600
    });
  }
  if (record.redirect) {
    tags.push({
      label: typeof record.redirect === "string" ? `redirect: ${record.redirect}` : "redirects",
      textColor: 16777215,
      backgroundColor: DARK
    });
  }
  let id2 = record.__vd_id;
  if (id2 == null) {
    id2 = String(routeRecordId++);
    record.__vd_id = id2;
  }
  return {
    id: id2,
    label: record.path,
    tags,
    children: route.children.map(formatRouteRecordForInspector)
  };
}
let routeRecordId = 0;
const EXTRACT_REGEXP_RE = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive(route, currentRoute) {
  const isExactActive = currentRoute.matched.length && isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);
  route.__vd_exactActive = route.__vd_active = isExactActive;
  if (!isExactActive) {
    route.__vd_active = currentRoute.matched.some((match) => isSameRouteRecord(match, route.record));
  }
  route.children.forEach((childRoute) => markRouteRecordActive(childRoute, currentRoute));
}
function resetMatchStateOnRouteRecord(route) {
  route.__vd_match = false;
  route.children.forEach(resetMatchStateOnRouteRecord);
}
function isRouteMatching(route, filter2) {
  const found = String(route.re).match(EXTRACT_REGEXP_RE);
  route.__vd_match = false;
  if (!found || found.length < 3) {
    return false;
  }
  const nonEndingRE = new RegExp(found[1].replace(/\$$/, ""), found[2]);
  if (nonEndingRE.test(filter2)) {
    route.children.forEach((child) => isRouteMatching(child, filter2));
    if (route.record.path !== "/" || filter2 === "/") {
      route.__vd_match = route.re.test(filter2);
      return true;
    }
    return false;
  }
  const path = route.record.path.toLowerCase();
  const decodedPath = decode(path);
  if (!filter2.startsWith("/") && (decodedPath.includes(filter2) || path.includes(filter2)))
    return true;
  if (decodedPath.startsWith(filter2) || path.startsWith(filter2))
    return true;
  if (route.record.name && String(route.record.name).includes(filter2))
    return true;
  return route.children.some((child) => isRouteMatching(child, filter2));
}
function omit(obj, keys) {
  const ret = {};
  for (const key in obj) {
    if (!keys.includes(key)) {
      ret[key] = obj[key];
    }
  }
  return ret;
}
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$12 = options.parseQuery || parseQuery;
  const stringifyQuery$12 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  if (!routerHistory)
    throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    } else {
      warn$1(`Cannot remove non-existent route "${String(name)}"`);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign$2({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$12, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      {
        if (href2.startsWith("//"))
          warn$1(`Location "${rawLocation}" resolved to "${href2}". A resolved location cannot start with multiple slashes.`);
        else if (!matchedRoute2.matched.length) {
          warn$1(`No match found for location with path "${rawLocation}"`);
        }
      }
      return assign$2(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      if ("params" in rawLocation && !("name" in rawLocation) && // @ts-expect-error: the type is never
      Object.keys(rawLocation.params).length) {
        warn$1(`Path "${rawLocation.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`);
      }
      matcherLocation = assign$2({}, rawLocation, {
        path: parseURL(parseQuery$12, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign$2({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign$2({}, rawLocation, {
        params: encodeParams(targetParams)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    if (hash2 && !hash2.startsWith("#")) {
      warn$1(`A \`hash\` should always start with the character "#". Replace "${hash2}" with "#${hash2}".`);
    }
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$12, assign$2({}, rawLocation, {
      hash: encodeHash(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    {
      if (href.startsWith("//")) {
        warn$1(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
      } else if (!matchedRoute.matched.length) {
        warn$1(`No match found for location with path "${"path" in rawLocation ? rawLocation.path : rawLocation}"`);
      }
    }
    return assign$2({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash: hash2,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$12 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$12, to2, currentRoute.value.path) : assign$2({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign$2(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      if (!("path" in newTargetLocation) && !("name" in newTargetLocation)) {
        warn$1(`Invalid redirect found:
${JSON.stringify(newTargetLocation, null, 2)}
 when navigating to "${to2.fullPath}". A redirect must contain a name or path. This will break in production.`);
        throw new Error("Invalid redirect");
      }
      return assign$2({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: "path" in newTargetLocation ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign$2(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign$2({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$12, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          if (
            // we are redirecting to the same location we were already at
            isSameRouteLocation(stringifyQuery$12, resolve2(failure2.to), toLocation) && // and we have done it a couple of times
            redirectedFrom && // @ts-expect-error: added only in dev
            (redirectedFrom._count = redirectedFrom._count ? (
              // @ts-expect-error
              redirectedFrom._count + 1
            ) : 1) > 30
          ) {
            warn$1(`Detected a possibly infinite redirection in a navigation guard when going from "${from.fullPath}" to "${toLocation.fullPath}". Aborting to avoid a Stack Overflow.
 Are you always returning a new location within a navigation guard? That would lead to this error. Only return when redirecting or aborting, that should fix this. This might break in production if not fixed.`);
            return Promise.reject(new Error("Infinite redirect in navigation guard"));
          }
          return pushWithRedirect(
            // keep options
            assign$2({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign$2({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function runWithContext(fn2) {
    const app = installedApps.values().next().value;
    return app && typeof app.runWithContext === "function" ? app.runWithContext(fn2) : fn2();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue2(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue2(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue2(guards);
    }).then(() => {
      guards = [];
      for (const record of to2.matched) {
        if (record.beforeEnter && !from.matched.includes(record)) {
          if (isArray$2(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue2(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue2(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue2(guards);
    }).catch((err) => isNavigationFailure(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    for (const guard of afterGuards.list()) {
      runWithContext(() => guard(to2, from, failure));
    }
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign$2({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign$2(shouldRedirect, { replace: true }), toLocation).catch(noop$2);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop$2);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType.pop && isNavigationFailure(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop$2);
    });
  }
  let readyHandlers = useCallbacks();
  let errorHandlers = useCallbacks();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorHandlers.list();
    if (list.length) {
      list.forEach((handler) => handler(error, to2, from));
    } else {
      {
        warn$1("uncaught error during route navigation:");
      }
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve3, reject) => {
      readyHandlers.add([resolve3, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve3, reject]) => err ? reject(err) : resolve3());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorHandlers.add,
    isReady,
    install(app) {
      const router3 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router3;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
          warn$1("Unexpected error when starting the router:", err);
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        reactiveRoute[key] = computed(() => currentRoute.value[key]);
      }
      app.provide(routerKey, router3);
      app.provide(routeLocationKey, reactive(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
      if (isBrowser) {
        addDevtools(app, router3, matcher);
      }
    }
  };
  function runGuardQueue2(guards) {
    return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
  }
  return router2;
}
function extractChangingRecords(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i2 = 0; i2 < len; i2++) {
    const recordFrom = from.matched[i2];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i2];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRouter() {
  return inject(routerKey);
}
function useRoute() {
  return inject(routeLocationKey);
}
/*!
  * shared v9.2.2
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const inBrowser = typeof window !== "undefined";
let mark;
let measure;
{
  const perf2 = inBrowser && window.performance;
  if (perf2 && perf2.mark && perf2.measure && perf2.clearMarks && perf2.clearMeasures) {
    mark = (tag) => perf2.mark(tag);
    measure = (name, startTag, endTag) => {
      perf2.measure(name, startTag, endTag);
      perf2.clearMarks(startTag);
      perf2.clearMarks(endTag);
    };
  }
}
const RE_ARGS = /\{([0-9a-zA-Z]+)\}/g;
function format(message, ...args) {
  if (args.length === 1 && isObject$2(args[0])) {
    args = args[0];
  }
  if (!args || !args.hasOwnProperty) {
    args = {};
  }
  return message.replace(RE_ARGS, (match, identifier) => {
    return args.hasOwnProperty(identifier) ? args[identifier] : "";
  });
}
const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
const makeSymbol = (name) => hasSymbol ? Symbol(name) : name;
const generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });
const friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
const isNumber$1 = (val) => typeof val === "number" && isFinite(val);
const isDate$1 = (val) => toTypeString(val) === "[object Date]";
const isRegExp$1 = (val) => toTypeString(val) === "[object RegExp]";
const isEmptyObject$1 = (val) => isPlainObject$3(val) && Object.keys(val).length === 0;
function warn(msg, err) {
  if (typeof console !== "undefined") {
    console.warn(`[intlify] ` + msg);
    if (err) {
      console.warn(err.stack);
    }
  }
}
const assign = Object.assign;
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function escapeHtml$1(rawText) {
  return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty$1.call(obj, key);
}
const isArray$1 = Array.isArray;
const isFunction$1 = (val) => typeof val === "function";
const isString$1 = (val) => typeof val === "string";
const isBoolean$1 = (val) => typeof val === "boolean";
const isObject$2 = (val) => (
  // eslint-disable-line
  val !== null && typeof val === "object"
);
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const isPlainObject$3 = (val) => toTypeString(val) === "[object Object]";
const toDisplayString = (val) => {
  return val == null ? "" : isArray$1(val) || isPlainObject$3(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
};
const RANGE = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
  const lines = source.split(/\r?\n/);
  let count2 = 0;
  const res = [];
  for (let i2 = 0; i2 < lines.length; i2++) {
    count2 += lines[i2].length + 1;
    if (count2 >= start) {
      for (let j2 = i2 - RANGE; j2 <= i2 + RANGE || end > count2; j2++) {
        if (j2 < 0 || j2 >= lines.length)
          continue;
        const line = j2 + 1;
        res.push(`${line}${" ".repeat(3 - String(line).length)}|  ${lines[j2]}`);
        const lineLength = lines[j2].length;
        if (j2 === i2) {
          const pad = start - (count2 - lineLength) + 1;
          const length = Math.max(1, end > count2 ? lineLength - pad : end - start);
          res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
        } else if (j2 > i2) {
          if (end > count2) {
            const length = Math.max(Math.min(end - count2, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length));
          }
          count2 += lineLength + 1;
        }
      }
      break;
    }
  }
  return res.join("\n");
}
function createEmitter() {
  const events = /* @__PURE__ */ new Map();
  const emitter = {
    events,
    on(event, handler) {
      const handlers2 = events.get(event);
      const added = handlers2 && handlers2.push(handler);
      if (!added) {
        events.set(event, [handler]);
      }
    },
    off(event, handler) {
      const handlers2 = events.get(event);
      if (handlers2) {
        handlers2.splice(handlers2.indexOf(handler) >>> 0, 1);
      }
    },
    emit(event, payload) {
      (events.get(event) || []).slice().map((handler) => handler(payload));
      (events.get("*") || []).slice().map((handler) => handler(event, payload));
    }
  };
  return emitter;
}
/*!
  * message-compiler v9.2.2
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const CompileErrorCodes = {
  // tokenizer error codes
  EXPECTED_TOKEN: 1,
  INVALID_TOKEN_IN_PLACEHOLDER: 2,
  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,
  UNKNOWN_ESCAPE_SEQUENCE: 4,
  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,
  UNBALANCED_CLOSING_BRACE: 6,
  UNTERMINATED_CLOSING_BRACE: 7,
  EMPTY_PLACEHOLDER: 8,
  NOT_ALLOW_NEST_PLACEHOLDER: 9,
  INVALID_LINKED_FORMAT: 10,
  // parser error codes
  MUST_HAVE_MESSAGES_IN_PLURAL: 11,
  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,
  UNEXPECTED_EMPTY_LINKED_KEY: 13,
  UNEXPECTED_LEXICAL_ANALYSIS: 14,
  // Special value for higher-order compilers to pick up the last code
  // to avoid collision of error codes. This should always be kept as the last
  // item.
  __EXTEND_POINT__: 15
};
const errorMessages$2 = {
  // tokenizer error messages
  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,
  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,
  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,
  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\{0}`,
  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,
  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,
  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,
  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,
  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,
  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,
  // parser error messages
  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,
  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,
  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,
  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`
};
function createCompileError(code2, loc, options = {}) {
  const { domain, messages, args } = options;
  const msg = format((messages || errorMessages$2)[code2] || "", ...args || []);
  const error = new SyntaxError(String(msg));
  error.code = code2;
  if (loc) {
    error.location = loc;
  }
  error.domain = domain;
  return error;
}
/*!
  * devtools-if v9.2.2
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const IntlifyDevToolsHooks = {
  I18nInit: "i18n:init",
  FunctionTranslate: "function:translate"
};
/*!
  * core-base v9.2.2
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const pathStateMachine = [];
pathStateMachine[
  0
  /* BEFORE_PATH */
] = {
  [
    "w"
    /* WORKSPACE */
  ]: [
    0
    /* BEFORE_PATH */
  ],
  [
    "i"
    /* IDENT */
  ]: [
    3,
    0
    /* APPEND */
  ],
  [
    "["
    /* LEFT_BRACKET */
  ]: [
    4
    /* IN_SUB_PATH */
  ],
  [
    "o"
    /* END_OF_FAIL */
  ]: [
    7
    /* AFTER_PATH */
  ]
};
pathStateMachine[
  1
  /* IN_PATH */
] = {
  [
    "w"
    /* WORKSPACE */
  ]: [
    1
    /* IN_PATH */
  ],
  [
    "."
    /* DOT */
  ]: [
    2
    /* BEFORE_IDENT */
  ],
  [
    "["
    /* LEFT_BRACKET */
  ]: [
    4
    /* IN_SUB_PATH */
  ],
  [
    "o"
    /* END_OF_FAIL */
  ]: [
    7
    /* AFTER_PATH */
  ]
};
pathStateMachine[
  2
  /* BEFORE_IDENT */
] = {
  [
    "w"
    /* WORKSPACE */
  ]: [
    2
    /* BEFORE_IDENT */
  ],
  [
    "i"
    /* IDENT */
  ]: [
    3,
    0
    /* APPEND */
  ],
  [
    "0"
    /* ZERO */
  ]: [
    3,
    0
    /* APPEND */
  ]
};
pathStateMachine[
  3
  /* IN_IDENT */
] = {
  [
    "i"
    /* IDENT */
  ]: [
    3,
    0
    /* APPEND */
  ],
  [
    "0"
    /* ZERO */
  ]: [
    3,
    0
    /* APPEND */
  ],
  [
    "w"
    /* WORKSPACE */
  ]: [
    1,
    1
    /* PUSH */
  ],
  [
    "."
    /* DOT */
  ]: [
    2,
    1
    /* PUSH */
  ],
  [
    "["
    /* LEFT_BRACKET */
  ]: [
    4,
    1
    /* PUSH */
  ],
  [
    "o"
    /* END_OF_FAIL */
  ]: [
    7,
    1
    /* PUSH */
  ]
};
pathStateMachine[
  4
  /* IN_SUB_PATH */
] = {
  [
    "'"
    /* SINGLE_QUOTE */
  ]: [
    5,
    0
    /* APPEND */
  ],
  [
    '"'
    /* DOUBLE_QUOTE */
  ]: [
    6,
    0
    /* APPEND */
  ],
  [
    "["
    /* LEFT_BRACKET */
  ]: [
    4,
    2
    /* INC_SUB_PATH_DEPTH */
  ],
  [
    "]"
    /* RIGHT_BRACKET */
  ]: [
    1,
    3
    /* PUSH_SUB_PATH */
  ],
  [
    "o"
    /* END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* ELSE */
  ]: [
    4,
    0
    /* APPEND */
  ]
};
pathStateMachine[
  5
  /* IN_SINGLE_QUOTE */
] = {
  [
    "'"
    /* SINGLE_QUOTE */
  ]: [
    4,
    0
    /* APPEND */
  ],
  [
    "o"
    /* END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* ELSE */
  ]: [
    5,
    0
    /* APPEND */
  ]
};
pathStateMachine[
  6
  /* IN_DOUBLE_QUOTE */
] = {
  [
    '"'
    /* DOUBLE_QUOTE */
  ]: [
    4,
    0
    /* APPEND */
  ],
  [
    "o"
    /* END_OF_FAIL */
  ]: 8,
  [
    "l"
    /* ELSE */
  ]: [
    6,
    0
    /* APPEND */
  ]
};
const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral(exp) {
  return literalValueRE.test(exp);
}
function stripQuotes(str) {
  const a2 = str.charCodeAt(0);
  const b3 = str.charCodeAt(str.length - 1);
  return a2 === b3 && (a2 === 34 || a2 === 39) ? str.slice(1, -1) : str;
}
function getPathCharType(ch2) {
  if (ch2 === void 0 || ch2 === null) {
    return "o";
  }
  const code2 = ch2.charCodeAt(0);
  switch (code2) {
    case 91:
    case 93:
    case 46:
    case 34:
    case 39:
      return ch2;
    case 95:
    case 36:
    case 45:
      return "i";
    case 9:
    case 10:
    case 13:
    case 160:
    case 65279:
    case 8232:
    case 8233:
      return "w";
  }
  return "i";
}
function formatSubPath(path) {
  const trimmed = path.trim();
  if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
    return false;
  }
  return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
}
function parse$2(path) {
  const keys = [];
  let index = -1;
  let mode = 0;
  let subPathDepth = 0;
  let c2;
  let key;
  let newChar;
  let type;
  let transition;
  let action;
  let typeMap;
  const actions = [];
  actions[
    0
    /* APPEND */
  ] = () => {
    if (key === void 0) {
      key = newChar;
    } else {
      key += newChar;
    }
  };
  actions[
    1
    /* PUSH */
  ] = () => {
    if (key !== void 0) {
      keys.push(key);
      key = void 0;
    }
  };
  actions[
    2
    /* INC_SUB_PATH_DEPTH */
  ] = () => {
    actions[
      0
      /* APPEND */
    ]();
    subPathDepth++;
  };
  actions[
    3
    /* PUSH_SUB_PATH */
  ] = () => {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = 4;
      actions[
        0
        /* APPEND */
      ]();
    } else {
      subPathDepth = 0;
      if (key === void 0) {
        return false;
      }
      key = formatSubPath(key);
      if (key === false) {
        return false;
      } else {
        actions[
          1
          /* PUSH */
        ]();
      }
    }
  };
  function maybeUnescapeQuote() {
    const nextChar = path[index + 1];
    if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
      index++;
      newChar = "\\" + nextChar;
      actions[
        0
        /* APPEND */
      ]();
      return true;
    }
  }
  while (mode !== null) {
    index++;
    c2 = path[index];
    if (c2 === "\\" && maybeUnescapeQuote()) {
      continue;
    }
    type = getPathCharType(c2);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap[
      "l"
      /* ELSE */
    ] || 8;
    if (transition === 8) {
      return;
    }
    mode = transition[0];
    if (transition[1] !== void 0) {
      action = actions[transition[1]];
      if (action) {
        newChar = c2;
        if (action() === false) {
          return;
        }
      }
    }
    if (mode === 7) {
      return keys;
    }
  }
}
const cache = /* @__PURE__ */ new Map();
function resolveWithKeyValue(obj, path) {
  return isObject$2(obj) ? obj[path] : null;
}
function resolveValue(obj, path) {
  if (!isObject$2(obj)) {
    return null;
  }
  let hit = cache.get(path);
  if (!hit) {
    hit = parse$2(path);
    if (hit) {
      cache.set(path, hit);
    }
  }
  if (!hit) {
    return null;
  }
  const len = hit.length;
  let last = obj;
  let i2 = 0;
  while (i2 < len) {
    const val = last[hit[i2]];
    if (val === void 0) {
      return null;
    }
    last = val;
    i2++;
  }
  return last;
}
const DEFAULT_MODIFIER = (str) => str;
const DEFAULT_MESSAGE = (ctx) => "";
const DEFAULT_MESSAGE_DATA_TYPE = "text";
const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : values.join("");
const DEFAULT_INTERPOLATE = toDisplayString;
function pluralDefault(choice, choicesLength) {
  choice = Math.abs(choice);
  if (choicesLength === 2) {
    return choice ? choice > 1 ? 1 : 0 : 1;
  }
  return choice ? Math.min(choice, 2) : 0;
}
function getPluralIndex(options) {
  const index = isNumber$1(options.pluralIndex) ? options.pluralIndex : -1;
  return options.named && (isNumber$1(options.named.count) || isNumber$1(options.named.n)) ? isNumber$1(options.named.count) ? options.named.count : isNumber$1(options.named.n) ? options.named.n : index : index;
}
function normalizeNamed(pluralIndex, props) {
  if (!props.count) {
    props.count = pluralIndex;
  }
  if (!props.n) {
    props.n = pluralIndex;
  }
}
function createMessageContext(options = {}) {
  const locale = options.locale;
  const pluralIndex = getPluralIndex(options);
  const pluralRule = isObject$2(options.pluralRules) && isString$1(locale) && isFunction$1(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;
  const orgPluralRule = isObject$2(options.pluralRules) && isString$1(locale) && isFunction$1(options.pluralRules[locale]) ? pluralDefault : void 0;
  const plural = (messages) => {
    return messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];
  };
  const _list = options.list || [];
  const list = (index) => _list[index];
  const _named = options.named || {};
  isNumber$1(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
  const named = (key) => _named[key];
  function message(key) {
    const msg = isFunction$1(options.messages) ? options.messages(key) : isObject$2(options.messages) ? options.messages[key] : false;
    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;
  }
  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
  const normalize = isPlainObject$3(options.processor) && isFunction$1(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
  const interpolate = isPlainObject$3(options.processor) && isFunction$1(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
  const type = isPlainObject$3(options.processor) && isString$1(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
  const linked = (key, ...args) => {
    const [arg1, arg2] = args;
    let type2 = "text";
    let modifier = "";
    if (args.length === 1) {
      if (isObject$2(arg1)) {
        modifier = arg1.modifier || modifier;
        type2 = arg1.type || type2;
      } else if (isString$1(arg1)) {
        modifier = arg1 || modifier;
      }
    } else if (args.length === 2) {
      if (isString$1(arg1)) {
        modifier = arg1 || modifier;
      }
      if (isString$1(arg2)) {
        type2 = arg2 || type2;
      }
    }
    let msg = message(key)(ctx);
    if (type2 === "vnode" && isArray$1(msg) && modifier) {
      msg = msg[0];
    }
    return modifier ? _modifier(modifier)(msg, type2) : msg;
  };
  const ctx = {
    [
      "list"
      /* LIST */
    ]: list,
    [
      "named"
      /* NAMED */
    ]: named,
    [
      "plural"
      /* PLURAL */
    ]: plural,
    [
      "linked"
      /* LINKED */
    ]: linked,
    [
      "message"
      /* MESSAGE */
    ]: message,
    [
      "type"
      /* TYPE */
    ]: type,
    [
      "interpolate"
      /* INTERPOLATE */
    ]: interpolate,
    [
      "normalize"
      /* NORMALIZE */
    ]: normalize
  };
  return ctx;
}
let devtools = null;
function setDevToolsHook(hook) {
  devtools = hook;
}
function initI18nDevTools(i18n, version2, meta) {
  devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {
    timestamp: Date.now(),
    i18n,
    version: version2,
    meta
  });
}
const translateDevTools = /* @__PURE__ */ createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);
function createDevToolsHook(hook) {
  return (payloads) => devtools && devtools.emit(hook, payloads);
}
const CoreWarnCodes = {
  NOT_FOUND_KEY: 1,
  FALLBACK_TO_TRANSLATE: 2,
  CANNOT_FORMAT_NUMBER: 3,
  FALLBACK_TO_NUMBER_FORMAT: 4,
  CANNOT_FORMAT_DATE: 5,
  FALLBACK_TO_DATE_FORMAT: 6,
  __EXTEND_POINT__: 7
};
const warnMessages$1 = {
  [CoreWarnCodes.NOT_FOUND_KEY]: `Not found '{key}' key in '{locale}' locale messages.`,
  [CoreWarnCodes.FALLBACK_TO_TRANSLATE]: `Fall back to translate '{key}' key with '{target}' locale.`,
  [CoreWarnCodes.CANNOT_FORMAT_NUMBER]: `Cannot format a number value due to not supported Intl.NumberFormat.`,
  [CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT]: `Fall back to number format '{key}' key with '{target}' locale.`,
  [CoreWarnCodes.CANNOT_FORMAT_DATE]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,
  [CoreWarnCodes.FALLBACK_TO_DATE_FORMAT]: `Fall back to datetime format '{key}' key with '{target}' locale.`
};
function getWarnMessage$1(code2, ...args) {
  return format(warnMessages$1[code2], ...args);
}
function fallbackWithSimple(ctx, fallback, start) {
  return [.../* @__PURE__ */ new Set([
    start,
    ...isArray$1(fallback) ? fallback : isObject$2(fallback) ? Object.keys(fallback) : isString$1(fallback) ? [fallback] : [start]
  ])];
}
function fallbackWithLocaleChain(ctx, fallback, start) {
  const startLocale = isString$1(start) ? start : DEFAULT_LOCALE;
  const context = ctx;
  if (!context.__localeChainCache) {
    context.__localeChainCache = /* @__PURE__ */ new Map();
  }
  let chain = context.__localeChainCache.get(startLocale);
  if (!chain) {
    chain = [];
    let block = [start];
    while (isArray$1(block)) {
      block = appendBlockToChain(chain, block, fallback);
    }
    const defaults2 = isArray$1(fallback) || !isPlainObject$3(fallback) ? fallback : fallback["default"] ? fallback["default"] : null;
    block = isString$1(defaults2) ? [defaults2] : defaults2;
    if (isArray$1(block)) {
      appendBlockToChain(chain, block, false);
    }
    context.__localeChainCache.set(startLocale, chain);
  }
  return chain;
}
function appendBlockToChain(chain, block, blocks) {
  let follow = true;
  for (let i2 = 0; i2 < block.length && isBoolean$1(follow); i2++) {
    const locale = block[i2];
    if (isString$1(locale)) {
      follow = appendLocaleToChain(chain, block[i2], blocks);
    }
  }
  return follow;
}
function appendLocaleToChain(chain, locale, blocks) {
  let follow;
  const tokens = locale.split("-");
  do {
    const target = tokens.join("-");
    follow = appendItemToChain(chain, target, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && follow === true);
  return follow;
}
function appendItemToChain(chain, target, blocks) {
  let follow = false;
  if (!chain.includes(target)) {
    follow = true;
    if (target) {
      follow = target[target.length - 1] !== "!";
      const locale = target.replace(/!/g, "");
      chain.push(locale);
      if ((isArray$1(blocks) || isPlainObject$3(blocks)) && blocks[locale]) {
        follow = blocks[locale];
      }
    }
  }
  return follow;
}
const VERSION$2 = "9.2.2";
const NOT_REOSLVED = -1;
const DEFAULT_LOCALE = "en-US";
const MISSING_RESOLVE_VALUE = "";
const capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;
function getDefaultLinkedModifiers() {
  return {
    upper: (val, type) => {
      return type === "text" && isString$1(val) ? val.toUpperCase() : type === "vnode" && isObject$2(val) && "__v_isVNode" in val ? val.children.toUpperCase() : val;
    },
    lower: (val, type) => {
      return type === "text" && isString$1(val) ? val.toLowerCase() : type === "vnode" && isObject$2(val) && "__v_isVNode" in val ? val.children.toLowerCase() : val;
    },
    capitalize: (val, type) => {
      return type === "text" && isString$1(val) ? capitalize(val) : type === "vnode" && isObject$2(val) && "__v_isVNode" in val ? capitalize(val.children) : val;
    }
  };
}
let _compiler;
let _resolver;
function registerMessageResolver(resolver) {
  _resolver = resolver;
}
let _fallbacker;
function registerLocaleFallbacker(fallbacker) {
  _fallbacker = fallbacker;
}
let _additionalMeta = null;
const setAdditionalMeta = (meta) => {
  _additionalMeta = meta;
};
const getAdditionalMeta = () => _additionalMeta;
let _fallbackContext = null;
const setFallbackContext = (context) => {
  _fallbackContext = context;
};
const getFallbackContext = () => _fallbackContext;
let _cid = 0;
function createCoreContext(options = {}) {
  const version2 = isString$1(options.version) ? options.version : VERSION$2;
  const locale = isString$1(options.locale) ? options.locale : DEFAULT_LOCALE;
  const fallbackLocale = isArray$1(options.fallbackLocale) || isPlainObject$3(options.fallbackLocale) || isString$1(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;
  const messages = isPlainObject$3(options.messages) ? options.messages : { [locale]: {} };
  const datetimeFormats = isPlainObject$3(options.datetimeFormats) ? options.datetimeFormats : { [locale]: {} };
  const numberFormats = isPlainObject$3(options.numberFormats) ? options.numberFormats : { [locale]: {} };
  const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());
  const pluralRules = options.pluralRules || {};
  const missing = isFunction$1(options.missing) ? options.missing : null;
  const missingWarn = isBoolean$1(options.missingWarn) || isRegExp$1(options.missingWarn) ? options.missingWarn : true;
  const fallbackWarn = isBoolean$1(options.fallbackWarn) || isRegExp$1(options.fallbackWarn) ? options.fallbackWarn : true;
  const fallbackFormat = !!options.fallbackFormat;
  const unresolving = !!options.unresolving;
  const postTranslation = isFunction$1(options.postTranslation) ? options.postTranslation : null;
  const processor = isPlainObject$3(options.processor) ? options.processor : null;
  const warnHtmlMessage = isBoolean$1(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  const escapeParameter = !!options.escapeParameter;
  const messageCompiler = isFunction$1(options.messageCompiler) ? options.messageCompiler : _compiler;
  const messageResolver = isFunction$1(options.messageResolver) ? options.messageResolver : _resolver || resolveWithKeyValue;
  const localeFallbacker = isFunction$1(options.localeFallbacker) ? options.localeFallbacker : _fallbacker || fallbackWithSimple;
  const fallbackContext = isObject$2(options.fallbackContext) ? options.fallbackContext : void 0;
  const onWarn = isFunction$1(options.onWarn) ? options.onWarn : warn;
  const internalOptions = options;
  const __datetimeFormatters = isObject$2(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
  const __numberFormatters = isObject$2(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
  const __meta = isObject$2(internalOptions.__meta) ? internalOptions.__meta : {};
  _cid++;
  const context = {
    version: version2,
    cid: _cid,
    locale,
    fallbackLocale,
    messages,
    modifiers,
    pluralRules,
    missing,
    missingWarn,
    fallbackWarn,
    fallbackFormat,
    unresolving,
    postTranslation,
    processor,
    warnHtmlMessage,
    escapeParameter,
    messageCompiler,
    messageResolver,
    localeFallbacker,
    fallbackContext,
    onWarn,
    __meta
  };
  {
    context.datetimeFormats = datetimeFormats;
    context.numberFormats = numberFormats;
    context.__datetimeFormatters = __datetimeFormatters;
    context.__numberFormatters = __numberFormatters;
  }
  {
    context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;
  }
  {
    initI18nDevTools(context, version2, __meta);
  }
  return context;
}
function isTranslateFallbackWarn(fallback, key) {
  return fallback instanceof RegExp ? fallback.test(key) : fallback;
}
function isTranslateMissingWarn(missing, key) {
  return missing instanceof RegExp ? missing.test(key) : missing;
}
function handleMissing(context, key, locale, missingWarn, type) {
  const { missing, onWarn } = context;
  {
    const emitter = context.__v_emitter;
    if (emitter) {
      emitter.emit("missing", {
        locale,
        key,
        type,
        groupId: `${type}:${key}`
      });
    }
  }
  if (missing !== null) {
    const ret = missing(context, locale, key, type);
    return isString$1(ret) ? ret : key;
  } else {
    if (isTranslateMissingWarn(missingWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.NOT_FOUND_KEY, { key, locale }));
    }
    return key;
  }
}
function updateFallbackLocale(ctx, locale, fallback) {
  const context = ctx;
  context.__localeChainCache = /* @__PURE__ */ new Map();
  ctx.localeFallbacker(ctx, fallback, locale);
}
let code$2 = CompileErrorCodes.__EXTEND_POINT__;
const inc$2 = () => ++code$2;
const CoreErrorCodes = {
  INVALID_ARGUMENT: code$2,
  INVALID_DATE_ARGUMENT: inc$2(),
  INVALID_ISO_DATE_ARGUMENT: inc$2(),
  __EXTEND_POINT__: inc$2()
  // 18
};
function createCoreError(code2) {
  return createCompileError(code2, null, { messages: errorMessages$1 });
}
const errorMessages$1 = {
  [CoreErrorCodes.INVALID_ARGUMENT]: "Invalid arguments",
  [CoreErrorCodes.INVALID_DATE_ARGUMENT]: "The date provided is an invalid Date object.Make sure your Date represents a valid date.",
  [CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT]: "The argument provided is not a valid ISO date string"
};
const NOOP_MESSAGE_FUNCTION = () => "";
const isMessageFunction = (val) => isFunction$1(val);
function translate(context, ...args) {
  const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages } = context;
  const [key, options] = parseTranslateArgs(...args);
  const missingWarn = isBoolean$1(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean$1(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const escapeParameter = isBoolean$1(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
  const resolvedMessage = !!options.resolvedMessage;
  const defaultMsgOrKey = isString$1(options.default) || isBoolean$1(options.default) ? !isBoolean$1(options.default) ? options.default : !messageCompiler ? () => key : key : fallbackFormat ? !messageCompiler ? () => key : key : "";
  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
  const locale = isString$1(options.locale) ? options.locale : context.locale;
  escapeParameter && escapeParams(options);
  let [formatScope, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [
    key,
    locale,
    messages[locale] || {}
  ];
  let format2 = formatScope;
  let cacheBaseKey = key;
  if (!resolvedMessage && !(isString$1(format2) || isMessageFunction(format2))) {
    if (enableDefaultMsg) {
      format2 = defaultMsgOrKey;
      cacheBaseKey = format2;
    }
  }
  if (!resolvedMessage && (!(isString$1(format2) || isMessageFunction(format2)) || !isString$1(targetLocale))) {
    return unresolving ? NOT_REOSLVED : key;
  }
  if (isString$1(format2) && context.messageCompiler == null) {
    warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key}'.`);
    return key;
  }
  let occurred = false;
  const errorDetector = () => {
    occurred = true;
  };
  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;
  if (occurred) {
    return format2;
  }
  const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);
  const msgContext = createMessageContext(ctxOptions);
  const messaged = evaluateMessage(context, msg, msgContext);
  const ret = postTranslation ? postTranslation(messaged, key) : messaged;
  {
    const payloads = {
      timestamp: Date.now(),
      key: isString$1(key) ? key : isMessageFunction(format2) ? format2.key : "",
      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
      format: isString$1(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
      message: ret
    };
    payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});
    translateDevTools(payloads);
  }
  return ret;
}
function escapeParams(options) {
  if (isArray$1(options.list)) {
    options.list = options.list.map((item) => isString$1(item) ? escapeHtml$1(item) : item);
  } else if (isObject$2(options.named)) {
    Object.keys(options.named).forEach((key) => {
      if (isString$1(options.named[key])) {
        options.named[key] = escapeHtml$1(options.named[key]);
      }
    });
  }
}
function resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {
  const { messages, onWarn, messageResolver: resolveValue2, localeFallbacker } = context;
  const locales = localeFallbacker(context, fallbackLocale, locale);
  let message = {};
  let targetLocale;
  let format2 = null;
  let from = locale;
  let to2 = null;
  const type = "translate";
  for (let i2 = 0; i2 < locales.length; i2++) {
    targetLocale = to2 = locales[i2];
    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.FALLBACK_TO_TRANSLATE, {
        key,
        target: targetLocale
      }));
    }
    if (locale !== targetLocale) {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("fallback", {
          type,
          key,
          from,
          to: to2,
          groupId: `${type}:${key}`
        });
      }
    }
    message = messages[targetLocale] || {};
    let start = null;
    let startTag;
    let endTag;
    if (inBrowser) {
      start = window.performance.now();
      startTag = "intlify-message-resolve-start";
      endTag = "intlify-message-resolve-end";
      mark && mark(startTag);
    }
    if ((format2 = resolveValue2(message, key)) === null) {
      format2 = message[key];
    }
    if (inBrowser) {
      const end = window.performance.now();
      const emitter = context.__v_emitter;
      if (emitter && start && format2) {
        emitter.emit("message-resolve", {
          type: "message-resolve",
          key,
          message: format2,
          time: end - start,
          groupId: `${type}:${key}`
        });
      }
      if (startTag && endTag && mark && measure) {
        mark(endTag);
        measure("intlify message resolve", startTag, endTag);
      }
    }
    if (isString$1(format2) || isFunction$1(format2))
      break;
    const missingRet = handleMissing(
      context,
      // eslint-disable-line @typescript-eslint/no-explicit-any
      key,
      targetLocale,
      missingWarn,
      type
    );
    if (missingRet !== key) {
      format2 = missingRet;
    }
    from = to2;
  }
  return [format2, targetLocale, message];
}
function compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {
  const { messageCompiler, warnHtmlMessage } = context;
  if (isMessageFunction(format2)) {
    const msg2 = format2;
    msg2.locale = msg2.locale || targetLocale;
    msg2.key = msg2.key || key;
    return msg2;
  }
  if (messageCompiler == null) {
    const msg2 = () => format2;
    msg2.locale = targetLocale;
    msg2.key = key;
    return msg2;
  }
  let start = null;
  let startTag;
  let endTag;
  if (inBrowser) {
    start = window.performance.now();
    startTag = "intlify-message-compilation-start";
    endTag = "intlify-message-compilation-end";
    mark && mark(startTag);
  }
  const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));
  if (inBrowser) {
    const end = window.performance.now();
    const emitter = context.__v_emitter;
    if (emitter && start) {
      emitter.emit("message-compilation", {
        type: "message-compilation",
        message: format2,
        time: end - start,
        groupId: `${"translate"}:${key}`
      });
    }
    if (startTag && endTag && mark && measure) {
      mark(endTag);
      measure("intlify message compilation", startTag, endTag);
    }
  }
  msg.locale = targetLocale;
  msg.key = key;
  msg.source = format2;
  return msg;
}
function evaluateMessage(context, msg, msgCtx) {
  let start = null;
  let startTag;
  let endTag;
  if (inBrowser) {
    start = window.performance.now();
    startTag = "intlify-message-evaluation-start";
    endTag = "intlify-message-evaluation-end";
    mark && mark(startTag);
  }
  const messaged = msg(msgCtx);
  if (inBrowser) {
    const end = window.performance.now();
    const emitter = context.__v_emitter;
    if (emitter && start) {
      emitter.emit("message-evaluation", {
        type: "message-evaluation",
        value: messaged,
        time: end - start,
        groupId: `${"translate"}:${msg.key}`
      });
    }
    if (startTag && endTag && mark && measure) {
      mark(endTag);
      measure("intlify message evaluation", startTag, endTag);
    }
  }
  return messaged;
}
function parseTranslateArgs(...args) {
  const [arg1, arg2, arg3] = args;
  const options = {};
  if (!isString$1(arg1) && !isNumber$1(arg1) && !isMessageFunction(arg1)) {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  const key = isNumber$1(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
  if (isNumber$1(arg2)) {
    options.plural = arg2;
  } else if (isString$1(arg2)) {
    options.default = arg2;
  } else if (isPlainObject$3(arg2) && !isEmptyObject$1(arg2)) {
    options.named = arg2;
  } else if (isArray$1(arg2)) {
    options.list = arg2;
  }
  if (isNumber$1(arg3)) {
    options.plural = arg3;
  } else if (isString$1(arg3)) {
    options.default = arg3;
  } else if (isPlainObject$3(arg3)) {
    assign(options, arg3);
  }
  return [key, options];
}
function getCompileOptions(context, locale, key, source, warnHtmlMessage, errorDetector) {
  return {
    warnHtmlMessage,
    onError: (err) => {
      errorDetector && errorDetector(err);
      {
        const message = `Message compilation error: ${err.message}`;
        const codeFrame = err.location && generateCodeFrame(source, err.location.start.offset, err.location.end.offset);
        const emitter = context.__v_emitter;
        if (emitter) {
          emitter.emit("compile-error", {
            message: source,
            error: err.message,
            start: err.location && err.location.start.offset,
            end: err.location && err.location.end.offset,
            groupId: `${"translate"}:${key}`
          });
        }
        console.error(codeFrame ? `${message}
${codeFrame}` : message);
      }
    },
    onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)
  };
}
function getMessageContextOptions(context, locale, message, options) {
  const { modifiers, pluralRules, messageResolver: resolveValue2, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;
  const resolveMessage = (key) => {
    let val = resolveValue2(message, key);
    if (val == null && fallbackContext) {
      const [, , message2] = resolveMessageFormat(fallbackContext, key, locale, fallbackLocale, fallbackWarn, missingWarn);
      val = resolveValue2(message2, key);
    }
    if (isString$1(val)) {
      let occurred = false;
      const errorDetector = () => {
        occurred = true;
      };
      const msg = compileMessageFormat(context, key, locale, val, key, errorDetector);
      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
    } else if (isMessageFunction(val)) {
      return val;
    } else {
      return NOOP_MESSAGE_FUNCTION;
    }
  };
  const ctxOptions = {
    locale,
    modifiers,
    pluralRules,
    messages: resolveMessage
  };
  if (context.processor) {
    ctxOptions.processor = context.processor;
  }
  if (options.list) {
    ctxOptions.list = options.list;
  }
  if (options.named) {
    ctxOptions.named = options.named;
  }
  if (isNumber$1(options.plural)) {
    ctxOptions.pluralIndex = options.plural;
  }
  return ctxOptions;
}
const intlDefined = typeof Intl !== "undefined";
const Availabilities = {
  dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== "undefined",
  numberFormat: intlDefined && typeof Intl.NumberFormat !== "undefined"
};
function datetime(context, ...args) {
  const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;
  const { __datetimeFormatters } = context;
  if (!Availabilities.dateTimeFormat) {
    onWarn(getWarnMessage$1(CoreWarnCodes.CANNOT_FORMAT_DATE));
    return MISSING_RESOLVE_VALUE;
  }
  const [key, value, options, overrides] = parseDateTimeArgs(...args);
  const missingWarn = isBoolean$1(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean$1(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale = isString$1(options.locale) ? options.locale : context.locale;
  const locales = localeFallbacker(
    context,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    fallbackLocale,
    locale
  );
  if (!isString$1(key) || key === "") {
    return new Intl.DateTimeFormat(locale, overrides).format(value);
  }
  let datetimeFormat = {};
  let targetLocale;
  let format2 = null;
  let from = locale;
  let to2 = null;
  const type = "datetime format";
  for (let i2 = 0; i2 < locales.length; i2++) {
    targetLocale = to2 = locales[i2];
    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.FALLBACK_TO_DATE_FORMAT, {
        key,
        target: targetLocale
      }));
    }
    if (locale !== targetLocale) {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("fallback", {
          type,
          key,
          from,
          to: to2,
          groupId: `${type}:${key}`
        });
      }
    }
    datetimeFormat = datetimeFormats[targetLocale] || {};
    format2 = datetimeFormat[key];
    if (isPlainObject$3(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type);
    from = to2;
  }
  if (!isPlainObject$3(format2) || !isString$1(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id2 = `${targetLocale}__${key}`;
  if (!isEmptyObject$1(overrides)) {
    id2 = `${id2}__${JSON.stringify(overrides)}`;
  }
  let formatter = __datetimeFormatters.get(id2);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));
    __datetimeFormatters.set(id2, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
const DATETIME_FORMAT_OPTIONS_KEYS = [
  "localeMatcher",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName",
  "formatMatcher",
  "hour12",
  "timeZone",
  "dateStyle",
  "timeStyle",
  "calendar",
  "dayPeriod",
  "numberingSystem",
  "hourCycle",
  "fractionalSecondDigits"
];
function parseDateTimeArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  const options = {};
  let overrides = {};
  let value;
  if (isString$1(arg1)) {
    const matches2 = arg1.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);
    if (!matches2) {
      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);
    }
    const dateTime = matches2[3] ? matches2[3].trim().startsWith("T") ? `${matches2[1].trim()}${matches2[3].trim()}` : `${matches2[1].trim()}T${matches2[3].trim()}` : matches2[1].trim();
    value = new Date(dateTime);
    try {
      value.toISOString();
    } catch (e2) {
      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);
    }
  } else if (isDate$1(arg1)) {
    if (isNaN(arg1.getTime())) {
      throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);
    }
    value = arg1;
  } else if (isNumber$1(arg1)) {
    value = arg1;
  } else {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  if (isString$1(arg2)) {
    options.key = arg2;
  } else if (isPlainObject$3(arg2)) {
    Object.keys(arg2).forEach((key) => {
      if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {
        overrides[key] = arg2[key];
      } else {
        options[key] = arg2[key];
      }
    });
  }
  if (isString$1(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject$3(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject$3(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearDateTimeFormat(ctx, locale, format2) {
  const context = ctx;
  for (const key in format2) {
    const id2 = `${locale}__${key}`;
    if (!context.__datetimeFormatters.has(id2)) {
      continue;
    }
    context.__datetimeFormatters.delete(id2);
  }
}
function number(context, ...args) {
  const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;
  const { __numberFormatters } = context;
  if (!Availabilities.numberFormat) {
    onWarn(getWarnMessage$1(CoreWarnCodes.CANNOT_FORMAT_NUMBER));
    return MISSING_RESOLVE_VALUE;
  }
  const [key, value, options, overrides] = parseNumberArgs(...args);
  const missingWarn = isBoolean$1(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean$1(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale = isString$1(options.locale) ? options.locale : context.locale;
  const locales = localeFallbacker(
    context,
    // eslint-disable-line @typescript-eslint/no-explicit-any
    fallbackLocale,
    locale
  );
  if (!isString$1(key) || key === "") {
    return new Intl.NumberFormat(locale, overrides).format(value);
  }
  let numberFormat = {};
  let targetLocale;
  let format2 = null;
  let from = locale;
  let to2 = null;
  const type = "number format";
  for (let i2 = 0; i2 < locales.length; i2++) {
    targetLocale = to2 = locales[i2];
    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {
      onWarn(getWarnMessage$1(CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT, {
        key,
        target: targetLocale
      }));
    }
    if (locale !== targetLocale) {
      const emitter = context.__v_emitter;
      if (emitter) {
        emitter.emit("fallback", {
          type,
          key,
          from,
          to: to2,
          groupId: `${type}:${key}`
        });
      }
    }
    numberFormat = numberFormats[targetLocale] || {};
    format2 = numberFormat[key];
    if (isPlainObject$3(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type);
    from = to2;
  }
  if (!isPlainObject$3(format2) || !isString$1(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id2 = `${targetLocale}__${key}`;
  if (!isEmptyObject$1(overrides)) {
    id2 = `${id2}__${JSON.stringify(overrides)}`;
  }
  let formatter = __numberFormatters.get(id2);
  if (!formatter) {
    formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));
    __numberFormatters.set(id2, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
const NUMBER_FORMAT_OPTIONS_KEYS = [
  "localeMatcher",
  "style",
  "currency",
  "currencyDisplay",
  "currencySign",
  "useGrouping",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "compactDisplay",
  "notation",
  "signDisplay",
  "unit",
  "unitDisplay",
  "roundingMode",
  "roundingPriority",
  "roundingIncrement",
  "trailingZeroDisplay"
];
function parseNumberArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  const options = {};
  let overrides = {};
  if (!isNumber$1(arg1)) {
    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);
  }
  const value = arg1;
  if (isString$1(arg2)) {
    options.key = arg2;
  } else if (isPlainObject$3(arg2)) {
    Object.keys(arg2).forEach((key) => {
      if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {
        overrides[key] = arg2[key];
      } else {
        options[key] = arg2[key];
      }
    });
  }
  if (isString$1(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject$3(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject$3(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearNumberFormat(ctx, locale, format2) {
  const context = ctx;
  for (const key in format2) {
    const id2 = `${locale}__${key}`;
    if (!context.__numberFormatters.has(id2)) {
      continue;
    }
    context.__numberFormatters.delete(id2);
  }
}
{
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
function getDevtoolsGlobalHook() {
  return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable = typeof Proxy === "function";
const HOOK_SETUP = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
let supported;
let perf;
function isPerformanceSupported() {
  var _a2;
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else if (typeof global !== "undefined" && ((_a2 = global.perf_hooks) === null || _a2 === void 0 ? void 0 : _a2.performance)) {
    supported = true;
    perf = global.perf_hooks.performance;
  } else {
    supported = false;
  }
  return supported;
}
function now() {
  return isPerformanceSupported() ? perf.now() : Date.now();
}
class ApiProxy {
  constructor(plugin2, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin2;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin2.settings) {
      for (const id2 in plugin2.settings) {
        const item = plugin2.settings[id2];
        defaultSettings[id2] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin2.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e2) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e2) {
        }
        currentSettings = value;
      },
      now() {
        return now();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
}
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget();
  const hook = getDevtoolsGlobalHook();
  const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy)
      setupFn(proxy.proxiedTarget);
  }
}
/*!
  * vue-devtools v9.2.2
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const VueDevToolsLabels = {
  [
    "vue-devtools-plugin-vue-i18n"
    /* PLUGIN */
  ]: "Vue I18n devtools",
  [
    "vue-i18n-resource-inspector"
    /* CUSTOM_INSPECTOR */
  ]: "I18n Resources",
  [
    "vue-i18n-timeline"
    /* TIMELINE */
  ]: "Vue I18n"
};
const VueDevToolsPlaceholders = {
  [
    "vue-i18n-resource-inspector"
    /* CUSTOM_INSPECTOR */
  ]: "Search for scopes ..."
};
const VueDevToolsTimelineColors = {
  [
    "vue-i18n-timeline"
    /* TIMELINE */
  ]: 16764185
};
/*!
  * vue-i18n v9.2.2
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const VERSION$1 = "9.2.2";
function initFeatureFlags() {
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
let code$1 = CoreWarnCodes.__EXTEND_POINT__;
const inc$1 = () => ++code$1;
const I18nWarnCodes = {
  FALLBACK_TO_ROOT: code$1,
  NOT_SUPPORTED_PRESERVE: inc$1(),
  NOT_SUPPORTED_FORMATTER: inc$1(),
  NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(),
  NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(),
  COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(),
  NOT_FOUND_PARENT_SCOPE: inc$1()
  // 13
};
const warnMessages = {
  [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,
  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,
  [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,
  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,
  [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,
  [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,
  [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`
};
function getWarnMessage(code2, ...args) {
  return format(warnMessages[code2], ...args);
}
let code = CompileErrorCodes.__EXTEND_POINT__;
const inc = () => ++code;
const I18nErrorCodes = {
  // composer module errors
  UNEXPECTED_RETURN_TYPE: code,
  // legacy module errors
  INVALID_ARGUMENT: inc(),
  // i18n module errors
  MUST_BE_CALL_SETUP_TOP: inc(),
  NOT_INSLALLED: inc(),
  NOT_AVAILABLE_IN_LEGACY_MODE: inc(),
  // directive module errors
  REQUIRED_VALUE: inc(),
  INVALID_VALUE: inc(),
  // vue-devtools errors
  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc(),
  NOT_INSLALLED_WITH_PROVIDE: inc(),
  // unexpected error
  UNEXPECTED_ERROR: inc(),
  // not compatible legacy vue-i18n constructor
  NOT_COMPATIBLE_LEGACY_VUE_I18N: inc(),
  // bridge support vue 2.x only
  BRIDGE_SUPPORT_VUE_2_ONLY: inc(),
  // need to define `i18n` option in `allowComposition: true` and `useScope: 'local' at `useI18n``
  MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc(),
  // Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly
  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc(),
  // for enhancement
  __EXTEND_POINT__: inc()
  // 29
};
function createI18nError(code2, ...args) {
  return createCompileError(code2, null, { messages: errorMessages, args });
}
const errorMessages = {
  [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: "Unexpected return type in composer",
  [I18nErrorCodes.INVALID_ARGUMENT]: "Invalid argument",
  [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: "Must be called at the top of a `setup` function",
  [I18nErrorCodes.NOT_INSLALLED]: "Need to install with `app.use` function",
  [I18nErrorCodes.UNEXPECTED_ERROR]: "Unexpected error",
  [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: "Not available in legacy mode",
  [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,
  [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,
  [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,
  [I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE]: "Need to install with `provide` function",
  [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: "Not compatible legacy VueI18n.",
  [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: "vue-i18n-bridge support Vue 2.x only",
  [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: "Must define ‘i18n’ option or custom block in Composition API with using local scope in Legacy API mode",
  [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: "Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly"
};
const TransrateVNodeSymbol = /* @__PURE__ */ makeSymbol("__transrateVNode");
const DatetimePartsSymbol = /* @__PURE__ */ makeSymbol("__datetimeParts");
const NumberPartsSymbol = /* @__PURE__ */ makeSymbol("__numberParts");
const EnableEmitter = /* @__PURE__ */ makeSymbol("__enableEmitter");
const DisableEmitter = /* @__PURE__ */ makeSymbol("__disableEmitter");
const SetPluralRulesSymbol = makeSymbol("__setPluralRules");
makeSymbol("__intlifyMeta");
const InejctWithOption = /* @__PURE__ */ makeSymbol("__injectWithOption");
function handleFlatJson(obj) {
  if (!isObject$2(obj)) {
    return obj;
  }
  for (const key in obj) {
    if (!hasOwn(obj, key)) {
      continue;
    }
    if (!key.includes(".")) {
      if (isObject$2(obj[key])) {
        handleFlatJson(obj[key]);
      }
    } else {
      const subKeys = key.split(".");
      const lastIndex = subKeys.length - 1;
      let currentObj = obj;
      for (let i2 = 0; i2 < lastIndex; i2++) {
        if (!(subKeys[i2] in currentObj)) {
          currentObj[subKeys[i2]] = {};
        }
        currentObj = currentObj[subKeys[i2]];
      }
      currentObj[subKeys[lastIndex]] = obj[key];
      delete obj[key];
      if (isObject$2(currentObj[subKeys[lastIndex]])) {
        handleFlatJson(currentObj[subKeys[lastIndex]]);
      }
    }
  }
  return obj;
}
function getLocaleMessages(locale, options) {
  const { messages, __i18n, messageResolver, flatJson } = options;
  const ret = isPlainObject$3(messages) ? messages : isArray$1(__i18n) ? {} : { [locale]: {} };
  if (isArray$1(__i18n)) {
    __i18n.forEach((custom2) => {
      if ("locale" in custom2 && "resource" in custom2) {
        const { locale: locale2, resource: resource2 } = custom2;
        if (locale2) {
          ret[locale2] = ret[locale2] || {};
          deepCopy(resource2, ret[locale2]);
        } else {
          deepCopy(resource2, ret);
        }
      } else {
        isString$1(custom2) && deepCopy(JSON.parse(custom2), ret);
      }
    });
  }
  if (messageResolver == null && flatJson) {
    for (const key in ret) {
      if (hasOwn(ret, key)) {
        handleFlatJson(ret[key]);
      }
    }
  }
  return ret;
}
const isNotObjectOrIsArray = (val) => !isObject$2(val) || isArray$1(val);
function deepCopy(src, des) {
  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
    throw createI18nError(I18nErrorCodes.INVALID_VALUE);
  }
  for (const key in src) {
    if (hasOwn(src, key)) {
      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {
        des[key] = src[key];
      } else {
        deepCopy(src[key], des[key]);
      }
    }
  }
}
function getComponentOptions(instance) {
  return instance.type;
}
function adjustI18nResources(global2, options, componentOptions) {
  let messages = isObject$2(options.messages) ? options.messages : {};
  if ("__i18nGlobal" in componentOptions) {
    messages = getLocaleMessages(global2.locale.value, {
      messages,
      __i18n: componentOptions.__i18nGlobal
    });
  }
  const locales = Object.keys(messages);
  if (locales.length) {
    locales.forEach((locale) => {
      global2.mergeLocaleMessage(locale, messages[locale]);
    });
  }
  {
    if (isObject$2(options.datetimeFormats)) {
      const locales2 = Object.keys(options.datetimeFormats);
      if (locales2.length) {
        locales2.forEach((locale) => {
          global2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);
        });
      }
    }
    if (isObject$2(options.numberFormats)) {
      const locales2 = Object.keys(options.numberFormats);
      if (locales2.length) {
        locales2.forEach((locale) => {
          global2.mergeNumberFormat(locale, options.numberFormats[locale]);
        });
      }
    }
  }
}
function createTextNode(key) {
  return createVNode(Text, null, key, 0);
}
const DEVTOOLS_META = "__INTLIFY_META__";
let composerID = 0;
function defineCoreMissingHandler(missing) {
  return (ctx, locale, key, type) => {
    return missing(locale, key, getCurrentInstance() || void 0, type);
  };
}
const getMetaInfo = () => {
  const instance = getCurrentInstance();
  let meta = null;
  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? { [DEVTOOLS_META]: meta } : null;
};
function createComposer(options = {}, VueI18nLegacy) {
  const { __root } = options;
  const _isGlobal = __root === void 0;
  let _inheritLocale = isBoolean$1(options.inheritLocale) ? options.inheritLocale : true;
  const _locale = ref(
    // prettier-ignore
    __root && _inheritLocale ? __root.locale.value : isString$1(options.locale) ? options.locale : DEFAULT_LOCALE
  );
  const _fallbackLocale = ref(
    // prettier-ignore
    __root && _inheritLocale ? __root.fallbackLocale.value : isString$1(options.fallbackLocale) || isArray$1(options.fallbackLocale) || isPlainObject$3(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value
  );
  const _messages = ref(getLocaleMessages(_locale.value, options));
  const _datetimeFormats = ref(isPlainObject$3(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });
  const _numberFormats = ref(isPlainObject$3(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });
  let _missingWarn = __root ? __root.missingWarn : isBoolean$1(options.missingWarn) || isRegExp$1(options.missingWarn) ? options.missingWarn : true;
  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean$1(options.fallbackWarn) || isRegExp$1(options.fallbackWarn) ? options.fallbackWarn : true;
  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean$1(options.fallbackRoot) ? options.fallbackRoot : true;
  let _fallbackFormat = !!options.fallbackFormat;
  let _missing = isFunction$1(options.missing) ? options.missing : null;
  let _runtimeMissing = isFunction$1(options.missing) ? defineCoreMissingHandler(options.missing) : null;
  let _postTranslation = isFunction$1(options.postTranslation) ? options.postTranslation : null;
  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : isBoolean$1(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  let _escapeParameter = !!options.escapeParameter;
  const _modifiers = __root ? __root.modifiers : isPlainObject$3(options.modifiers) ? options.modifiers : {};
  let _pluralRules = options.pluralRules || __root && __root.pluralRules;
  let _context;
  const getCoreContext = () => {
    _isGlobal && setFallbackContext(null);
    const ctxOptions = {
      version: VERSION$1,
      locale: _locale.value,
      fallbackLocale: _fallbackLocale.value,
      messages: _messages.value,
      modifiers: _modifiers,
      pluralRules: _pluralRules,
      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
      missingWarn: _missingWarn,
      fallbackWarn: _fallbackWarn,
      fallbackFormat: _fallbackFormat,
      unresolving: true,
      postTranslation: _postTranslation === null ? void 0 : _postTranslation,
      warnHtmlMessage: _warnHtmlMessage,
      escapeParameter: _escapeParameter,
      messageResolver: options.messageResolver,
      __meta: { framework: "vue" }
    };
    {
      ctxOptions.datetimeFormats = _datetimeFormats.value;
      ctxOptions.numberFormats = _numberFormats.value;
      ctxOptions.__datetimeFormatters = isPlainObject$3(_context) ? _context.__datetimeFormatters : void 0;
      ctxOptions.__numberFormatters = isPlainObject$3(_context) ? _context.__numberFormatters : void 0;
    }
    {
      ctxOptions.__v_emitter = isPlainObject$3(_context) ? _context.__v_emitter : void 0;
    }
    const ctx = createCoreContext(ctxOptions);
    _isGlobal && setFallbackContext(ctx);
    return ctx;
  };
  _context = getCoreContext();
  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
  function trackReactivityValues() {
    return [
      _locale.value,
      _fallbackLocale.value,
      _messages.value,
      _datetimeFormats.value,
      _numberFormats.value
    ];
  }
  const locale = computed({
    get: () => _locale.value,
    set: (val) => {
      _locale.value = val;
      _context.locale = _locale.value;
    }
  });
  const fallbackLocale = computed({
    get: () => _fallbackLocale.value,
    set: (val) => {
      _fallbackLocale.value = val;
      _context.fallbackLocale = _fallbackLocale.value;
      updateFallbackLocale(_context, _locale.value, val);
    }
  });
  const messages = computed(() => _messages.value);
  const datetimeFormats = /* @__PURE__ */ computed(() => _datetimeFormats.value);
  const numberFormats = /* @__PURE__ */ computed(() => _numberFormats.value);
  function getPostTranslationHandler() {
    return isFunction$1(_postTranslation) ? _postTranslation : null;
  }
  function setPostTranslationHandler(handler) {
    _postTranslation = handler;
    _context.postTranslation = handler;
  }
  function getMissingHandler() {
    return _missing;
  }
  function setMissingHandler(handler) {
    if (handler !== null) {
      _runtimeMissing = defineCoreMissingHandler(handler);
    }
    _missing = handler;
    _context.missing = _runtimeMissing;
  }
  function isResolvedTranslateMessage(type, arg) {
    return type !== "translate" || !arg.resolvedMessage;
  }
  const wrapWithDeps = (fn2, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {
    trackReactivityValues();
    let ret;
    {
      try {
        setAdditionalMeta(getMetaInfo());
        if (!_isGlobal) {
          _context.fallbackContext = __root ? getFallbackContext() : void 0;
        }
        ret = fn2(_context);
      } finally {
        setAdditionalMeta(null);
        if (!_isGlobal) {
          _context.fallbackContext = void 0;
        }
      }
    }
    if (isNumber$1(ret) && ret === NOT_REOSLVED) {
      const [key, arg2] = argumentParser();
      if (__root && isString$1(key) && isResolvedTranslateMessage(warnType, arg2)) {
        if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key) || isTranslateMissingWarn(_missingWarn, key))) {
          warn(getWarnMessage(I18nWarnCodes.FALLBACK_TO_ROOT, {
            key,
            type: warnType
          }));
        }
        {
          const { __v_emitter: emitter } = _context;
          if (emitter && _fallbackRoot) {
            emitter.emit("fallback", {
              type: warnType,
              key,
              to: "global",
              groupId: `${warnType}:${key}`
            });
          }
        }
      }
      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
    } else if (successCondition(ret)) {
      return ret;
    } else {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);
    }
  };
  function t2(...args) {
    return wrapWithDeps((context) => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), "translate", (root) => Reflect.apply(root.t, root, [...args]), (key) => key, (val) => isString$1(val));
  }
  function rt(...args) {
    const [arg1, arg2, arg3] = args;
    if (arg3 && !isObject$2(arg3)) {
      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);
    }
    return t2(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);
  }
  function d2(...args) {
    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), "datetime format", (root) => Reflect.apply(root.d, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString$1(val));
  }
  function n2(...args) {
    return wrapWithDeps((context) => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), "number format", (root) => Reflect.apply(root.n, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString$1(val));
  }
  function normalize(values) {
    return values.map((val) => isString$1(val) || isNumber$1(val) || isBoolean$1(val) ? createTextNode(String(val)) : val);
  }
  const interpolate = (val) => val;
  const processor = {
    normalize,
    interpolate,
    type: "vnode"
  };
  function transrateVNode(...args) {
    return wrapWithDeps(
      (context) => {
        let ret;
        const _context2 = context;
        try {
          _context2.processor = processor;
          ret = Reflect.apply(translate, null, [_context2, ...args]);
        } finally {
          _context2.processor = null;
        }
        return ret;
      },
      () => parseTranslateArgs(...args),
      "translate",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (root) => root[TransrateVNodeSymbol](...args),
      (key) => [createTextNode(key)],
      (val) => isArray$1(val)
    );
  }
  function numberParts(...args) {
    return wrapWithDeps(
      (context) => Reflect.apply(number, null, [context, ...args]),
      () => parseNumberArgs(...args),
      "number format",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (root) => root[NumberPartsSymbol](...args),
      () => [],
      (val) => isString$1(val) || isArray$1(val)
    );
  }
  function datetimeParts(...args) {
    return wrapWithDeps(
      (context) => Reflect.apply(datetime, null, [context, ...args]),
      () => parseDateTimeArgs(...args),
      "datetime format",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (root) => root[DatetimePartsSymbol](...args),
      () => [],
      (val) => isString$1(val) || isArray$1(val)
    );
  }
  function setPluralRules(rules) {
    _pluralRules = rules;
    _context.pluralRules = _pluralRules;
  }
  function te2(key, locale2) {
    const targetLocale = isString$1(locale2) ? locale2 : _locale.value;
    const message = getLocaleMessage(targetLocale);
    return _context.messageResolver(message, key) !== null;
  }
  function resolveMessages(key) {
    let messages2 = null;
    const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);
    for (let i2 = 0; i2 < locales.length; i2++) {
      const targetLocaleMessages = _messages.value[locales[i2]] || {};
      const messageValue = _context.messageResolver(targetLocaleMessages, key);
      if (messageValue != null) {
        messages2 = messageValue;
        break;
      }
    }
    return messages2;
  }
  function tm(key) {
    const messages2 = resolveMessages(key);
    return messages2 != null ? messages2 : __root ? __root.tm(key) || {} : {};
  }
  function getLocaleMessage(locale2) {
    return _messages.value[locale2] || {};
  }
  function setLocaleMessage(locale2, message) {
    _messages.value[locale2] = message;
    _context.messages = _messages.value;
  }
  function mergeLocaleMessage(locale2, message) {
    _messages.value[locale2] = _messages.value[locale2] || {};
    deepCopy(message, _messages.value[locale2]);
    _context.messages = _messages.value;
  }
  function getDateTimeFormat(locale2) {
    return _datetimeFormats.value[locale2] || {};
  }
  function setDateTimeFormat(locale2, format2) {
    _datetimeFormats.value[locale2] = format2;
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale2, format2);
  }
  function mergeDateTimeFormat(locale2, format2) {
    _datetimeFormats.value[locale2] = assign(_datetimeFormats.value[locale2] || {}, format2);
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale2, format2);
  }
  function getNumberFormat(locale2) {
    return _numberFormats.value[locale2] || {};
  }
  function setNumberFormat(locale2, format2) {
    _numberFormats.value[locale2] = format2;
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale2, format2);
  }
  function mergeNumberFormat(locale2, format2) {
    _numberFormats.value[locale2] = assign(_numberFormats.value[locale2] || {}, format2);
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale2, format2);
  }
  composerID++;
  if (__root && inBrowser) {
    watch(__root.locale, (val) => {
      if (_inheritLocale) {
        _locale.value = val;
        _context.locale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
    watch(__root.fallbackLocale, (val) => {
      if (_inheritLocale) {
        _fallbackLocale.value = val;
        _context.fallbackLocale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
  }
  const composer = {
    id: composerID,
    locale,
    fallbackLocale,
    get inheritLocale() {
      return _inheritLocale;
    },
    set inheritLocale(val) {
      _inheritLocale = val;
      if (val && __root) {
        _locale.value = __root.locale.value;
        _fallbackLocale.value = __root.fallbackLocale.value;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    },
    get availableLocales() {
      return Object.keys(_messages.value).sort();
    },
    messages,
    get modifiers() {
      return _modifiers;
    },
    get pluralRules() {
      return _pluralRules || {};
    },
    get isGlobal() {
      return _isGlobal;
    },
    get missingWarn() {
      return _missingWarn;
    },
    set missingWarn(val) {
      _missingWarn = val;
      _context.missingWarn = _missingWarn;
    },
    get fallbackWarn() {
      return _fallbackWarn;
    },
    set fallbackWarn(val) {
      _fallbackWarn = val;
      _context.fallbackWarn = _fallbackWarn;
    },
    get fallbackRoot() {
      return _fallbackRoot;
    },
    set fallbackRoot(val) {
      _fallbackRoot = val;
    },
    get fallbackFormat() {
      return _fallbackFormat;
    },
    set fallbackFormat(val) {
      _fallbackFormat = val;
      _context.fallbackFormat = _fallbackFormat;
    },
    get warnHtmlMessage() {
      return _warnHtmlMessage;
    },
    set warnHtmlMessage(val) {
      _warnHtmlMessage = val;
      _context.warnHtmlMessage = val;
    },
    get escapeParameter() {
      return _escapeParameter;
    },
    set escapeParameter(val) {
      _escapeParameter = val;
      _context.escapeParameter = val;
    },
    t: t2,
    getLocaleMessage,
    setLocaleMessage,
    mergeLocaleMessage,
    getPostTranslationHandler,
    setPostTranslationHandler,
    getMissingHandler,
    setMissingHandler,
    [SetPluralRulesSymbol]: setPluralRules
  };
  {
    composer.datetimeFormats = datetimeFormats;
    composer.numberFormats = numberFormats;
    composer.rt = rt;
    composer.te = te2;
    composer.tm = tm;
    composer.d = d2;
    composer.n = n2;
    composer.getDateTimeFormat = getDateTimeFormat;
    composer.setDateTimeFormat = setDateTimeFormat;
    composer.mergeDateTimeFormat = mergeDateTimeFormat;
    composer.getNumberFormat = getNumberFormat;
    composer.setNumberFormat = setNumberFormat;
    composer.mergeNumberFormat = mergeNumberFormat;
    composer[InejctWithOption] = options.__injectWithOption;
    composer[TransrateVNodeSymbol] = transrateVNode;
    composer[DatetimePartsSymbol] = datetimeParts;
    composer[NumberPartsSymbol] = numberParts;
  }
  {
    composer[EnableEmitter] = (emitter) => {
      _context.__v_emitter = emitter;
    };
    composer[DisableEmitter] = () => {
      _context.__v_emitter = void 0;
    };
  }
  return composer;
}
const baseFormatProps = {
  tag: {
    type: [String, Object]
  },
  locale: {
    type: String
  },
  scope: {
    type: String,
    // NOTE: avoid https://github.com/microsoft/rushstack/issues/1050
    validator: (val) => val === "parent" || val === "global",
    default: "parent"
    /* ComponetI18nScope */
  },
  i18n: {
    type: Object
  }
};
function getInterpolateArg({ slots }, keys) {
  if (keys.length === 1 && keys[0] === "default") {
    const ret = slots.default ? slots.default() : [];
    return ret.reduce((slot, current) => {
      return slot = [
        ...slot,
        ...isArray$1(current.children) ? current.children : [current]
      ];
    }, []);
  } else {
    return keys.reduce((arg, key) => {
      const slot = slots[key];
      if (slot) {
        arg[key] = slot();
      }
      return arg;
    }, {});
  }
}
function getFragmentableTag(tag) {
  return Fragment;
}
const Translation = (
  /* defineComponent */
  {
    /* eslint-disable */
    name: "i18n-t",
    props: assign({
      keypath: {
        type: String,
        required: true
      },
      plural: {
        type: [Number, String],
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        validator: (val) => isNumber$1(val) || !isNaN(val)
      }
    }, baseFormatProps),
    /* eslint-enable */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    setup(props, context) {
      const { slots, attrs } = context;
      const i18n = props.i18n || useI18n({
        useScope: props.scope,
        __useComponent: true
      });
      return () => {
        const keys = Object.keys(slots).filter((key) => key !== "_");
        const options = {};
        if (props.locale) {
          options.locale = props.locale;
        }
        if (props.plural !== void 0) {
          options.plural = isString$1(props.plural) ? +props.plural : props.plural;
        }
        const arg = getInterpolateArg(context, keys);
        const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);
        const assignedAttrs = assign({}, attrs);
        const tag = isString$1(props.tag) || isObject$2(props.tag) ? props.tag : getFragmentableTag();
        return h$3(tag, assignedAttrs, children);
      };
    }
  }
);
function isVNode(target) {
  return isArray$1(target) && !isString$1(target[0]);
}
function renderFormatter(props, context, slotKeys, partFormatter) {
  const { slots, attrs } = context;
  return () => {
    const options = { part: true };
    let overrides = {};
    if (props.locale) {
      options.locale = props.locale;
    }
    if (isString$1(props.format)) {
      options.key = props.format;
    } else if (isObject$2(props.format)) {
      if (isString$1(props.format.key)) {
        options.key = props.format.key;
      }
      overrides = Object.keys(props.format).reduce((options2, prop) => {
        return slotKeys.includes(prop) ? assign({}, options2, { [prop]: props.format[prop] }) : options2;
      }, {});
    }
    const parts = partFormatter(...[props.value, options, overrides]);
    let children = [options.key];
    if (isArray$1(parts)) {
      children = parts.map((part, index) => {
        const slot = slots[part.type];
        const node = slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];
        if (isVNode(node)) {
          node[0].key = `${part.type}-${index}`;
        }
        return node;
      });
    } else if (isString$1(parts)) {
      children = [parts];
    }
    const assignedAttrs = assign({}, attrs);
    const tag = isString$1(props.tag) || isObject$2(props.tag) ? props.tag : getFragmentableTag();
    return h$3(tag, assignedAttrs, children);
  };
}
const NumberFormat = (
  /* defineComponent */
  {
    /* eslint-disable */
    name: "i18n-n",
    props: assign({
      value: {
        type: Number,
        required: true
      },
      format: {
        type: [String, Object]
      }
    }, baseFormatProps),
    /* eslint-enable */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    setup(props, context) {
      const i18n = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
      return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        i18n[NumberPartsSymbol](...args)
      ));
    }
  }
);
const DatetimeFormat = (
  /*defineComponent */
  {
    /* eslint-disable */
    name: "i18n-d",
    props: assign({
      value: {
        type: [Number, Date],
        required: true
      },
      format: {
        type: [String, Object]
      }
    }, baseFormatProps),
    /* eslint-enable */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    setup(props, context) {
      const i18n = props.i18n || useI18n({ useScope: "parent", __useComponent: true });
      return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        i18n[DatetimePartsSymbol](...args)
      ));
    }
  }
);
function getComposer$2(i18n, instance) {
  const i18nInternal = i18n;
  if (i18n.mode === "composition") {
    return i18nInternal.__getInstance(instance) || i18n.global;
  } else {
    const vueI18n = i18nInternal.__getInstance(instance);
    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;
  }
}
function vTDirective(i18n) {
  const _process = (binding) => {
    const { instance, modifiers, value } = binding;
    if (!instance || !instance.$) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    const composer = getComposer$2(i18n, instance.$);
    if (modifiers.preserve) {
      warn(getWarnMessage(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));
    }
    const parsedValue = parseValue(value);
    return [
      Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),
      composer
    ];
  };
  const register = (el2, binding) => {
    const [textContent, composer] = _process(binding);
    if (inBrowser && i18n.global === composer) {
      el2.__i18nWatcher = watch(composer.locale, () => {
        binding.instance && binding.instance.$forceUpdate();
      });
    }
    el2.__composer = composer;
    el2.textContent = textContent;
  };
  const unregister = (el2) => {
    if (inBrowser && el2.__i18nWatcher) {
      el2.__i18nWatcher();
      el2.__i18nWatcher = void 0;
      delete el2.__i18nWatcher;
    }
    if (el2.__composer) {
      el2.__composer = void 0;
      delete el2.__composer;
    }
  };
  const update = (el2, { value }) => {
    if (el2.__composer) {
      const composer = el2.__composer;
      const parsedValue = parseValue(value);
      el2.textContent = Reflect.apply(composer.t, composer, [
        ...makeParams(parsedValue)
      ]);
    }
  };
  const getSSRProps = (binding) => {
    const [textContent] = _process(binding);
    return { textContent };
  };
  return {
    created: register,
    unmounted: unregister,
    beforeUpdate: update,
    getSSRProps
  };
}
function parseValue(value) {
  if (isString$1(value)) {
    return { path: value };
  } else if (isPlainObject$3(value)) {
    if (!("path" in value)) {
      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, "path");
    }
    return value;
  } else {
    throw createI18nError(I18nErrorCodes.INVALID_VALUE);
  }
}
function makeParams(value) {
  const { path, locale, args, choice, plural } = value;
  const options = {};
  const named = args || {};
  if (isString$1(locale)) {
    options.locale = locale;
  }
  if (isNumber$1(choice)) {
    options.plural = choice;
  }
  if (isNumber$1(plural)) {
    options.plural = plural;
  }
  return [path, named, options];
}
function apply(app, i18n, ...options) {
  const pluginOptions = isPlainObject$3(options[0]) ? options[0] : {};
  const useI18nComponentName = !!pluginOptions.useI18nComponentName;
  const globalInstall = isBoolean$1(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
  if (globalInstall && useI18nComponentName) {
    warn(getWarnMessage(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {
      name: Translation.name
    }));
  }
  if (globalInstall) {
    app.component(!useI18nComponentName ? Translation.name : "i18n", Translation);
    app.component(NumberFormat.name, NumberFormat);
    app.component(DatetimeFormat.name, DatetimeFormat);
  }
  {
    app.directive("t", vTDirective(i18n));
  }
}
const VUE_I18N_COMPONENT_TYPES = "vue-i18n: composer properties";
let devtoolsApi;
async function enableDevTools(app, i18n) {
  return new Promise((resolve2, reject) => {
    try {
      setupDevtoolsPlugin({
        id: "vue-devtools-plugin-vue-i18n",
        label: VueDevToolsLabels[
          "vue-devtools-plugin-vue-i18n"
          /* PLUGIN */
        ],
        packageName: "vue-i18n",
        homepage: "https://vue-i18n.intlify.dev",
        logo: "https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png",
        componentStateTypes: [VUE_I18N_COMPONENT_TYPES],
        app
        // eslint-disable-line @typescript-eslint/no-explicit-any
      }, (api) => {
        devtoolsApi = api;
        api.on.visitComponentTree(({ componentInstance, treeNode }) => {
          updateComponentTreeTags(componentInstance, treeNode, i18n);
        });
        api.on.inspectComponent(({ componentInstance, instanceData }) => {
          if (componentInstance.vnode.el && componentInstance.vnode.el.__VUE_I18N__ && instanceData) {
            if (i18n.mode === "legacy") {
              if (componentInstance.vnode.el.__VUE_I18N__ !== i18n.global.__composer) {
                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
              }
            } else {
              inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);
            }
          }
        });
        api.addInspector({
          id: "vue-i18n-resource-inspector",
          label: VueDevToolsLabels[
            "vue-i18n-resource-inspector"
            /* CUSTOM_INSPECTOR */
          ],
          icon: "language",
          treeFilterPlaceholder: VueDevToolsPlaceholders[
            "vue-i18n-resource-inspector"
            /* CUSTOM_INSPECTOR */
          ]
        });
        api.on.getInspectorTree((payload) => {
          if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
            registerScope(payload, i18n);
          }
        });
        const roots = /* @__PURE__ */ new Map();
        api.on.getInspectorState(async (payload) => {
          if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
            api.unhighlightElement();
            inspectScope(payload, i18n);
            if (payload.nodeId === "global") {
              if (!roots.has(payload.app)) {
                const [root] = await api.getComponentInstances(payload.app);
                roots.set(payload.app, root);
              }
              api.highlightElement(roots.get(payload.app));
            } else {
              const instance = getComponentInstance(payload.nodeId, i18n);
              instance && api.highlightElement(instance);
            }
          }
        });
        api.on.editInspectorState((payload) => {
          if (payload.app === app && payload.inspectorId === "vue-i18n-resource-inspector") {
            editScope(payload, i18n);
          }
        });
        api.addTimelineLayer({
          id: "vue-i18n-timeline",
          label: VueDevToolsLabels[
            "vue-i18n-timeline"
            /* TIMELINE */
          ],
          color: VueDevToolsTimelineColors[
            "vue-i18n-timeline"
            /* TIMELINE */
          ]
        });
        resolve2(true);
      });
    } catch (e2) {
      console.error(e2);
      reject(false);
    }
  });
}
function getI18nScopeLable(instance) {
  return instance.type.name || instance.type.displayName || instance.type.__file || "Anonymous";
}
function updateComponentTreeTags(instance, treeNode, i18n) {
  const global2 = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
  if (instance && instance.vnode.el && instance.vnode.el.__VUE_I18N__) {
    if (instance.vnode.el.__VUE_I18N__ !== global2) {
      const tag = {
        label: `i18n (${getI18nScopeLable(instance)} Scope)`,
        textColor: 0,
        backgroundColor: 16764185
      };
      treeNode.tags.push(tag);
    }
  }
}
function inspectComposer(instanceData, composer) {
  const type = VUE_I18N_COMPONENT_TYPES;
  instanceData.state.push({
    type,
    key: "locale",
    editable: true,
    value: composer.locale.value
  });
  instanceData.state.push({
    type,
    key: "availableLocales",
    editable: false,
    value: composer.availableLocales
  });
  instanceData.state.push({
    type,
    key: "fallbackLocale",
    editable: true,
    value: composer.fallbackLocale.value
  });
  instanceData.state.push({
    type,
    key: "inheritLocale",
    editable: true,
    value: composer.inheritLocale
  });
  instanceData.state.push({
    type,
    key: "messages",
    editable: false,
    value: getLocaleMessageValue(composer.messages.value)
  });
  {
    instanceData.state.push({
      type,
      key: "datetimeFormats",
      editable: false,
      value: composer.datetimeFormats.value
    });
    instanceData.state.push({
      type,
      key: "numberFormats",
      editable: false,
      value: composer.numberFormats.value
    });
  }
}
function getLocaleMessageValue(messages) {
  const value = {};
  Object.keys(messages).forEach((key) => {
    const v3 = messages[key];
    if (isFunction$1(v3) && "source" in v3) {
      value[key] = getMessageFunctionDetails(v3);
    } else if (isObject$2(v3)) {
      value[key] = getLocaleMessageValue(v3);
    } else {
      value[key] = v3;
    }
  });
  return value;
}
const ESC = {
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "&": "&amp;"
};
function escape(s3) {
  return s3.replace(/[<>"&]/g, escapeChar);
}
function escapeChar(a2) {
  return ESC[a2] || a2;
}
function getMessageFunctionDetails(func) {
  const argString = func.source ? `("${escape(func.source)}")` : `(?)`;
  return {
    _custom: {
      type: "function",
      display: `<span>ƒ</span> ${argString}`
    }
  };
}
function registerScope(payload, i18n) {
  payload.rootNodes.push({
    id: "global",
    label: "Global Scope"
  });
  const global2 = i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
  for (const [keyInstance, instance] of i18n.__instances) {
    const composer = i18n.mode === "composition" ? instance : instance.__composer;
    if (global2 === composer) {
      continue;
    }
    payload.rootNodes.push({
      id: composer.id.toString(),
      label: `${getI18nScopeLable(keyInstance)} Scope`
    });
  }
}
function getComponentInstance(nodeId, i18n) {
  let instance = null;
  if (nodeId !== "global") {
    for (const [component, composer] of i18n.__instances.entries()) {
      if (composer.id.toString() === nodeId) {
        instance = component;
        break;
      }
    }
  }
  return instance;
}
function getComposer$1(nodeId, i18n) {
  if (nodeId === "global") {
    return i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
  } else {
    const instance = Array.from(i18n.__instances.values()).find((item) => item.id.toString() === nodeId);
    if (instance) {
      return i18n.mode === "composition" ? instance : instance.__composer;
    } else {
      return null;
    }
  }
}
function inspectScope(payload, i18n) {
  const composer = getComposer$1(payload.nodeId, i18n);
  if (composer) {
    payload.state = makeScopeInspectState(composer);
  }
  return null;
}
function makeScopeInspectState(composer) {
  const state = {};
  const localeType = "Locale related info";
  const localeStates = [
    {
      type: localeType,
      key: "locale",
      editable: true,
      value: composer.locale.value
    },
    {
      type: localeType,
      key: "fallbackLocale",
      editable: true,
      value: composer.fallbackLocale.value
    },
    {
      type: localeType,
      key: "availableLocales",
      editable: false,
      value: composer.availableLocales
    },
    {
      type: localeType,
      key: "inheritLocale",
      editable: true,
      value: composer.inheritLocale
    }
  ];
  state[localeType] = localeStates;
  const localeMessagesType = "Locale messages info";
  const localeMessagesStates = [
    {
      type: localeMessagesType,
      key: "messages",
      editable: false,
      value: getLocaleMessageValue(composer.messages.value)
    }
  ];
  state[localeMessagesType] = localeMessagesStates;
  {
    const datetimeFormatsType = "Datetime formats info";
    const datetimeFormatsStates = [
      {
        type: datetimeFormatsType,
        key: "datetimeFormats",
        editable: false,
        value: composer.datetimeFormats.value
      }
    ];
    state[datetimeFormatsType] = datetimeFormatsStates;
    const numberFormatsType = "Datetime formats info";
    const numberFormatsStates = [
      {
        type: numberFormatsType,
        key: "numberFormats",
        editable: false,
        value: composer.numberFormats.value
      }
    ];
    state[numberFormatsType] = numberFormatsStates;
  }
  return state;
}
function addTimelineEvent(event, payload) {
  if (devtoolsApi) {
    let groupId;
    if (payload && "groupId" in payload) {
      groupId = payload.groupId;
      delete payload.groupId;
    }
    devtoolsApi.addTimelineEvent({
      layerId: "vue-i18n-timeline",
      event: {
        title: event,
        groupId,
        time: Date.now(),
        meta: {},
        data: payload || {},
        logType: event === "compile-error" ? "error" : event === "fallback" || event === "missing" ? "warning" : "default"
      }
    });
  }
}
function editScope(payload, i18n) {
  const composer = getComposer$1(payload.nodeId, i18n);
  if (composer) {
    const [field] = payload.path;
    if (field === "locale" && isString$1(payload.state.value)) {
      composer.locale.value = payload.state.value;
    } else if (field === "fallbackLocale" && (isString$1(payload.state.value) || isArray$1(payload.state.value) || isObject$2(payload.state.value))) {
      composer.fallbackLocale.value = payload.state.value;
    } else if (field === "inheritLocale" && isBoolean$1(payload.state.value)) {
      composer.inheritLocale = payload.state.value;
    }
  }
}
const I18nInjectionKey = /* @__PURE__ */ makeSymbol("global-vue-i18n");
function createI18n(options = {}, VueI18nLegacy) {
  const __globalInjection = isBoolean$1(options.globalInjection) ? options.globalInjection : true;
  const __allowComposition = true;
  const __instances = /* @__PURE__ */ new Map();
  const [globalScope, __global] = createGlobal(options);
  const symbol = makeSymbol("vue-i18n");
  function __getInstance(component) {
    return __instances.get(component) || null;
  }
  function __setInstance(component, instance) {
    __instances.set(component, instance);
  }
  function __deleteInstance(component) {
    __instances.delete(component);
  }
  {
    const i18n = {
      // mode
      get mode() {
        return "composition";
      },
      // allowComposition
      get allowComposition() {
        return __allowComposition;
      },
      // install plugin
      async install(app, ...options2) {
        {
          app.__VUE_I18N__ = i18n;
        }
        app.__VUE_I18N_SYMBOL__ = symbol;
        app.provide(app.__VUE_I18N_SYMBOL__, i18n);
        if (__globalInjection) {
          injectGlobalFields(app, i18n.global);
        }
        {
          apply(app, i18n, ...options2);
        }
        const unmountApp = app.unmount;
        app.unmount = () => {
          i18n.dispose();
          unmountApp();
        };
        {
          const ret = await enableDevTools(app, i18n);
          if (!ret) {
            throw createI18nError(I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN);
          }
          const emitter = createEmitter();
          {
            const _composer = __global;
            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
          }
          emitter.on("*", addTimelineEvent);
        }
      },
      // global accessor
      get global() {
        return __global;
      },
      dispose() {
        globalScope.stop();
      },
      // @internal
      __instances,
      // @internal
      __getInstance,
      // @internal
      __setInstance,
      // @internal
      __deleteInstance
    };
    return i18n;
  }
}
function useI18n(options = {}) {
  const instance = getCurrentInstance();
  if (instance == null) {
    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);
  }
  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {
    throw createI18nError(I18nErrorCodes.NOT_INSLALLED);
  }
  const i18n = getI18nInstance(instance);
  const global2 = getGlobalComposer(i18n);
  const componentOptions = getComponentOptions(instance);
  const scope = getScope(options, componentOptions);
  if (scope === "global") {
    adjustI18nResources(global2, options, componentOptions);
    return global2;
  }
  if (scope === "parent") {
    let composer2 = getComposer(i18n, instance, options.__useComponent);
    if (composer2 == null) {
      {
        warn(getWarnMessage(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));
      }
      composer2 = global2;
    }
    return composer2;
  }
  const i18nInternal = i18n;
  let composer = i18nInternal.__getInstance(instance);
  if (composer == null) {
    const composerOptions = assign({}, options);
    if ("__i18n" in componentOptions) {
      composerOptions.__i18n = componentOptions.__i18n;
    }
    if (global2) {
      composerOptions.__root = global2;
    }
    composer = createComposer(composerOptions);
    setupLifeCycle(i18nInternal, instance, composer);
    i18nInternal.__setInstance(instance, composer);
  }
  return composer;
}
function createGlobal(options, legacyMode, VueI18nLegacy) {
  const scope = effectScope();
  {
    const obj = scope.run(() => createComposer(options));
    if (obj == null) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    return [scope, obj];
  }
}
function getI18nInstance(instance) {
  {
    const i18n = inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);
    if (!i18n) {
      throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE);
    }
    return i18n;
  }
}
function getScope(options, componentOptions) {
  return isEmptyObject$1(options) ? "__i18n" in componentOptions ? "local" : "global" : !options.useScope ? "local" : options.useScope;
}
function getGlobalComposer(i18n) {
  return i18n.mode === "composition" ? i18n.global : i18n.global.__composer;
}
function getComposer(i18n, target, useComponent = false) {
  let composer = null;
  const root = target.root;
  let current = target.parent;
  while (current != null) {
    const i18nInternal = i18n;
    if (i18n.mode === "composition") {
      composer = i18nInternal.__getInstance(current);
    }
    if (composer != null) {
      break;
    }
    if (root === current) {
      break;
    }
    current = current.parent;
  }
  return composer;
}
function setupLifeCycle(i18n, target, composer) {
  let emitter = null;
  {
    onMounted(() => {
      if (target.vnode.el) {
        target.vnode.el.__VUE_I18N__ = composer;
        emitter = createEmitter();
        const _composer = composer;
        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);
        emitter.on("*", addTimelineEvent);
      }
    }, target);
    onUnmounted(() => {
      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {
        emitter && emitter.off("*", addTimelineEvent);
        const _composer = composer;
        _composer[DisableEmitter] && _composer[DisableEmitter]();
        delete target.vnode.el.__VUE_I18N__;
      }
      i18n.__deleteInstance(target);
    }, target);
  }
}
const globalExportProps = [
  "locale",
  "fallbackLocale",
  "availableLocales"
];
const globalExportMethods = ["t", "rt", "d", "n", "tm"];
function injectGlobalFields(app, composer) {
  const i18n = /* @__PURE__ */ Object.create(null);
  globalExportProps.forEach((prop) => {
    const desc = Object.getOwnPropertyDescriptor(composer, prop);
    if (!desc) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    const wrap2 = isRef(desc.value) ? {
      get() {
        return desc.value.value;
      },
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      set(val) {
        desc.value.value = val;
      }
    } : {
      get() {
        return desc.get && desc.get();
      }
    };
    Object.defineProperty(i18n, prop, wrap2);
  });
  app.config.globalProperties.$i18n = i18n;
  globalExportMethods.forEach((method) => {
    const desc = Object.getOwnPropertyDescriptor(composer, method);
    if (!desc || !desc.value) {
      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);
    }
    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);
  });
}
registerMessageResolver(resolveValue);
registerLocaleFallbacker(fallbackWithLocaleChain);
{
  initFeatureFlags();
}
{
  const target = getGlobalThis();
  target.__INTLIFY__ = true;
  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  const commonAlign = reference[length] / 2 - floating[length] / 2;
  const side = getSide(placement);
  const isVertical = mainAxis === "x";
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config2) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config2;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y2
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0; i2 < validMiddleware.length; i2++) {
    const {
      name,
      fn: fn2
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn2({
      x: x2,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y2 = nextY != null ? nextY : y2;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y: y2
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
      continue;
    }
  }
  return {
    x: x2,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getSideObjectFromPadding(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y: y2,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getSideObjectFromPadding(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x2,
    y: y2
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const min$1 = Math.min;
const max$1 = Math.max;
function within(min$1$12, value, max$1$12) {
  return max$1(min$1$12, min$1(value, max$1$12));
}
const arrow$1 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x2,
      y: y2,
      placement,
      rects,
      platform: platform2,
      elements
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getSideObjectFromPadding(padding);
    const coords = {
      x: x2,
      y: y2
    };
    const axis = getMainAxisFromPlacement(placement);
    const length = getLengthFromAxis(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min$1(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min$1(paddingObject[maxProp], largestPossiblePadding);
    const min$1$12 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = within(min$1$12, center, max2);
    const shouldAddOffset = getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$1$12 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1$12 ? min$1$12 - center : max2 - center : 0;
    return {
      [axis]: coords[axis] - alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2
      }
    };
  }
});
const sides = ["top", "right", "bottom", "left"];
const allPlacements = /* @__PURE__ */ sides.reduce((acc, side) => acc.concat(side, side + "-start", side + "-end"), []);
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  let mainAlignmentSide = mainAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement(mainAlignmentSide)
  };
}
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
const autoPlacement = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "autoPlacement",
    options,
    async fn(state) {
      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
      const {
        rects,
        middlewareData,
        placement,
        platform: platform2,
        elements
      } = state;
      const {
        crossAxis = false,
        alignment,
        allowedPlacements = allPlacements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      const placements2 = alignment !== void 0 || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
      const currentPlacement = placements2[currentIndex];
      if (currentPlacement == null) {
        return {};
      }
      const {
        main: main2,
        cross
      } = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
      if (placement !== currentPlacement) {
        return {
          reset: {
            placement: placements2[0]
          }
        };
      }
      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main2], overflow[cross]];
      const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements2[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByMostSpace = allOverflows.map((d2) => {
        const alignment2 = getAlignment(d2.placement);
        return [d2.placement, alignment2 && crossAxis ? (
          // Check along the mainAxis and main crossAxis side.
          d2.overflows.slice(0, 2).reduce((acc, v3) => acc + v3, 0)
        ) : (
          // Check only the mainAxis.
          d2.overflows[0]
        ), d2.overflows];
      }).sort((a2, b3) => a2[1] - b3[1]);
      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d2) => d2[2].slice(
        0,
        // Aligned placements should not check their opposite crossAxis
        // side.
        getAlignment(d2[0]) ? 2 : 3
      ).every((v3) => v3 <= 0));
      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
      if (resetPlacement !== placement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getSideList(side, isStart, rtl) {
  const lr2 = ["left", "right"];
  const rl2 = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt2 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl2 : lr2;
      return isStart ? lr2 : rl2;
    case "left":
    case "right":
      return isStart ? tb : bt2;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
const flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const {
          main: main2,
          cross
        } = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[main2], overflow[cross]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a2, b3) => a2.overflows[1] - b3.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b3) => a2[1] - b3[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
const hide = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getMainAxisFromPlacement(placement) === "x";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y2
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      return {
        x: x2 + diffCoords.x,
        y: y2 + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis(axis) {
  return axis === "x" ? "y" : "x";
}
const shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y2,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y3
            } = _ref;
            return {
              x: x3,
              y: y3
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x2,
        y: y2
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement(getSide(placement));
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y2
        }
      };
    }
  };
};
function getWindow(node) {
  var _node$ownerDocument;
  return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function isNode(value) {
  return value instanceof getWindow(value).Node;
}
function getNodeName(node) {
  return isNode(node) ? (node.nodeName || "").toLowerCase() : "";
}
function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}
function isElement(value) {
  return value instanceof getWindow(value).Element;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const safari = isSafari();
  const css = getComputedStyle$1(element);
  return css.transform !== "none" || css.perspective !== "none" || !safari && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !safari && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function isSafari() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
const min = Math.min;
const max = Math.max;
const round = Math.round;
function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    fallback: shouldFallback
  };
}
function unwrapElement$1(element) {
  return !isElement(element) ? element.contextElement : element;
}
const FALLBACK_SCALE = {
  x: 1,
  y: 1
};
function getScale(element) {
  const domElement = unwrapElement$1(element);
  if (!isHTMLElement(domElement)) {
    return FALLBACK_SCALE;
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    fallback
  } = getCssDimensions(domElement);
  let x2 = (fallback ? round(rect.width) : rect.width) / width;
  let y2 = (fallback ? round(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x2,
    y: y2
  };
}
const noOffsets = {
  x: 0,
  y: 0
};
function getVisualOffsets(element, isFixed, floatingOffsetParent) {
  var _win$visualViewport, _win$visualViewport2;
  if (isFixed === void 0) {
    isFixed = true;
  }
  if (!isSafari()) {
    return noOffsets;
  }
  const win = element ? getWindow(element) : window;
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== win) {
    return noOffsets;
  }
  return {
    x: ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0,
    y: ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0
  };
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement$1(element);
  let scale = FALLBACK_SCALE;
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = getVisualOffsets(domElement, isFixedStrategy, offsetParent);
  let x2 = (clientRect.left + visualOffsets.x) / scale.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle(currentIFrame);
      iframeRect.x += (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      iframeRect.y += (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += iframeRect.x;
      y2 += iframeRect.y;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y: y2
  });
}
function getDocumentElement(node) {
  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = {
    x: 1,
    y: 1
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === "rtl") {
    x2 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return parentNode.ownerDocument.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isSafari();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : {
    x: 1,
    y: 1
  };
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x2 = left * scale.x;
  const y2 = top * scale.y;
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache2) {
  const cachedResult = cache2.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element).filter((el2) => isElement(el2) && getNodeName(el2) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache2.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  return getCssDimensions(element);
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
const platform$1 = {
  getClippingRect,
  convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement,
  getDimensions,
  getOffsetParent,
  getDocumentElement,
  getScale,
  async getElementRects(_ref) {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
      floating: {
        x: 0,
        y: 0,
        ...await getDimensionsFn(floating)
      }
    };
  },
  getClientRects: (element) => Array.from(element.getClientRects()),
  isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
};
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = true,
    animationFrame = false
  } = options;
  const ancestors = ancestorScroll || ancestorResize ? [...isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    const isVisualViewport = !isElement(ancestor) && ancestor.toString().includes("V");
    if (ancestorScroll && (animationFrame ? isVisualViewport : true)) {
      ancestor.addEventListener("scroll", update, {
        passive: true
      });
    }
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  let observer = null;
  if (elementResize) {
    observer = new ResizeObserver(() => {
      update();
    });
    isElement(reference) && !animationFrame && observer.observe(reference);
    if (!isElement(reference) && reference.contextElement && !animationFrame) {
      observer.observe(reference.contextElement);
    }
    observer.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _observer;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    (_observer = observer) == null ? void 0 : _observer.disconnect();
    observer = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const computePosition = (reference, floating, options) => {
  const cache2 = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform: platform$1,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache2
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
function unwrapElement(element) {
  var _$el;
  return (_$el = element == null ? void 0 : element.$el) != null ? _$el : element;
}
function arrow(options) {
  return {
    name: "arrow",
    options,
    fn(args) {
      const element = unwrapElement(unref(options.element));
      if (element == null) {
        return {};
      }
      return arrow$1({
        element,
        padding: options.padding
      }).fn(args);
    }
  };
}
function useFloating(reference, floating, options) {
  if (options === void 0) {
    options = {};
  }
  const whileElementsMountedOption = options.whileElementsMounted;
  const openOption = computed(() => {
    var _unref;
    return (_unref = unref(options.open)) != null ? _unref : true;
  });
  const middlewareOption = computed(() => unref(options.middleware));
  const placementOption = computed(() => {
    var _unref2;
    return (_unref2 = unref(options.placement)) != null ? _unref2 : "bottom";
  });
  const strategyOption = computed(() => {
    var _unref3;
    return (_unref3 = unref(options.strategy)) != null ? _unref3 : "absolute";
  });
  const referenceElement = computed(() => unwrapElement(reference.value));
  const floatingElement = computed(() => unwrapElement(floating.value));
  const x2 = ref(null);
  const y2 = ref(null);
  const strategy = ref(strategyOption.value);
  const placement = ref(placementOption.value);
  const middlewareData = shallowRef({});
  const isPositioned = ref(false);
  let whileElementsMountedCleanup;
  function update() {
    if (referenceElement.value == null || floatingElement.value == null) {
      return;
    }
    computePosition(referenceElement.value, floatingElement.value, {
      middleware: middlewareOption.value,
      placement: placementOption.value,
      strategy: strategyOption.value
    }).then((position) => {
      x2.value = position.x;
      y2.value = position.y;
      strategy.value = position.strategy;
      placement.value = position.placement;
      middlewareData.value = position.middlewareData;
      isPositioned.value = true;
    });
  }
  function cleanup() {
    if (typeof whileElementsMountedCleanup === "function") {
      whileElementsMountedCleanup();
      whileElementsMountedCleanup = void 0;
    }
  }
  function attach() {
    cleanup();
    if (whileElementsMountedOption === void 0) {
      update();
      return;
    }
    if (referenceElement.value != null && floatingElement.value != null) {
      whileElementsMountedCleanup = whileElementsMountedOption(referenceElement.value, floatingElement.value, update);
      return;
    }
  }
  function reset() {
    if (!openOption.value) {
      isPositioned.value = false;
    }
  }
  watch([middlewareOption, placementOption, strategyOption], update, {
    flush: "sync"
  });
  watch([referenceElement, floatingElement], attach, {
    flush: "sync"
  });
  watch(openOption, reset, {
    flush: "sync"
  });
  if (getCurrentScope()) {
    onScopeDispose(cleanup);
  }
  return {
    x: shallowReadonly(x2),
    y: shallowReadonly(y2),
    strategy: shallowReadonly(strategy),
    placement: shallowReadonly(placement),
    middlewareData: shallowReadonly(middlewareData),
    isPositioned: shallowReadonly(isPositioned),
    update
  };
}
var ce = Object.defineProperty;
var de = (e2, r2, o2) => r2 in e2 ? ce(e2, r2, { enumerable: true, configurable: true, writable: true, value: o2 }) : e2[r2] = o2;
var H = (e2, r2, o2) => (de(e2, typeof r2 != "symbol" ? r2 + "" : r2, o2), o2);
function j(e2) {
  if (e2 == null || e2.value == null)
    return null;
  const r2 = e2.value.$el ?? e2.value;
  return r2.$el ? j(ref(r2)) : r2;
}
class Oe {
  constructor() {
    H(this, "current", this.detect());
  }
  set(r2) {
    this.current !== r2 && (this.current = r2);
  }
  reset() {
    this.set(this.detect());
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window > "u" || typeof document > "u" ? "server" : "client";
  }
}
const z$2 = new Oe();
function D(e2) {
  return e2.reduce((r2, o2) => o2.type === Fragment ? r2.concat(D(o2.children)) : r2.concat(o2), []);
}
function I(e2) {
  return e2 == null ? false : typeof e2.type == "string" || typeof e2.type == "object" || typeof e2.type == "function";
}
function W(e2) {
  return e2 = unref(e2), e2 && (e2 == null ? void 0 : e2.nodeType) !== Node.COMMENT_NODE;
}
function Ne(e2, r2, o2, i2, t2) {
  watch([
    () => t2.offset,
    () => t2.flip,
    () => t2.shift,
    () => t2.autoPlacement,
    () => t2.arrow,
    () => t2.hide,
    () => t2.middleware
  ], () => {
    const a2 = [];
    (typeof t2.offset == "number" || typeof t2.offset == "object" || typeof t2.offset == "function") && a2.push(offset(t2.offset)), (t2.flip === true || typeof t2.flip == "number" || typeof t2.flip == "object") && a2.push(flip({
      padding: typeof t2.flip == "number" ? t2.flip : void 0,
      ...typeof t2.flip == "object" ? t2.flip : {}
    })), (t2.shift === true || typeof t2.shift == "number" || typeof t2.shift == "object") && a2.push(shift({
      padding: typeof t2.shift == "number" ? t2.shift : void 0,
      ...typeof t2.shift == "object" ? t2.shift : {}
    })), (t2.autoPlacement === true || typeof t2.autoPlacement == "object") && a2.push(autoPlacement(
      typeof t2.autoPlacement == "object" ? t2.autoPlacement : void 0
    )), (t2.arrow === true || typeof t2.arrow == "number") && a2.push(arrow({
      element: i2,
      padding: t2.arrow === true ? 0 : t2.arrow
    })), a2.push(...typeof t2.middleware == "function" ? t2.middleware({
      referenceEl: r2,
      floatingEl: o2
    }) : t2.middleware || []), (t2.hide === true || typeof t2.hide == "object") && a2.push(hide(
      typeof t2.hide == "object" ? t2.hide : void 0
    )), e2.value = a2;
  }, { immediate: true });
}
function Re(e2, r2, o2) {
  let i2 = () => {
  };
  onMounted(() => {
    if (e2 && z$2.isClient && typeof ResizeObserver < "u" && r2.value && r2.value instanceof Element) {
      const t2 = new ResizeObserver(([a2]) => {
        o2.value = a2.borderBoxSize.reduce((c2, { inlineSize: s3 }) => c2 + s3, 0);
      });
      t2.observe(r2.value), i2 = () => {
        t2.disconnect(), o2.value = null;
      };
    }
  }), onBeforeUnmount(() => {
    i2();
  });
}
const Be = (e2) => {
  switch (e2) {
    case "top":
      return "origin-bottom";
    case "bottom":
      return "origin-top";
    case "left":
      return "origin-right";
    case "right":
      return "origin-left";
    case "top-start":
    case "right-end":
      return "origin-bottom-left";
    case "top-end":
    case "left-end":
      return "origin-bottom-right";
    case "right-start":
    case "bottom-start":
      return "origin-top-left";
    case "left-start":
    case "bottom-end":
      return "origin-top-right";
    default:
      return "";
  }
};
function je(e2, r2) {
  const o2 = computed(() => {
    if (typeof e2.originClass == "function")
      return e2.originClass(r2.value);
    if (typeof e2.originClass == "string")
      return e2.originClass;
    if (e2.tailwindcssOriginClass)
      return Be(r2.value);
  }), i2 = computed(
    () => e2.enter || o2.value ? `${e2.enter || ""} ${o2.value || ""}` : void 0
  ), t2 = computed(
    () => e2.leave || o2.value ? `${e2.leave || ""} ${o2.value || ""}` : void 0
  );
  return { originClassRef: o2, enterActiveClassRef: i2, leaveActiveClassRef: t2 };
}
const ee = Symbol("ReferenceContext"), te$1 = Symbol("FloatingContext"), ne = Symbol("ArrowContext");
function ae(e2) {
  const r2 = inject(ne, null);
  if (r2 === null) {
    const o2 = new Error(`<${e2} /> must be in the <Float /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(o2, ae), o2;
  }
  return r2;
}
const n$1 = {
  as: {
    type: [String, Function],
    default: "template"
  },
  floatingAs: {
    type: [String, Function],
    default: "div"
  },
  show: {
    type: Boolean,
    default: null
  },
  placement: {
    type: String,
    default: "bottom-start"
  },
  strategy: {
    type: String,
    default: "absolute"
  },
  offset: [Number, Function, Object],
  shift: {
    type: [Boolean, Number, Object],
    default: false
  },
  flip: {
    type: [Boolean, Number, Object],
    default: false
  },
  arrow: {
    type: [Boolean, Number],
    default: false
  },
  autoPlacement: {
    type: [Boolean, Object],
    default: false
  },
  hide: {
    type: [Boolean, Object],
    default: false
  },
  autoUpdate: {
    type: [Boolean, Object],
    default: true
  },
  zIndex: {
    type: [Number, String],
    default: 9999
  },
  transitionName: String,
  transitionType: String,
  enter: String,
  enterFrom: String,
  enterTo: String,
  leave: String,
  leaveFrom: String,
  leaveTo: String,
  originClass: [String, Function],
  tailwindcssOriginClass: {
    type: Boolean,
    default: false
  },
  portal: {
    type: Boolean,
    default: false
  },
  transform: {
    type: Boolean,
    default: true
  },
  adaptiveWidth: {
    type: Boolean,
    default: false
  },
  composable: {
    type: Boolean,
    default: false
  },
  dialog: {
    type: Boolean,
    default: false
  },
  middleware: {
    type: [Array, Function],
    default: () => []
  }
};
function ie(e2, r2, o2, i2) {
  const { referenceRef: t2 } = i2, a2 = r2, c2 = mergeProps(o2, {
    ref: t2
  }), s3 = cloneVNode(
    e2,
    a2.as === "template" ? c2 : {}
  );
  return a2.as === "template" ? s3 : typeof a2.as == "string" ? h$3(a2.as, c2, [s3]) : h$3(a2.as, c2, () => [s3]);
}
function L(e2, r2, o2, i2) {
  const { floatingRef: t2, props: a2, mounted: c2, show: s3, x: u2, y: d2, placement: f2, strategy: h2, referenceElWidth: m2, updateFloating: y2 } = i2, l2 = mergeProps(
    { ...a2, as: a2.floatingAs },
    r2
  ), { enterActiveClassRef: v3, leaveActiveClassRef: C2 } = je(l2, f2), E3 = {
    enterActiveClass: v3.value,
    enterFromClass: l2.enterFrom,
    enterToClass: l2.enterTo,
    leaveActiveClass: C2.value,
    leaveFromClass: l2.leaveFrom,
    leaveToClass: l2.leaveTo
  }, x2 = {
    name: l2.transitionName,
    type: l2.transitionType,
    appear: true,
    ...l2.transitionName ? {} : E3,
    onBeforeEnter() {
      s3.value = true;
    },
    onAfterLeave() {
      s3.value = false;
    }
  }, R2 = {
    enter: v3.value,
    enterFrom: l2.enterFrom,
    enterTo: l2.enterTo,
    leave: C2.value,
    leaveFrom: l2.leaveFrom,
    leaveTo: l2.leaveTo,
    onBeforeEnter: x2.onBeforeEnter,
    onAfterLeave: x2.onAfterLeave
  }, $3 = {
    style: {
      // If enable dialog mode, then set `transform` to false.
      ...!l2.dialog && l2.transform ? {
        position: h2.value,
        zIndex: l2.zIndex,
        top: "0px",
        left: "0px",
        right: "auto",
        bottom: "auto",
        transform: `translate(${Math.round(u2.value || 0)}px,${Math.round(d2.value || 0)}px)`
      } : {
        position: h2.value,
        zIndex: l2.zIndex,
        top: `${d2.value || 0}px`,
        left: `${u2.value || 0}px`
      },
      width: l2.adaptiveWidth && typeof m2.value == "number" ? `${m2.value}px` : void 0
    }
  };
  function V2(w2) {
    return l2.portal ? h$3(U$2, () => w2) : w2;
  }
  function P3(w2) {
    const A3 = mergeProps(
      $3,
      o2,
      l2.dialog ? {} : { ref: t2 }
    );
    return l2.as === "template" ? w2 : typeof l2.as == "string" ? h$3(l2.as, A3, w2) : h$3(l2.as, A3, () => w2);
  }
  function B2() {
    function w2() {
      var b3;
      const A3 = l2.as === "template" ? mergeProps(
        $3,
        o2,
        l2.dialog ? {} : { ref: t2 }
      ) : null, S2 = cloneVNode(e2, A3);
      return ((b3 = S2.props) == null ? void 0 : b3.unmount) === false ? (y2(), S2) : typeof l2.show != "boolean" || l2.show ? S2 : createCommentVNode();
    }
    return z$2.isServer ? c2.value && l2.show ? w2() : createCommentVNode() : l2.transitionChild ? h$3(he, {
      key: `placement-${f2.value}`,
      ...l2.dialog ? { ref: t2 } : {},
      as: "template",
      ...R2
    }, w2) : h$3(Transition, {
      ...l2.dialog ? { ref: t2 } : {},
      ...x2
    }, w2);
  }
  return V2(
    P3(
      B2()
    )
  );
}
function le(e2, r2, o2, i2, t2) {
  const a2 = ref(false), c2 = toRef(i2, "placement"), s3 = toRef(i2, "strategy"), u2 = shallowRef({}), d2 = ref(null), f2 = ref(void 0), h2 = ref(void 0), m2 = computed(() => j(r2)), y2 = computed(() => j(o2)), l2 = computed(
    () => W(m2) && W(y2)
  ), { x: v3, y: C2, placement: E3, strategy: x2, middlewareData: R2, update: $3 } = useFloating(m2, y2, {
    placement: c2,
    strategy: s3,
    middleware: u2,
    whileElementsMounted: () => {
    }
  }), V2 = ref(null);
  onMounted(() => {
    a2.value = true;
  });
  function P3() {
    l2.value && ($3(), t2("update"));
  }
  watch([c2, s3, u2], P3, { flush: "sync" }), Ne(
    u2,
    m2,
    y2,
    d2,
    i2
  ), watch(R2, () => {
    const b3 = R2.value.arrow;
    f2.value = b3 == null ? void 0 : b3.x, h2.value = b3 == null ? void 0 : b3.y;
  }), Re(i2.adaptiveWidth, m2, V2), watch(e2, async (b3, He2, ue2) => {
    if (await nextTick(), e2.value && l2.value && i2.autoUpdate) {
      const fe = autoUpdate(
        m2.value,
        y2.value,
        P3,
        typeof i2.autoUpdate == "object" ? i2.autoUpdate : void 0
      );
      t2("show"), ue2(() => {
        fe(), e2.value || t2("hide");
      });
    }
  }, { flush: "post", immediate: true });
  const B2 = ref(true);
  watch(m2, () => {
    !(m2.value instanceof Element) && l2.value && B2.value && (B2.value = false, window.requestAnimationFrame(() => {
      B2.value = true, P3();
    }));
  }, { flush: "sync" });
  const w2 = {
    referenceRef: r2,
    placement: E3
  }, A3 = {
    floatingRef: o2,
    props: i2,
    mounted: a2,
    show: e2,
    x: v3,
    y: C2,
    placement: E3,
    strategy: x2,
    referenceElWidth: V2,
    updateFloating: P3
  }, S2 = {
    ref: d2,
    placement: E3,
    x: f2,
    y: h2
  };
  return provide(ne, S2), { referenceApi: w2, floatingApi: A3, arrowApi: S2, x: v3, y: C2, placement: E3, strategy: x2, referenceEl: m2, floatingEl: y2, middlewareData: R2, update: P3 };
}
const Ie = {
  name: "Float",
  inheritAttrs: false,
  props: n$1,
  emits: ["show", "hide", "update"],
  setup(e2, { emit: r2, slots: o2, attrs: i2 }) {
    const t2 = ref(e2.show ?? false), a2 = ref(null), c2 = ref(null), {
      referenceApi: s3,
      floatingApi: u2,
      placement: d2
    } = le(t2, a2, c2, e2, r2);
    function f2(m2) {
      return e2.as === "template" ? m2 : typeof e2.as == "string" ? h$3(e2.as, i2, m2) : h$3(e2.as, i2, () => m2);
    }
    const h2 = {
      placement: d2.value
    };
    return e2.composable || e2.dialog ? (provide(ee, s3), provide(te$1, u2), () => {
      if (o2.default)
        return f2(o2.default(h2));
    }) : () => {
      if (!o2.default)
        return;
      const [m2, y2] = D(o2.default(h2)).filter(I);
      if (!I(m2))
        return;
      const l2 = ie(
        m2,
        { as: "template" },
        {},
        s3
      ), v3 = L(
        y2,
        { as: e2.floatingAs },
        {},
        u2
      );
      return f2([
        l2,
        v3
      ]);
    };
  }
};
({
  as: n$1.as
});
({
  as: n$1.floatingAs,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  transitionChild: {
    type: Boolean,
    default: false
  }
});
const Ue = {
  as: {
    ...n$1.as,
    default: "div"
  },
  offset: {
    type: Number,
    default: 4
  }
}, Qe = {
  name: "FloatArrow",
  props: Ue,
  setup(e2, { slots: r2, attrs: o2 }) {
    const { ref: i2, placement: t2, x: a2, y: c2 } = ae("FloatArrow");
    return () => {
      var d2;
      const s3 = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right"
      }[t2.value.split("-")[0]], u2 = {
        left: typeof a2.value == "number" ? `${a2.value}px` : void 0,
        top: typeof c2.value == "number" ? `${c2.value}px` : void 0,
        right: void 0,
        bottom: void 0,
        [s3]: `${e2.offset * -1}px`
      };
      if (e2.as === "template") {
        const f2 = {
          placement: t2.value
        }, h2 = (d2 = r2.default) == null ? void 0 : d2.call(r2, f2)[0];
        return !h2 || !I(h2) ? void 0 : cloneVNode(h2, { ref: i2, style: u2 });
      }
      return h$3(e2.as, mergeProps(o2, { ref: i2, style: u2 }));
    };
  }
};
({
  as: n$1.as,
  show: n$1.show,
  placement: n$1.placement,
  strategy: n$1.strategy,
  offset: n$1.offset,
  shift: n$1.shift,
  flip: n$1.flip,
  arrow: n$1.arrow,
  autoPlacement: n$1.autoPlacement,
  hide: n$1.hide,
  autoUpdate: n$1.autoUpdate,
  zIndex: n$1.zIndex,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  portal: n$1.portal,
  transform: n$1.transform,
  middleware: n$1.middleware
});
({
  as: n$1.as,
  placement: n$1.placement,
  strategy: n$1.strategy,
  offset: n$1.offset,
  shift: n$1.shift,
  flip: {
    ...n$1.flip,
    default: true
  },
  arrow: n$1.arrow,
  autoPlacement: n$1.autoPlacement,
  hide: n$1.hide,
  autoUpdate: n$1.autoUpdate,
  zIndex: n$1.zIndex,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  transform: n$1.transform,
  middleware: n$1.middleware
});
({
  as: n$1.as,
  placement: n$1.placement,
  strategy: n$1.strategy,
  offset: n$1.offset,
  shift: n$1.shift,
  flip: n$1.flip,
  arrow: n$1.arrow,
  autoPlacement: n$1.autoPlacement,
  hide: n$1.hide,
  autoUpdate: n$1.autoUpdate,
  zIndex: n$1.zIndex,
  transitionName: n$1.transitionName,
  transitionType: n$1.transitionType,
  enter: n$1.enter,
  enterFrom: n$1.enterFrom,
  enterTo: n$1.enterTo,
  leave: n$1.leave,
  leaveFrom: n$1.leaveFrom,
  leaveTo: n$1.leaveTo,
  originClass: n$1.originClass,
  tailwindcssOriginClass: n$1.tailwindcssOriginClass,
  transform: n$1.transform,
  middleware: n$1.middleware,
  globalHideCursor: {
    type: Boolean,
    default: true
  }
});
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof {} !== "undefined" ? {} : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var mainExports$1 = {};
var main$1 = {
  get exports() {
    return mainExports$1;
  },
  set exports(v3) {
    mainExports$1 = v3;
  }
};
(function(module2, exports) {
  !function(t2, n2) {
    module2.exports = n2();
  }(commonjsGlobal$1, () => {
    return t2 = { 770: function(t3, n3, e2) {
      var r2 = this && this.__importDefault || function(t4) {
        return t4 && t4.__esModule ? t4 : { default: t4 };
      };
      Object.defineProperty(n3, "__esModule", { value: true }), n3.setDefaultDebugCall = n3.createOnigScanner = n3.createOnigString = n3.loadWASM = n3.OnigScanner = n3.OnigString = void 0;
      const i2 = r2(e2(418));
      let o2 = null, a2 = false;
      class f2 {
        static _utf8ByteLength(t4) {
          let n4 = 0;
          for (let e3 = 0, r3 = t4.length; e3 < r3; e3++) {
            const i3 = t4.charCodeAt(e3);
            let o3 = i3, a3 = false;
            if (i3 >= 55296 && i3 <= 56319 && e3 + 1 < r3) {
              const n5 = t4.charCodeAt(e3 + 1);
              n5 >= 56320 && n5 <= 57343 && (o3 = 65536 + (i3 - 55296 << 10) | n5 - 56320, a3 = true);
            }
            n4 += o3 <= 127 ? 1 : o3 <= 2047 ? 2 : o3 <= 65535 ? 3 : 4, a3 && e3++;
          }
          return n4;
        }
        constructor(t4) {
          const n4 = t4.length, e3 = f2._utf8ByteLength(t4), r3 = e3 !== n4, i3 = r3 ? new Uint32Array(n4 + 1) : null;
          r3 && (i3[n4] = e3);
          const o3 = r3 ? new Uint32Array(e3 + 1) : null;
          r3 && (o3[e3] = n4);
          const a3 = new Uint8Array(e3);
          let s4 = 0;
          for (let e4 = 0; e4 < n4; e4++) {
            const f3 = t4.charCodeAt(e4);
            let u3 = f3, c3 = false;
            if (f3 >= 55296 && f3 <= 56319 && e4 + 1 < n4) {
              const n5 = t4.charCodeAt(e4 + 1);
              n5 >= 56320 && n5 <= 57343 && (u3 = 65536 + (f3 - 55296 << 10) | n5 - 56320, c3 = true);
            }
            r3 && (i3[e4] = s4, c3 && (i3[e4 + 1] = s4), u3 <= 127 ? o3[s4 + 0] = e4 : u3 <= 2047 ? (o3[s4 + 0] = e4, o3[s4 + 1] = e4) : u3 <= 65535 ? (o3[s4 + 0] = e4, o3[s4 + 1] = e4, o3[s4 + 2] = e4) : (o3[s4 + 0] = e4, o3[s4 + 1] = e4, o3[s4 + 2] = e4, o3[s4 + 3] = e4)), u3 <= 127 ? a3[s4++] = u3 : u3 <= 2047 ? (a3[s4++] = 192 | (1984 & u3) >>> 6, a3[s4++] = 128 | (63 & u3) >>> 0) : u3 <= 65535 ? (a3[s4++] = 224 | (61440 & u3) >>> 12, a3[s4++] = 128 | (4032 & u3) >>> 6, a3[s4++] = 128 | (63 & u3) >>> 0) : (a3[s4++] = 240 | (1835008 & u3) >>> 18, a3[s4++] = 128 | (258048 & u3) >>> 12, a3[s4++] = 128 | (4032 & u3) >>> 6, a3[s4++] = 128 | (63 & u3) >>> 0), c3 && e4++;
          }
          this.utf16Length = n4, this.utf8Length = e3, this.utf16Value = t4, this.utf8Value = a3, this.utf16OffsetToUtf8 = i3, this.utf8OffsetToUtf16 = o3;
        }
        createString(t4) {
          const n4 = t4._omalloc(this.utf8Length);
          return t4.HEAPU8.set(this.utf8Value, n4), n4;
        }
      }
      class s3 {
        constructor(t4) {
          if (this.id = ++s3.LAST_ID, !o2)
            throw new Error("Must invoke loadWASM first.");
          this._onigBinding = o2, this.content = t4;
          const n4 = new f2(t4);
          this.utf16Length = n4.utf16Length, this.utf8Length = n4.utf8Length, this.utf16OffsetToUtf8 = n4.utf16OffsetToUtf8, this.utf8OffsetToUtf16 = n4.utf8OffsetToUtf16, this.utf8Length < 1e4 && !s3._sharedPtrInUse ? (s3._sharedPtr || (s3._sharedPtr = o2._omalloc(1e4)), s3._sharedPtrInUse = true, o2.HEAPU8.set(n4.utf8Value, s3._sharedPtr), this.ptr = s3._sharedPtr) : this.ptr = n4.createString(o2);
        }
        convertUtf8OffsetToUtf16(t4) {
          return this.utf8OffsetToUtf16 ? t4 < 0 ? 0 : t4 > this.utf8Length ? this.utf16Length : this.utf8OffsetToUtf16[t4] : t4;
        }
        convertUtf16OffsetToUtf8(t4) {
          return this.utf16OffsetToUtf8 ? t4 < 0 ? 0 : t4 > this.utf16Length ? this.utf8Length : this.utf16OffsetToUtf8[t4] : t4;
        }
        dispose() {
          this.ptr === s3._sharedPtr ? s3._sharedPtrInUse = false : this._onigBinding._ofree(this.ptr);
        }
      }
      n3.OnigString = s3, s3.LAST_ID = 0, s3._sharedPtr = 0, s3._sharedPtrInUse = false;
      class u2 {
        constructor(t4) {
          if (!o2)
            throw new Error("Must invoke loadWASM first.");
          const n4 = [], e3 = [];
          for (let r4 = 0, i4 = t4.length; r4 < i4; r4++) {
            const i5 = new f2(t4[r4]);
            n4[r4] = i5.createString(o2), e3[r4] = i5.utf8Length;
          }
          const r3 = o2._omalloc(4 * t4.length);
          o2.HEAPU32.set(n4, r3 / 4);
          const i3 = o2._omalloc(4 * t4.length);
          o2.HEAPU32.set(e3, i3 / 4);
          const a3 = o2._createOnigScanner(r3, i3, t4.length);
          for (let e4 = 0, r4 = t4.length; e4 < r4; e4++)
            o2._ofree(n4[e4]);
          o2._ofree(i3), o2._ofree(r3), 0 === a3 && function(t5) {
            throw new Error(t5.UTF8ToString(t5._getLastOnigError()));
          }(o2), this._onigBinding = o2, this._ptr = a3;
        }
        dispose() {
          this._onigBinding._freeOnigScanner(this._ptr);
        }
        findNextMatchSync(t4, n4, e3) {
          let r3 = a2, i3 = 0;
          if ("number" == typeof e3 ? (8 & e3 && (r3 = true), i3 = e3) : "boolean" == typeof e3 && (r3 = e3), "string" == typeof t4) {
            t4 = new s3(t4);
            const e4 = this._findNextMatchSync(t4, n4, r3, i3);
            return t4.dispose(), e4;
          }
          return this._findNextMatchSync(t4, n4, r3, i3);
        }
        _findNextMatchSync(t4, n4, e3, r3) {
          const i3 = this._onigBinding;
          let o3;
          if (o3 = e3 ? i3._findNextOnigScannerMatchDbg(this._ptr, t4.id, t4.ptr, t4.utf8Length, t4.convertUtf16OffsetToUtf8(n4), r3) : i3._findNextOnigScannerMatch(this._ptr, t4.id, t4.ptr, t4.utf8Length, t4.convertUtf16OffsetToUtf8(n4), r3), 0 === o3)
            return null;
          const a3 = i3.HEAPU32;
          let f3 = o3 / 4;
          const s4 = a3[f3++], u3 = a3[f3++];
          let c3 = [];
          for (let n5 = 0; n5 < u3; n5++) {
            const e4 = t4.convertUtf8OffsetToUtf16(a3[f3++]), r4 = t4.convertUtf8OffsetToUtf16(a3[f3++]);
            c3[n5] = { start: e4, end: r4, length: r4 - e4 };
          }
          return { index: s4, captureIndices: c3 };
        }
      }
      n3.OnigScanner = u2;
      let c2 = false, l2 = null;
      n3.loadWASM = function(t4) {
        if (c2)
          return l2;
        let n4, e3, r3, a3;
        if (c2 = true, function(t5) {
          return "function" == typeof t5.instantiator;
        }(t4))
          n4 = t4.instantiator, e3 = t4.print;
        else {
          let r4;
          !function(t5) {
            return void 0 !== t5.data;
          }(t4) ? r4 = t4 : (r4 = t4.data, e3 = t4.print), n4 = function(t5) {
            return "undefined" != typeof Response && t5 instanceof Response;
          }(r4) ? "function" == typeof WebAssembly.instantiateStreaming ? function(t5) {
            return (n5) => WebAssembly.instantiateStreaming(t5, n5);
          }(r4) : function(t5) {
            return async (n5) => {
              const e4 = await t5.arrayBuffer();
              return WebAssembly.instantiate(e4, n5);
            };
          }(r4) : function(t5) {
            return (n5) => WebAssembly.instantiate(t5, n5);
          }(r4);
        }
        return l2 = new Promise((t5, n5) => {
          r3 = t5, a3 = n5;
        }), function(t5, n5, e4, r4) {
          (0, i2.default)({ print: n5, instantiateWasm: (n6, e5) => {
            if ("undefined" == typeof performance) {
              const t6 = () => Date.now();
              n6.env.emscripten_get_now = t6, n6.wasi_snapshot_preview1.emscripten_get_now = t6;
            }
            return t5(n6).then((t6) => e5(t6.instance), r4), {};
          } }).then((t6) => {
            o2 = t6, e4();
          });
        }(n4, e3, r3, a3), l2;
      }, n3.createOnigString = function(t4) {
        return new s3(t4);
      }, n3.createOnigScanner = function(t4) {
        return new u2(t4);
      }, n3.setDefaultDebugCall = function(t4) {
        a2 = t4;
      };
    }, 418: (t3) => {
      var n3 = ("undefined" != typeof document && document.currentScript && document.currentScript.src, function(t4) {
        var n4, e2, r2 = void 0 !== (t4 = t4 || {}) ? t4 : {};
        r2.ready = new Promise(function(t5, r3) {
          n4 = t5, e2 = r3;
        });
        var i2, o2 = Object.assign({}, r2), s3 = false, c2 = "";
        function l2(t5) {
          return r2.locateFile ? r2.locateFile(t5, c2) : c2 + t5;
        }
        i2 = function(t5) {
          let n5;
          return "function" == typeof readbuffer ? new Uint8Array(readbuffer(t5)) : (n5 = read(t5, "binary"), m2("object" == typeof n5), n5);
        }, "undefined" != typeof scriptArgs ? scriptArgs : void 0 !== arguments && arguments, "undefined" != typeof onig_print && ("undefined" == typeof console && (console = {}), console.log = onig_print, console.warn = console.error = "undefined" != typeof printErr ? printErr : onig_print);
        var h2, p2, d2 = r2.print || console.log.bind(console), g2 = r2.printErr || console.warn.bind(console);
        Object.assign(r2, o2), o2 = null, r2.arguments && r2.arguments, r2.thisProgram && r2.thisProgram, r2.quit && r2.quit, r2.wasmBinary && (h2 = r2.wasmBinary), r2.noExitRuntime, "object" != typeof WebAssembly && k2("no native wasm support detected");
        var _2 = false;
        function m2(t5, n5) {
          t5 || k2(n5);
        }
        var y2, w2, S2, v3 = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
        function A3(t5, n5, e3) {
          for (var r3 = n5 + e3, i3 = n5; t5[i3] && !(i3 >= r3); )
            ++i3;
          if (i3 - n5 > 16 && t5.buffer && v3)
            return v3.decode(t5.subarray(n5, i3));
          for (var o3 = ""; n5 < i3; ) {
            var a2 = t5[n5++];
            if (128 & a2) {
              var f2 = 63 & t5[n5++];
              if (192 != (224 & a2)) {
                var s4 = 63 & t5[n5++];
                if ((a2 = 224 == (240 & a2) ? (15 & a2) << 12 | f2 << 6 | s4 : (7 & a2) << 18 | f2 << 12 | s4 << 6 | 63 & t5[n5++]) < 65536)
                  o3 += String.fromCharCode(a2);
                else {
                  var u2 = a2 - 65536;
                  o3 += String.fromCharCode(55296 | u2 >> 10, 56320 | 1023 & u2);
                }
              } else
                o3 += String.fromCharCode((31 & a2) << 6 | f2);
            } else
              o3 += String.fromCharCode(a2);
          }
          return o3;
        }
        function b3(t5, n5) {
          return t5 ? A3(w2, t5, n5) : "";
        }
        function O2(t5) {
          y2 = t5, r2.HEAP8 = new Int8Array(t5), r2.HEAP16 = new Int16Array(t5), r2.HEAP32 = new Int32Array(t5), r2.HEAPU8 = w2 = new Uint8Array(t5), r2.HEAPU16 = new Uint16Array(t5), r2.HEAPU32 = S2 = new Uint32Array(t5), r2.HEAPF32 = new Float32Array(t5), r2.HEAPF64 = new Float64Array(t5);
        }
        r2.INITIAL_MEMORY;
        var U2 = [], P3 = [], R2 = [];
        function x2() {
          if (r2.preRun)
            for ("function" == typeof r2.preRun && (r2.preRun = [r2.preRun]); r2.preRun.length; )
              M2(r2.preRun.shift());
          G3(U2);
        }
        function T3() {
          G3(P3);
        }
        function E3() {
          if (r2.postRun)
            for ("function" == typeof r2.postRun && (r2.postRun = [r2.postRun]); r2.postRun.length; )
              I2(r2.postRun.shift());
          G3(R2);
        }
        function M2(t5) {
          U2.unshift(t5);
        }
        function L2(t5) {
          P3.unshift(t5);
        }
        function I2(t5) {
          R2.unshift(t5);
        }
        var W3 = 0, C2 = null;
        function N3(t5) {
          W3++, r2.monitorRunDependencies && r2.monitorRunDependencies(W3);
        }
        function j2(t5) {
          if (W3--, r2.monitorRunDependencies && r2.monitorRunDependencies(W3), 0 == W3 && C2) {
            var n5 = C2;
            C2 = null, n5();
          }
        }
        function k2(t5) {
          r2.onAbort && r2.onAbort(t5), g2(t5 = "Aborted(" + t5 + ")"), _2 = true, t5 += ". Build with -sASSERTIONS for more info.";
          var n5 = new WebAssembly.RuntimeError(t5);
          throw e2(n5), n5;
        }
        var B2, H2, F3 = "data:application/octet-stream;base64,";
        function V2(t5) {
          return t5.startsWith(F3);
        }
        function z2(t5) {
          try {
            if (t5 == B2 && h2)
              return new Uint8Array(h2);
            if (i2)
              return i2(t5);
            throw "both async and sync fetching of the wasm failed";
          } catch (t6) {
            k2(t6);
          }
        }
        function q() {
          return h2 || !s3 || "function" != typeof fetch ? Promise.resolve().then(function() {
            return z2(B2);
          }) : fetch(B2, { credentials: "same-origin" }).then(function(t5) {
            if (!t5.ok)
              throw "failed to load wasm binary file at '" + B2 + "'";
            return t5.arrayBuffer();
          }).catch(function() {
            return z2(B2);
          });
        }
        function Y2() {
          var t5 = { env: nt2, wasi_snapshot_preview1: nt2 };
          function n5(t6, n6) {
            var e3 = t6.exports;
            r2.asm = e3, O2((p2 = r2.asm.memory).buffer), r2.asm.__indirect_function_table, L2(r2.asm.__wasm_call_ctors), j2();
          }
          function i3(t6) {
            n5(t6.instance);
          }
          function o3(n6) {
            return q().then(function(n7) {
              return WebAssembly.instantiate(n7, t5);
            }).then(function(t6) {
              return t6;
            }).then(n6, function(t6) {
              g2("failed to asynchronously prepare wasm: " + t6), k2(t6);
            });
          }
          if (N3(), r2.instantiateWasm)
            try {
              return r2.instantiateWasm(t5, n5);
            } catch (t6) {
              g2("Module.instantiateWasm callback failed with error: " + t6), e2(t6);
            }
          return (h2 || "function" != typeof WebAssembly.instantiateStreaming || V2(B2) || "function" != typeof fetch ? o3(i3) : fetch(B2, { credentials: "same-origin" }).then(function(n6) {
            return WebAssembly.instantiateStreaming(n6, t5).then(i3, function(t6) {
              return g2("wasm streaming compile failed: " + t6), g2("falling back to ArrayBuffer instantiation"), o3(i3);
            });
          })).catch(e2), {};
        }
        function G3(t5) {
          for (; t5.length > 0; )
            t5.shift()(r2);
        }
        function J3(t5, n5, e3) {
          w2.copyWithin(t5, n5, n5 + e3);
        }
        function K2(t5) {
          try {
            return p2.grow(t5 - y2.byteLength + 65535 >>> 16), O2(p2.buffer), 1;
          } catch (t6) {
          }
        }
        function Q2(t5) {
          var n5, e3 = w2.length, r3 = 2147483648;
          if ((t5 >>>= 0) > r3)
            return false;
          for (var i3 = 1; i3 <= 4; i3 *= 2) {
            var o3 = e3 * (1 + 0.2 / i3);
            if (o3 = Math.min(o3, t5 + 100663296), K2(Math.min(r3, (n5 = Math.max(t5, o3)) + (65536 - n5 % 65536) % 65536)))
              return true;
          }
          return false;
        }
        V2(B2 = "onig.wasm") || (B2 = l2(B2)), H2 = "undefined" != typeof dateNow ? dateNow : () => performance.now();
        var X2 = [null, [], []];
        function Z2(t5, n5) {
          var e3 = X2[t5];
          0 === n5 || 10 === n5 ? ((1 === t5 ? d2 : g2)(A3(e3, 0)), e3.length = 0) : e3.push(n5);
        }
        function $3(t5, n5, e3, r3) {
          for (var i3 = 0, o3 = 0; o3 < e3; o3++) {
            var a2 = S2[n5 >> 2], f2 = S2[n5 + 4 >> 2];
            n5 += 8;
            for (var s4 = 0; s4 < f2; s4++)
              Z2(t5, w2[a2 + s4]);
            i3 += f2;
          }
          return S2[r3 >> 2] = i3, 0;
        }
        var tt, nt2 = { emscripten_get_now: H2, emscripten_memcpy_big: J3, emscripten_resize_heap: Q2, fd_write: $3 };
        function et(t5) {
          function e3() {
            tt || (tt = true, r2.calledRun = true, _2 || (T3(), n4(r2), r2.onRuntimeInitialized && r2.onRuntimeInitialized(), E3()));
          }
          W3 > 0 || (x2(), W3 > 0 || (r2.setStatus ? (r2.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              r2.setStatus("");
            }, 1), e3();
          }, 1)) : e3()));
        }
        if (Y2(), r2.___wasm_call_ctors = function() {
          return (r2.___wasm_call_ctors = r2.asm.__wasm_call_ctors).apply(null, arguments);
        }, r2.___errno_location = function() {
          return (r2.___errno_location = r2.asm.__errno_location).apply(null, arguments);
        }, r2._omalloc = function() {
          return (r2._omalloc = r2.asm.omalloc).apply(null, arguments);
        }, r2._ofree = function() {
          return (r2._ofree = r2.asm.ofree).apply(null, arguments);
        }, r2._getLastOnigError = function() {
          return (r2._getLastOnigError = r2.asm.getLastOnigError).apply(null, arguments);
        }, r2._createOnigScanner = function() {
          return (r2._createOnigScanner = r2.asm.createOnigScanner).apply(null, arguments);
        }, r2._freeOnigScanner = function() {
          return (r2._freeOnigScanner = r2.asm.freeOnigScanner).apply(null, arguments);
        }, r2._findNextOnigScannerMatch = function() {
          return (r2._findNextOnigScannerMatch = r2.asm.findNextOnigScannerMatch).apply(null, arguments);
        }, r2._findNextOnigScannerMatchDbg = function() {
          return (r2._findNextOnigScannerMatchDbg = r2.asm.findNextOnigScannerMatchDbg).apply(null, arguments);
        }, r2.stackSave = function() {
          return (r2.stackSave = r2.asm.stackSave).apply(null, arguments);
        }, r2.stackRestore = function() {
          return (r2.stackRestore = r2.asm.stackRestore).apply(null, arguments);
        }, r2.stackAlloc = function() {
          return (r2.stackAlloc = r2.asm.stackAlloc).apply(null, arguments);
        }, r2.dynCall_jiji = function() {
          return (r2.dynCall_jiji = r2.asm.dynCall_jiji).apply(null, arguments);
        }, r2.UTF8ToString = b3, C2 = function t5() {
          tt || et(), tt || (C2 = t5);
        }, r2.preInit)
          for ("function" == typeof r2.preInit && (r2.preInit = [r2.preInit]); r2.preInit.length > 0; )
            r2.preInit.pop()();
        return et(), t4.ready;
      });
      t3.exports = n3;
    } }, n2 = {}, function e2(r2) {
      var i2 = n2[r2];
      if (void 0 !== i2)
        return i2.exports;
      var o2 = n2[r2] = { exports: {} };
      return t2[r2].call(o2.exports, o2, o2.exports, e2), o2.exports;
    }(770);
    var t2, n2;
  });
})(main$1);
var mainExports = {};
var main = {
  get exports() {
    return mainExports;
  },
  set exports(v3) {
    mainExports = v3;
  }
};
(function(module2, exports) {
  !function(e2, t2) {
    module2.exports = t2();
  }(commonjsGlobal$1, function() {
    return (() => {
      var e2 = { 350: (e3, t3) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.UseOnigurumaFindOptions = t3.DebugFlags = void 0, t3.DebugFlags = { InDebugMode: "undefined" != typeof process && !!{}.VSCODE_TEXTMATE_DEBUG }, t3.UseOnigurumaFindOptions = false;
      }, 36: (e3, t3) => {
        var n2;
        Object.defineProperty(t3, "__esModule", { value: true }), t3.toOptionalTokenType = t3.EncodedTokenAttributes = void 0, (n2 = t3.EncodedTokenAttributes || (t3.EncodedTokenAttributes = {})).toBinaryStr = function(e4) {
          let t4 = e4.toString(2);
          for (; t4.length < 32; )
            t4 = "0" + t4;
          return t4;
        }, n2.print = function(e4) {
          const t4 = n2.getLanguageId(e4), s3 = n2.getTokenType(e4), r2 = n2.getFontStyle(e4), i2 = n2.getForeground(e4), o2 = n2.getBackground(e4);
          console.log({ languageId: t4, tokenType: s3, fontStyle: r2, foreground: i2, background: o2 });
        }, n2.getLanguageId = function(e4) {
          return (255 & e4) >>> 0;
        }, n2.getTokenType = function(e4) {
          return (768 & e4) >>> 8;
        }, n2.containsBalancedBrackets = function(e4) {
          return 0 != (1024 & e4);
        }, n2.getFontStyle = function(e4) {
          return (30720 & e4) >>> 11;
        }, n2.getForeground = function(e4) {
          return (16744448 & e4) >>> 15;
        }, n2.getBackground = function(e4) {
          return (4278190080 & e4) >>> 24;
        }, n2.set = function(e4, t4, s3, r2, i2, o2, c2) {
          let a2 = n2.getLanguageId(e4), l2 = n2.getTokenType(e4), u2 = n2.containsBalancedBrackets(e4) ? 1 : 0, h2 = n2.getFontStyle(e4), p2 = n2.getForeground(e4), d2 = n2.getBackground(e4);
          return 0 !== t4 && (a2 = t4), 8 !== s3 && (l2 = s3), null !== r2 && (u2 = r2 ? 1 : 0), -1 !== i2 && (h2 = i2), 0 !== o2 && (p2 = o2), 0 !== c2 && (d2 = c2), (a2 << 0 | l2 << 8 | u2 << 10 | h2 << 11 | p2 << 15 | d2 << 24) >>> 0;
        }, t3.toOptionalTokenType = function(e4) {
          return e4;
        };
      }, 996: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.BasicScopeAttributesProvider = t3.BasicScopeAttributes = void 0;
        const s3 = n2(878);
        class r2 {
          constructor(e4, t4) {
            this.languageId = e4, this.tokenType = t4;
          }
        }
        t3.BasicScopeAttributes = r2;
        class i2 {
          constructor(e4, t4) {
            this._getBasicScopeAttributes = new s3.CachedFn((e5) => {
              const t5 = this._scopeToLanguage(e5), n3 = this._toStandardTokenType(e5);
              return new r2(t5, n3);
            }), this._defaultAttributes = new r2(e4, 8), this._embeddedLanguagesMatcher = new o2(Object.entries(t4 || {}));
          }
          getDefaultAttributes() {
            return this._defaultAttributes;
          }
          getBasicScopeAttributes(e4) {
            return null === e4 ? i2._NULL_SCOPE_METADATA : this._getBasicScopeAttributes.get(e4);
          }
          _scopeToLanguage(e4) {
            return this._embeddedLanguagesMatcher.match(e4) || 0;
          }
          _toStandardTokenType(e4) {
            const t4 = e4.match(i2.STANDARD_TOKEN_TYPE_REGEXP);
            if (!t4)
              return 8;
            switch (t4[1]) {
              case "comment":
                return 1;
              case "string":
                return 2;
              case "regex":
                return 3;
              case "meta.embedded":
                return 0;
            }
            throw new Error("Unexpected match for standard token type!");
          }
        }
        t3.BasicScopeAttributesProvider = i2, i2._NULL_SCOPE_METADATA = new r2(0, 0), i2.STANDARD_TOKEN_TYPE_REGEXP = /\b(comment|string|regex|meta\.embedded)\b/;
        class o2 {
          constructor(e4) {
            if (0 === e4.length)
              this.values = null, this.scopesRegExp = null;
            else {
              this.values = new Map(e4);
              const t4 = e4.map(([e5, t5]) => s3.escapeRegExpCharacters(e5));
              t4.sort(), t4.reverse(), this.scopesRegExp = new RegExp(`^((${t4.join(")|(")}))($|\\.)`, "");
            }
          }
          match(e4) {
            if (!this.scopesRegExp)
              return;
            const t4 = e4.match(this.scopesRegExp);
            return t4 ? this.values.get(t4[1]) : void 0;
          }
        }
      }, 947: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.LineTokens = t3.BalancedBracketSelectors = t3.StateStack = t3.AttributedScopeStack = t3.Grammar = t3.createGrammar = void 0;
        const s3 = n2(350), r2 = n2(36), i2 = n2(736), o2 = n2(44), c2 = n2(792), a2 = n2(583), l2 = n2(878), u2 = n2(996), h2 = n2(47);
        function p2(e4, t4, n3, s4, r3) {
          const o3 = i2.createMatchers(t4, d2), a3 = c2.RuleFactory.getCompiledRuleId(n3, s4, r3.repository);
          for (const n4 of o3)
            e4.push({ debugSelector: t4, matcher: n4.matcher, ruleId: a3, grammar: r3, priority: n4.priority });
        }
        function d2(e4, t4) {
          if (t4.length < e4.length)
            return false;
          let n3 = 0;
          return e4.every((e5) => {
            for (let s4 = n3; s4 < t4.length; s4++)
              if (f2(t4[s4], e5))
                return n3 = s4 + 1, true;
            return false;
          });
        }
        function f2(e4, t4) {
          if (!e4)
            return false;
          if (e4 === t4)
            return true;
          const n3 = t4.length;
          return e4.length > n3 && e4.substr(0, n3) === t4 && "." === e4[n3];
        }
        t3.createGrammar = function(e4, t4, n3, s4, r3, i3, o3, c3) {
          return new g2(e4, t4, n3, s4, r3, i3, o3, c3);
        };
        class g2 {
          constructor(e4, t4, n3, s4, r3, o3, c3, a3) {
            if (this._rootScopeName = e4, this.balancedBracketSelectors = o3, this._onigLib = a3, this._basicScopeAttributesProvider = new u2.BasicScopeAttributesProvider(n3, s4), this._rootId = -1, this._lastRuleId = 0, this._ruleId2desc = [null], this._includedGrammars = {}, this._grammarRepository = c3, this._grammar = m2(t4, null), this._injections = null, this._tokenTypeMatchers = [], r3)
              for (const e5 of Object.keys(r3)) {
                const t5 = i2.createMatchers(e5, d2);
                for (const n4 of t5)
                  this._tokenTypeMatchers.push({ matcher: n4.matcher, type: r3[e5] });
              }
          }
          get themeProvider() {
            return this._grammarRepository;
          }
          dispose() {
            for (const e4 of this._ruleId2desc)
              e4 && e4.dispose();
          }
          createOnigScanner(e4) {
            return this._onigLib.createOnigScanner(e4);
          }
          createOnigString(e4) {
            return this._onigLib.createOnigString(e4);
          }
          getMetadataForScope(e4) {
            return this._basicScopeAttributesProvider.getBasicScopeAttributes(e4);
          }
          _collectInjections() {
            const e4 = [], t4 = this._rootScopeName, n3 = ((e5) => e5 === this._rootScopeName ? this._grammar : this.getExternalGrammar(e5))(t4);
            if (n3) {
              const s4 = n3.injections;
              if (s4)
                for (let t5 in s4)
                  p2(e4, t5, s4[t5], this, n3);
              const r3 = this._grammarRepository.injections(t4);
              r3 && r3.forEach((t5) => {
                const n4 = this.getExternalGrammar(t5);
                if (n4) {
                  const t6 = n4.injectionSelector;
                  t6 && p2(e4, t6, n4, this, n4);
                }
              });
            }
            return e4.sort((e5, t5) => e5.priority - t5.priority), e4;
          }
          getInjections() {
            if (null === this._injections && (this._injections = this._collectInjections(), s3.DebugFlags.InDebugMode && this._injections.length > 0)) {
              console.log(`Grammar ${this._rootScopeName} contains the following injections:`);
              for (const e4 of this._injections)
                console.log(`  - ${e4.debugSelector}`);
            }
            return this._injections;
          }
          registerRule(e4) {
            const t4 = ++this._lastRuleId, n3 = e4(c2.ruleIdFromNumber(t4));
            return this._ruleId2desc[t4] = n3, n3;
          }
          getRule(e4) {
            return this._ruleId2desc[c2.ruleIdToNumber(e4)];
          }
          getExternalGrammar(e4, t4) {
            if (this._includedGrammars[e4])
              return this._includedGrammars[e4];
            if (this._grammarRepository) {
              const n3 = this._grammarRepository.lookup(e4);
              if (n3)
                return this._includedGrammars[e4] = m2(n3, t4 && t4.$base), this._includedGrammars[e4];
            }
          }
          tokenizeLine(e4, t4, n3 = 0) {
            const s4 = this._tokenize(e4, t4, false, n3);
            return { tokens: s4.lineTokens.getResult(s4.ruleStack, s4.lineLength), ruleStack: s4.ruleStack, stoppedEarly: s4.stoppedEarly };
          }
          tokenizeLine2(e4, t4, n3 = 0) {
            const s4 = this._tokenize(e4, t4, true, n3);
            return { tokens: s4.lineTokens.getBinaryResult(s4.ruleStack, s4.lineLength), ruleStack: s4.ruleStack, stoppedEarly: s4.stoppedEarly };
          }
          _tokenize(e4, t4, n3, s4) {
            let i3;
            if (-1 === this._rootId && (this._rootId = c2.RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository)), t4 && t4 !== b3.NULL)
              i3 = false, t4.reset();
            else {
              i3 = true;
              const e5 = this._basicScopeAttributesProvider.getDefaultAttributes(), n4 = this.themeProvider.getDefaults(), s5 = r2.EncodedTokenAttributes.set(0, e5.languageId, e5.tokenType, null, n4.fontStyle, n4.foregroundId, n4.backgroundId), o3 = this.getRule(this._rootId).getName(null, null);
              let c3;
              c3 = o3 ? _2.createRootAndLookUpScopeName(o3, s5, this) : _2.createRoot("unknown", s5), t4 = new b3(null, this._rootId, -1, -1, false, null, c3, c3);
            }
            e4 += "\n";
            const a3 = this.createOnigString(e4), l3 = a3.content.length, u3 = new y2(n3, e4, this._tokenTypeMatchers, this.balancedBracketSelectors), p3 = h2._tokenizeString(this, a3, i3, 0, t4, u3, true, s4);
            return o2.disposeOnigString(a3), { lineLength: l3, lineTokens: u3, ruleStack: p3.stack, stoppedEarly: p3.stoppedEarly };
          }
        }
        function m2(e4, t4) {
          return (e4 = l2.clone(e4)).repository = e4.repository || {}, e4.repository.$self = { $vscodeTextmateLocation: e4.$vscodeTextmateLocation, patterns: e4.patterns, name: e4.scopeName }, e4.repository.$base = t4 || e4.repository.$self, e4;
        }
        t3.Grammar = g2;
        class _2 {
          constructor(e4, t4, n3) {
            this.parent = e4, this.scopePath = t4, this.tokenAttributes = n3;
          }
          static createRoot(e4, t4) {
            return new _2(null, new a2.ScopeStack(null, e4), t4);
          }
          static createRootAndLookUpScopeName(e4, t4, n3) {
            const s4 = n3.getMetadataForScope(e4), r3 = new a2.ScopeStack(null, e4), i3 = n3.themeProvider.themeMatch(r3), o3 = _2.mergeAttributes(t4, s4, i3);
            return new _2(null, r3, o3);
          }
          get scopeName() {
            return this.scopePath.scopeName;
          }
          equals(e4) {
            return _2._equals(this, e4);
          }
          static _equals(e4, t4) {
            for (; ; ) {
              if (e4 === t4)
                return true;
              if (!e4 && !t4)
                return true;
              if (!e4 || !t4)
                return false;
              if (e4.scopeName !== t4.scopeName || e4.tokenAttributes !== t4.tokenAttributes)
                return false;
              e4 = e4.parent, t4 = t4.parent;
            }
          }
          static mergeAttributes(e4, t4, n3) {
            let s4 = -1, i3 = 0, o3 = 0;
            return null !== n3 && (s4 = n3.fontStyle, i3 = n3.foregroundId, o3 = n3.backgroundId), r2.EncodedTokenAttributes.set(e4, t4.languageId, t4.tokenType, null, s4, i3, o3);
          }
          pushAttributed(e4, t4) {
            if (null === e4)
              return this;
            if (-1 === e4.indexOf(" "))
              return _2._pushAttributed(this, e4, t4);
            const n3 = e4.split(/ /g);
            let s4 = this;
            for (const e5 of n3)
              s4 = _2._pushAttributed(s4, e5, t4);
            return s4;
          }
          static _pushAttributed(e4, t4, n3) {
            const s4 = n3.getMetadataForScope(t4), r3 = e4.scopePath.push(t4), i3 = n3.themeProvider.themeMatch(r3), o3 = _2.mergeAttributes(e4.tokenAttributes, s4, i3);
            return new _2(e4, r3, o3);
          }
          getScopeNames() {
            return this.scopePath.getSegments();
          }
        }
        t3.AttributedScopeStack = _2;
        class b3 {
          constructor(e4, t4, n3, s4, r3, i3, o3, c3) {
            this.parent = e4, this.ruleId = t4, this.beginRuleCapturedEOL = r3, this.endRule = i3, this.nameScopesList = o3, this.contentNameScopesList = c3, this._stackElementBrand = void 0, this.depth = this.parent ? this.parent.depth + 1 : 1, this._enterPos = n3, this._anchorPos = s4;
          }
          equals(e4) {
            return null !== e4 && b3._equals(this, e4);
          }
          static _equals(e4, t4) {
            return e4 === t4 || !!this._structuralEquals(e4, t4) && e4.contentNameScopesList.equals(t4.contentNameScopesList);
          }
          static _structuralEquals(e4, t4) {
            for (; ; ) {
              if (e4 === t4)
                return true;
              if (!e4 && !t4)
                return true;
              if (!e4 || !t4)
                return false;
              if (e4.depth !== t4.depth || e4.ruleId !== t4.ruleId || e4.endRule !== t4.endRule)
                return false;
              e4 = e4.parent, t4 = t4.parent;
            }
          }
          clone() {
            return this;
          }
          static _reset(e4) {
            for (; e4; )
              e4._enterPos = -1, e4._anchorPos = -1, e4 = e4.parent;
          }
          reset() {
            b3._reset(this);
          }
          pop() {
            return this.parent;
          }
          safePop() {
            return this.parent ? this.parent : this;
          }
          push(e4, t4, n3, s4, r3, i3, o3) {
            return new b3(this, e4, t4, n3, s4, r3, i3, o3);
          }
          getEnterPos() {
            return this._enterPos;
          }
          getAnchorPos() {
            return this._anchorPos;
          }
          getRule(e4) {
            return e4.getRule(this.ruleId);
          }
          toString() {
            const e4 = [];
            return this._writeString(e4, 0), "[" + e4.join(",") + "]";
          }
          _writeString(e4, t4) {
            return this.parent && (t4 = this.parent._writeString(e4, t4)), e4[t4++] = `(${this.ruleId}, TODO-${this.nameScopesList}, TODO-${this.contentNameScopesList})`, t4;
          }
          withContentNameScopesList(e4) {
            return this.contentNameScopesList === e4 ? this : this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, e4);
          }
          withEndRule(e4) {
            return this.endRule === e4 ? this : new b3(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, e4, this.nameScopesList, this.contentNameScopesList);
          }
          hasSameRuleAs(e4) {
            let t4 = this;
            for (; t4 && t4._enterPos === e4._enterPos; ) {
              if (t4.ruleId === e4.ruleId)
                return true;
              t4 = t4.parent;
            }
            return false;
          }
        }
        t3.StateStack = b3, b3.NULL = new b3(null, 0, 0, 0, false, null, null, null), t3.BalancedBracketSelectors = class {
          constructor(e4, t4) {
            this.allowAny = false, this.balancedBracketScopes = e4.flatMap((e5) => "*" === e5 ? (this.allowAny = true, []) : i2.createMatchers(e5, d2).map((e6) => e6.matcher)), this.unbalancedBracketScopes = t4.flatMap((e5) => i2.createMatchers(e5, d2).map((e6) => e6.matcher));
          }
          get matchesAlways() {
            return this.allowAny && 0 === this.unbalancedBracketScopes.length;
          }
          get matchesNever() {
            return 0 === this.balancedBracketScopes.length && !this.allowAny;
          }
          match(e4) {
            for (const t4 of this.unbalancedBracketScopes)
              if (t4(e4))
                return false;
            for (const t4 of this.balancedBracketScopes)
              if (t4(e4))
                return true;
            return this.allowAny;
          }
        };
        class y2 {
          constructor(e4, t4, n3, r3) {
            this.balancedBracketSelectors = r3, this._emitBinaryTokens = e4, this._tokenTypeOverrides = n3, s3.DebugFlags.InDebugMode ? this._lineText = t4 : this._lineText = null, this._tokens = [], this._binaryTokens = [], this._lastTokenEndIndex = 0;
          }
          produce(e4, t4) {
            this.produceFromScopes(e4.contentNameScopesList, t4);
          }
          produceFromScopes(e4, t4) {
            var _a2;
            if (this._lastTokenEndIndex >= t4)
              return;
            if (this._emitBinaryTokens) {
              let n4 = e4.tokenAttributes, i3 = false;
              if (((_a2 = this.balancedBracketSelectors) == null ? void 0 : _a2.matchesAlways) && (i3 = true), this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {
                const t5 = e4.getScopeNames();
                for (const e5 of this._tokenTypeOverrides)
                  e5.matcher(t5) && (n4 = r2.EncodedTokenAttributes.set(n4, 0, r2.toOptionalTokenType(e5.type), null, -1, 0, 0));
                this.balancedBracketSelectors && (i3 = this.balancedBracketSelectors.match(t5));
              }
              if (i3 && (n4 = r2.EncodedTokenAttributes.set(n4, 0, 8, i3, -1, 0, 0)), this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === n4)
                return void (this._lastTokenEndIndex = t4);
              if (s3.DebugFlags.InDebugMode) {
                const n5 = e4.getScopeNames();
                console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t4).replace(/\n$/, "\\n") + "|");
                for (let e5 = 0; e5 < n5.length; e5++)
                  console.log("      * " + n5[e5]);
              }
              return this._binaryTokens.push(this._lastTokenEndIndex), this._binaryTokens.push(n4), void (this._lastTokenEndIndex = t4);
            }
            const n3 = e4.getScopeNames();
            if (s3.DebugFlags.InDebugMode) {
              console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t4).replace(/\n$/, "\\n") + "|");
              for (let e5 = 0; e5 < n3.length; e5++)
                console.log("      * " + n3[e5]);
            }
            this._tokens.push({ startIndex: this._lastTokenEndIndex, endIndex: t4, scopes: n3 }), this._lastTokenEndIndex = t4;
          }
          getResult(e4, t4) {
            return this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === t4 - 1 && this._tokens.pop(), 0 === this._tokens.length && (this._lastTokenEndIndex = -1, this.produce(e4, t4), this._tokens[this._tokens.length - 1].startIndex = 0), this._tokens;
          }
          getBinaryResult(e4, t4) {
            this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === t4 - 1 && (this._binaryTokens.pop(), this._binaryTokens.pop()), 0 === this._binaryTokens.length && (this._lastTokenEndIndex = -1, this.produce(e4, t4), this._binaryTokens[this._binaryTokens.length - 2] = 0);
            const n3 = new Uint32Array(this._binaryTokens.length);
            for (let e5 = 0, t5 = this._binaryTokens.length; e5 < t5; e5++)
              n3[e5] = this._binaryTokens[e5];
            return n3;
          }
        }
        t3.LineTokens = y2;
      }, 965: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseInclude = t3.TopLevelRepositoryReference = t3.TopLevelReference = t3.RelativeReference = t3.SelfReference = t3.BaseReference = t3.ScopeDependencyProcessor = t3.ExternalReferenceCollector = t3.TopLevelRepositoryRuleReference = t3.TopLevelRuleReference = void 0;
        const s3 = n2(878);
        class r2 {
          constructor(e4) {
            this.scopeName = e4;
          }
          toKey() {
            return this.scopeName;
          }
        }
        t3.TopLevelRuleReference = r2;
        class i2 {
          constructor(e4, t4) {
            this.scopeName = e4, this.ruleName = t4;
          }
          toKey() {
            return `${this.scopeName}#${this.ruleName}`;
          }
        }
        t3.TopLevelRepositoryRuleReference = i2;
        class o2 {
          constructor() {
            this._references = [], this._seenReferenceKeys = /* @__PURE__ */ new Set(), this.visitedRule = /* @__PURE__ */ new Set();
          }
          get references() {
            return this._references;
          }
          add(e4) {
            const t4 = e4.toKey();
            this._seenReferenceKeys.has(t4) || (this._seenReferenceKeys.add(t4), this._references.push(e4));
          }
        }
        function c2(e4, t4, n3, s4) {
          const i3 = n3.lookup(e4.scopeName);
          if (!i3) {
            if (e4.scopeName === t4)
              throw new Error(`No grammar provided for <${t4}>`);
            return;
          }
          const o3 = n3.lookup(t4);
          e4 instanceof r2 ? l2({ baseGrammar: o3, selfGrammar: i3 }, s4) : a2(e4.ruleName, { baseGrammar: o3, selfGrammar: i3, repository: i3.repository }, s4);
          const c3 = n3.injections(e4.scopeName);
          if (c3)
            for (const e5 of c3)
              s4.add(new r2(e5));
        }
        function a2(e4, t4, n3) {
          t4.repository && t4.repository[e4] && u2([t4.repository[e4]], t4, n3);
        }
        function l2(e4, t4) {
          e4.selfGrammar.patterns && Array.isArray(e4.selfGrammar.patterns) && u2(e4.selfGrammar.patterns, { ...e4, repository: e4.selfGrammar.repository }, t4), e4.selfGrammar.injections && u2(Object.values(e4.selfGrammar.injections), { ...e4, repository: e4.selfGrammar.repository }, t4);
        }
        function u2(e4, t4, n3) {
          for (const o3 of e4) {
            if (n3.visitedRule.has(o3))
              continue;
            n3.visitedRule.add(o3);
            const e5 = o3.repository ? s3.mergeObjects({}, t4.repository, o3.repository) : t4.repository;
            Array.isArray(o3.patterns) && u2(o3.patterns, { ...t4, repository: e5 }, n3);
            const c3 = o3.include;
            if (!c3)
              continue;
            const h3 = m2(c3);
            switch (h3.kind) {
              case 0:
                l2({ ...t4, selfGrammar: t4.baseGrammar }, n3);
                break;
              case 1:
                l2(t4, n3);
                break;
              case 2:
                a2(h3.ruleName, { ...t4, repository: e5 }, n3);
                break;
              case 3:
              case 4:
                const s4 = h3.scopeName === t4.selfGrammar.scopeName ? t4.selfGrammar : h3.scopeName === t4.baseGrammar.scopeName ? t4.baseGrammar : void 0;
                if (s4) {
                  const r3 = { baseGrammar: t4.baseGrammar, selfGrammar: s4, repository: e5 };
                  4 === h3.kind ? a2(h3.ruleName, r3, n3) : l2(r3, n3);
                } else
                  4 === h3.kind ? n3.add(new i2(h3.scopeName, h3.ruleName)) : n3.add(new r2(h3.scopeName));
            }
          }
        }
        t3.ExternalReferenceCollector = o2, t3.ScopeDependencyProcessor = class {
          constructor(e4, t4) {
            this.repo = e4, this.initialScopeName = t4, this.seenFullScopeRequests = /* @__PURE__ */ new Set(), this.seenPartialScopeRequests = /* @__PURE__ */ new Set(), this.seenFullScopeRequests.add(this.initialScopeName), this.Q = [new r2(this.initialScopeName)];
          }
          processQueue() {
            const e4 = this.Q;
            this.Q = [];
            const t4 = new o2();
            for (const n3 of e4)
              c2(n3, this.initialScopeName, this.repo, t4);
            for (const e5 of t4.references)
              if (e5 instanceof r2) {
                if (this.seenFullScopeRequests.has(e5.scopeName))
                  continue;
                this.seenFullScopeRequests.add(e5.scopeName), this.Q.push(e5);
              } else {
                if (this.seenFullScopeRequests.has(e5.scopeName))
                  continue;
                if (this.seenPartialScopeRequests.has(e5.toKey()))
                  continue;
                this.seenPartialScopeRequests.add(e5.toKey()), this.Q.push(e5);
              }
          }
        };
        class h2 {
          constructor() {
            this.kind = 0;
          }
        }
        t3.BaseReference = h2;
        class p2 {
          constructor() {
            this.kind = 1;
          }
        }
        t3.SelfReference = p2;
        class d2 {
          constructor(e4) {
            this.ruleName = e4, this.kind = 2;
          }
        }
        t3.RelativeReference = d2;
        class f2 {
          constructor(e4) {
            this.scopeName = e4, this.kind = 3;
          }
        }
        t3.TopLevelReference = f2;
        class g2 {
          constructor(e4, t4) {
            this.scopeName = e4, this.ruleName = t4, this.kind = 4;
          }
        }
        function m2(e4) {
          if ("$base" === e4)
            return new h2();
          if ("$self" === e4)
            return new p2();
          const t4 = e4.indexOf("#");
          if (-1 === t4)
            return new f2(e4);
          if (0 === t4)
            return new d2(e4.substring(1));
          {
            const n3 = e4.substring(0, t4), s4 = e4.substring(t4 + 1);
            return new g2(n3, s4);
          }
        }
        t3.TopLevelRepositoryReference = g2, t3.parseInclude = m2;
      }, 391: function(e3, t3, n2) {
        var s3 = this && this.__createBinding || (Object.create ? function(e4, t4, n3, s4) {
          void 0 === s4 && (s4 = n3), Object.defineProperty(e4, s4, { enumerable: true, get: function() {
            return t4[n3];
          } });
        } : function(e4, t4, n3, s4) {
          void 0 === s4 && (s4 = n3), e4[s4] = t4[n3];
        }), r2 = this && this.__exportStar || function(e4, t4) {
          for (var n3 in e4)
            "default" === n3 || Object.prototype.hasOwnProperty.call(t4, n3) || s3(t4, e4, n3);
        };
        Object.defineProperty(t3, "__esModule", { value: true }), r2(n2(947), t3);
      }, 47: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.LocalStackElement = t3._tokenizeString = void 0;
        const s3 = n2(350), r2 = n2(44), i2 = n2(792), o2 = n2(878);
        class c2 {
          constructor(e4, t4) {
            this.stack = e4, this.stoppedEarly = t4;
          }
        }
        function a2(e4, t4, n3, r3, a3, h3, d3, f2) {
          const g2 = t4.content.length;
          let m2 = false, _2 = -1;
          if (d3) {
            const o3 = function(e5, t5, n4, r4, o4, c3) {
              let a4 = o4.beginRuleCapturedEOL ? 0 : -1;
              const l3 = [];
              for (let t6 = o4; t6; t6 = t6.pop()) {
                const n5 = t6.getRule(e5);
                n5 instanceof i2.BeginWhileRule && l3.push({ rule: n5, stack: t6 });
              }
              for (let h4 = l3.pop(); h4; h4 = l3.pop()) {
                const { ruleScanner: l4, findOptions: d4 } = u2(h4.rule, e5, h4.stack.endRule, n4, r4 === a4), f3 = l4.findNextMatchSync(t5, r4, d4);
                if (s3.DebugFlags.InDebugMode && (console.log("  scanning for while rule"), console.log(l4.toString())), !f3) {
                  s3.DebugFlags.InDebugMode && console.log("  popping " + h4.rule.debugName + " - " + h4.rule.debugWhileRegExp), o4 = h4.stack.pop();
                  break;
                }
                if (f3.ruleId !== i2.whileRuleId) {
                  o4 = h4.stack.pop();
                  break;
                }
                f3.captureIndices && f3.captureIndices.length && (c3.produce(h4.stack, f3.captureIndices[0].start), p2(e5, t5, n4, h4.stack, c3, h4.rule.whileCaptures, f3.captureIndices), c3.produce(h4.stack, f3.captureIndices[0].end), a4 = f3.captureIndices[0].end, f3.captureIndices[0].end > r4 && (r4 = f3.captureIndices[0].end, n4 = false));
              }
              return { stack: o4, linePos: r4, anchorPosition: a4, isFirstLine: n4 };
            }(e4, t4, n3, r3, a3, h3);
            a3 = o3.stack, r3 = o3.linePos, n3 = o3.isFirstLine, _2 = o3.anchorPosition;
          }
          const b3 = Date.now();
          for (; !m2; ) {
            if (0 !== f2 && Date.now() - b3 > f2)
              return new c2(a3, true);
            y2();
          }
          return new c2(a3, false);
          function y2() {
            s3.DebugFlags.InDebugMode && (console.log(""), console.log(`@@scanNext ${r3}: |${t4.content.substr(r3).replace(/\n$/, "\\n")}|`));
            const c3 = function(e5, t5, n4, r4, i3, c4) {
              const a4 = function(e6, t6, n5, r5, i4, c5) {
                const a5 = i4.getRule(e6), { ruleScanner: u5, findOptions: h5 } = l2(a5, e6, i4.endRule, n5, r5 === c5);
                let p4 = 0;
                s3.DebugFlags.InDebugMode && (p4 = o2.performanceNow());
                const d6 = u5.findNextMatchSync(t6, r5, h5);
                if (s3.DebugFlags.InDebugMode) {
                  const e7 = o2.performanceNow() - p4;
                  e7 > 5 && console.warn(`Rule ${a5.debugName} (${a5.id}) matching took ${e7} against '${t6}'`), console.log(`  scanning for (linePos: ${r5}, anchorPosition: ${c5})`), console.log(u5.toString()), d6 && console.log(`matched rule id: ${d6.ruleId} from ${d6.captureIndices[0].start} to ${d6.captureIndices[0].end}`);
                }
                return d6 ? { captureIndices: d6.captureIndices, matchedRuleId: d6.ruleId } : null;
              }(e5, t5, n4, r4, i3, c4), u4 = e5.getInjections();
              if (0 === u4.length)
                return a4;
              const h4 = function(e6, t6, n5, r5, i4, o3, c5) {
                let a5, u5 = Number.MAX_VALUE, h5 = null, p4 = 0;
                const d6 = o3.contentNameScopesList.getScopeNames();
                for (let o4 = 0, f4 = e6.length; o4 < f4; o4++) {
                  const f5 = e6[o4];
                  if (!f5.matcher(d6))
                    continue;
                  const g3 = t6.getRule(f5.ruleId), { ruleScanner: m3, findOptions: _3 } = l2(g3, t6, null, r5, i4 === c5), b4 = m3.findNextMatchSync(n5, i4, _3);
                  if (!b4)
                    continue;
                  s3.DebugFlags.InDebugMode && (console.log(`  matched injection: ${f5.debugSelector}`), console.log(m3.toString()));
                  const y3 = b4.captureIndices[0].start;
                  if (!(y3 >= u5) && (u5 = y3, h5 = b4.captureIndices, a5 = b4.ruleId, p4 = f5.priority, u5 === i4))
                    break;
                }
                return h5 ? { priorityMatch: -1 === p4, captureIndices: h5, matchedRuleId: a5 } : null;
              }(u4, e5, t5, n4, r4, i3, c4);
              if (!h4)
                return a4;
              if (!a4)
                return h4;
              const p3 = a4.captureIndices[0].start, d5 = h4.captureIndices[0].start;
              return d5 < p3 || h4.priorityMatch && d5 === p3 ? h4 : a4;
            }(e4, t4, n3, r3, a3, _2);
            if (!c3)
              return s3.DebugFlags.InDebugMode && console.log("  no more matches."), h3.produce(a3, g2), void (m2 = true);
            const u3 = c3.captureIndices, d4 = c3.matchedRuleId, f3 = !!(u3 && u3.length > 0) && u3[0].end > r3;
            if (d4 === i2.endRuleId) {
              const i3 = a3.getRule(e4);
              s3.DebugFlags.InDebugMode && console.log("  popping " + i3.debugName + " - " + i3.debugEndRegExp), h3.produce(a3, u3[0].start), a3 = a3.withContentNameScopesList(a3.nameScopesList), p2(e4, t4, n3, a3, h3, i3.endCaptures, u3), h3.produce(a3, u3[0].end);
              const o3 = a3;
              if (a3 = a3.parent, _2 = o3.getAnchorPos(), !f3 && o3.getEnterPos() === r3)
                return s3.DebugFlags.InDebugMode && console.error("[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing"), a3 = o3, h3.produce(a3, g2), void (m2 = true);
            } else {
              const o3 = e4.getRule(d4);
              h3.produce(a3, u3[0].start);
              const c4 = a3, l3 = o3.getName(t4.content, u3), b4 = a3.contentNameScopesList.pushAttributed(l3, e4);
              if (a3 = a3.push(d4, r3, _2, u3[0].end === g2, null, b4, b4), o3 instanceof i2.BeginEndRule) {
                const r4 = o3;
                s3.DebugFlags.InDebugMode && console.log("  pushing " + r4.debugName + " - " + r4.debugBeginRegExp), p2(e4, t4, n3, a3, h3, r4.beginCaptures, u3), h3.produce(a3, u3[0].end), _2 = u3[0].end;
                const i3 = r4.getContentName(t4.content, u3), l4 = b4.pushAttributed(i3, e4);
                if (a3 = a3.withContentNameScopesList(l4), r4.endHasBackReferences && (a3 = a3.withEndRule(r4.getEndWithResolvedBackReferences(t4.content, u3))), !f3 && c4.hasSameRuleAs(a3))
                  return s3.DebugFlags.InDebugMode && console.error("[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a3 = a3.pop(), h3.produce(a3, g2), void (m2 = true);
              } else if (o3 instanceof i2.BeginWhileRule) {
                const r4 = o3;
                s3.DebugFlags.InDebugMode && console.log("  pushing " + r4.debugName), p2(e4, t4, n3, a3, h3, r4.beginCaptures, u3), h3.produce(a3, u3[0].end), _2 = u3[0].end;
                const i3 = r4.getContentName(t4.content, u3), l4 = b4.pushAttributed(i3, e4);
                if (a3 = a3.withContentNameScopesList(l4), r4.whileHasBackReferences && (a3 = a3.withEndRule(r4.getWhileWithResolvedBackReferences(t4.content, u3))), !f3 && c4.hasSameRuleAs(a3))
                  return s3.DebugFlags.InDebugMode && console.error("[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a3 = a3.pop(), h3.produce(a3, g2), void (m2 = true);
              } else {
                const r4 = o3;
                if (s3.DebugFlags.InDebugMode && console.log("  matched " + r4.debugName + " - " + r4.debugMatchRegExp), p2(e4, t4, n3, a3, h3, r4.captures, u3), h3.produce(a3, u3[0].end), a3 = a3.pop(), !f3)
                  return s3.DebugFlags.InDebugMode && console.error("[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping"), a3 = a3.safePop(), h3.produce(a3, g2), void (m2 = true);
              }
            }
            u3[0].end > r3 && (r3 = u3[0].end, n3 = false);
          }
        }
        function l2(e4, t4, n3, r3, i3) {
          return s3.UseOnigurumaFindOptions ? { ruleScanner: e4.compile(t4, n3), findOptions: h2(r3, i3) } : { ruleScanner: e4.compileAG(t4, n3, r3, i3), findOptions: 0 };
        }
        function u2(e4, t4, n3, r3, i3) {
          return s3.UseOnigurumaFindOptions ? { ruleScanner: e4.compileWhile(t4, n3), findOptions: h2(r3, i3) } : { ruleScanner: e4.compileWhileAG(t4, n3, r3, i3), findOptions: 0 };
        }
        function h2(e4, t4) {
          let n3 = 0;
          return e4 || (n3 |= 1), t4 || (n3 |= 4), n3;
        }
        function p2(e4, t4, n3, s4, i3, o3, c3) {
          if (0 === o3.length)
            return;
          const l3 = t4.content, u3 = Math.min(o3.length, c3.length), h3 = [], p3 = c3[0].end;
          for (let t5 = 0; t5 < u3; t5++) {
            const u4 = o3[t5];
            if (null === u4)
              continue;
            const f2 = c3[t5];
            if (0 === f2.length)
              continue;
            if (f2.start > p3)
              break;
            for (; h3.length > 0 && h3[h3.length - 1].endPos <= f2.start; )
              i3.produceFromScopes(h3[h3.length - 1].scopes, h3[h3.length - 1].endPos), h3.pop();
            if (h3.length > 0 ? i3.produceFromScopes(h3[h3.length - 1].scopes, f2.start) : i3.produce(s4, f2.start), u4.retokenizeCapturedWithRuleId) {
              const t6 = u4.getName(l3, c3), o4 = s4.contentNameScopesList.pushAttributed(t6, e4), h4 = u4.getContentName(l3, c3), p4 = o4.pushAttributed(h4, e4), d3 = s4.push(u4.retokenizeCapturedWithRuleId, f2.start, -1, false, null, o4, p4), g3 = e4.createOnigString(l3.substring(0, f2.end));
              a2(e4, g3, n3 && 0 === f2.start, f2.start, d3, i3, false, 0), r2.disposeOnigString(g3);
              continue;
            }
            const g2 = u4.getName(l3, c3);
            if (null !== g2) {
              const t6 = (h3.length > 0 ? h3[h3.length - 1].scopes : s4.contentNameScopesList).pushAttributed(g2, e4);
              h3.push(new d2(t6, f2.end));
            }
          }
          for (; h3.length > 0; )
            i3.produceFromScopes(h3[h3.length - 1].scopes, h3[h3.length - 1].endPos), h3.pop();
        }
        t3._tokenizeString = a2;
        class d2 {
          constructor(e4, t4) {
            this.scopes = e4, this.endPos = t4;
          }
        }
        t3.LocalStackElement = d2;
      }, 974: (e3, t3) => {
        function n2(e4, t4) {
          throw new Error("Near offset " + e4.pos + ": " + t4 + " ~~~" + e4.source.substr(e4.pos, 50) + "~~~");
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseJSON = void 0, t3.parseJSON = function(e4, t4, o2) {
          let c2 = new s3(e4), a2 = new r2(), l2 = 0, u2 = null, h2 = [], p2 = [];
          function d2() {
            h2.push(l2), p2.push(u2);
          }
          function f2() {
            l2 = h2.pop(), u2 = p2.pop();
          }
          function g2(e5) {
            n2(c2, e5);
          }
          for (; i2(c2, a2); ) {
            if (0 === l2) {
              if (null !== u2 && g2("too many constructs in root"), 3 === a2.type) {
                u2 = {}, o2 && (u2.$vscodeTextmateLocation = a2.toLocation(t4)), d2(), l2 = 1;
                continue;
              }
              if (2 === a2.type) {
                u2 = [], d2(), l2 = 4;
                continue;
              }
              g2("unexpected token in root");
            }
            if (2 === l2) {
              if (5 === a2.type) {
                f2();
                continue;
              }
              if (7 === a2.type) {
                l2 = 3;
                continue;
              }
              g2("expected , or }");
            }
            if (1 === l2 || 3 === l2) {
              if (1 === l2 && 5 === a2.type) {
                f2();
                continue;
              }
              if (1 === a2.type) {
                let e5 = a2.value;
                if (i2(c2, a2) && 6 === a2.type || g2("expected colon"), i2(c2, a2) || g2("expected value"), l2 = 2, 1 === a2.type) {
                  u2[e5] = a2.value;
                  continue;
                }
                if (8 === a2.type) {
                  u2[e5] = null;
                  continue;
                }
                if (9 === a2.type) {
                  u2[e5] = true;
                  continue;
                }
                if (10 === a2.type) {
                  u2[e5] = false;
                  continue;
                }
                if (11 === a2.type) {
                  u2[e5] = parseFloat(a2.value);
                  continue;
                }
                if (2 === a2.type) {
                  let t5 = [];
                  u2[e5] = t5, d2(), l2 = 4, u2 = t5;
                  continue;
                }
                if (3 === a2.type) {
                  let n3 = {};
                  o2 && (n3.$vscodeTextmateLocation = a2.toLocation(t4)), u2[e5] = n3, d2(), l2 = 1, u2 = n3;
                  continue;
                }
              }
              g2("unexpected token in dict");
            }
            if (5 === l2) {
              if (4 === a2.type) {
                f2();
                continue;
              }
              if (7 === a2.type) {
                l2 = 6;
                continue;
              }
              g2("expected , or ]");
            }
            if (4 === l2 || 6 === l2) {
              if (4 === l2 && 4 === a2.type) {
                f2();
                continue;
              }
              if (l2 = 5, 1 === a2.type) {
                u2.push(a2.value);
                continue;
              }
              if (8 === a2.type) {
                u2.push(null);
                continue;
              }
              if (9 === a2.type) {
                u2.push(true);
                continue;
              }
              if (10 === a2.type) {
                u2.push(false);
                continue;
              }
              if (11 === a2.type) {
                u2.push(parseFloat(a2.value));
                continue;
              }
              if (2 === a2.type) {
                let e5 = [];
                u2.push(e5), d2(), l2 = 4, u2 = e5;
                continue;
              }
              if (3 === a2.type) {
                let e5 = {};
                o2 && (e5.$vscodeTextmateLocation = a2.toLocation(t4)), u2.push(e5), d2(), l2 = 1, u2 = e5;
                continue;
              }
              g2("unexpected token in array");
            }
            g2("unknown state");
          }
          return 0 !== p2.length && g2("unclosed constructs"), u2;
        };
        class s3 {
          constructor(e4) {
            this.source = e4, this.pos = 0, this.len = e4.length, this.line = 1, this.char = 0;
          }
        }
        class r2 {
          constructor() {
            this.value = null, this.type = 0, this.offset = -1, this.len = -1, this.line = -1, this.char = -1;
          }
          toLocation(e4) {
            return { filename: e4, line: this.line, char: this.char };
          }
        }
        function i2(e4, t4) {
          t4.value = null, t4.type = 0, t4.offset = -1, t4.len = -1, t4.line = -1, t4.char = -1;
          let s4, r3 = e4.source, i3 = e4.pos, o2 = e4.len, c2 = e4.line, a2 = e4.char;
          for (; ; ) {
            if (i3 >= o2)
              return false;
            if (s4 = r3.charCodeAt(i3), 32 !== s4 && 9 !== s4 && 13 !== s4) {
              if (10 !== s4)
                break;
              i3++, c2++, a2 = 0;
            } else
              i3++, a2++;
          }
          if (t4.offset = i3, t4.line = c2, t4.char = a2, 34 === s4) {
            for (t4.type = 1, i3++, a2++; ; ) {
              if (i3 >= o2)
                return false;
              if (s4 = r3.charCodeAt(i3), i3++, a2++, 92 !== s4) {
                if (34 === s4)
                  break;
              } else
                i3++, a2++;
            }
            t4.value = r3.substring(t4.offset + 1, i3 - 1).replace(/\\u([0-9A-Fa-f]{4})/g, (e5, t5) => String.fromCodePoint(parseInt(t5, 16))).replace(/\\(.)/g, (t5, s5) => {
              switch (s5) {
                case '"':
                  return '"';
                case "\\":
                  return "\\";
                case "/":
                  return "/";
                case "b":
                  return "\b";
                case "f":
                  return "\f";
                case "n":
                  return "\n";
                case "r":
                  return "\r";
                case "t":
                  return "	";
                default:
                  n2(e4, "invalid escape sequence");
              }
              throw new Error("unreachable");
            });
          } else if (91 === s4)
            t4.type = 2, i3++, a2++;
          else if (123 === s4)
            t4.type = 3, i3++, a2++;
          else if (93 === s4)
            t4.type = 4, i3++, a2++;
          else if (125 === s4)
            t4.type = 5, i3++, a2++;
          else if (58 === s4)
            t4.type = 6, i3++, a2++;
          else if (44 === s4)
            t4.type = 7, i3++, a2++;
          else if (110 === s4) {
            if (t4.type = 8, i3++, a2++, s4 = r3.charCodeAt(i3), 117 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 108 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 108 !== s4)
              return false;
            i3++, a2++;
          } else if (116 === s4) {
            if (t4.type = 9, i3++, a2++, s4 = r3.charCodeAt(i3), 114 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 117 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 101 !== s4)
              return false;
            i3++, a2++;
          } else if (102 === s4) {
            if (t4.type = 10, i3++, a2++, s4 = r3.charCodeAt(i3), 97 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 108 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 115 !== s4)
              return false;
            if (i3++, a2++, s4 = r3.charCodeAt(i3), 101 !== s4)
              return false;
            i3++, a2++;
          } else
            for (t4.type = 11; ; ) {
              if (i3 >= o2)
                return false;
              if (s4 = r3.charCodeAt(i3), !(46 === s4 || s4 >= 48 && s4 <= 57 || 101 === s4 || 69 === s4 || 45 === s4 || 43 === s4))
                break;
              i3++, a2++;
            }
          return t4.len = i3 - t4.offset, null === t4.value && (t4.value = r3.substr(t4.offset, t4.len)), e4.pos = i3, e4.line = c2, e4.char = a2, true;
        }
      }, 787: function(e3, t3, n2) {
        var s3 = this && this.__createBinding || (Object.create ? function(e4, t4, n3, s4) {
          void 0 === s4 && (s4 = n3), Object.defineProperty(e4, s4, { enumerable: true, get: function() {
            return t4[n3];
          } });
        } : function(e4, t4, n3, s4) {
          void 0 === s4 && (s4 = n3), e4[s4] = t4[n3];
        }), r2 = this && this.__exportStar || function(e4, t4) {
          for (var n3 in e4)
            "default" === n3 || Object.prototype.hasOwnProperty.call(t4, n3) || s3(t4, e4, n3);
        };
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseRawGrammar = t3.INITIAL = t3.Registry = void 0;
        const i2 = n2(391), o2 = n2(50), c2 = n2(652), a2 = n2(583), l2 = n2(965);
        r2(n2(44), t3), t3.Registry = class {
          constructor(e4) {
            this._options = e4, this._syncRegistry = new c2.SyncRegistry(a2.Theme.createFromRawTheme(e4.theme, e4.colorMap), e4.onigLib), this._ensureGrammarCache = /* @__PURE__ */ new Map();
          }
          dispose() {
            this._syncRegistry.dispose();
          }
          setTheme(e4, t4) {
            this._syncRegistry.setTheme(a2.Theme.createFromRawTheme(e4, t4));
          }
          getColorMap() {
            return this._syncRegistry.getColorMap();
          }
          loadGrammarWithEmbeddedLanguages(e4, t4, n3) {
            return this.loadGrammarWithConfiguration(e4, t4, { embeddedLanguages: n3 });
          }
          loadGrammarWithConfiguration(e4, t4, n3) {
            return this._loadGrammar(e4, t4, n3.embeddedLanguages, n3.tokenTypes, new i2.BalancedBracketSelectors(n3.balancedBracketSelectors || [], n3.unbalancedBracketSelectors || []));
          }
          loadGrammar(e4) {
            return this._loadGrammar(e4, 0, null, null, null);
          }
          async _loadGrammar(e4, t4, n3, s4, r3) {
            const i3 = new l2.ScopeDependencyProcessor(this._syncRegistry, e4);
            for (; i3.Q.length > 0; )
              await Promise.all(i3.Q.map((e5) => this._loadSingleGrammar(e5.scopeName))), i3.processQueue();
            return this._grammarForScopeName(e4, t4, n3, s4, r3);
          }
          async _loadSingleGrammar(e4) {
            return this._ensureGrammarCache.has(e4) || this._ensureGrammarCache.set(e4, this._doLoadSingleGrammar(e4)), this._ensureGrammarCache.get(e4);
          }
          async _doLoadSingleGrammar(e4) {
            const t4 = await this._options.loadGrammar(e4);
            if (t4) {
              const n3 = "function" == typeof this._options.getInjections ? this._options.getInjections(e4) : void 0;
              this._syncRegistry.addGrammar(t4, n3);
            }
          }
          async addGrammar(e4, t4 = [], n3 = 0, s4 = null) {
            return this._syncRegistry.addGrammar(e4, t4), await this._grammarForScopeName(e4.scopeName, n3, s4);
          }
          _grammarForScopeName(e4, t4 = 0, n3 = null, s4 = null, r3 = null) {
            return this._syncRegistry.grammarForScopeName(e4, t4, n3, s4, r3);
          }
        }, t3.INITIAL = i2.StateStack.NULL, t3.parseRawGrammar = o2.parseRawGrammar;
      }, 736: (e3, t3) => {
        function n2(e4) {
          return !!e4 && !!e4.match(/[\w\.:]+/);
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.createMatchers = void 0, t3.createMatchers = function(e4, t4) {
          const s3 = [], r2 = function(e5) {
            let t5 = /([LR]:|[\w\.:][\w\.:\-]*|[\,\|\-\(\)])/g, n3 = t5.exec(e5);
            return { next: () => {
              if (!n3)
                return null;
              const s4 = n3[0];
              return n3 = t5.exec(e5), s4;
            } };
          }(e4);
          let i2 = r2.next();
          for (; null !== i2; ) {
            let e5 = 0;
            if (2 === i2.length && ":" === i2.charAt(1)) {
              switch (i2.charAt(0)) {
                case "R":
                  e5 = 1;
                  break;
                case "L":
                  e5 = -1;
                  break;
                default:
                  console.log(`Unknown priority ${i2} in scope selector`);
              }
              i2 = r2.next();
            }
            let t5 = c2();
            if (s3.push({ matcher: t5, priority: e5 }), "," !== i2)
              break;
            i2 = r2.next();
          }
          return s3;
          function o2() {
            if ("-" === i2) {
              i2 = r2.next();
              const e5 = o2();
              return (t5) => !!e5 && !e5(t5);
            }
            if ("(" === i2) {
              i2 = r2.next();
              const e5 = function() {
                const e6 = [];
                let t5 = c2();
                for (; t5 && (e6.push(t5), "|" === i2 || "," === i2); ) {
                  do {
                    i2 = r2.next();
                  } while ("|" === i2 || "," === i2);
                  t5 = c2();
                }
                return (t6) => e6.some((e7) => e7(t6));
              }();
              return ")" === i2 && (i2 = r2.next()), e5;
            }
            if (n2(i2)) {
              const e5 = [];
              do {
                e5.push(i2), i2 = r2.next();
              } while (n2(i2));
              return (n3) => t4(e5, n3);
            }
            return null;
          }
          function c2() {
            const e5 = [];
            let t5 = o2();
            for (; t5; )
              e5.push(t5), t5 = o2();
            return (t6) => e5.every((e6) => e6(t6));
          }
        };
      }, 44: (e3, t3) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.disposeOnigString = void 0, t3.disposeOnigString = function(e4) {
          "function" == typeof e4.dispose && e4.dispose();
        };
      }, 50: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseRawGrammar = void 0;
        const s3 = n2(69), r2 = n2(350), i2 = n2(974);
        t3.parseRawGrammar = function(e4, t4 = null) {
          return null !== t4 && /\.json$/.test(t4) ? (n3 = e4, o2 = t4, r2.DebugFlags.InDebugMode ? i2.parseJSON(n3, o2, true) : JSON.parse(n3)) : function(e5, t5) {
            return r2.DebugFlags.InDebugMode ? s3.parseWithLocation(e5, t5, "$vscodeTextmateLocation") : s3.parsePLIST(e5);
          }(e4, t4);
          var n3, o2;
        };
      }, 69: (e3, t3) => {
        function n2(e4, t4, n3) {
          const s3 = e4.length;
          let r2 = 0, i2 = 1, o2 = 0;
          function c2(t5) {
            if (null === n3)
              r2 += t5;
            else
              for (; t5 > 0; )
                10 === e4.charCodeAt(r2) ? (r2++, i2++, o2 = 0) : (r2++, o2++), t5--;
          }
          function a2(e5) {
            null === n3 ? r2 = e5 : c2(e5 - r2);
          }
          function l2() {
            for (; r2 < s3; ) {
              let t5 = e4.charCodeAt(r2);
              if (32 !== t5 && 9 !== t5 && 13 !== t5 && 10 !== t5)
                break;
              c2(1);
            }
          }
          function u2(t5) {
            return e4.substr(r2, t5.length) === t5 && (c2(t5.length), true);
          }
          function h2(t5) {
            let n4 = e4.indexOf(t5, r2);
            a2(-1 !== n4 ? n4 + t5.length : s3);
          }
          function p2(t5) {
            let n4 = e4.indexOf(t5, r2);
            if (-1 !== n4) {
              let s4 = e4.substring(r2, n4);
              return a2(n4 + t5.length), s4;
            }
            {
              let t6 = e4.substr(r2);
              return a2(s3), t6;
            }
          }
          s3 > 0 && 65279 === e4.charCodeAt(0) && (r2 = 1);
          let d2 = 0, f2 = null, g2 = [], m2 = [], _2 = null;
          function b3(e5, t5) {
            g2.push(d2), m2.push(f2), d2 = e5, f2 = t5;
          }
          function y2() {
            if (0 === g2.length)
              return S2("illegal state stack");
            d2 = g2.pop(), f2 = m2.pop();
          }
          function S2(t5) {
            throw new Error("Near offset " + r2 + ": " + t5 + " ~~~" + e4.substr(r2, 50) + "~~~");
          }
          const k2 = function() {
            if (null === _2)
              return S2("missing <key>");
            let e5 = {};
            null !== n3 && (e5[n3] = { filename: t4, line: i2, char: o2 }), f2[_2] = e5, _2 = null, b3(1, e5);
          }, C2 = function() {
            if (null === _2)
              return S2("missing <key>");
            let e5 = [];
            f2[_2] = e5, _2 = null, b3(2, e5);
          }, R2 = function() {
            let e5 = {};
            null !== n3 && (e5[n3] = { filename: t4, line: i2, char: o2 }), f2.push(e5), b3(1, e5);
          }, A3 = function() {
            let e5 = [];
            f2.push(e5), b3(2, e5);
          };
          function w2() {
            if (1 !== d2)
              return S2("unexpected </dict>");
            y2();
          }
          function P3() {
            return 1 === d2 || 2 !== d2 ? S2("unexpected </array>") : void y2();
          }
          function I2(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function v3(e5) {
            if (isNaN(e5))
              return S2("cannot parse float");
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function N3(e5) {
            if (isNaN(e5))
              return S2("cannot parse integer");
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function T3(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function x2(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function G3(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function E3() {
            let e5 = p2(">"), t5 = false;
            return 47 === e5.charCodeAt(e5.length - 1) && (t5 = true, e5 = e5.substring(0, e5.length - 1)), { name: e5.trim(), isClosed: t5 };
          }
          function L2(e5) {
            if (e5.isClosed)
              return "";
            let t5 = p2("</");
            return h2(">"), t5.replace(/&#([0-9]+);/g, function(e6, t6) {
              return String.fromCodePoint(parseInt(t6, 10));
            }).replace(/&#x([0-9a-f]+);/g, function(e6, t6) {
              return String.fromCodePoint(parseInt(t6, 16));
            }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function(e6) {
              switch (e6) {
                case "&amp;":
                  return "&";
                case "&lt;":
                  return "<";
                case "&gt;":
                  return ">";
                case "&quot;":
                  return '"';
                case "&apos;":
                  return "'";
              }
              return e6;
            });
          }
          for (; r2 < s3 && (l2(), !(r2 >= s3)); ) {
            const a3 = e4.charCodeAt(r2);
            if (c2(1), 60 !== a3)
              return S2("expected <");
            if (r2 >= s3)
              return S2("unexpected end of input");
            const p3 = e4.charCodeAt(r2);
            if (63 === p3) {
              c2(1), h2("?>");
              continue;
            }
            if (33 === p3) {
              if (c2(1), u2("--")) {
                h2("-->");
                continue;
              }
              h2(">");
              continue;
            }
            if (47 === p3) {
              if (c2(1), l2(), u2("plist")) {
                h2(">");
                continue;
              }
              if (u2("dict")) {
                h2(">"), w2();
                continue;
              }
              if (u2("array")) {
                h2(">"), P3();
                continue;
              }
              return S2("unexpected closed tag");
            }
            let g3 = E3();
            switch (g3.name) {
              case "dict":
                1 === d2 ? k2() : 2 === d2 ? R2() : (f2 = {}, null !== n3 && (f2[n3] = { filename: t4, line: i2, char: o2 }), b3(1, f2)), g3.isClosed && w2();
                continue;
              case "array":
                1 === d2 ? C2() : 2 === d2 ? A3() : (f2 = [], b3(2, f2)), g3.isClosed && P3();
                continue;
              case "key":
                M2 = L2(g3), 1 !== d2 ? S2("unexpected <key>") : null !== _2 ? S2("too many <key>") : _2 = M2;
                continue;
              case "string":
                I2(L2(g3));
                continue;
              case "real":
                v3(parseFloat(L2(g3)));
                continue;
              case "integer":
                N3(parseInt(L2(g3), 10));
                continue;
              case "date":
                T3(new Date(L2(g3)));
                continue;
              case "data":
                x2(L2(g3));
                continue;
              case "true":
                L2(g3), G3(true);
                continue;
              case "false":
                L2(g3), G3(false);
                continue;
            }
            if (!/^plist/.test(g3.name))
              return S2("unexpected opened tag " + g3.name);
          }
          var M2;
          return f2;
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parsePLIST = t3.parseWithLocation = void 0, t3.parseWithLocation = function(e4, t4, s3) {
          return n2(e4, t4, s3);
        }, t3.parsePLIST = function(e4) {
          return n2(e4, null, null);
        };
      }, 652: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.SyncRegistry = void 0;
        const s3 = n2(391);
        t3.SyncRegistry = class {
          constructor(e4, t4) {
            this._onigLibPromise = t4, this._grammars = /* @__PURE__ */ new Map(), this._rawGrammars = /* @__PURE__ */ new Map(), this._injectionGrammars = /* @__PURE__ */ new Map(), this._theme = e4;
          }
          dispose() {
            for (const e4 of this._grammars.values())
              e4.dispose();
          }
          setTheme(e4) {
            this._theme = e4;
          }
          getColorMap() {
            return this._theme.getColorMap();
          }
          addGrammar(e4, t4) {
            this._rawGrammars.set(e4.scopeName, e4), t4 && this._injectionGrammars.set(e4.scopeName, t4);
          }
          lookup(e4) {
            return this._rawGrammars.get(e4);
          }
          injections(e4) {
            return this._injectionGrammars.get(e4);
          }
          getDefaults() {
            return this._theme.getDefaults();
          }
          themeMatch(e4) {
            return this._theme.match(e4);
          }
          async grammarForScopeName(e4, t4, n3, r2, i2) {
            if (!this._grammars.has(e4)) {
              let o2 = this._rawGrammars.get(e4);
              if (!o2)
                return null;
              this._grammars.set(e4, s3.createGrammar(e4, o2, t4, n3, r2, i2, this, await this._onigLibPromise));
            }
            return this._grammars.get(e4);
          }
        };
      }, 792: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.CompiledRule = t3.RegExpSourceList = t3.RegExpSource = t3.RuleFactory = t3.BeginWhileRule = t3.BeginEndRule = t3.IncludeOnlyRule = t3.MatchRule = t3.CaptureRule = t3.Rule = t3.ruleIdToNumber = t3.ruleIdFromNumber = t3.whileRuleId = t3.endRuleId = void 0;
        const s3 = n2(878), r2 = n2(965), i2 = /\\(\d+)/, o2 = /\\(\d+)/g;
        t3.endRuleId = -1, t3.whileRuleId = -2, t3.ruleIdFromNumber = function(e4) {
          return e4;
        }, t3.ruleIdToNumber = function(e4) {
          return e4;
        };
        class c2 {
          constructor(e4, t4, n3, r3) {
            this.$location = e4, this.id = t4, this._name = n3 || null, this._nameIsCapturing = s3.RegexSource.hasCaptures(this._name), this._contentName = r3 || null, this._contentNameIsCapturing = s3.RegexSource.hasCaptures(this._contentName);
          }
          get debugName() {
            const e4 = this.$location ? `${s3.basename(this.$location.filename)}:${this.$location.line}` : "unknown";
            return `${this.constructor.name}#${this.id} @ ${e4}`;
          }
          getName(e4, t4) {
            return this._nameIsCapturing && null !== this._name && null !== e4 && null !== t4 ? s3.RegexSource.replaceCaptures(this._name, e4, t4) : this._name;
          }
          getContentName(e4, t4) {
            return this._contentNameIsCapturing && null !== this._contentName ? s3.RegexSource.replaceCaptures(this._contentName, e4, t4) : this._contentName;
          }
        }
        t3.Rule = c2;
        class a2 extends c2 {
          constructor(e4, t4, n3, s4, r3) {
            super(e4, t4, n3, s4), this.retokenizeCapturedWithRuleId = r3;
          }
          dispose() {
          }
          collectPatterns(e4, t4) {
            throw new Error("Not supported!");
          }
          compile(e4, t4) {
            throw new Error("Not supported!");
          }
          compileAG(e4, t4, n3, s4) {
            throw new Error("Not supported!");
          }
        }
        t3.CaptureRule = a2;
        class l2 extends c2 {
          constructor(e4, t4, n3, s4, r3) {
            super(e4, t4, n3, null), this._match = new f2(s4, this.id), this.captures = r3, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugMatchRegExp() {
            return `${this._match.source}`;
          }
          collectPatterns(e4, t4) {
            t4.push(this._match);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4).compile(e4);
          }
          compileAG(e4, t4, n3, s4) {
            return this._getCachedCompiledPatterns(e4).compileAG(e4, n3, s4);
          }
          _getCachedCompiledPatterns(e4) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g2(), this.collectPatterns(e4, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t3.MatchRule = l2;
        class u2 extends c2 {
          constructor(e4, t4, n3, s4, r3) {
            super(e4, t4, n3, s4), this.patterns = r3.patterns, this.hasMissingPatterns = r3.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          collectPatterns(e4, t4) {
            for (const n3 of this.patterns)
              e4.getRule(n3).collectPatterns(e4, t4);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4).compile(e4);
          }
          compileAG(e4, t4, n3, s4) {
            return this._getCachedCompiledPatterns(e4).compileAG(e4, n3, s4);
          }
          _getCachedCompiledPatterns(e4) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g2(), this.collectPatterns(e4, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t3.IncludeOnlyRule = u2;
        class h2 extends c2 {
          constructor(e4, t4, n3, s4, r3, i3, o3, c3, a3, l3) {
            super(e4, t4, n3, s4), this._begin = new f2(r3, this.id), this.beginCaptures = i3, this._end = new f2(o3 || "￿", -1), this.endHasBackReferences = this._end.hasBackReferences, this.endCaptures = c3, this.applyEndPatternLast = a3 || false, this.patterns = l3.patterns, this.hasMissingPatterns = l3.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugEndRegExp() {
            return `${this._end.source}`;
          }
          getEndWithResolvedBackReferences(e4, t4) {
            return this._end.resolveBackReferences(e4, t4);
          }
          collectPatterns(e4, t4) {
            t4.push(this._begin);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4, t4).compile(e4);
          }
          compileAG(e4, t4, n3, s4) {
            return this._getCachedCompiledPatterns(e4, t4).compileAG(e4, n3, s4);
          }
          _getCachedCompiledPatterns(e4, t4) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g2();
              for (const t5 of this.patterns)
                e4.getRule(t5).collectPatterns(e4, this._cachedCompiledPatterns);
              this.applyEndPatternLast ? this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end) : this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);
            }
            return this._end.hasBackReferences && (this.applyEndPatternLast ? this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, t4) : this._cachedCompiledPatterns.setSource(0, t4)), this._cachedCompiledPatterns;
          }
        }
        t3.BeginEndRule = h2;
        class p2 extends c2 {
          constructor(e4, n3, s4, r3, i3, o3, c3, a3, l3) {
            super(e4, n3, s4, r3), this._begin = new f2(i3, this.id), this.beginCaptures = o3, this.whileCaptures = a3, this._while = new f2(c3, t3.whileRuleId), this.whileHasBackReferences = this._while.hasBackReferences, this.patterns = l3.patterns, this.hasMissingPatterns = l3.hasMissingPatterns, this._cachedCompiledPatterns = null, this._cachedCompiledWhilePatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null), this._cachedCompiledWhilePatterns && (this._cachedCompiledWhilePatterns.dispose(), this._cachedCompiledWhilePatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugWhileRegExp() {
            return `${this._while.source}`;
          }
          getWhileWithResolvedBackReferences(e4, t4) {
            return this._while.resolveBackReferences(e4, t4);
          }
          collectPatterns(e4, t4) {
            t4.push(this._begin);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4).compile(e4);
          }
          compileAG(e4, t4, n3, s4) {
            return this._getCachedCompiledPatterns(e4).compileAG(e4, n3, s4);
          }
          _getCachedCompiledPatterns(e4) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g2();
              for (const t4 of this.patterns)
                e4.getRule(t4).collectPatterns(e4, this._cachedCompiledPatterns);
            }
            return this._cachedCompiledPatterns;
          }
          compileWhile(e4, t4) {
            return this._getCachedCompiledWhilePatterns(e4, t4).compile(e4);
          }
          compileWhileAG(e4, t4, n3, s4) {
            return this._getCachedCompiledWhilePatterns(e4, t4).compileAG(e4, n3, s4);
          }
          _getCachedCompiledWhilePatterns(e4, t4) {
            return this._cachedCompiledWhilePatterns || (this._cachedCompiledWhilePatterns = new g2(), this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while)), this._while.hasBackReferences && this._cachedCompiledWhilePatterns.setSource(0, t4 || "￿"), this._cachedCompiledWhilePatterns;
          }
        }
        t3.BeginWhileRule = p2;
        class d2 {
          static createCaptureRule(e4, t4, n3, s4, r3) {
            return e4.registerRule((e5) => new a2(t4, e5, n3, s4, r3));
          }
          static getCompiledRuleId(e4, t4, n3) {
            return e4.id || t4.registerRule((r3) => {
              if (e4.id = r3, e4.match)
                return new l2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.match, d2._compileCaptures(e4.captures, t4, n3));
              if (void 0 === e4.begin) {
                e4.repository && (n3 = s3.mergeObjects({}, n3, e4.repository));
                let r4 = e4.patterns;
                return void 0 === r4 && e4.include && (r4 = [{ include: e4.include }]), new u2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.contentName, d2._compilePatterns(r4, t4, n3));
              }
              return e4.while ? new p2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.contentName, e4.begin, d2._compileCaptures(e4.beginCaptures || e4.captures, t4, n3), e4.while, d2._compileCaptures(e4.whileCaptures || e4.captures, t4, n3), d2._compilePatterns(e4.patterns, t4, n3)) : new h2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.contentName, e4.begin, d2._compileCaptures(e4.beginCaptures || e4.captures, t4, n3), e4.end, d2._compileCaptures(e4.endCaptures || e4.captures, t4, n3), e4.applyEndPatternLast, d2._compilePatterns(e4.patterns, t4, n3));
            }), e4.id;
          }
          static _compileCaptures(e4, t4, n3) {
            let s4 = [];
            if (e4) {
              let r3 = 0;
              for (const t5 in e4) {
                if ("$vscodeTextmateLocation" === t5)
                  continue;
                const e5 = parseInt(t5, 10);
                e5 > r3 && (r3 = e5);
              }
              for (let e5 = 0; e5 <= r3; e5++)
                s4[e5] = null;
              for (const r4 in e4) {
                if ("$vscodeTextmateLocation" === r4)
                  continue;
                const i3 = parseInt(r4, 10);
                let o3 = 0;
                e4[r4].patterns && (o3 = d2.getCompiledRuleId(e4[r4], t4, n3)), s4[i3] = d2.createCaptureRule(t4, e4[r4].$vscodeTextmateLocation, e4[r4].name, e4[r4].contentName, o3);
              }
            }
            return s4;
          }
          static _compilePatterns(e4, t4, n3) {
            let s4 = [];
            if (e4)
              for (let i3 = 0, o3 = e4.length; i3 < o3; i3++) {
                const o4 = e4[i3];
                let c3 = -1;
                if (o4.include) {
                  const e5 = r2.parseInclude(o4.include);
                  switch (e5.kind) {
                    case 0:
                    case 1:
                      c3 = d2.getCompiledRuleId(n3[o4.include], t4, n3);
                      break;
                    case 2:
                      let s5 = n3[e5.ruleName];
                      s5 && (c3 = d2.getCompiledRuleId(s5, t4, n3));
                      break;
                    case 3:
                    case 4:
                      const r3 = e5.scopeName, i4 = 4 === e5.kind ? e5.ruleName : null, a3 = t4.getExternalGrammar(r3, n3);
                      if (a3)
                        if (i4) {
                          let e6 = a3.repository[i4];
                          e6 && (c3 = d2.getCompiledRuleId(e6, t4, a3.repository));
                        } else
                          c3 = d2.getCompiledRuleId(a3.repository.$self, t4, a3.repository);
                  }
                } else
                  c3 = d2.getCompiledRuleId(o4, t4, n3);
                if (-1 !== c3) {
                  const e5 = t4.getRule(c3);
                  let n4 = false;
                  if ((e5 instanceof u2 || e5 instanceof h2 || e5 instanceof p2) && e5.hasMissingPatterns && 0 === e5.patterns.length && (n4 = true), n4)
                    continue;
                  s4.push(c3);
                }
              }
            return { patterns: s4, hasMissingPatterns: (e4 ? e4.length : 0) !== s4.length };
          }
        }
        t3.RuleFactory = d2;
        class f2 {
          constructor(e4, t4) {
            if (e4) {
              const t5 = e4.length;
              let n3 = 0, s4 = [], r3 = false;
              for (let i3 = 0; i3 < t5; i3++)
                if ("\\" === e4.charAt(i3) && i3 + 1 < t5) {
                  const t6 = e4.charAt(i3 + 1);
                  "z" === t6 ? (s4.push(e4.substring(n3, i3)), s4.push("$(?!\\n)(?<!\\n)"), n3 = i3 + 2) : "A" !== t6 && "G" !== t6 || (r3 = true), i3++;
                }
              this.hasAnchor = r3, 0 === n3 ? this.source = e4 : (s4.push(e4.substring(n3, t5)), this.source = s4.join(""));
            } else
              this.hasAnchor = false, this.source = e4;
            this.hasAnchor ? this._anchorCache = this._buildAnchorCache() : this._anchorCache = null, this.ruleId = t4, this.hasBackReferences = i2.test(this.source);
          }
          clone() {
            return new f2(this.source, this.ruleId);
          }
          setSource(e4) {
            this.source !== e4 && (this.source = e4, this.hasAnchor && (this._anchorCache = this._buildAnchorCache()));
          }
          resolveBackReferences(e4, t4) {
            let n3 = t4.map((t5) => e4.substring(t5.start, t5.end));
            return o2.lastIndex = 0, this.source.replace(o2, (e5, t5) => s3.escapeRegExpCharacters(n3[parseInt(t5, 10)] || ""));
          }
          _buildAnchorCache() {
            let e4, t4, n3, s4, r3 = [], i3 = [], o3 = [], c3 = [];
            for (e4 = 0, t4 = this.source.length; e4 < t4; e4++)
              n3 = this.source.charAt(e4), r3[e4] = n3, i3[e4] = n3, o3[e4] = n3, c3[e4] = n3, "\\" === n3 && e4 + 1 < t4 && (s4 = this.source.charAt(e4 + 1), "A" === s4 ? (r3[e4 + 1] = "￿", i3[e4 + 1] = "￿", o3[e4 + 1] = "A", c3[e4 + 1] = "A") : "G" === s4 ? (r3[e4 + 1] = "￿", i3[e4 + 1] = "G", o3[e4 + 1] = "￿", c3[e4 + 1] = "G") : (r3[e4 + 1] = s4, i3[e4 + 1] = s4, o3[e4 + 1] = s4, c3[e4 + 1] = s4), e4++);
            return { A0_G0: r3.join(""), A0_G1: i3.join(""), A1_G0: o3.join(""), A1_G1: c3.join("") };
          }
          resolveAnchors(e4, t4) {
            return this.hasAnchor && this._anchorCache ? e4 ? t4 ? this._anchorCache.A1_G1 : this._anchorCache.A1_G0 : t4 ? this._anchorCache.A0_G1 : this._anchorCache.A0_G0 : this.source;
          }
        }
        t3.RegExpSource = f2;
        class g2 {
          constructor() {
            this._items = [], this._hasAnchors = false, this._cached = null, this._anchorCache = { A0_G0: null, A0_G1: null, A1_G0: null, A1_G1: null };
          }
          dispose() {
            this._disposeCaches();
          }
          _disposeCaches() {
            this._cached && (this._cached.dispose(), this._cached = null), this._anchorCache.A0_G0 && (this._anchorCache.A0_G0.dispose(), this._anchorCache.A0_G0 = null), this._anchorCache.A0_G1 && (this._anchorCache.A0_G1.dispose(), this._anchorCache.A0_G1 = null), this._anchorCache.A1_G0 && (this._anchorCache.A1_G0.dispose(), this._anchorCache.A1_G0 = null), this._anchorCache.A1_G1 && (this._anchorCache.A1_G1.dispose(), this._anchorCache.A1_G1 = null);
          }
          push(e4) {
            this._items.push(e4), this._hasAnchors = this._hasAnchors || e4.hasAnchor;
          }
          unshift(e4) {
            this._items.unshift(e4), this._hasAnchors = this._hasAnchors || e4.hasAnchor;
          }
          length() {
            return this._items.length;
          }
          setSource(e4, t4) {
            this._items[e4].source !== t4 && (this._disposeCaches(), this._items[e4].setSource(t4));
          }
          compile(e4) {
            if (!this._cached) {
              let t4 = this._items.map((e5) => e5.source);
              this._cached = new m2(e4, t4, this._items.map((e5) => e5.ruleId));
            }
            return this._cached;
          }
          compileAG(e4, t4, n3) {
            return this._hasAnchors ? t4 ? n3 ? (this._anchorCache.A1_G1 || (this._anchorCache.A1_G1 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A1_G1) : (this._anchorCache.A1_G0 || (this._anchorCache.A1_G0 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A1_G0) : n3 ? (this._anchorCache.A0_G1 || (this._anchorCache.A0_G1 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A0_G1) : (this._anchorCache.A0_G0 || (this._anchorCache.A0_G0 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A0_G0) : this.compile(e4);
          }
          _resolveAnchors(e4, t4, n3) {
            let s4 = this._items.map((e5) => e5.resolveAnchors(t4, n3));
            return new m2(e4, s4, this._items.map((e5) => e5.ruleId));
          }
        }
        t3.RegExpSourceList = g2;
        class m2 {
          constructor(e4, t4, n3) {
            this.regExps = t4, this.rules = n3, this.scanner = e4.createOnigScanner(t4);
          }
          dispose() {
            "function" == typeof this.scanner.dispose && this.scanner.dispose();
          }
          toString() {
            const e4 = [];
            for (let t4 = 0, n3 = this.rules.length; t4 < n3; t4++)
              e4.push("   - " + this.rules[t4] + ": " + this.regExps[t4]);
            return e4.join("\n");
          }
          findNextMatchSync(e4, t4, n3) {
            const s4 = this.scanner.findNextMatchSync(e4, t4, n3);
            return s4 ? { ruleId: this.rules[s4.index], captureIndices: s4.captureIndices } : null;
          }
        }
        t3.CompiledRule = m2;
      }, 583: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.ThemeTrieElement = t3.ThemeTrieElementRule = t3.ColorMap = t3.fontStyleToString = t3.ParsedThemeRule = t3.parseTheme = t3.StyleAttributes = t3.ScopeStack = t3.Theme = void 0;
        const s3 = n2(878);
        class r2 {
          constructor(e4, t4, n3) {
            this._colorMap = e4, this._defaults = t4, this._root = n3, this._cachedMatchRoot = new s3.CachedFn((e5) => this._root.match(e5));
          }
          static createFromRawTheme(e4, t4) {
            return this.createFromParsedTheme(a2(e4), t4);
          }
          static createFromParsedTheme(e4, t4) {
            return function(e5, t5) {
              e5.sort((e6, t6) => {
                let n4 = s3.strcmp(e6.scope, t6.scope);
                return 0 !== n4 ? n4 : (n4 = s3.strArrCmp(e6.parentScopes, t6.parentScopes), 0 !== n4 ? n4 : e6.index - t6.index);
              });
              let n3 = 0, i3 = "#000000", o3 = "#ffffff";
              for (; e5.length >= 1 && "" === e5[0].scope; ) {
                let t6 = e5.shift();
                -1 !== t6.fontStyle && (n3 = t6.fontStyle), null !== t6.foreground && (i3 = t6.foreground), null !== t6.background && (o3 = t6.background);
              }
              let a3 = new u2(t5), l3 = new c2(n3, a3.getId(i3), a3.getId(o3)), d2 = new p2(new h2(0, null, -1, 0, 0), []);
              for (let t6 = 0, n4 = e5.length; t6 < n4; t6++) {
                let n5 = e5[t6];
                d2.insert(0, n5.scope, n5.parentScopes, n5.fontStyle, a3.getId(n5.foreground), a3.getId(n5.background));
              }
              return new r2(a3, l3, d2);
            }(e4, t4);
          }
          getColorMap() {
            return this._colorMap.getColorMap();
          }
          getDefaults() {
            return this._defaults;
          }
          match(e4) {
            if (null === e4)
              return this._defaults;
            const t4 = e4.scopeName, n3 = this._cachedMatchRoot.get(t4).find((t5) => function(e5, t6) {
              if (null === t6)
                return true;
              let n4 = 0, s4 = t6[n4];
              for (; e5; ) {
                if (o2(e5.scopeName, s4)) {
                  if (n4++, n4 === t6.length)
                    return true;
                  s4 = t6[n4];
                }
                e5 = e5.parent;
              }
              return false;
            }(e4.parent, t5.parentScopes));
            return n3 ? new c2(n3.fontStyle, n3.foreground, n3.background) : null;
          }
        }
        t3.Theme = r2;
        class i2 {
          constructor(e4, t4) {
            this.parent = e4, this.scopeName = t4;
          }
          static from(...e4) {
            let t4 = null;
            for (let n3 = 0; n3 < e4.length; n3++)
              t4 = new i2(t4, e4[n3]);
            return t4;
          }
          push(e4) {
            return new i2(this, e4);
          }
          getSegments() {
            let e4 = this;
            const t4 = [];
            for (; e4; )
              t4.push(e4.scopeName), e4 = e4.parent;
            return t4.reverse(), t4;
          }
          toString() {
            return this.getSegments().join(" ");
          }
        }
        function o2(e4, t4) {
          return t4 === e4 || e4.startsWith(t4) && "." === e4[t4.length];
        }
        t3.ScopeStack = i2;
        class c2 {
          constructor(e4, t4, n3) {
            this.fontStyle = e4, this.foregroundId = t4, this.backgroundId = n3;
          }
        }
        function a2(e4) {
          if (!e4)
            return [];
          if (!e4.settings || !Array.isArray(e4.settings))
            return [];
          let t4 = e4.settings, n3 = [], r3 = 0;
          for (let e5 = 0, i3 = t4.length; e5 < i3; e5++) {
            let i4, o3 = t4[e5];
            if (!o3.settings)
              continue;
            if ("string" == typeof o3.scope) {
              let e6 = o3.scope;
              e6 = e6.replace(/^[,]+/, ""), e6 = e6.replace(/[,]+$/, ""), i4 = e6.split(",");
            } else
              i4 = Array.isArray(o3.scope) ? o3.scope : [""];
            let c3 = -1;
            if ("string" == typeof o3.settings.fontStyle) {
              c3 = 0;
              let e6 = o3.settings.fontStyle.split(" ");
              for (let t5 = 0, n4 = e6.length; t5 < n4; t5++)
                switch (e6[t5]) {
                  case "italic":
                    c3 |= 1;
                    break;
                  case "bold":
                    c3 |= 2;
                    break;
                  case "underline":
                    c3 |= 4;
                    break;
                  case "strikethrough":
                    c3 |= 8;
                }
            }
            let a3 = null;
            "string" == typeof o3.settings.foreground && s3.isValidHexColor(o3.settings.foreground) && (a3 = o3.settings.foreground);
            let u3 = null;
            "string" == typeof o3.settings.background && s3.isValidHexColor(o3.settings.background) && (u3 = o3.settings.background);
            for (let t5 = 0, s4 = i4.length; t5 < s4; t5++) {
              let s5 = i4[t5].trim().split(" "), o4 = s5[s5.length - 1], h3 = null;
              s5.length > 1 && (h3 = s5.slice(0, s5.length - 1), h3.reverse()), n3[r3++] = new l2(o4, h3, e5, c3, a3, u3);
            }
          }
          return n3;
        }
        t3.StyleAttributes = c2, t3.parseTheme = a2;
        class l2 {
          constructor(e4, t4, n3, s4, r3, i3) {
            this.scope = e4, this.parentScopes = t4, this.index = n3, this.fontStyle = s4, this.foreground = r3, this.background = i3;
          }
        }
        t3.ParsedThemeRule = l2, t3.fontStyleToString = function(e4) {
          if (-1 === e4)
            return "not set";
          let t4 = "";
          return 1 & e4 && (t4 += "italic "), 2 & e4 && (t4 += "bold "), 4 & e4 && (t4 += "underline "), 8 & e4 && (t4 += "strikethrough "), "" === t4 && (t4 = "none"), t4.trim();
        };
        class u2 {
          constructor(e4) {
            if (this._lastColorId = 0, this._id2color = [], this._color2id = /* @__PURE__ */ Object.create(null), Array.isArray(e4)) {
              this._isFrozen = true;
              for (let t4 = 0, n3 = e4.length; t4 < n3; t4++)
                this._color2id[e4[t4]] = t4, this._id2color[t4] = e4[t4];
            } else
              this._isFrozen = false;
          }
          getId(e4) {
            if (null === e4)
              return 0;
            e4 = e4.toUpperCase();
            let t4 = this._color2id[e4];
            if (t4)
              return t4;
            if (this._isFrozen)
              throw new Error(`Missing color in color map - ${e4}`);
            return t4 = ++this._lastColorId, this._color2id[e4] = t4, this._id2color[t4] = e4, t4;
          }
          getColorMap() {
            return this._id2color.slice(0);
          }
        }
        t3.ColorMap = u2;
        class h2 {
          constructor(e4, t4, n3, s4, r3) {
            this.scopeDepth = e4, this.parentScopes = t4, this.fontStyle = n3, this.foreground = s4, this.background = r3;
          }
          clone() {
            return new h2(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);
          }
          static cloneArr(e4) {
            let t4 = [];
            for (let n3 = 0, s4 = e4.length; n3 < s4; n3++)
              t4[n3] = e4[n3].clone();
            return t4;
          }
          acceptOverwrite(e4, t4, n3, s4) {
            this.scopeDepth > e4 ? console.log("how did this happen?") : this.scopeDepth = e4, -1 !== t4 && (this.fontStyle = t4), 0 !== n3 && (this.foreground = n3), 0 !== s4 && (this.background = s4);
          }
        }
        t3.ThemeTrieElementRule = h2;
        class p2 {
          constructor(e4, t4 = [], n3 = {}) {
            this._mainRule = e4, this._children = n3, this._rulesWithParentScopes = t4;
          }
          static _sortBySpecificity(e4) {
            return 1 === e4.length || e4.sort(this._cmpBySpecificity), e4;
          }
          static _cmpBySpecificity(e4, t4) {
            if (e4.scopeDepth === t4.scopeDepth) {
              const n3 = e4.parentScopes, s4 = t4.parentScopes;
              let r3 = null === n3 ? 0 : n3.length, i3 = null === s4 ? 0 : s4.length;
              if (r3 === i3)
                for (let e5 = 0; e5 < r3; e5++) {
                  const t5 = n3[e5].length, r4 = s4[e5].length;
                  if (t5 !== r4)
                    return r4 - t5;
                }
              return i3 - r3;
            }
            return t4.scopeDepth - e4.scopeDepth;
          }
          match(e4) {
            if ("" === e4)
              return p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
            let t4, n3, s4 = e4.indexOf(".");
            return -1 === s4 ? (t4 = e4, n3 = "") : (t4 = e4.substring(0, s4), n3 = e4.substring(s4 + 1)), this._children.hasOwnProperty(t4) ? this._children[t4].match(n3) : p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
          }
          insert(e4, t4, n3, s4, r3, i3) {
            if ("" === t4)
              return void this._doInsertHere(e4, n3, s4, r3, i3);
            let o3, c3, a3, l3 = t4.indexOf(".");
            -1 === l3 ? (o3 = t4, c3 = "") : (o3 = t4.substring(0, l3), c3 = t4.substring(l3 + 1)), this._children.hasOwnProperty(o3) ? a3 = this._children[o3] : (a3 = new p2(this._mainRule.clone(), h2.cloneArr(this._rulesWithParentScopes)), this._children[o3] = a3), a3.insert(e4 + 1, c3, n3, s4, r3, i3);
          }
          _doInsertHere(e4, t4, n3, r3, i3) {
            if (null !== t4) {
              for (let o3 = 0, c3 = this._rulesWithParentScopes.length; o3 < c3; o3++) {
                let c4 = this._rulesWithParentScopes[o3];
                if (0 === s3.strArrCmp(c4.parentScopes, t4))
                  return void c4.acceptOverwrite(e4, n3, r3, i3);
              }
              -1 === n3 && (n3 = this._mainRule.fontStyle), 0 === r3 && (r3 = this._mainRule.foreground), 0 === i3 && (i3 = this._mainRule.background), this._rulesWithParentScopes.push(new h2(e4, t4, n3, r3, i3));
            } else
              this._mainRule.acceptOverwrite(e4, n3, r3, i3);
          }
        }
        t3.ThemeTrieElement = p2;
      }, 878: (e3, t3) => {
        function n2(e4) {
          return Array.isArray(e4) ? function(e5) {
            let t4 = [];
            for (let s4 = 0, r3 = e5.length; s4 < r3; s4++)
              t4[s4] = n2(e5[s4]);
            return t4;
          }(e4) : "object" == typeof e4 ? function(e5) {
            let t4 = {};
            for (let s4 in e5)
              t4[s4] = n2(e5[s4]);
            return t4;
          }(e4) : e4;
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.performanceNow = t3.CachedFn = t3.escapeRegExpCharacters = t3.isValidHexColor = t3.strArrCmp = t3.strcmp = t3.RegexSource = t3.basename = t3.mergeObjects = t3.clone = void 0, t3.clone = function(e4) {
          return n2(e4);
        }, t3.mergeObjects = function(e4, ...t4) {
          return t4.forEach((t5) => {
            for (let n3 in t5)
              e4[n3] = t5[n3];
          }), e4;
        }, t3.basename = function e4(t4) {
          const n3 = ~t4.lastIndexOf("/") || ~t4.lastIndexOf("\\");
          return 0 === n3 ? t4 : ~n3 == t4.length - 1 ? e4(t4.substring(0, t4.length - 1)) : t4.substr(1 + ~n3);
        };
        let s3 = /\$(\d+)|\${(\d+):\/(downcase|upcase)}/g;
        function r2(e4, t4) {
          return e4 < t4 ? -1 : e4 > t4 ? 1 : 0;
        }
        t3.RegexSource = class {
          static hasCaptures(e4) {
            return null !== e4 && (s3.lastIndex = 0, s3.test(e4));
          }
          static replaceCaptures(e4, t4, n3) {
            return e4.replace(s3, (e5, s4, r3, i2) => {
              let o2 = n3[parseInt(s4 || r3, 10)];
              if (!o2)
                return e5;
              {
                let e6 = t4.substring(o2.start, o2.end);
                for (; "." === e6[0]; )
                  e6 = e6.substring(1);
                switch (i2) {
                  case "downcase":
                    return e6.toLowerCase();
                  case "upcase":
                    return e6.toUpperCase();
                  default:
                    return e6;
                }
              }
            });
          }
        }, t3.strcmp = r2, t3.strArrCmp = function(e4, t4) {
          if (null === e4 && null === t4)
            return 0;
          if (!e4)
            return -1;
          if (!t4)
            return 1;
          let n3 = e4.length, s4 = t4.length;
          if (n3 === s4) {
            for (let s5 = 0; s5 < n3; s5++) {
              let n4 = r2(e4[s5], t4[s5]);
              if (0 !== n4)
                return n4;
            }
            return 0;
          }
          return n3 - s4;
        }, t3.isValidHexColor = function(e4) {
          return !!(/^#[0-9a-f]{6}$/i.test(e4) || /^#[0-9a-f]{8}$/i.test(e4) || /^#[0-9a-f]{3}$/i.test(e4) || /^#[0-9a-f]{4}$/i.test(e4));
        }, t3.escapeRegExpCharacters = function(e4) {
          return e4.replace(/[\-\\\{\}\*\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&");
        }, t3.CachedFn = class {
          constructor(e4) {
            this.fn = e4, this.cache = /* @__PURE__ */ new Map();
          }
          get(e4) {
            if (this.cache.has(e4))
              return this.cache.get(e4);
            const t4 = this.fn(e4);
            return this.cache.set(e4, t4), t4;
          }
        }, t3.performanceNow = "undefined" == typeof performance ? function() {
          return Date.now();
        } : function() {
          return performance.now();
        };
      } }, t2 = {};
      return function n2(s3) {
        var r2 = t2[s3];
        if (void 0 !== r2)
          return r2.exports;
        var i2 = t2[s3] = { exports: {} };
        return e2[s3].call(i2.exports, i2, i2.exports, n2), i2.exports;
      }(787);
    })();
  });
})(main);
const languages = [
  {
    id: "abap",
    scopeName: "source.abap",
    path: "abap.tmLanguage.json",
    samplePath: "abap.sample"
  },
  {
    id: "actionscript-3",
    scopeName: "source.actionscript.3",
    path: "actionscript-3.tmLanguage.json",
    samplePath: "actionscript-3.sample"
  },
  {
    id: "ada",
    scopeName: "source.ada",
    path: "ada.tmLanguage.json",
    samplePath: "ada.sample"
  },
  {
    id: "apache",
    scopeName: "source.apacheconf",
    path: "apache.tmLanguage.json"
  },
  {
    id: "apex",
    scopeName: "source.apex",
    path: "apex.tmLanguage.json",
    samplePath: "apex.sample"
  },
  {
    id: "apl",
    scopeName: "source.apl",
    path: "apl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "json"]
  },
  {
    id: "applescript",
    scopeName: "source.applescript",
    path: "applescript.tmLanguage.json",
    samplePath: "applescript.sample"
  },
  {
    id: "asm",
    scopeName: "source.asm.x86_64",
    path: "asm.tmLanguage.json",
    samplePath: "asm.sample"
  },
  {
    id: "astro",
    scopeName: "source.astro",
    path: "astro.tmLanguage.json",
    samplePath: "astro.sample",
    embeddedLangs: ["json", "javascript", "typescript", "tsx", "css", "less", "sass", "scss", "stylus"]
  },
  {
    id: "awk",
    scopeName: "source.awk",
    path: "awk.tmLanguage.json",
    samplePath: "awk.sample"
  },
  {
    id: "ballerina",
    scopeName: "source.ballerina",
    path: "ballerina.tmLanguage.json",
    samplePath: "ballerina.sample"
  },
  {
    id: "bat",
    scopeName: "source.batchfile",
    path: "bat.tmLanguage.json",
    samplePath: "bat.sample",
    aliases: ["batch"]
  },
  {
    id: "berry",
    scopeName: "source.berry",
    path: "berry.tmLanguage.json",
    samplePath: "berry.sample",
    aliases: ["be"]
  },
  {
    id: "bibtex",
    scopeName: "text.bibtex",
    path: "bibtex.tmLanguage.json"
  },
  {
    id: "bicep",
    scopeName: "source.bicep",
    path: "bicep.tmLanguage.json",
    samplePath: "bicep.sample"
  },
  {
    id: "blade",
    scopeName: "text.html.php.blade",
    path: "blade.tmLanguage.json",
    samplePath: "blade.sample",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "c",
    scopeName: "source.c",
    path: "c.tmLanguage.json",
    samplePath: "c.sample"
  },
  {
    id: "cadence",
    scopeName: "source.cadence",
    path: "cadence.tmLanguage.json",
    samplePath: "cadence.sample",
    aliases: ["cdc"]
  },
  {
    id: "clarity",
    scopeName: "source.clar",
    path: "clarity.tmLanguage.json",
    samplePath: "clarity.sample"
  },
  {
    id: "clojure",
    scopeName: "source.clojure",
    path: "clojure.tmLanguage.json",
    samplePath: "clojure.sample",
    aliases: ["clj"]
  },
  {
    id: "cmake",
    scopeName: "source.cmake",
    path: "cmake.tmLanguage.json",
    samplePath: "cmake.sample"
  },
  {
    id: "cobol",
    scopeName: "source.cobol",
    path: "cobol.tmLanguage.json",
    samplePath: "cobol.sample",
    embeddedLangs: ["sql", "html", "java"]
  },
  {
    id: "codeql",
    scopeName: "source.ql",
    path: "codeql.tmLanguage.json",
    samplePath: "codeql.sample",
    aliases: ["ql"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "coffee",
    scopeName: "source.coffee",
    path: "coffee.tmLanguage.json",
    samplePath: "coffee.sample",
    embeddedLangs: ["javascript"]
  },
  {
    id: "cpp",
    scopeName: "source.cpp",
    path: "cpp.tmLanguage.json",
    samplePath: "cpp.sample",
    embeddedLangs: ["glsl", "sql"]
  },
  {
    id: "crystal",
    scopeName: "source.crystal",
    path: "crystal.tmLanguage.json",
    samplePath: "crystal.sample",
    embeddedLangs: ["html", "sql", "css", "c", "javascript", "shellscript"]
  },
  {
    id: "csharp",
    scopeName: "source.cs",
    path: "csharp.tmLanguage.json",
    samplePath: "csharp.sample",
    aliases: ["c#", "cs"]
  },
  {
    id: "css",
    scopeName: "source.css",
    path: "css.tmLanguage.json",
    samplePath: "css.sample"
  },
  {
    id: "cue",
    scopeName: "source.cue",
    path: "cue.tmLanguage.json",
    samplePath: "cue.sample"
  },
  {
    id: "d",
    scopeName: "source.d",
    path: "d.tmLanguage.json",
    samplePath: "d.sample"
  },
  {
    id: "dart",
    scopeName: "source.dart",
    path: "dart.tmLanguage.json",
    samplePath: "dart.sample"
  },
  {
    id: "diff",
    scopeName: "source.diff",
    path: "diff.tmLanguage.json",
    samplePath: "diff.sample"
  },
  {
    id: "docker",
    scopeName: "source.dockerfile",
    path: "docker.tmLanguage.json",
    samplePath: "docker.sample"
  },
  {
    id: "dream-maker",
    scopeName: "source.dm",
    path: "dream-maker.tmLanguage.json"
  },
  {
    id: "elixir",
    scopeName: "source.elixir",
    path: "elixir.tmLanguage.json",
    samplePath: "elixir.sample",
    embeddedLangs: ["html"]
  },
  {
    id: "elm",
    scopeName: "source.elm",
    path: "elm.tmLanguage.json",
    samplePath: "elm.sample",
    embeddedLangs: ["glsl"]
  },
  {
    id: "erb",
    scopeName: "text.html.erb",
    path: "erb.tmLanguage.json",
    samplePath: "erb.sample",
    embeddedLangs: ["html", "ruby"]
  },
  {
    id: "erlang",
    scopeName: "source.erlang",
    path: "erlang.tmLanguage.json",
    samplePath: "erlang.sample",
    aliases: ["erl"]
  },
  {
    id: "fish",
    scopeName: "source.fish",
    path: "fish.tmLanguage.json",
    samplePath: "fish.sample"
  },
  {
    id: "fsharp",
    scopeName: "source.fsharp",
    path: "fsharp.tmLanguage.json",
    samplePath: "fsharp.sample",
    aliases: ["f#", "fs"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "gherkin",
    scopeName: "text.gherkin.feature",
    path: "gherkin.tmLanguage.json"
  },
  {
    id: "git-commit",
    scopeName: "text.git-commit",
    path: "git-commit.tmLanguage.json",
    embeddedLangs: ["diff"]
  },
  {
    id: "git-rebase",
    scopeName: "text.git-rebase",
    path: "git-rebase.tmLanguage.json",
    embeddedLangs: ["shellscript"]
  },
  {
    id: "glsl",
    scopeName: "source.glsl",
    path: "glsl.tmLanguage.json",
    samplePath: "glsl.sample",
    embeddedLangs: ["c"]
  },
  {
    id: "gnuplot",
    scopeName: "source.gnuplot",
    path: "gnuplot.tmLanguage.json"
  },
  {
    id: "go",
    scopeName: "source.go",
    path: "go.tmLanguage.json",
    samplePath: "go.sample"
  },
  {
    id: "graphql",
    scopeName: "source.graphql",
    path: "graphql.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "jsx", "tsx"]
  },
  {
    id: "groovy",
    scopeName: "source.groovy",
    path: "groovy.tmLanguage.json"
  },
  {
    id: "hack",
    scopeName: "source.hack",
    path: "hack.tmLanguage.json",
    embeddedLangs: ["html", "sql"]
  },
  {
    id: "haml",
    scopeName: "text.haml",
    path: "haml.tmLanguage.json",
    embeddedLangs: ["ruby", "javascript", "sass", "coffee", "markdown", "css"]
  },
  {
    id: "handlebars",
    scopeName: "text.html.handlebars",
    path: "handlebars.tmLanguage.json",
    aliases: ["hbs"],
    embeddedLangs: ["html", "css", "javascript", "yaml"]
  },
  {
    id: "haskell",
    scopeName: "source.haskell",
    path: "haskell.tmLanguage.json",
    aliases: ["hs"]
  },
  {
    id: "hcl",
    scopeName: "source.hcl",
    path: "hcl.tmLanguage.json",
    samplePath: "hcl.sample"
  },
  {
    id: "hlsl",
    scopeName: "source.hlsl",
    path: "hlsl.tmLanguage.json"
  },
  {
    id: "html",
    scopeName: "text.html.basic",
    path: "html.tmLanguage.json",
    samplePath: "html.sample",
    embeddedLangs: ["javascript", "css"]
  },
  {
    id: "imba",
    scopeName: "source.imba",
    path: "imba.tmLanguage.json",
    samplePath: "imba.sample"
  },
  {
    id: "ini",
    scopeName: "source.ini",
    path: "ini.tmLanguage.json"
  },
  {
    id: "java",
    scopeName: "source.java",
    path: "java.tmLanguage.json",
    samplePath: "java.sample"
  },
  {
    id: "javascript",
    scopeName: "source.js",
    path: "javascript.tmLanguage.json",
    samplePath: "javascript.sample",
    aliases: ["js"]
  },
  {
    id: "jinja-html",
    scopeName: "text.html.jinja",
    path: "jinja-html.tmLanguage.json",
    embeddedLangs: ["html"]
  },
  {
    id: "json",
    scopeName: "source.json",
    path: "json.tmLanguage.json"
  },
  {
    id: "json5",
    scopeName: "source.json5",
    path: "json5.tmLanguage.json",
    samplePath: "json5.sample"
  },
  {
    id: "jsonc",
    scopeName: "source.json.comments",
    path: "jsonc.tmLanguage.json"
  },
  {
    id: "jsonnet",
    scopeName: "source.jsonnet",
    path: "jsonnet.tmLanguage.json"
  },
  {
    id: "jssm",
    scopeName: "source.jssm",
    path: "jssm.tmLanguage.json",
    samplePath: "jssm.sample",
    aliases: ["fsl"]
  },
  {
    id: "jsx",
    scopeName: "source.js.jsx",
    path: "jsx.tmLanguage.json"
  },
  {
    id: "julia",
    scopeName: "source.julia",
    path: "julia.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "r", "sql"]
  },
  {
    id: "kotlin",
    scopeName: "source.kotlin",
    path: "kotlin.tmLanguage.json"
  },
  {
    id: "latex",
    scopeName: "text.tex.latex",
    path: "latex.tmLanguage.json",
    embeddedLangs: ["tex", "css", "haskell", "html", "xml", "java", "lua", "julia", "ruby", "javascript", "typescript", "python", "yaml", "rust", "scala", "gnuplot"]
  },
  {
    id: "less",
    scopeName: "source.css.less",
    path: "less.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "liquid",
    scopeName: "text.html.liquid",
    path: "liquid.tmLanguage.json",
    samplePath: "liquid.sample",
    embeddedLangs: ["html", "css", "json", "javascript"]
  },
  {
    id: "lisp",
    scopeName: "source.lisp",
    path: "lisp.tmLanguage.json"
  },
  {
    id: "logo",
    scopeName: "source.logo",
    path: "logo.tmLanguage.json"
  },
  {
    id: "lua",
    scopeName: "source.lua",
    path: "lua.tmLanguage.json",
    embeddedLangs: ["c"]
  },
  {
    id: "make",
    scopeName: "source.makefile",
    path: "make.tmLanguage.json",
    aliases: ["makefile"]
  },
  {
    id: "markdown",
    scopeName: "text.html.markdown",
    path: "markdown.tmLanguage.json",
    aliases: ["md"],
    embeddedLangs: ["css", "html", "ini", "java", "lua", "make", "perl", "r", "ruby", "php", "sql", "vb", "xml", "xsl", "yaml", "bat", "clojure", "coffee", "c", "cpp", "diff", "docker", "git-commit", "git-rebase", "go", "groovy", "pug", "javascript", "json", "jsonc", "less", "objective-c", "swift", "scss", "raku", "powershell", "python", "julia", "rust", "scala", "shellscript", "typescript", "tsx", "csharp", "fsharp", "dart", "handlebars", "erlang", "elixir", "latex", "bibtex"]
  },
  {
    id: "marko",
    scopeName: "text.marko",
    path: "marko.tmLanguage.json",
    embeddedLangs: ["css", "less", "scss", "typescript"]
  },
  {
    id: "matlab",
    scopeName: "source.matlab",
    path: "matlab.tmLanguage.json"
  },
  {
    id: "mdx",
    scopeName: "text.html.markdown.jsx",
    path: "mdx.tmLanguage.json",
    embeddedLangs: ["jsx", "markdown"]
  },
  {
    id: "mermaid",
    scopeName: "source.mermaid",
    path: "mermaid.tmLanguage.json"
  },
  {
    id: "nginx",
    scopeName: "source.nginx",
    path: "nginx.tmLanguage.json",
    embeddedLangs: ["lua"]
  },
  {
    id: "nim",
    scopeName: "source.nim",
    path: "nim.tmLanguage.json",
    embeddedLangs: ["c", "html", "xml", "javascript", "css", "glsl", "markdown"]
  },
  {
    id: "nix",
    scopeName: "source.nix",
    path: "nix.tmLanguage.json"
  },
  {
    id: "objective-c",
    scopeName: "source.objc",
    path: "objective-c.tmLanguage.json",
    aliases: ["objc"]
  },
  {
    id: "objective-cpp",
    scopeName: "source.objcpp",
    path: "objective-cpp.tmLanguage.json"
  },
  {
    id: "ocaml",
    scopeName: "source.ocaml",
    path: "ocaml.tmLanguage.json"
  },
  {
    id: "pascal",
    scopeName: "source.pascal",
    path: "pascal.tmLanguage.json"
  },
  {
    id: "perl",
    scopeName: "source.perl",
    path: "perl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "sql"]
  },
  {
    id: "php",
    scopeName: "source.php",
    path: "php.tmLanguage.json",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "plsql",
    scopeName: "source.plsql.oracle",
    path: "plsql.tmLanguage.json"
  },
  {
    id: "postcss",
    scopeName: "source.css.postcss",
    path: "postcss.tmLanguage.json"
  },
  {
    id: "powershell",
    scopeName: "source.powershell",
    path: "powershell.tmLanguage.json",
    aliases: ["ps", "ps1"]
  },
  {
    id: "prisma",
    scopeName: "source.prisma",
    path: "prisma.tmLanguage.json",
    samplePath: "prisma.sample"
  },
  {
    id: "prolog",
    scopeName: "source.prolog",
    path: "prolog.tmLanguage.json"
  },
  {
    id: "proto",
    scopeName: "source.proto",
    path: "proto.tmLanguage.json",
    samplePath: "proto.sample"
  },
  {
    id: "pug",
    scopeName: "text.pug",
    path: "pug.tmLanguage.json",
    aliases: ["jade"],
    embeddedLangs: ["javascript", "css", "sass", "scss", "stylus", "coffee", "html"]
  },
  {
    id: "puppet",
    scopeName: "source.puppet",
    path: "puppet.tmLanguage.json"
  },
  {
    id: "purescript",
    scopeName: "source.purescript",
    path: "purescript.tmLanguage.json"
  },
  {
    id: "python",
    scopeName: "source.python",
    path: "python.tmLanguage.json",
    samplePath: "python.sample",
    aliases: ["py"]
  },
  {
    id: "r",
    scopeName: "source.r",
    path: "r.tmLanguage.json"
  },
  {
    id: "raku",
    scopeName: "source.perl.6",
    path: "raku.tmLanguage.json",
    aliases: ["perl6"]
  },
  {
    id: "razor",
    scopeName: "text.aspnetcorerazor",
    path: "razor.tmLanguage.json",
    embeddedLangs: ["html", "csharp"]
  },
  {
    id: "rel",
    scopeName: "source.rel",
    path: "rel.tmLanguage.json",
    samplePath: "rel.sample"
  },
  {
    id: "riscv",
    scopeName: "source.riscv",
    path: "riscv.tmLanguage.json"
  },
  {
    id: "rst",
    scopeName: "source.rst",
    path: "rst.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "shellscript", "yaml", "cmake", "ruby"]
  },
  {
    id: "ruby",
    scopeName: "source.ruby",
    path: "ruby.tmLanguage.json",
    samplePath: "ruby.sample",
    aliases: ["rb"],
    embeddedLangs: ["html", "xml", "sql", "css", "c", "javascript", "shellscript", "lua"]
  },
  {
    id: "rust",
    scopeName: "source.rust",
    path: "rust.tmLanguage.json",
    aliases: ["rs"]
  },
  {
    id: "sas",
    scopeName: "source.sas",
    path: "sas.tmLanguage.json",
    embeddedLangs: ["sql"]
  },
  {
    id: "sass",
    scopeName: "source.sass",
    path: "sass.tmLanguage.json"
  },
  {
    id: "scala",
    scopeName: "source.scala",
    path: "scala.tmLanguage.json"
  },
  {
    id: "scheme",
    scopeName: "source.scheme",
    path: "scheme.tmLanguage.json"
  },
  {
    id: "scss",
    scopeName: "source.css.scss",
    path: "scss.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "shaderlab",
    scopeName: "source.shaderlab",
    path: "shaderlab.tmLanguage.json",
    aliases: ["shader"],
    embeddedLangs: ["hlsl"]
  },
  {
    id: "shellscript",
    scopeName: "source.shell",
    path: "shellscript.tmLanguage.json",
    aliases: ["shell", "bash", "sh", "zsh"]
  },
  {
    id: "smalltalk",
    scopeName: "source.smalltalk",
    path: "smalltalk.tmLanguage.json"
  },
  {
    id: "solidity",
    scopeName: "source.solidity",
    path: "solidity.tmLanguage.json"
  },
  {
    id: "sparql",
    scopeName: "source.sparql",
    path: "sparql.tmLanguage.json",
    samplePath: "sparql.sample",
    embeddedLangs: ["turtle"]
  },
  {
    id: "sql",
    scopeName: "source.sql",
    path: "sql.tmLanguage.json"
  },
  {
    id: "ssh-config",
    scopeName: "source.ssh-config",
    path: "ssh-config.tmLanguage.json"
  },
  {
    id: "stata",
    scopeName: "source.stata",
    path: "stata.tmLanguage.json",
    samplePath: "stata.sample",
    embeddedLangs: ["sql"]
  },
  {
    id: "stylus",
    scopeName: "source.stylus",
    path: "stylus.tmLanguage.json",
    aliases: ["styl"]
  },
  {
    id: "svelte",
    scopeName: "source.svelte",
    path: "svelte.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "coffee", "stylus", "sass", "css", "scss", "less", "postcss", "pug", "markdown"]
  },
  {
    id: "swift",
    scopeName: "source.swift",
    path: "swift.tmLanguage.json"
  },
  {
    id: "system-verilog",
    scopeName: "source.systemverilog",
    path: "system-verilog.tmLanguage.json"
  },
  {
    id: "tasl",
    scopeName: "source.tasl",
    path: "tasl.tmLanguage.json",
    samplePath: "tasl.sample"
  },
  {
    id: "tcl",
    scopeName: "source.tcl",
    path: "tcl.tmLanguage.json"
  },
  {
    id: "tex",
    scopeName: "text.tex",
    path: "tex.tmLanguage.json",
    embeddedLangs: ["r"]
  },
  {
    id: "toml",
    scopeName: "source.toml",
    path: "toml.tmLanguage.json"
  },
  {
    id: "tsx",
    scopeName: "source.tsx",
    path: "tsx.tmLanguage.json",
    samplePath: "tsx.sample"
  },
  {
    id: "turtle",
    scopeName: "source.turtle",
    path: "turtle.tmLanguage.json",
    samplePath: "turtle.sample"
  },
  {
    id: "twig",
    scopeName: "text.html.twig",
    path: "twig.tmLanguage.json",
    embeddedLangs: ["css", "javascript", "php", "python", "ruby"]
  },
  {
    id: "typescript",
    scopeName: "source.ts",
    path: "typescript.tmLanguage.json",
    aliases: ["ts"]
  },
  {
    id: "v",
    scopeName: "source.v",
    path: "v.tmLanguage.json",
    samplePath: "v.sample"
  },
  {
    id: "vb",
    scopeName: "source.asp.vb.net",
    path: "vb.tmLanguage.json",
    aliases: ["cmd"]
  },
  {
    id: "verilog",
    scopeName: "source.verilog",
    path: "verilog.tmLanguage.json"
  },
  {
    id: "vhdl",
    scopeName: "source.vhdl",
    path: "vhdl.tmLanguage.json"
  },
  {
    id: "viml",
    scopeName: "source.viml",
    path: "viml.tmLanguage.json",
    aliases: ["vim", "vimscript"]
  },
  {
    id: "vue-html",
    scopeName: "text.html.vue-html",
    path: "vue-html.tmLanguage.json",
    embeddedLangs: ["vue", "javascript"]
  },
  {
    id: "vue",
    scopeName: "source.vue",
    path: "vue.tmLanguage.json",
    embeddedLangs: ["html", "markdown", "pug", "stylus", "sass", "css", "scss", "less", "javascript", "typescript", "jsx", "tsx", "json", "jsonc", "yaml", "toml", "graphql"]
  },
  {
    id: "wasm",
    scopeName: "source.wat",
    path: "wasm.tmLanguage.json"
  },
  {
    id: "wenyan",
    scopeName: "source.wenyan",
    path: "wenyan.tmLanguage.json",
    aliases: ["文言"]
  },
  {
    id: "xml",
    scopeName: "text.xml",
    path: "xml.tmLanguage.json",
    embeddedLangs: ["java"]
  },
  {
    id: "xsl",
    scopeName: "text.xml.xsl",
    path: "xsl.tmLanguage.json",
    embeddedLangs: ["xml"]
  },
  {
    id: "yaml",
    scopeName: "source.yaml",
    path: "yaml.tmLanguage.json"
  },
  {
    id: "zenscript",
    scopeName: "source.zenscript",
    path: "zenscript.tmLanguage.json",
    samplePath: "zenscript.sample"
  }
];
var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
  FontStyle2[FontStyle2["NotSet"] = -1] = "NotSet";
  FontStyle2[FontStyle2["None"] = 0] = "None";
  FontStyle2[FontStyle2["Italic"] = 1] = "Italic";
  FontStyle2[FontStyle2["Bold"] = 2] = "Bold";
  FontStyle2[FontStyle2["Underline"] = 4] = "Underline";
  return FontStyle2;
})(FontStyle || {});
class StackElementMetadata {
  static toBinaryStr(metadata) {
    let r2 = metadata.toString(2);
    while (r2.length < 32) {
      r2 = "0" + r2;
    }
    return r2;
  }
  static printMetadata(metadata) {
    let languageId = StackElementMetadata.getLanguageId(metadata);
    let tokenType = StackElementMetadata.getTokenType(metadata);
    let fontStyle = StackElementMetadata.getFontStyle(metadata);
    let foreground = StackElementMetadata.getForeground(metadata);
    let background = StackElementMetadata.getBackground(metadata);
    console.log({
      languageId,
      tokenType,
      fontStyle,
      foreground,
      background
    });
  }
  static getLanguageId(metadata) {
    return (metadata & 255) >>> 0;
  }
  static getTokenType(metadata) {
    return (metadata & 768) >>> 8;
  }
  static getFontStyle(metadata) {
    return (metadata & 14336) >>> 11;
  }
  static getForeground(metadata) {
    return (metadata & 8372224) >>> 15;
  }
  static getBackground(metadata) {
    return (metadata & 4286578688) >>> 24;
  }
  static containsBalancedBrackets(metadata) {
    return (metadata & 1024) !== 0;
  }
  static set(metadata, languageId, tokenType, fontStyle, foreground, background) {
    let _languageId = StackElementMetadata.getLanguageId(metadata);
    let _tokenType = StackElementMetadata.getTokenType(metadata);
    let _fontStyle = StackElementMetadata.getFontStyle(metadata);
    let _foreground = StackElementMetadata.getForeground(metadata);
    let _background = StackElementMetadata.getBackground(metadata);
    let _containsBalancedBracketsBit = StackElementMetadata.containsBalancedBrackets(
      metadata
    ) ? 1 : 0;
    if (languageId !== 0) {
      _languageId = languageId;
    }
    if (tokenType !== 0) {
      _tokenType = tokenType === 8 ? 0 : tokenType;
    }
    if (fontStyle !== -1) {
      _fontStyle = fontStyle;
    }
    if (foreground !== 0) {
      _foreground = foreground;
    }
    if (background !== 0) {
      _background = background;
    }
    return (_languageId << 0 | _tokenType << 8 | _fontStyle << 11 | _containsBalancedBracketsBit << 10 | _foreground << 15 | _background << 24) >>> 0;
  }
}
function trimEndSlash(str) {
  if (str.endsWith("/") || str.endsWith("\\"))
    return str.slice(0, -1);
  return str;
}
function trimStartDot(str) {
  if (str.startsWith("./"))
    return str.slice(2);
  return str;
}
function dirpathparts(str) {
  const parts = str.split(/[\/\\]/g);
  return parts.slice(0, parts.length - 1);
}
function join(...parts) {
  return parts.map(trimEndSlash).map(trimStartDot).join("/");
}
function groupBy(elements, keyGetter) {
  const map2 = /* @__PURE__ */ new Map();
  for (const element of elements) {
    const key = keyGetter(element);
    if (map2.has(key)) {
      const group = map2.get(key);
      group.push(element);
    } else {
      map2.set(key, [element]);
    }
  }
  return map2;
}
function createScanner(text, ignoreTrivia = false) {
  const len = text.length;
  let pos = 0, value = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
  function scanHexDigits(count2, exact) {
    let digits = 0;
    let value2 = 0;
    while (digits < count2 || !exact) {
      let ch2 = text.charCodeAt(pos);
      if (ch2 >= 48 && ch2 <= 57) {
        value2 = value2 * 16 + ch2 - 48;
      } else if (ch2 >= 65 && ch2 <= 70) {
        value2 = value2 * 16 + ch2 - 65 + 10;
      } else if (ch2 >= 97 && ch2 <= 102) {
        value2 = value2 * 16 + ch2 - 97 + 10;
      } else {
        break;
      }
      pos++;
      digits++;
    }
    if (digits < count2) {
      value2 = -1;
    }
    return value2;
  }
  function setPosition(newPosition) {
    pos = newPosition;
    value = "";
    tokenOffset = 0;
    token = 16;
    scanError = 0;
  }
  function scanNumber() {
    let start = pos;
    if (text.charCodeAt(pos) === 48) {
      pos++;
    } else {
      pos++;
      while (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
      }
    }
    if (pos < text.length && text.charCodeAt(pos) === 46) {
      pos++;
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
      } else {
        scanError = 3;
        return text.substring(start, pos);
      }
    }
    let end = pos;
    if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
      pos++;
      if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
        pos++;
      }
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
        end = pos;
      } else {
        scanError = 3;
      }
    }
    return text.substring(start, end);
  }
  function scanString() {
    let result = "", start = pos;
    while (true) {
      if (pos >= len) {
        result += text.substring(start, pos);
        scanError = 2;
        break;
      }
      const ch2 = text.charCodeAt(pos);
      if (ch2 === 34) {
        result += text.substring(start, pos);
        pos++;
        break;
      }
      if (ch2 === 92) {
        result += text.substring(start, pos);
        pos++;
        if (pos >= len) {
          scanError = 2;
          break;
        }
        const ch22 = text.charCodeAt(pos++);
        switch (ch22) {
          case 34:
            result += '"';
            break;
          case 92:
            result += "\\";
            break;
          case 47:
            result += "/";
            break;
          case 98:
            result += "\b";
            break;
          case 102:
            result += "\f";
            break;
          case 110:
            result += "\n";
            break;
          case 114:
            result += "\r";
            break;
          case 116:
            result += "	";
            break;
          case 117:
            const ch3 = scanHexDigits(4, true);
            if (ch3 >= 0) {
              result += String.fromCharCode(ch3);
            } else {
              scanError = 4;
            }
            break;
          default:
            scanError = 5;
        }
        start = pos;
        continue;
      }
      if (ch2 >= 0 && ch2 <= 31) {
        if (isLineBreak(ch2)) {
          result += text.substring(start, pos);
          scanError = 2;
          break;
        } else {
          scanError = 6;
        }
      }
      pos++;
    }
    return result;
  }
  function scanNext() {
    value = "";
    scanError = 0;
    tokenOffset = pos;
    lineStartOffset = lineNumber;
    prevTokenLineStartOffset = tokenLineStartOffset;
    if (pos >= len) {
      tokenOffset = len;
      return token = 17;
    }
    let code2 = text.charCodeAt(pos);
    if (isWhiteSpace(code2)) {
      do {
        pos++;
        value += String.fromCharCode(code2);
        code2 = text.charCodeAt(pos);
      } while (isWhiteSpace(code2));
      return token = 15;
    }
    if (isLineBreak(code2)) {
      pos++;
      value += String.fromCharCode(code2);
      if (code2 === 13 && text.charCodeAt(pos) === 10) {
        pos++;
        value += "\n";
      }
      lineNumber++;
      tokenLineStartOffset = pos;
      return token = 14;
    }
    switch (code2) {
      case 123:
        pos++;
        return token = 1;
      case 125:
        pos++;
        return token = 2;
      case 91:
        pos++;
        return token = 3;
      case 93:
        pos++;
        return token = 4;
      case 58:
        pos++;
        return token = 6;
      case 44:
        pos++;
        return token = 5;
      case 34:
        pos++;
        value = scanString();
        return token = 10;
      case 47:
        const start = pos - 1;
        if (text.charCodeAt(pos + 1) === 47) {
          pos += 2;
          while (pos < len) {
            if (isLineBreak(text.charCodeAt(pos))) {
              break;
            }
            pos++;
          }
          value = text.substring(start, pos);
          return token = 12;
        }
        if (text.charCodeAt(pos + 1) === 42) {
          pos += 2;
          const safeLength = len - 1;
          let commentClosed = false;
          while (pos < safeLength) {
            const ch2 = text.charCodeAt(pos);
            if (ch2 === 42 && text.charCodeAt(pos + 1) === 47) {
              pos += 2;
              commentClosed = true;
              break;
            }
            pos++;
            if (isLineBreak(ch2)) {
              if (ch2 === 13 && text.charCodeAt(pos) === 10) {
                pos++;
              }
              lineNumber++;
              tokenLineStartOffset = pos;
            }
          }
          if (!commentClosed) {
            pos++;
            scanError = 1;
          }
          value = text.substring(start, pos);
          return token = 13;
        }
        value += String.fromCharCode(code2);
        pos++;
        return token = 16;
      case 45:
        value += String.fromCharCode(code2);
        pos++;
        if (pos === len || !isDigit(text.charCodeAt(pos))) {
          return token = 16;
        }
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        value += scanNumber();
        return token = 11;
      default:
        while (pos < len && isUnknownContentCharacter(code2)) {
          pos++;
          code2 = text.charCodeAt(pos);
        }
        if (tokenOffset !== pos) {
          value = text.substring(tokenOffset, pos);
          switch (value) {
            case "true":
              return token = 8;
            case "false":
              return token = 9;
            case "null":
              return token = 7;
          }
          return token = 16;
        }
        value += String.fromCharCode(code2);
        pos++;
        return token = 16;
    }
  }
  function isUnknownContentCharacter(code2) {
    if (isWhiteSpace(code2) || isLineBreak(code2)) {
      return false;
    }
    switch (code2) {
      case 125:
      case 93:
      case 123:
      case 91:
      case 34:
      case 58:
      case 44:
      case 47:
        return false;
    }
    return true;
  }
  function scanNextNonTrivia() {
    let result;
    do {
      result = scanNext();
    } while (result >= 12 && result <= 15);
    return result;
  }
  return {
    setPosition,
    getPosition: () => pos,
    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
    getToken: () => token,
    getTokenValue: () => value,
    getTokenOffset: () => tokenOffset,
    getTokenLength: () => pos - tokenOffset,
    getTokenStartLine: () => lineStartOffset,
    getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,
    getTokenError: () => scanError
  };
}
function isWhiteSpace(ch2) {
  return ch2 === 32 || ch2 === 9;
}
function isLineBreak(ch2) {
  return ch2 === 10 || ch2 === 13;
}
function isDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
var CharacterCodes;
(function(CharacterCodes2) {
  CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
  CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
  CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
  CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
  CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
  CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
  CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
  CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
  CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
  CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
  CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
  CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
  CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
  CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
  CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
  CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
  CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
  CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
  CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
  CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
  CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
  CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
  CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
  CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
  CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
  CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
  CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
  CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
  CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
  CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
  CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
  CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
  CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
  CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
  CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
  CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
  CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
  CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
  CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
  CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
  CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
  CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
  CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
  CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
  CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
  CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
  CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
  CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
  CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
  CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
  CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
  CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
  CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
  CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
  CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
  CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
  CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
  CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
  CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
  CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
  CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
  CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
  CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
  CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
  CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
  CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
  CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
  CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
  CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
  CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
  CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
  CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
  CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
  CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
  CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
  CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
  CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
  CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
  CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
  CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));
var ParseOptions;
(function(ParseOptions2) {
  ParseOptions2.DEFAULT = {
    allowTrailingComma: false
  };
})(ParseOptions || (ParseOptions = {}));
function parse$1(text, errors = [], options = ParseOptions.DEFAULT) {
  let currentProperty = null;
  let currentParent = [];
  const previousParents = [];
  function onValue(value) {
    if (Array.isArray(currentParent)) {
      currentParent.push(value);
    } else if (currentProperty !== null) {
      currentParent[currentProperty] = value;
    }
  }
  const visitor = {
    onObjectBegin: () => {
      const object = {};
      onValue(object);
      previousParents.push(currentParent);
      currentParent = object;
      currentProperty = null;
    },
    onObjectProperty: (name) => {
      currentProperty = name;
    },
    onObjectEnd: () => {
      currentParent = previousParents.pop();
    },
    onArrayBegin: () => {
      const array = [];
      onValue(array);
      previousParents.push(currentParent);
      currentParent = array;
      currentProperty = null;
    },
    onArrayEnd: () => {
      currentParent = previousParents.pop();
    },
    onLiteralValue: onValue,
    onError: (error, offset2, length) => {
      errors.push({ error, offset: offset2, length });
    }
  };
  visit(text, visitor, options);
  return currentParent[0];
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
  const _scanner = createScanner(text, false);
  const _jsonPath = [];
  function toNoArgVisit(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toNoArgVisitWithPath(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  function toOneArgVisit(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toOneArgVisitWithPath(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
  const disallowComments = options && options.disallowComments;
  const allowTrailingComma = options && options.allowTrailingComma;
  function scanNext() {
    while (true) {
      const token = _scanner.scan();
      switch (_scanner.getTokenError()) {
        case 4:
          handleError2(
            14
            /* ParseErrorCode.InvalidUnicode */
          );
          break;
        case 5:
          handleError2(
            15
            /* ParseErrorCode.InvalidEscapeCharacter */
          );
          break;
        case 3:
          handleError2(
            13
            /* ParseErrorCode.UnexpectedEndOfNumber */
          );
          break;
        case 1:
          if (!disallowComments) {
            handleError2(
              11
              /* ParseErrorCode.UnexpectedEndOfComment */
            );
          }
          break;
        case 2:
          handleError2(
            12
            /* ParseErrorCode.UnexpectedEndOfString */
          );
          break;
        case 6:
          handleError2(
            16
            /* ParseErrorCode.InvalidCharacter */
          );
          break;
      }
      switch (token) {
        case 12:
        case 13:
          if (disallowComments) {
            handleError2(
              10
              /* ParseErrorCode.InvalidCommentToken */
            );
          } else {
            onComment();
          }
          break;
        case 16:
          handleError2(
            1
            /* ParseErrorCode.InvalidSymbol */
          );
          break;
        case 15:
        case 14:
          break;
        default:
          return token;
      }
    }
  }
  function handleError2(error, skipUntilAfter = [], skipUntil = []) {
    onError(error);
    if (skipUntilAfter.length + skipUntil.length > 0) {
      let token = _scanner.getToken();
      while (token !== 17) {
        if (skipUntilAfter.indexOf(token) !== -1) {
          scanNext();
          break;
        } else if (skipUntil.indexOf(token) !== -1) {
          break;
        }
        token = scanNext();
      }
    }
  }
  function parseString(isValue) {
    const value = _scanner.getTokenValue();
    if (isValue) {
      onLiteralValue(value);
    } else {
      onObjectProperty(value);
      _jsonPath.push(value);
    }
    scanNext();
    return true;
  }
  function parseLiteral() {
    switch (_scanner.getToken()) {
      case 11:
        const tokenValue = _scanner.getTokenValue();
        let value = Number(tokenValue);
        if (isNaN(value)) {
          handleError2(
            2
            /* ParseErrorCode.InvalidNumberFormat */
          );
          value = 0;
        }
        onLiteralValue(value);
        break;
      case 7:
        onLiteralValue(null);
        break;
      case 8:
        onLiteralValue(true);
        break;
      case 9:
        onLiteralValue(false);
        break;
      default:
        return false;
    }
    scanNext();
    return true;
  }
  function parseProperty() {
    if (_scanner.getToken() !== 10) {
      handleError2(3, [], [
        2,
        5
        /* SyntaxKind.CommaToken */
      ]);
      return false;
    }
    parseString(false);
    if (_scanner.getToken() === 6) {
      onSeparator(":");
      scanNext();
      if (!parseValue2()) {
        handleError2(4, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
    } else {
      handleError2(5, [], [
        2,
        5
        /* SyntaxKind.CommaToken */
      ]);
    }
    _jsonPath.pop();
    return true;
  }
  function parseObject() {
    onObjectBegin();
    scanNext();
    let needsComma = false;
    while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 2 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (!parseProperty()) {
        handleError2(4, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      needsComma = true;
    }
    onObjectEnd();
    if (_scanner.getToken() !== 2) {
      handleError2(7, [
        2
        /* SyntaxKind.CloseBraceToken */
      ], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseArray() {
    onArrayBegin();
    scanNext();
    let isFirstElement = true;
    let needsComma = false;
    while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 4 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (isFirstElement) {
        _jsonPath.push(0);
        isFirstElement = false;
      } else {
        _jsonPath[_jsonPath.length - 1]++;
      }
      if (!parseValue2()) {
        handleError2(4, [], [
          4,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      needsComma = true;
    }
    onArrayEnd();
    if (!isFirstElement) {
      _jsonPath.pop();
    }
    if (_scanner.getToken() !== 4) {
      handleError2(8, [
        4
        /* SyntaxKind.CloseBracketToken */
      ], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseValue2() {
    switch (_scanner.getToken()) {
      case 3:
        return parseArray();
      case 1:
        return parseObject();
      case 10:
        return parseString(true);
      default:
        return parseLiteral();
    }
  }
  scanNext();
  if (_scanner.getToken() === 17) {
    if (options.allowEmptyContent) {
      return true;
    }
    handleError2(4, [], []);
    return false;
  }
  if (!parseValue2()) {
    handleError2(4, [], []);
    return false;
  }
  if (_scanner.getToken() !== 17) {
    handleError2(9, [], []);
  }
  return true;
}
var ScanError;
(function(ScanError2) {
  ScanError2[ScanError2["None"] = 0] = "None";
  ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
  ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
  ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
  ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
  ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
  ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function(SyntaxKind2) {
  SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
  SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
  SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
  SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
  SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
  SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
  SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
  SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
  SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
  SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
  SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
  SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
  SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
  SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
  SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
  SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
  SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
const parse = parse$1;
var ParseErrorCode;
(function(ParseErrorCode2) {
  ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
  ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
  ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
  ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
  ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
  ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
  ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
  ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
  ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
  ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
  ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
"process" in globalThis && typeof process !== "undefined" && typeof process.release !== "undefined" && process.release.name === "node";
let CDN_ROOT = "";
const WASM_PATH = "dist/";
function setCDN(root) {
  CDN_ROOT = root.endsWith("/") ? root : root + "/";
}
let _onigurumaPromise = null;
async function getOniguruma(wasmPath) {
  if (!_onigurumaPromise) {
    let loader;
    {
      {
        loader = mainExports$1.loadWASM({
          data: await (globalThis.__shiki_fetch__ || globalThis.fetch)(_resolvePath(join(...dirpathparts(wasmPath), "onig.wasm")))
        });
      }
    }
    _onigurumaPromise = loader.then(() => {
      return {
        createOnigScanner(patterns) {
          return mainExports$1.createOnigScanner(patterns);
        },
        createOnigString(s3) {
          return mainExports$1.createOnigString(s3);
        }
      };
    });
  }
  return _onigurumaPromise;
}
function _resolvePath(filepath) {
  {
    return `${CDN_ROOT}${filepath}`;
  }
}
async function _fetchAssets(filepath) {
  const path = _resolvePath(filepath);
  {
    return await (globalThis.__shiki_fetch__ || globalThis.fetch)(path).then((r2) => r2.text());
  }
}
async function _fetchJSONAssets(filepath) {
  const errors = [];
  const rawTheme = parse(await _fetchAssets(filepath), errors, {
    allowTrailingComma: true
  });
  if (errors.length) {
    throw errors[0];
  }
  return rawTheme;
}
async function fetchTheme(themePath) {
  let theme = await _fetchJSONAssets(themePath);
  const shikiTheme = toShikiTheme(theme);
  if (shikiTheme.include) {
    const includedTheme = await fetchTheme(join(...dirpathparts(themePath), shikiTheme.include));
    if (includedTheme.settings) {
      shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings);
    }
    if (includedTheme.bg && !shikiTheme.bg) {
      shikiTheme.bg = includedTheme.bg;
    }
    if (includedTheme.colors) {
      shikiTheme.colors = { ...includedTheme.colors, ...shikiTheme.colors };
    }
    delete shikiTheme.include;
  }
  return shikiTheme;
}
async function fetchGrammar(filepath) {
  return await _fetchJSONAssets(filepath);
}
function repairTheme(theme) {
  if (!theme.settings)
    theme.settings = [];
  if (theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope) {
    return;
  }
  theme.settings.unshift({
    settings: {
      foreground: theme.fg,
      background: theme.bg
    }
  });
}
function toShikiTheme(rawTheme) {
  const type = rawTheme.type || "dark";
  const shikiTheme = {
    name: rawTheme.name,
    type,
    ...rawTheme,
    ...getThemeDefaultColors(rawTheme)
  };
  if (rawTheme.include) {
    shikiTheme.include = rawTheme.include;
  }
  if (rawTheme.tokenColors) {
    shikiTheme.settings = rawTheme.tokenColors;
    delete shikiTheme.tokenColors;
  }
  repairTheme(shikiTheme);
  return shikiTheme;
}
const VSCODE_FALLBACK_EDITOR_FG = { light: "#333333", dark: "#bbbbbb" };
const VSCODE_FALLBACK_EDITOR_BG = { light: "#fffffe", dark: "#1e1e1e" };
function getThemeDefaultColors(theme) {
  var _a2, _b, _c2, _d2;
  let fg2, bg2;
  let settings = theme.settings ? theme.settings : theme.tokenColors;
  const globalSetting = settings ? settings.find((s3) => {
    return !s3.name && !s3.scope;
  }) : void 0;
  if ((_a2 = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _a2.foreground) {
    fg2 = globalSetting.settings.foreground;
  }
  if ((_b = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _b.background) {
    bg2 = globalSetting.settings.background;
  }
  if (!fg2 && ((_c2 = theme == null ? void 0 : theme.colors) == null ? void 0 : _c2["editor.foreground"])) {
    fg2 = theme.colors["editor.foreground"];
  }
  if (!bg2 && ((_d2 = theme == null ? void 0 : theme.colors) == null ? void 0 : _d2["editor.background"])) {
    bg2 = theme.colors["editor.background"];
  }
  if (!fg2) {
    fg2 = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;
  }
  if (!bg2) {
    bg2 = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;
  }
  return {
    fg: fg2,
    bg: bg2
  };
}
class Resolver {
  constructor(onigLibPromise, onigLibName) {
    this.languagesPath = "languages/";
    this.languageMap = {};
    this.scopeToLangMap = {};
    this._onigLibPromise = onigLibPromise;
    this._onigLibName = onigLibName;
  }
  get onigLib() {
    return this._onigLibPromise;
  }
  getOnigLibName() {
    return this._onigLibName;
  }
  getLangRegistration(langIdOrAlias) {
    return this.languageMap[langIdOrAlias];
  }
  async loadGrammar(scopeName) {
    const lang = this.scopeToLangMap[scopeName];
    if (!lang) {
      return null;
    }
    if (lang.grammar) {
      return lang.grammar;
    }
    const g2 = await fetchGrammar(
      languages.includes(lang) ? `${this.languagesPath}${lang.path}` : lang.path
    );
    lang.grammar = g2;
    return g2;
  }
  addLanguage(l2) {
    this.languageMap[l2.id] = l2;
    if (l2.aliases) {
      l2.aliases.forEach((a2) => {
        this.languageMap[a2] = l2;
      });
    }
    this.scopeToLangMap[l2.scopeName] = l2;
  }
}
function tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {
  let lines = fileContents.split(/\r\n|\r|\n/);
  let ruleStack = mainExports.INITIAL;
  let actual = [];
  let final = [];
  for (let i2 = 0, len = lines.length; i2 < len; i2++) {
    let line = lines[i2];
    if (line === "") {
      actual = [];
      final.push([]);
      continue;
    }
    let resultWithScopes;
    let tokensWithScopes;
    let tokensWithScopesIndex;
    if (options.includeExplanation) {
      resultWithScopes = grammar.tokenizeLine(line, ruleStack);
      tokensWithScopes = resultWithScopes.tokens;
      tokensWithScopesIndex = 0;
    }
    let result = grammar.tokenizeLine2(line, ruleStack);
    let tokensLength = result.tokens.length / 2;
    for (let j2 = 0; j2 < tokensLength; j2++) {
      let startIndex = result.tokens[2 * j2];
      let nextStartIndex = j2 + 1 < tokensLength ? result.tokens[2 * j2 + 2] : line.length;
      if (startIndex === nextStartIndex) {
        continue;
      }
      let metadata = result.tokens[2 * j2 + 1];
      let foreground = StackElementMetadata.getForeground(metadata);
      let foregroundColor = colorMap[foreground];
      let fontStyle = StackElementMetadata.getFontStyle(metadata);
      let explanation = [];
      if (options.includeExplanation) {
        let offset2 = 0;
        while (startIndex + offset2 < nextStartIndex) {
          let tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];
          let tokenWithScopesText = line.substring(
            tokenWithScopes.startIndex,
            tokenWithScopes.endIndex
          );
          offset2 += tokenWithScopesText.length;
          explanation.push({
            content: tokenWithScopesText,
            scopes: explainThemeScopes(theme, tokenWithScopes.scopes)
          });
          tokensWithScopesIndex++;
        }
      }
      actual.push({
        content: line.substring(startIndex, nextStartIndex),
        color: foregroundColor,
        fontStyle,
        explanation
      });
    }
    final.push(actual);
    actual = [];
    ruleStack = result.ruleStack;
  }
  return final;
}
function explainThemeScopes(theme, scopes) {
  let result = [];
  for (let i2 = 0, len = scopes.length; i2 < len; i2++) {
    let parentScopes = scopes.slice(0, i2);
    let scope = scopes[i2];
    result[i2] = {
      scopeName: scope,
      themeMatches: explainThemeScope(theme, scope, parentScopes)
    };
  }
  return result;
}
function matchesOne(selector, scope) {
  let selectorPrefix = selector + ".";
  if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix) {
    return true;
  }
  return false;
}
function matches(selector, selectorParentScopes, scope, parentScopes) {
  if (!matchesOne(selector, scope)) {
    return false;
  }
  let selectorParentIndex = selectorParentScopes.length - 1;
  let parentIndex = parentScopes.length - 1;
  while (selectorParentIndex >= 0 && parentIndex >= 0) {
    if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {
      selectorParentIndex--;
    }
    parentIndex--;
  }
  if (selectorParentIndex === -1) {
    return true;
  }
  return false;
}
function explainThemeScope(theme, scope, parentScopes) {
  let result = [], resultLen = 0;
  for (let i2 = 0, len = theme.settings.length; i2 < len; i2++) {
    let setting = theme.settings[i2];
    let selectors;
    if (typeof setting.scope === "string") {
      selectors = setting.scope.split(/,/).map((scope2) => scope2.trim());
    } else if (Array.isArray(setting.scope)) {
      selectors = setting.scope;
    } else {
      continue;
    }
    for (let j2 = 0, lenJ = selectors.length; j2 < lenJ; j2++) {
      let rawSelector = selectors[j2];
      let rawSelectorPieces = rawSelector.split(/ /);
      let selector = rawSelectorPieces[rawSelectorPieces.length - 1];
      let selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);
      if (matches(selector, selectorParentScopes, scope, parentScopes)) {
        result[resultLen++] = setting;
        j2 = lenJ;
      }
    }
  }
  return result;
}
const defaultElements = {
  pre({ className, style: style2, children }) {
    return `<pre class="${className}" style="${style2}">${children}</pre>`;
  },
  code({ children }) {
    return `<code>${children}</code>`;
  },
  line({ className, children }) {
    return `<span class="${className}">${children}</span>`;
  },
  token({ style: style2, children }) {
    return `<span style="${style2}">${children}</span>`;
  }
};
function renderToHtml(lines, options = {}) {
  const bg2 = options.bg || "#fff";
  const optionsByLineNumber = groupBy(options.lineOptions ?? [], (option) => option.line);
  const userElements = options.elements || {};
  function h2(type = "", props = {}, children) {
    const element = userElements[type] || defaultElements[type];
    if (element) {
      children = children.filter(Boolean);
      return element({
        ...props,
        children: type === "code" ? children.join("\n") : children.join("")
      });
    }
    return "";
  }
  return h2(
    "pre",
    { className: "shiki " + (options.themeName || ""), style: `background-color: ${bg2}` },
    [
      options.langId ? `<div class="language-id">${options.langId}</div>` : "",
      h2(
        "code",
        {},
        lines.map((line, index) => {
          const lineNumber = index + 1;
          const lineOptions = optionsByLineNumber.get(lineNumber) ?? [];
          const lineClasses = getLineClasses(lineOptions).join(" ");
          return h2(
            "line",
            {
              className: lineClasses,
              lines,
              line,
              index
            },
            line.map((token, index2) => {
              const cssDeclarations = [`color: ${token.color || options.fg}`];
              if (token.fontStyle & FontStyle.Italic) {
                cssDeclarations.push("font-style: italic");
              }
              if (token.fontStyle & FontStyle.Bold) {
                cssDeclarations.push("font-weight: bold");
              }
              if (token.fontStyle & FontStyle.Underline) {
                cssDeclarations.push("text-decoration: underline");
              }
              return h2(
                "token",
                {
                  style: cssDeclarations.join("; "),
                  tokens: line,
                  token,
                  index: index2
                },
                [escapeHtml(token.content)]
              );
            })
          );
        })
      )
    ]
  );
}
const htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function escapeHtml(html) {
  return html.replace(/[&<>"']/g, (chr) => htmlEscapes[chr]);
}
function getLineClasses(lineOptions) {
  const lineClasses = /* @__PURE__ */ new Set(["line"]);
  for (const lineOption of lineOptions) {
    for (const lineClass of lineOption.classes ?? []) {
      lineClasses.add(lineClass);
    }
  }
  return Array.from(lineClasses);
}
class Registry extends mainExports.Registry {
  constructor(_resolver2) {
    super(_resolver2);
    this._resolver = _resolver2;
    this.themesPath = "themes/";
    this._resolvedThemes = {};
    this._resolvedGrammars = {};
    this._langGraph = /* @__PURE__ */ new Map();
    this._langMap = languages.reduce((acc, lang) => {
      acc[lang.id] = lang;
      return acc;
    }, {});
  }
  getTheme(theme) {
    if (typeof theme === "string") {
      return this._resolvedThemes[theme];
    } else {
      return theme;
    }
  }
  async loadTheme(theme) {
    if (typeof theme === "string") {
      if (!this._resolvedThemes[theme]) {
        this._resolvedThemes[theme] = await fetchTheme(`${this.themesPath}${theme}.json`);
      }
      return this._resolvedThemes[theme];
    } else {
      theme = toShikiTheme(theme);
      if (theme.name) {
        this._resolvedThemes[theme.name] = theme;
      }
      return theme;
    }
  }
  async loadThemes(themes) {
    return await Promise.all(themes.map((theme) => this.loadTheme(theme)));
  }
  getLoadedThemes() {
    return Object.keys(this._resolvedThemes);
  }
  getGrammar(name) {
    return this._resolvedGrammars[name];
  }
  async loadLanguage(lang) {
    var _a2;
    const embeddedLanguages = (_a2 = lang.embeddedLangs) == null ? void 0 : _a2.reduce(async (acc, l2, idx) => {
      if (!this.getLoadedLanguages().includes(l2) && this._resolver.getLangRegistration(l2)) {
        await this._resolver.loadGrammar(this._resolver.getLangRegistration(l2).scopeName);
        acc[this._resolver.getLangRegistration(l2).scopeName] = idx + 2;
        return acc;
      }
    }, {});
    const grammarConfig = {
      embeddedLanguages,
      balancedBracketSelectors: lang.balancedBracketSelectors || ["*"],
      unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []
    };
    const g2 = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);
    this._resolvedGrammars[lang.id] = g2;
    if (lang.aliases) {
      lang.aliases.forEach((la2) => {
        this._resolvedGrammars[la2] = g2;
      });
    }
  }
  async loadLanguages(langs) {
    for (const lang of langs) {
      this.resolveEmbeddedLanguages(lang);
    }
    const langsGraphArray = Array.from(this._langGraph.values());
    for (const lang of langsGraphArray) {
      this._resolver.addLanguage(lang);
    }
    for (const lang of langsGraphArray) {
      await this.loadLanguage(lang);
    }
  }
  getLoadedLanguages() {
    return Object.keys(this._resolvedGrammars);
  }
  resolveEmbeddedLanguages(lang) {
    if (!this._langGraph.has(lang.id)) {
      this._langGraph.set(lang.id, lang);
    }
    if (lang.embeddedLangs) {
      for (const embeddedLang of lang.embeddedLangs) {
        this._langGraph.set(embeddedLang, this._langMap[embeddedLang]);
      }
    }
  }
}
function resolveLang(lang) {
  return typeof lang === "string" ? languages.find((l2) => {
    var _a2;
    return l2.id === lang || ((_a2 = l2.aliases) == null ? void 0 : _a2.includes(lang));
  }) : lang;
}
function resolveOptions(options) {
  var _a2;
  let _languages = languages;
  let _themes = options.themes || [];
  let _wasmPath = ((_a2 = options.paths) == null ? void 0 : _a2.wasm) ? options.paths.wasm.endsWith("/") ? options.paths.wasm : options.paths.wasm + "/" : WASM_PATH;
  if (options.langs) {
    _languages = options.langs.map(resolveLang);
  }
  if (options.theme) {
    _themes.unshift(options.theme);
  }
  if (!_themes.length) {
    _themes = ["nord"];
  }
  return { _languages, _themes, _wasmPath };
}
async function getHighlighter(options) {
  var _a2, _b;
  const { _languages, _themes, _wasmPath } = resolveOptions(options);
  const _resolver2 = new Resolver(getOniguruma(_wasmPath), "vscode-oniguruma");
  const _registry = new Registry(_resolver2);
  if ((_a2 = options.paths) == null ? void 0 : _a2.themes) {
    _registry.themesPath = options.paths.themes.endsWith("/") ? options.paths.themes : options.paths.themes + "/";
  }
  if ((_b = options.paths) == null ? void 0 : _b.languages) {
    _resolver2.languagesPath = options.paths.languages.endsWith("/") ? options.paths.languages : options.paths.languages + "/";
  }
  const themes = await _registry.loadThemes(_themes);
  const _defaultTheme = themes[0];
  let _currentTheme;
  await _registry.loadLanguages(_languages);
  let COLOR_REPLACEMENTS = {
    "#000001": "var(--shiki-color-text)",
    "#000002": "var(--shiki-color-background)",
    "#000004": "var(--shiki-token-constant)",
    "#000005": "var(--shiki-token-string)",
    "#000006": "var(--shiki-token-comment)",
    "#000007": "var(--shiki-token-keyword)",
    "#000008": "var(--shiki-token-parameter)",
    "#000009": "var(--shiki-token-function)",
    "#000010": "var(--shiki-token-string-expression)",
    "#000011": "var(--shiki-token-punctuation)",
    "#000012": "var(--shiki-token-link)"
  };
  function setColorReplacements(map2) {
    COLOR_REPLACEMENTS = map2;
  }
  function fixCssVariablesTheme(theme, colorMap) {
    theme.bg = COLOR_REPLACEMENTS[theme.bg] || theme.bg;
    theme.fg = COLOR_REPLACEMENTS[theme.fg] || theme.fg;
    colorMap.forEach((val, i2) => {
      colorMap[i2] = COLOR_REPLACEMENTS[val] || val;
    });
  }
  function getTheme(theme) {
    const _theme = theme ? _registry.getTheme(theme) : _defaultTheme;
    if (!_theme) {
      throw Error(`No theme registration for ${theme}`);
    }
    if (!_currentTheme || _currentTheme.name !== _theme.name) {
      _registry.setTheme(_theme);
      _currentTheme = _theme;
    }
    const _colorMap = _registry.getColorMap();
    if (_theme.type === "css") {
      fixCssVariablesTheme(_theme, _colorMap);
    }
    return { _theme, _colorMap };
  }
  function getGrammar(lang) {
    const _grammar = _registry.getGrammar(lang);
    if (!_grammar) {
      throw Error(`No language registration for ${lang}`);
    }
    return { _grammar };
  }
  function codeToThemedTokens(code2, lang = "text", theme, options2 = { includeExplanation: true }) {
    if (isPlaintext(lang)) {
      const lines = code2.split(/\r\n|\r|\n/);
      return [...lines.map((line) => [{ content: line }])];
    }
    const { _grammar } = getGrammar(lang);
    const { _theme, _colorMap } = getTheme(theme);
    return tokenizeWithTheme(_theme, _colorMap, code2, _grammar, options2);
  }
  function codeToHtml(code2, arg1 = "text", arg2) {
    let options2;
    if (typeof arg1 === "object") {
      options2 = arg1;
    } else {
      options2 = {
        lang: arg1,
        theme: arg2
      };
    }
    const tokens = codeToThemedTokens(code2, options2.lang, options2.theme, {
      includeExplanation: false
    });
    const { _theme } = getTheme(options2.theme);
    return renderToHtml(tokens, {
      fg: _theme.fg,
      bg: _theme.bg,
      lineOptions: options2 == null ? void 0 : options2.lineOptions,
      themeName: _theme.name
    });
  }
  async function loadTheme(theme) {
    await _registry.loadTheme(theme);
  }
  async function loadLanguage(lang) {
    const _lang = resolveLang(lang);
    _resolver2.addLanguage(_lang);
    await _registry.loadLanguage(_lang);
  }
  function getLoadedThemes() {
    return _registry.getLoadedThemes();
  }
  function getLoadedLanguages() {
    return _registry.getLoadedLanguages();
  }
  function getBackgroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.bg;
  }
  function getForegroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.fg;
  }
  return {
    codeToThemedTokens,
    codeToHtml,
    getTheme: (theme) => {
      return getTheme(theme)._theme;
    },
    loadTheme,
    loadLanguage,
    getBackgroundColor,
    getForegroundColor,
    getLoadedThemes,
    getLoadedLanguages,
    setColorReplacements
  };
}
function isPlaintext(lang) {
  return !lang || ["plaintext", "txt", "text"].includes(lang);
}
const version = "0.2.0";
setCDN(`https://cdn.jsdelivr.net/npm/shiki-es@${version}/dist/assets/`);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var flexsearch_bundle = { exports: {} };
flexsearch_bundle.exports;
(function(module) {
  (function _f(self) {
    try {
      if (module)
        self = module;
    } catch (e2) {
    }
    self._factory = _f;
    var t;
    function u(a2) {
      return "undefined" !== typeof a2 ? a2 : true;
    }
    function aa(a2) {
      const b3 = Array(a2);
      for (let c2 = 0; c2 < a2; c2++)
        b3[c2] = v();
      return b3;
    }
    function v() {
      return /* @__PURE__ */ Object.create(null);
    }
    function ba(a2, b3) {
      return b3.length - a2.length;
    }
    function x(a2) {
      return "string" === typeof a2;
    }
    function C(a2) {
      return "object" === typeof a2;
    }
    function D(a2) {
      return "function" === typeof a2;
    }
    function ca(a2, b3) {
      var c2 = da;
      if (a2 && (b3 && (a2 = E(a2, b3)), this.H && (a2 = E(a2, this.H)), this.J && 1 < a2.length && (a2 = E(a2, this.J)), c2 || "" === c2)) {
        a2 = a2.split(c2);
        if (this.filter) {
          b3 = this.filter;
          c2 = a2.length;
          const d2 = [];
          for (let e2 = 0, f2 = 0; e2 < c2; e2++) {
            const g2 = a2[e2];
            g2 && !b3[g2] && (d2[f2++] = g2);
          }
          a2 = d2;
        }
        return a2;
      }
      return a2;
    }
    const da = /[\p{Z}\p{S}\p{P}\p{C}]+/u, ea = /[\u0300-\u036f]/g;
    function fa(a2, b3) {
      const c2 = Object.keys(a2), d2 = c2.length, e2 = [];
      let f2 = "", g2 = 0;
      for (let h2 = 0, k2, m2; h2 < d2; h2++)
        k2 = c2[h2], (m2 = a2[k2]) ? (e2[g2++] = F(b3 ? "(?!\\b)" + k2 + "(\\b|_)" : k2), e2[g2++] = m2) : f2 += (f2 ? "|" : "") + k2;
      f2 && (e2[g2++] = F(b3 ? "(?!\\b)(" + f2 + ")(\\b|_)" : "(" + f2 + ")"), e2[g2] = "");
      return e2;
    }
    function E(a2, b3) {
      for (let c2 = 0, d2 = b3.length; c2 < d2 && (a2 = a2.replace(b3[c2], b3[c2 + 1]), a2); c2 += 2)
        ;
      return a2;
    }
    function F(a2) {
      return new RegExp(a2, "g");
    }
    function ha(a2) {
      let b3 = "", c2 = "";
      for (let d2 = 0, e2 = a2.length, f2; d2 < e2; d2++)
        (f2 = a2[d2]) !== c2 && (b3 += c2 = f2);
      return b3;
    }
    var ja = { encode: ia, F: false, G: "" };
    function ia(a2) {
      return ca.call(this, ("" + a2).toLowerCase(), false);
    }
    const ka = {}, G = {};
    function la(a2) {
      I(a2, "add");
      I(a2, "append");
      I(a2, "search");
      I(a2, "update");
      I(a2, "remove");
    }
    function I(a2, b3) {
      a2[b3 + "Async"] = function() {
        const c2 = this, d2 = arguments;
        var e2 = d2[d2.length - 1];
        let f2;
        D(e2) && (f2 = e2, delete d2[d2.length - 1]);
        e2 = new Promise(function(g2) {
          setTimeout(function() {
            c2.async = true;
            const h2 = c2[b3].apply(c2, d2);
            c2.async = false;
            g2(h2);
          });
        });
        return f2 ? (e2.then(f2), this) : e2;
      };
    }
    function ma(a2, b3, c2, d2) {
      const e2 = a2.length;
      let f2 = [], g2, h2, k2 = 0;
      d2 && (d2 = []);
      for (let m2 = e2 - 1; 0 <= m2; m2--) {
        const n2 = a2[m2], w2 = n2.length, q = v();
        let r2 = !g2;
        for (let l2 = 0; l2 < w2; l2++) {
          const p2 = n2[l2], z2 = p2.length;
          if (z2)
            for (let B2 = 0, A3, y2; B2 < z2; B2++)
              if (y2 = p2[B2], g2) {
                if (g2[y2]) {
                  if (!m2) {
                    if (c2)
                      c2--;
                    else if (f2[k2++] = y2, k2 === b3)
                      return f2;
                  }
                  if (m2 || d2)
                    q[y2] = 1;
                  r2 = true;
                }
                if (d2 && (h2[y2] = (A3 = h2[y2]) ? ++A3 : A3 = 1, A3 < e2)) {
                  const H2 = d2[A3 - 2] || (d2[A3 - 2] = []);
                  H2[H2.length] = y2;
                }
              } else
                q[y2] = 1;
        }
        if (d2)
          g2 || (h2 = q);
        else if (!r2)
          return [];
        g2 = q;
      }
      if (d2)
        for (let m2 = d2.length - 1, n2, w2; 0 <= m2; m2--) {
          n2 = d2[m2];
          w2 = n2.length;
          for (let q = 0, r2; q < w2; q++)
            if (r2 = n2[q], !g2[r2]) {
              if (c2)
                c2--;
              else if (f2[k2++] = r2, k2 === b3)
                return f2;
              g2[r2] = 1;
            }
        }
      return f2;
    }
    function na(a2, b3) {
      const c2 = v(), d2 = v(), e2 = [];
      for (let f2 = 0; f2 < a2.length; f2++)
        c2[a2[f2]] = 1;
      for (let f2 = 0, g2; f2 < b3.length; f2++) {
        g2 = b3[f2];
        for (let h2 = 0, k2; h2 < g2.length; h2++)
          k2 = g2[h2], c2[k2] && !d2[k2] && (d2[k2] = 1, e2[e2.length] = k2);
      }
      return e2;
    }
    function J(a2) {
      this.l = true !== a2 && a2;
      this.cache = v();
      this.h = [];
    }
    function oa(a2, b3, c2) {
      C(a2) && (a2 = a2.query);
      let d2 = this.cache.get(a2);
      d2 || (d2 = this.search(a2, b3, c2), this.cache.set(a2, d2));
      return d2;
    }
    J.prototype.set = function(a2, b3) {
      if (!this.cache[a2]) {
        var c2 = this.h.length;
        c2 === this.l ? delete this.cache[this.h[c2 - 1]] : c2++;
        for (--c2; 0 < c2; c2--)
          this.h[c2] = this.h[c2 - 1];
        this.h[0] = a2;
      }
      this.cache[a2] = b3;
    };
    J.prototype.get = function(a2) {
      const b3 = this.cache[a2];
      if (this.l && b3 && (a2 = this.h.indexOf(a2))) {
        const c2 = this.h[a2 - 1];
        this.h[a2 - 1] = this.h[a2];
        this.h[a2] = c2;
      }
      return b3;
    };
    const qa = { memory: { charset: "latin:extra", D: 3, B: 4, m: false }, performance: { D: 3, B: 3, s: false, context: { depth: 2, D: 1 } }, match: { charset: "latin:extra", G: "reverse" }, score: { charset: "latin:advanced", D: 20, B: 3, context: { depth: 3, D: 9 } }, "default": {} };
    function ra(a2, b3, c2, d2, e2, f2) {
      setTimeout(function() {
        const g2 = a2(c2, JSON.stringify(f2));
        g2 && g2.then ? g2.then(function() {
          b3.export(a2, b3, c2, d2, e2 + 1);
        }) : b3.export(a2, b3, c2, d2, e2 + 1);
      });
    }
    function K(a2, b3) {
      if (!(this instanceof K))
        return new K(a2);
      var c2;
      if (a2) {
        x(a2) ? a2 = qa[a2] : (c2 = a2.preset) && (a2 = Object.assign({}, c2[c2], a2));
        c2 = a2.charset;
        var d2 = a2.lang;
        x(c2) && (-1 === c2.indexOf(":") && (c2 += ":default"), c2 = G[c2]);
        x(d2) && (d2 = ka[d2]);
      } else
        a2 = {};
      let e2, f2, g2 = a2.context || {};
      this.encode = a2.encode || c2 && c2.encode || ia;
      this.register = b3 || v();
      this.D = e2 = a2.resolution || 9;
      this.G = b3 = c2 && c2.G || a2.tokenize || "strict";
      this.depth = "strict" === b3 && g2.depth;
      this.l = u(g2.bidirectional);
      this.s = f2 = u(a2.optimize);
      this.m = u(a2.fastupdate);
      this.B = a2.minlength || 1;
      this.C = a2.boost;
      this.map = f2 ? aa(e2) : v();
      this.A = e2 = g2.resolution || 1;
      this.h = f2 ? aa(e2) : v();
      this.F = c2 && c2.F || a2.rtl;
      this.H = (b3 = a2.matcher || d2 && d2.H) && fa(b3, false);
      this.J = (b3 = a2.stemmer || d2 && d2.J) && fa(b3, true);
      if (c2 = b3 = a2.filter || d2 && d2.filter) {
        c2 = b3;
        d2 = v();
        for (let h2 = 0, k2 = c2.length; h2 < k2; h2++)
          d2[c2[h2]] = 1;
        c2 = d2;
      }
      this.filter = c2;
      this.cache = (b3 = a2.cache) && new J(b3);
    }
    t = K.prototype;
    t.append = function(a2, b3) {
      return this.add(a2, b3, true);
    };
    t.add = function(a2, b3, c2, d2) {
      if (b3 && (a2 || 0 === a2)) {
        if (!d2 && !c2 && this.register[a2])
          return this.update(a2, b3);
        b3 = this.encode(b3);
        if (d2 = b3.length) {
          const m2 = v(), n2 = v(), w2 = this.depth, q = this.D;
          for (let r2 = 0; r2 < d2; r2++) {
            let l2 = b3[this.F ? d2 - 1 - r2 : r2];
            var e2 = l2.length;
            if (l2 && e2 >= this.B && (w2 || !n2[l2])) {
              var f2 = L(q, d2, r2), g2 = "";
              switch (this.G) {
                case "full":
                  if (3 < e2) {
                    for (f2 = 0; f2 < e2; f2++)
                      for (var h2 = e2; h2 > f2; h2--)
                        if (h2 - f2 >= this.B) {
                          var k2 = L(q, d2, r2, e2, f2);
                          g2 = l2.substring(f2, h2);
                          M(this, n2, g2, k2, a2, c2);
                        }
                    break;
                  }
                case "reverse":
                  if (2 < e2) {
                    for (h2 = e2 - 1; 0 < h2; h2--)
                      g2 = l2[h2] + g2, g2.length >= this.B && M(
                        this,
                        n2,
                        g2,
                        L(q, d2, r2, e2, h2),
                        a2,
                        c2
                      );
                    g2 = "";
                  }
                case "forward":
                  if (1 < e2) {
                    for (h2 = 0; h2 < e2; h2++)
                      g2 += l2[h2], g2.length >= this.B && M(this, n2, g2, f2, a2, c2);
                    break;
                  }
                default:
                  if (this.C && (f2 = Math.min(f2 / this.C(b3, l2, r2) | 0, q - 1)), M(this, n2, l2, f2, a2, c2), w2 && 1 < d2 && r2 < d2 - 1) {
                    for (e2 = v(), g2 = this.A, f2 = l2, h2 = Math.min(w2 + 1, d2 - r2), e2[f2] = 1, k2 = 1; k2 < h2; k2++)
                      if ((l2 = b3[this.F ? d2 - 1 - r2 - k2 : r2 + k2]) && l2.length >= this.B && !e2[l2]) {
                        e2[l2] = 1;
                        const p2 = this.l && l2 > f2;
                        M(this, m2, p2 ? f2 : l2, L(g2 + (d2 / 2 > g2 ? 0 : 1), d2, r2, h2 - 1, k2 - 1), a2, c2, p2 ? l2 : f2);
                      }
                  }
              }
            }
          }
          this.m || (this.register[a2] = 1);
        }
      }
      return this;
    };
    function L(a2, b3, c2, d2, e2) {
      return c2 && 1 < a2 ? b3 + (d2 || 0) <= a2 ? c2 + (e2 || 0) : (a2 - 1) / (b3 + (d2 || 0)) * (c2 + (e2 || 0)) + 1 | 0 : 0;
    }
    function M(a2, b3, c2, d2, e2, f2, g2) {
      let h2 = g2 ? a2.h : a2.map;
      if (!b3[c2] || g2 && !b3[c2][g2])
        a2.s && (h2 = h2[d2]), g2 ? (b3 = b3[c2] || (b3[c2] = v()), b3[g2] = 1, h2 = h2[g2] || (h2[g2] = v())) : b3[c2] = 1, h2 = h2[c2] || (h2[c2] = []), a2.s || (h2 = h2[d2] || (h2[d2] = [])), f2 && -1 !== h2.indexOf(e2) || (h2[h2.length] = e2, a2.m && (a2 = a2.register[e2] || (a2.register[e2] = []), a2[a2.length] = h2));
    }
    t.search = function(a2, b3, c2) {
      c2 || (!b3 && C(a2) ? (c2 = a2, a2 = c2.query) : C(b3) && (c2 = b3));
      let d2 = [], e2;
      let f2, g2 = 0;
      if (c2) {
        b3 = c2.limit;
        g2 = c2.offset || 0;
        var h2 = c2.context;
        f2 = c2.suggest;
      }
      if (a2 && (a2 = this.encode(a2), e2 = a2.length, 1 < e2)) {
        c2 = v();
        var k2 = [];
        for (let n2 = 0, w2 = 0, q; n2 < e2; n2++)
          if ((q = a2[n2]) && q.length >= this.B && !c2[q])
            if (this.s || f2 || this.map[q])
              k2[w2++] = q, c2[q] = 1;
            else
              return d2;
        a2 = k2;
        e2 = a2.length;
      }
      if (!e2)
        return d2;
      b3 || (b3 = 100);
      h2 = this.depth && 1 < e2 && false !== h2;
      c2 = 0;
      let m2;
      h2 ? (m2 = a2[0], c2 = 1) : 1 < e2 && a2.sort(ba);
      for (let n2, w2; c2 < e2; c2++) {
        w2 = a2[c2];
        h2 ? (n2 = sa(this, d2, f2, b3, g2, 2 === e2, w2, m2), f2 && false === n2 && d2.length || (m2 = w2)) : n2 = sa(this, d2, f2, b3, g2, 1 === e2, w2);
        if (n2)
          return n2;
        if (f2 && c2 === e2 - 1) {
          k2 = d2.length;
          if (!k2) {
            if (h2) {
              h2 = 0;
              c2 = -1;
              continue;
            }
            return d2;
          }
          if (1 === k2)
            return ta(d2[0], b3, g2);
        }
      }
      return ma(d2, b3, g2, f2);
    };
    function sa(a2, b3, c2, d2, e2, f2, g2, h2) {
      let k2 = [], m2 = h2 ? a2.h : a2.map;
      a2.s || (m2 = ua(m2, g2, h2, a2.l));
      if (m2) {
        let n2 = 0;
        const w2 = Math.min(m2.length, h2 ? a2.A : a2.D);
        for (let q = 0, r2 = 0, l2, p2; q < w2; q++)
          if (l2 = m2[q]) {
            if (a2.s && (l2 = ua(l2, g2, h2, a2.l)), e2 && l2 && f2 && (p2 = l2.length, p2 <= e2 ? (e2 -= p2, l2 = null) : (l2 = l2.slice(e2), e2 = 0)), l2 && (k2[n2++] = l2, f2 && (r2 += l2.length, r2 >= d2)))
              break;
          }
        if (n2) {
          if (f2)
            return ta(k2, d2, 0);
          b3[b3.length] = k2;
          return;
        }
      }
      return !c2 && k2;
    }
    function ta(a2, b3, c2) {
      a2 = 1 === a2.length ? a2[0] : [].concat.apply([], a2);
      return c2 || a2.length > b3 ? a2.slice(c2, c2 + b3) : a2;
    }
    function ua(a2, b3, c2, d2) {
      c2 ? (d2 = d2 && b3 > c2, a2 = (a2 = a2[d2 ? b3 : c2]) && a2[d2 ? c2 : b3]) : a2 = a2[b3];
      return a2;
    }
    t.contain = function(a2) {
      return !!this.register[a2];
    };
    t.update = function(a2, b3) {
      return this.remove(a2).add(a2, b3);
    };
    t.remove = function(a2, b3) {
      const c2 = this.register[a2];
      if (c2) {
        if (this.m)
          for (let d2 = 0, e2; d2 < c2.length; d2++)
            e2 = c2[d2], e2.splice(e2.indexOf(a2), 1);
        else
          N(this.map, a2, this.D, this.s), this.depth && N(this.h, a2, this.A, this.s);
        b3 || delete this.register[a2];
        if (this.cache) {
          b3 = this.cache;
          for (let d2 = 0, e2, f2; d2 < b3.h.length; d2++)
            f2 = b3.h[d2], e2 = b3.cache[f2], -1 !== e2.indexOf(a2) && (b3.h.splice(d2--, 1), delete b3.cache[f2]);
        }
      }
      return this;
    };
    function N(a2, b3, c2, d2, e2) {
      let f2 = 0;
      if (a2.constructor === Array)
        if (e2)
          b3 = a2.indexOf(b3), -1 !== b3 ? 1 < a2.length && (a2.splice(b3, 1), f2++) : f2++;
        else {
          e2 = Math.min(a2.length, c2);
          for (let g2 = 0, h2; g2 < e2; g2++)
            if (h2 = a2[g2])
              f2 = N(h2, b3, c2, d2, e2), d2 || f2 || delete a2[g2];
        }
      else
        for (let g2 in a2)
          (f2 = N(a2[g2], b3, c2, d2, e2)) || delete a2[g2];
      return f2;
    }
    t.searchCache = oa;
    t.export = function(a2, b3, c2, d2, e2) {
      let f2, g2;
      switch (e2 || (e2 = 0)) {
        case 0:
          f2 = "reg";
          if (this.m) {
            g2 = v();
            for (let h2 in this.register)
              g2[h2] = 1;
          } else
            g2 = this.register;
          break;
        case 1:
          f2 = "cfg";
          g2 = { doc: 0, opt: this.s ? 1 : 0 };
          break;
        case 2:
          f2 = "map";
          g2 = this.map;
          break;
        case 3:
          f2 = "ctx";
          g2 = this.h;
          break;
        default:
          return;
      }
      ra(a2, b3 || this, c2 ? c2 + "." + f2 : f2, d2, e2, g2);
      return true;
    };
    t.import = function(a2, b3) {
      if (b3)
        switch (x(b3) && (b3 = JSON.parse(b3)), a2) {
          case "cfg":
            this.s = !!b3.opt;
            break;
          case "reg":
            this.m = false;
            this.register = b3;
            break;
          case "map":
            this.map = b3;
            break;
          case "ctx":
            this.h = b3;
        }
    };
    la(K.prototype);
    function va(a2) {
      a2 = a2.data;
      var b3 = self._index;
      const c2 = a2.args;
      var d2 = a2.task;
      switch (d2) {
        case "init":
          d2 = a2.options || {};
          a2 = a2.factory;
          b3 = d2.encode;
          d2.cache = false;
          b3 && 0 === b3.indexOf("function") && (d2.encode = Function("return " + b3)());
          a2 ? (Function("return " + a2)()(self), self._index = new self.FlexSearch.Index(d2), delete self.FlexSearch) : self._index = new K(d2);
          break;
        default:
          a2 = a2.id, b3 = b3[d2].apply(b3, c2), postMessage("search" === d2 ? { id: a2, msg: b3 } : { id: a2 });
      }
    }
    let wa = 0;
    function O(a2) {
      if (!(this instanceof O))
        return new O(a2);
      var b3;
      a2 ? D(b3 = a2.encode) && (a2.encode = b3.toString()) : a2 = {};
      (b3 = (self || window)._factory) && (b3 = b3.toString());
      const c2 = self.exports, d2 = this;
      this.o = xa(b3, c2, a2.worker);
      this.h = v();
      if (this.o) {
        if (c2)
          this.o.on("message", function(e2) {
            d2.h[e2.id](e2.msg);
            delete d2.h[e2.id];
          });
        else
          this.o.onmessage = function(e2) {
            e2 = e2.data;
            d2.h[e2.id](e2.msg);
            delete d2.h[e2.id];
          };
        this.o.postMessage({ task: "init", factory: b3, options: a2 });
      }
    }
    P("add");
    P("append");
    P("search");
    P("update");
    P("remove");
    function P(a2) {
      O.prototype[a2] = O.prototype[a2 + "Async"] = function() {
        const b3 = this, c2 = [].slice.call(arguments);
        var d2 = c2[c2.length - 1];
        let e2;
        D(d2) && (e2 = d2, c2.splice(c2.length - 1, 1));
        d2 = new Promise(function(f2) {
          setTimeout(function() {
            b3.h[++wa] = f2;
            b3.o.postMessage({ task: a2, id: wa, args: c2 });
          });
        });
        return e2 ? (d2.then(e2), this) : d2;
      };
    }
    function xa(a, b, c) {
      let d;
      try {
        d = b ? eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")') : a ? new Worker(URL.createObjectURL(new Blob(["onmessage=" + va.toString()], { type: "text/javascript" }))) : new Worker(x(c) ? c : "worker/worker.js", { type: "module" });
      } catch (e2) {
      }
      return d;
    }
    function Q(a2) {
      if (!(this instanceof Q))
        return new Q(a2);
      var b3 = a2.document || a2.doc || a2, c2;
      this.K = [];
      this.h = [];
      this.A = [];
      this.register = v();
      this.key = (c2 = b3.key || b3.id) && S(c2, this.A) || "id";
      this.m = u(a2.fastupdate);
      this.C = (c2 = b3.store) && true !== c2 && [];
      this.store = c2 && v();
      this.I = (c2 = b3.tag) && S(c2, this.A);
      this.l = c2 && v();
      this.cache = (c2 = a2.cache) && new J(c2);
      a2.cache = false;
      this.o = a2.worker;
      this.async = false;
      c2 = v();
      let d2 = b3.index || b3.field || b3;
      x(d2) && (d2 = [d2]);
      for (let e2 = 0, f2, g2; e2 < d2.length; e2++)
        f2 = d2[e2], x(f2) || (g2 = f2, f2 = f2.field), g2 = C(g2) ? Object.assign({}, a2, g2) : a2, this.o && (c2[f2] = new O(g2), c2[f2].o || (this.o = false)), this.o || (c2[f2] = new K(g2, this.register)), this.K[e2] = S(f2, this.A), this.h[e2] = f2;
      if (this.C)
        for (a2 = b3.store, x(a2) && (a2 = [a2]), b3 = 0; b3 < a2.length; b3++)
          this.C[b3] = S(a2[b3], this.A);
      this.index = c2;
    }
    function S(a2, b3) {
      const c2 = a2.split(":");
      let d2 = 0;
      for (let e2 = 0; e2 < c2.length; e2++)
        a2 = c2[e2], 0 <= a2.indexOf("[]") && (a2 = a2.substring(0, a2.length - 2)) && (b3[d2] = true), a2 && (c2[d2++] = a2);
      d2 < c2.length && (c2.length = d2);
      return 1 < d2 ? c2 : c2[0];
    }
    function T(a2, b3) {
      if (x(b3))
        a2 = a2[b3];
      else
        for (let c2 = 0; a2 && c2 < b3.length; c2++)
          a2 = a2[b3[c2]];
      return a2;
    }
    function U(a2, b3, c2, d2, e2) {
      a2 = a2[e2];
      if (d2 === c2.length - 1)
        b3[e2] = a2;
      else if (a2)
        if (a2.constructor === Array)
          for (b3 = b3[e2] = Array(a2.length), e2 = 0; e2 < a2.length; e2++)
            U(a2, b3, c2, d2, e2);
        else
          b3 = b3[e2] || (b3[e2] = v()), e2 = c2[++d2], U(a2, b3, c2, d2, e2);
    }
    function V(a2, b3, c2, d2, e2, f2, g2, h2) {
      if (a2 = a2[g2])
        if (d2 === b3.length - 1) {
          if (a2.constructor === Array) {
            if (c2[d2]) {
              for (b3 = 0; b3 < a2.length; b3++)
                e2.add(f2, a2[b3], true, true);
              return;
            }
            a2 = a2.join(" ");
          }
          e2.add(f2, a2, h2, true);
        } else if (a2.constructor === Array)
          for (g2 = 0; g2 < a2.length; g2++)
            V(a2, b3, c2, d2, e2, f2, g2, h2);
        else
          g2 = b3[++d2], V(a2, b3, c2, d2, e2, f2, g2, h2);
    }
    t = Q.prototype;
    t.add = function(a2, b3, c2) {
      C(a2) && (b3 = a2, a2 = T(b3, this.key));
      if (b3 && (a2 || 0 === a2)) {
        if (!c2 && this.register[a2])
          return this.update(a2, b3);
        for (let d2 = 0, e2, f2; d2 < this.h.length; d2++)
          f2 = this.h[d2], e2 = this.K[d2], x(e2) && (e2 = [e2]), V(b3, e2, this.A, 0, this.index[f2], a2, e2[0], c2);
        if (this.I) {
          let d2 = T(b3, this.I), e2 = v();
          x(d2) && (d2 = [d2]);
          for (let f2 = 0, g2, h2; f2 < d2.length; f2++)
            if (g2 = d2[f2], !e2[g2] && (e2[g2] = 1, h2 = this.l[g2] || (this.l[g2] = []), !c2 || -1 === h2.indexOf(a2))) {
              if (h2[h2.length] = a2, this.m) {
                const k2 = this.register[a2] || (this.register[a2] = []);
                k2[k2.length] = h2;
              }
            }
        }
        if (this.store && (!c2 || !this.store[a2])) {
          let d2;
          if (this.C) {
            d2 = v();
            for (let e2 = 0, f2; e2 < this.C.length; e2++)
              f2 = this.C[e2], x(f2) ? d2[f2] = b3[f2] : U(b3, d2, f2, 0, f2[0]);
          }
          this.store[a2] = d2 || b3;
        }
      }
      return this;
    };
    t.append = function(a2, b3) {
      return this.add(a2, b3, true);
    };
    t.update = function(a2, b3) {
      return this.remove(a2).add(a2, b3);
    };
    t.remove = function(a2) {
      C(a2) && (a2 = T(a2, this.key));
      if (this.register[a2]) {
        for (var b3 = 0; b3 < this.h.length && (this.index[this.h[b3]].remove(a2, !this.o), !this.m); b3++)
          ;
        if (this.I && !this.m)
          for (let c2 in this.l) {
            b3 = this.l[c2];
            const d2 = b3.indexOf(a2);
            -1 !== d2 && (1 < b3.length ? b3.splice(d2, 1) : delete this.l[c2]);
          }
        this.store && delete this.store[a2];
        delete this.register[a2];
      }
      return this;
    };
    t.search = function(a2, b3, c2, d2) {
      c2 || (!b3 && C(a2) ? (c2 = a2, a2 = c2.query) : C(b3) && (c2 = b3, b3 = 0));
      let e2 = [], f2 = [], g2, h2, k2, m2, n2, w2, q = 0;
      if (c2)
        if (c2.constructor === Array)
          k2 = c2, c2 = null;
        else {
          k2 = (g2 = c2.pluck) || c2.index || c2.field;
          m2 = c2.tag;
          h2 = this.store && c2.enrich;
          n2 = "and" === c2.bool;
          b3 = c2.limit || 100;
          w2 = c2.offset || 0;
          if (m2 && (x(m2) && (m2 = [m2]), !a2)) {
            for (let l2 = 0, p2; l2 < m2.length; l2++)
              if (p2 = ya.call(this, m2[l2], b3, w2, h2))
                e2[e2.length] = p2, q++;
            return q ? e2 : [];
          }
          x(k2) && (k2 = [k2]);
        }
      k2 || (k2 = this.h);
      n2 = n2 && (1 < k2.length || m2 && 1 < m2.length);
      const r2 = !d2 && (this.o || this.async) && [];
      for (let l2 = 0, p2, z2, B2; l2 < k2.length; l2++) {
        let A3;
        z2 = k2[l2];
        x(z2) || (A3 = z2, z2 = z2.field);
        if (r2)
          r2[l2] = this.index[z2].searchAsync(a2, b3, A3 || c2);
        else {
          d2 ? p2 = d2[l2] : p2 = this.index[z2].search(a2, b3, A3 || c2);
          B2 = p2 && p2.length;
          if (m2 && B2) {
            const y2 = [];
            let H2 = 0;
            n2 && (y2[0] = [p2]);
            for (let X2 = 0, pa2, R2; X2 < m2.length; X2++)
              if (pa2 = m2[X2], B2 = (R2 = this.l[pa2]) && R2.length)
                H2++, y2[y2.length] = n2 ? [R2] : R2;
            H2 && (p2 = n2 ? ma(y2, b3 || 100, w2 || 0) : na(p2, y2), B2 = p2.length);
          }
          if (B2)
            f2[q] = z2, e2[q++] = p2;
          else if (n2)
            return [];
        }
      }
      if (r2) {
        const l2 = this;
        return new Promise(function(p2) {
          Promise.all(r2).then(function(z2) {
            p2(l2.search(a2, b3, c2, z2));
          });
        });
      }
      if (!q)
        return [];
      if (g2 && (!h2 || !this.store))
        return e2[0];
      for (let l2 = 0, p2; l2 < f2.length; l2++) {
        p2 = e2[l2];
        p2.length && h2 && (p2 = za.call(this, p2));
        if (g2)
          return p2;
        e2[l2] = { field: f2[l2], result: p2 };
      }
      return e2;
    };
    function ya(a2, b3, c2, d2) {
      let e2 = this.l[a2], f2 = e2 && e2.length - c2;
      if (f2 && 0 < f2) {
        if (f2 > b3 || c2)
          e2 = e2.slice(c2, c2 + b3);
        d2 && (e2 = za.call(this, e2));
        return { tag: a2, result: e2 };
      }
    }
    function za(a2) {
      const b3 = Array(a2.length);
      for (let c2 = 0, d2; c2 < a2.length; c2++)
        d2 = a2[c2], b3[c2] = { id: d2, doc: this.store[d2] };
      return b3;
    }
    t.contain = function(a2) {
      return !!this.register[a2];
    };
    t.get = function(a2) {
      return this.store[a2];
    };
    t.set = function(a2, b3) {
      this.store[a2] = b3;
      return this;
    };
    t.searchCache = oa;
    t.export = function(a2, b3, c2, d2, e2) {
      e2 || (e2 = 0);
      d2 || (d2 = 0);
      if (d2 < this.h.length) {
        const f2 = this.h[d2], g2 = this.index[f2];
        b3 = this;
        setTimeout(function() {
          g2.export(a2, b3, e2 ? f2.replace(":", "-") : "", d2, e2++) || (d2++, e2 = 1, b3.export(a2, b3, f2, d2, e2));
        });
      } else {
        let f2;
        switch (e2) {
          case 1:
            c2 = "tag";
            f2 = this.l;
            break;
          case 2:
            c2 = "store";
            f2 = this.store;
            break;
          default:
            return;
        }
        ra(a2, this, c2, d2, e2, f2);
      }
    };
    t.import = function(a2, b3) {
      if (b3)
        switch (x(b3) && (b3 = JSON.parse(b3)), a2) {
          case "tag":
            this.l = b3;
            break;
          case "reg":
            this.m = false;
            this.register = b3;
            for (let d2 = 0, e2; d2 < this.h.length; d2++)
              e2 = this.index[this.h[d2]], e2.register = b3, e2.m = false;
            break;
          case "store":
            this.store = b3;
            break;
          default:
            a2 = a2.split(".");
            const c2 = a2[0];
            a2 = a2[1];
            c2 && a2 && this.index[c2].import(a2, b3);
        }
    };
    la(Q.prototype);
    var Ba = { encode: Aa, F: false, G: "" };
    const Ca = [F("[àáâãäå]"), "a", F("[èéêë]"), "e", F("[ìíîï]"), "i", F("[òóôõöő]"), "o", F("[ùúûüű]"), "u", F("[ýŷÿ]"), "y", F("ñ"), "n", F("[çc]"), "k", F("ß"), "s", F(" & "), " and "];
    function Aa(a2) {
      var b3 = a2;
      b3.normalize && (b3 = b3.normalize("NFD").replace(ea, ""));
      return ca.call(this, b3.toLowerCase(), !a2.normalize && Ca);
    }
    var Ea = { encode: Da, F: false, G: "strict" };
    const Fa = /[^a-z0-9]+/, Ga = { b: "p", v: "f", w: "f", z: "s", x: "s", "ß": "s", d: "t", n: "m", c: "k", g: "k", j: "k", q: "k", i: "e", y: "e", u: "o" };
    function Da(a2) {
      a2 = Aa.call(this, a2).join(" ");
      const b3 = [];
      if (a2) {
        const c2 = a2.split(Fa), d2 = c2.length;
        for (let e2 = 0, f2, g2 = 0; e2 < d2; e2++)
          if ((a2 = c2[e2]) && (!this.filter || !this.filter[a2])) {
            f2 = a2[0];
            let h2 = Ga[f2] || f2, k2 = h2;
            for (let m2 = 1; m2 < a2.length; m2++) {
              f2 = a2[m2];
              const n2 = Ga[f2] || f2;
              n2 && n2 !== k2 && (h2 += n2, k2 = n2);
            }
            b3[g2++] = h2;
          }
      }
      return b3;
    }
    var Ia = { encode: Ha, F: false, G: "" };
    const Ja = [F("ae"), "a", F("oe"), "o", F("sh"), "s", F("th"), "t", F("ph"), "f", F("pf"), "f", F("(?![aeo])h(?![aeo])"), "", F("(?!^[aeo])h(?!^[aeo])"), ""];
    function Ha(a2, b3) {
      a2 && (a2 = Da.call(this, a2).join(" "), 2 < a2.length && (a2 = E(a2, Ja)), b3 || (1 < a2.length && (a2 = ha(a2)), a2 && (a2 = a2.split(" "))));
      return a2;
    }
    var La = { encode: Ka, F: false, G: "" };
    const Ma = F("(?!\\b)[aeo]");
    function Ka(a2) {
      a2 && (a2 = Ha.call(this, a2, true), 1 < a2.length && (a2 = a2.replace(Ma, "")), 1 < a2.length && (a2 = ha(a2)), a2 && (a2 = a2.split(" ")));
      return a2;
    }
    G["latin:default"] = ja;
    G["latin:simple"] = Ba;
    G["latin:balance"] = Ea;
    G["latin:advanced"] = Ia;
    G["latin:extra"] = La;
    const W = self;
    let Y;
    const Z = { Index: K, Document: Q, Worker: O, registerCharset: function(a2, b3) {
      G[a2] = b3;
    }, registerLanguage: function(a2, b3) {
      ka[a2] = b3;
    } };
    (Y = W.define) && Y.amd ? Y([], function() {
      return Z;
    }) : W.exports ? W.exports = Z : W.FlexSearch = Z;
  })(commonjsGlobal);
})(flexsearch_bundle);
var flexsearch_bundleExports = flexsearch_bundle.exports;
const MountStory = defineComponent$1({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const options = props.story.file.component;
    let rawVariants = [];
    if (options.onMount) {
      rawVariants = [{
        id: "_default",
        title: "default",
        onMount: options.onMount,
        onMountControls: options.onMountControls
      }];
    } else {
      rawVariants = options.variants;
    }
    for (const index in props.story.variants) {
      const rawVariant = rawVariants[index];
      Object.assign(props.story.variants[index], {
        slots: () => ({ default: rawVariant.onMount, controls: rawVariant.onMountControls }),
        source: rawVariant.source ?? options.source,
        responsiveDisabled: rawVariant.responsiveDisabled ?? options.responsiveDisabled,
        autoPropsDisabled: rawVariant.autoPropsDisabled ?? options.autoPropsDisabled,
        setupApp: rawVariant.setupApp ?? options.setupApp,
        configReady: true
      });
    }
  },
  render() {
    return null;
  }
});
const globals = "";
const transitions = "";
/*!
  * pinia v2.1.3
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
const piniaSymbol = Symbol("pinia");
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
const IS_CLIENT = typeof window !== "undefined";
const USE_DEVTOOLS = IS_CLIENT;
const _global$1 = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
function bom(blob, { autoBom = false } = {}) {
  if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
  }
  return blob;
}
function download(url, name, opts) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.responseType = "blob";
  xhr.onload = function() {
    saveAs(xhr.response, name, opts);
  };
  xhr.onerror = function() {
    console.error("could not download file");
  };
  xhr.send();
}
function corsEnabled(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("HEAD", url, false);
  try {
    xhr.send();
  } catch (e2) {
  }
  return xhr.status >= 200 && xhr.status <= 299;
}
function click(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e2) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
    node.dispatchEvent(evt);
  }
}
const _navigator = typeof navigator === "object" ? navigator : { userAgent: "" };
const isMacOSWebView = /* @__PURE__ */ (() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();
const saveAs = !IS_CLIENT ? () => {
} : (
  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
  typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : (
    // Use msSaveOrOpenBlob as a second approach
    "msSaveOrOpenBlob" in _navigator ? msSaveAs : (
      // Fallback to using FileReader and a popup
      fileSaverSaveAs
    )
  )
);
function downloadSaveAs(blob, name = "download", opts) {
  const a2 = document.createElement("a");
  a2.download = name;
  a2.rel = "noopener";
  if (typeof blob === "string") {
    a2.href = blob;
    if (a2.origin !== location.origin) {
      if (corsEnabled(a2.href)) {
        download(blob, name, opts);
      } else {
        a2.target = "_blank";
        click(a2);
      }
    } else {
      click(a2);
    }
  } else {
    a2.href = URL.createObjectURL(blob);
    setTimeout(function() {
      URL.revokeObjectURL(a2.href);
    }, 4e4);
    setTimeout(function() {
      click(a2);
    }, 0);
  }
}
function msSaveAs(blob, name = "download", opts) {
  if (typeof blob === "string") {
    if (corsEnabled(blob)) {
      download(blob, name, opts);
    } else {
      const a2 = document.createElement("a");
      a2.href = blob;
      a2.target = "_blank";
      setTimeout(function() {
        click(a2);
      });
    }
  } else {
    navigator.msSaveOrOpenBlob(bom(blob, opts), name);
  }
}
function fileSaverSaveAs(blob, name, opts, popup) {
  popup = popup || open("", "_blank");
  if (popup) {
    popup.document.title = popup.document.body.innerText = "downloading...";
  }
  if (typeof blob === "string")
    return download(blob, name, opts);
  const force = blob.type === "application/octet-stream";
  const isSafari2 = /constructor/i.test(String(_global$1.HTMLElement)) || "safari" in _global$1;
  const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((isChromeIOS || force && isSafari2 || isMacOSWebView) && typeof FileReader !== "undefined") {
    const reader = new FileReader();
    reader.onloadend = function() {
      let url = reader.result;
      if (typeof url !== "string") {
        popup = null;
        throw new Error("Wrong reader.result type");
      }
      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
      if (popup) {
        popup.location.href = url;
      } else {
        location.assign(url);
      }
      popup = null;
    };
    reader.readAsDataURL(blob);
  } else {
    const url = URL.createObjectURL(blob);
    if (popup)
      popup.location.assign(url);
    else
      location.href = url;
    popup = null;
    setTimeout(function() {
      URL.revokeObjectURL(url);
    }, 4e4);
  }
}
function toastMessage(message, type) {
  const piniaMessage = "🍍 " + message;
  if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
  } else if (type === "error") {
    console.error(piniaMessage);
  } else if (type === "warn") {
    console.warn(piniaMessage);
  } else {
    console.log(piniaMessage);
  }
}
function isPinia(o2) {
  return "_a" in o2 && "install" in o2;
}
function checkClipboardAccess() {
  if (!("clipboard" in navigator)) {
    toastMessage(`Your browser doesn't support the Clipboard API`, "error");
    return true;
  }
}
function checkNotFocusedError(error) {
  if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
    toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
    return true;
  }
  return false;
}
async function actionGlobalCopyState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
    toastMessage("Global state copied to clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to serialize the state. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalPasteState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    pinia.state.value = JSON.parse(await navigator.clipboard.readText());
    toastMessage("Global state pasted from clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalSaveState(pinia) {
  try {
    saveAs(new Blob([JSON.stringify(pinia.state.value)], {
      type: "text/plain;charset=utf-8"
    }), "pinia-state.json");
  } catch (error) {
    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
let fileInput;
function getFileOpener() {
  if (!fileInput) {
    fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = ".json";
  }
  function openFile() {
    return new Promise((resolve2, reject) => {
      fileInput.onchange = async () => {
        const files = fileInput.files;
        if (!files)
          return resolve2(null);
        const file = files.item(0);
        if (!file)
          return resolve2(null);
        return resolve2({ text: await file.text(), file });
      };
      fileInput.oncancel = () => resolve2(null);
      fileInput.onerror = reject;
      fileInput.click();
    });
  }
  return openFile;
}
async function actionGlobalOpenStateFile(pinia) {
  try {
    const open2 = await getFileOpener();
    const result = await open2();
    if (!result)
      return;
    const { text, file } = result;
    pinia.state.value = JSON.parse(text);
    toastMessage(`Global state imported from "${file.name}".`);
  } catch (error) {
    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
function formatDisplay(display) {
  return {
    _custom: {
      display
    }
  };
}
const PINIA_ROOT_LABEL = "🍍 Pinia (root)";
const PINIA_ROOT_ID = "_root";
function formatStoreForInspectorTree(store) {
  return isPinia(store) ? {
    id: PINIA_ROOT_ID,
    label: PINIA_ROOT_LABEL
  } : {
    id: store.$id,
    label: store.$id
  };
}
function formatStoreForInspectorState(store) {
  if (isPinia(store)) {
    const storeNames = Array.from(store._s.keys());
    const storeMap = store._s;
    const state2 = {
      state: storeNames.map((storeId) => ({
        editable: true,
        key: storeId,
        value: store.state.value[storeId]
      })),
      getters: storeNames.filter((id2) => storeMap.get(id2)._getters).map((id2) => {
        const store2 = storeMap.get(id2);
        return {
          editable: false,
          key: id2,
          value: store2._getters.reduce((getters, key) => {
            getters[key] = store2[key];
            return getters;
          }, {})
        };
      })
    };
    return state2;
  }
  const state = {
    state: Object.keys(store.$state).map((key) => ({
      editable: true,
      key,
      value: store.$state[key]
    }))
  };
  if (store._getters && store._getters.length) {
    state.getters = store._getters.map((getterName) => ({
      editable: false,
      key: getterName,
      value: store[getterName]
    }));
  }
  if (store._customProperties.size) {
    state.customProperties = Array.from(store._customProperties).map((key) => ({
      editable: true,
      key,
      value: store[key]
    }));
  }
  return state;
}
function formatEventData(events) {
  if (!events)
    return {};
  if (Array.isArray(events)) {
    return events.reduce((data, event) => {
      data.keys.push(event.key);
      data.operations.push(event.type);
      data.oldValue[event.key] = event.oldValue;
      data.newValue[event.key] = event.newValue;
      return data;
    }, {
      oldValue: {},
      keys: [],
      operations: [],
      newValue: {}
    });
  } else {
    return {
      operation: formatDisplay(events.type),
      key: formatDisplay(events.key),
      oldValue: events.oldValue,
      newValue: events.newValue
    };
  }
}
function formatMutationType(type) {
  switch (type) {
    case MutationType.direct:
      return "mutation";
    case MutationType.patchFunction:
      return "$patch";
    case MutationType.patchObject:
      return "$patch";
    default:
      return "unknown";
  }
}
let isTimelineActive = true;
const componentStateTypes = [];
const MUTATIONS_LAYER_ID = "pinia:mutations";
const INSPECTOR_ID = "pinia";
const { assign: assign$1 } = Object;
const getStoreType = (id2) => "🍍 " + id2;
function registerPiniaDevtools(app, pinia) {
  setupDevtoolsPlugin$1({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      toastMessage("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.addTimelineLayer({
      id: MUTATIONS_LAYER_ID,
      label: `Pinia 🍍`,
      color: 15064968
    });
    api.addInspector({
      id: INSPECTOR_ID,
      label: "Pinia 🍍",
      icon: "storage",
      treeFilterPlaceholder: "Search stores",
      actions: [
        {
          icon: "content_copy",
          action: () => {
            actionGlobalCopyState(pinia);
          },
          tooltip: "Serialize and copy the state"
        },
        {
          icon: "content_paste",
          action: async () => {
            await actionGlobalPasteState(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Replace the state with the content of your clipboard"
        },
        {
          icon: "save",
          action: () => {
            actionGlobalSaveState(pinia);
          },
          tooltip: "Save the state as a JSON file"
        },
        {
          icon: "folder_open",
          action: async () => {
            await actionGlobalOpenStateFile(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Import the state from a JSON file"
        }
      ],
      nodeActions: [
        {
          icon: "restore",
          tooltip: 'Reset the state (with "$reset")',
          action: (nodeId) => {
            const store = pinia._s.get(nodeId);
            if (!store) {
              toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
            } else if (typeof store.$reset !== "function") {
              toastMessage(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, "warn");
            } else {
              store.$reset();
              toastMessage(`Store "${nodeId}" reset.`);
            }
          }
        }
      ]
    });
    api.on.inspectComponent((payload, ctx) => {
      const proxy = payload.componentInstance && payload.componentInstance.proxy;
      if (proxy && proxy._pStores) {
        const piniaStores = payload.componentInstance.proxy._pStores;
        Object.values(piniaStores).forEach((store) => {
          payload.instanceData.state.push({
            type: getStoreType(store.$id),
            key: "state",
            editable: true,
            value: store._isOptionsAPI ? {
              _custom: {
                value: toRaw(store.$state),
                actions: [
                  {
                    icon: "restore",
                    tooltip: "Reset the state of this store",
                    action: () => store.$reset()
                  }
                ]
              }
            } : (
              // NOTE: workaround to unwrap transferred refs
              Object.keys(store.$state).reduce((state, key) => {
                state[key] = store.$state[key];
                return state;
              }, {})
            )
          });
          if (store._getters && store._getters.length) {
            payload.instanceData.state.push({
              type: getStoreType(store.$id),
              key: "getters",
              editable: false,
              value: store._getters.reduce((getters, key) => {
                try {
                  getters[key] = store[key];
                } catch (error) {
                  getters[key] = error;
                }
                return getters;
              }, {})
            });
          }
        });
      }
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        let stores = [pinia];
        stores = stores.concat(Array.from(pinia._s.values()));
        payload.rootNodes = (payload.filter ? stores.filter((store) => "$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return;
        }
        if (inspectedStore) {
          payload.state = formatStoreForInspectorState(inspectedStore);
        }
      }
    });
    api.on.editInspectorState((payload, ctx) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return toastMessage(`store "${payload.nodeId}" not found`, "error");
        }
        const { path } = payload;
        if (!isPinia(inspectedStore)) {
          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
            path.unshift("$state");
          }
        } else {
          path.unshift("state");
        }
        isTimelineActive = false;
        payload.set(inspectedStore, path, payload.state.value);
        isTimelineActive = true;
      }
    });
    api.on.editComponentState((payload) => {
      if (payload.type.startsWith("🍍")) {
        const storeId = payload.type.replace(/^🍍\s*/, "");
        const store = pinia._s.get(storeId);
        if (!store) {
          return toastMessage(`store "${storeId}" not found`, "error");
        }
        const { path } = payload;
        if (path[0] !== "state") {
          return toastMessage(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
        }
        path[0] = "$state";
        isTimelineActive = false;
        payload.set(store, path, payload.state.value);
        isTimelineActive = true;
      }
    });
  });
}
function addStoreToDevtools(app, store) {
  if (!componentStateTypes.includes(getStoreType(store.$id))) {
    componentStateTypes.push(getStoreType(store.$id));
  }
  setupDevtoolsPlugin$1({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app,
    settings: {
      logStoreChanges: {
        label: "Notify about new/deleted stores",
        type: "boolean",
        defaultValue: true
      }
      // useEmojis: {
      //   label: 'Use emojis in messages ⚡️',
      //   type: 'boolean',
      //   defaultValue: true,
      // },
    }
  }, (api) => {
    const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
    store.$onAction(({ after, onError, name, args }) => {
      const groupId = runningActionId++;
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "🛫 " + name,
          subtitle: "start",
          data: {
            store: formatDisplay(store.$id),
            action: formatDisplay(name),
            args
          },
          groupId
        }
      });
      after((result) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            title: "🛬 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay(store.$id),
              action: formatDisplay(name),
              args,
              result
            },
            groupId
          }
        });
      });
      onError((error) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            logType: "error",
            title: "💥 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay(store.$id),
              action: formatDisplay(name),
              args,
              error
            },
            groupId
          }
        });
      });
    }, true);
    store._customProperties.forEach((name) => {
      watch(() => unref(store[name]), (newValue, oldValue) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID);
        if (isTimelineActive) {
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: now2(),
              title: "Change",
              subtitle: name,
              data: {
                newValue,
                oldValue
              },
              groupId: activeAction
            }
          });
        }
      }, { deep: true });
    });
    store.$subscribe(({ events, type }, state) => {
      api.notifyComponentUpdate();
      api.sendInspectorState(INSPECTOR_ID);
      if (!isTimelineActive)
        return;
      const eventData = {
        time: now2(),
        title: formatMutationType(type),
        data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),
        groupId: activeAction
      };
      activeAction = void 0;
      if (type === MutationType.patchFunction) {
        eventData.subtitle = "⤵️";
      } else if (type === MutationType.patchObject) {
        eventData.subtitle = "🧩";
      } else if (events && !Array.isArray(events)) {
        eventData.subtitle = events.type;
      }
      if (events) {
        eventData.data["rawEvent(s)"] = {
          _custom: {
            display: "DebuggerEvent",
            type: "object",
            tooltip: "raw DebuggerEvent[]",
            value: events
          }
        };
      }
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: eventData
      });
    }, { detached: true, flush: "sync" });
    const hotUpdate = store._hotUpdate;
    store._hotUpdate = markRaw((newStore) => {
      hotUpdate(newStore);
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "🔥 " + store.$id,
          subtitle: "HMR update",
          data: {
            store: formatDisplay(store.$id),
            info: formatDisplay(`HMR update`)
          }
        }
      });
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
    });
    const { $dispose } = store;
    store.$dispose = () => {
      $dispose();
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
      api.getSettings().logStoreChanges && toastMessage(`Disposed "${store.$id}" store 🗑`);
    };
    api.notifyComponentUpdate();
    api.sendInspectorTree(INSPECTOR_ID);
    api.sendInspectorState(INSPECTOR_ID);
    api.getSettings().logStoreChanges && toastMessage(`"${store.$id}" store installed 🆕`);
  });
}
let runningActionId = 0;
let activeAction;
function patchActionForGrouping(store, actionNames) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const _actionId = runningActionId;
      const trackedStore = new Proxy(store, {
        get(...args) {
          activeAction = _actionId;
          return Reflect.get(...args);
        },
        set(...args) {
          activeAction = _actionId;
          return Reflect.set(...args);
        }
      });
      return actions[actionName].apply(trackedStore, arguments);
    };
  }
}
function devtoolsPlugin({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  if (options.state) {
    store._isOptionsAPI = true;
  }
  if (typeof options.state === "function") {
    patchActionForGrouping(
      // @ts-expect-error: can cast the store...
      store,
      Object.keys(options.actions)
    );
    const originalHotUpdate = store._hotUpdate;
    toRaw(store)._hotUpdate = function(newStore) {
      originalHotUpdate.apply(this, arguments);
      patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions));
    };
  }
  addStoreToDevtools(
    app,
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store
  );
}
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia = markRaw({
    install(app) {
      {
        pinia._a = app;
        app.provide(piniaSymbol, pinia);
        app.config.globalProperties.$pinia = pinia;
        if (USE_DEVTOOLS) {
          registerPiniaDevtools(app, pinia);
        }
        toBeInstalled.forEach((plugin2) => _p2.push(plugin2));
        toBeInstalled = [];
      }
    },
    use(plugin2) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin2);
      } else {
        _p2.push(plugin2);
      }
      return this;
    },
    _p: _p2,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin);
  }
  return pinia;
}
function defineSetupVue3(handler) {
  return handler;
}
const resource$1 = {};
const resource = {
  "cookies": {
    "accept": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Accepteer geselecteerd cookies"]);
      };
      fn2.source = "Accepteer geselecteerd cookies";
      return fn2;
    })(),
    "others": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Andere"]);
      };
      fn2.source = "Andere";
      return fn2;
    })(),
    "analytics": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Analytics"]);
      };
      fn2.source = "Analytics";
      return fn2;
    })()
  },
  "label": {
    "optional": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Optioneel"]);
      };
      fn2.source = "Optioneel";
      return fn2;
    })(),
    "cancel": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Annuleren"]);
      };
      fn2.source = "Annuleren";
      return fn2;
    })(),
    "confirm": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Bevestigen"]);
      };
      fn2.source = "Bevestigen";
      return fn2;
    })(),
    "confirm_text": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Weet u zeker dat u door wilt gaan met deze actie?"]);
      };
      fn2.source = "Weet u zeker dat u door wilt gaan met deze actie?";
      return fn2;
    })(),
    "filter": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Filter"]);
      };
      fn2.source = "Filter";
      return fn2;
    })(),
    "drop_file": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Sleep uw foto hier."]);
      };
      fn2.source = "Sleep uw foto hier.";
      return fn2;
    })()
  },
  "labels": {
    "no_results": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Geen resultaten"]);
      };
      fn2.source = "Geen resultaten";
      return fn2;
    })()
  },
  "errors": {
    "invalid_type": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het veld is verplicht."]);
      };
      fn2.source = "Het veld is verplicht.";
      return fn2;
    })(),
    "pdf": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Er is iets foutgelopen met het downloaden van de PDF."]);
      };
      fn2.source = "Er is iets foutgelopen met het downloaden van de PDF.";
      return fn2;
    })(),
    "invalid_type_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een tekst zijn."]);
      };
      fn2.source = "Het type moet een tekst zijn.";
      return fn2;
    })(),
    "invalid_type_number": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een nummer zijn."]);
      };
      fn2.source = "Het type moet een nummer zijn.";
      return fn2;
    })(),
    "invalid_type_boolean": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet juist of onjuist zijn."]);
      };
      fn2.source = "Het type moet juist of onjuist zijn.";
      return fn2;
    })(),
    "invalid_type_array": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een lijst zijn."]);
      };
      fn2.source = "Het type moet een lijst zijn.";
      return fn2;
    })(),
    "invalid_type_object": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een object zijn."]);
      };
      fn2.source = "Het type moet een object zijn.";
      return fn2;
    })(),
    "invalid_type_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een datum zijn."]);
      };
      fn2.source = "Het type moet een datum zijn.";
      return fn2;
    })(),
    "invalid_type_null": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet ongelding zijn."]);
      };
      fn2.source = "Het type moet ongelding zijn.";
      return fn2;
    })(),
    "invalid_type_undefined": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet niet gedefineerd zijn."]);
      };
      fn2.source = "Het type moet niet gedefineerd zijn.";
      return fn2;
    })(),
    "invalid_type_nan": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet niet een nummer zijn."]);
      };
      fn2.source = "Het type moet niet een nummer zijn.";
      return fn2;
    })(),
    "invalid_union": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Een ongeldige samenstelling."]);
      };
      fn2.source = "Een ongeldige samenstelling.";
      return fn2;
    })(),
    "invalid_email": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldig e-mailadres."]);
      };
      fn2.source = "Ongeldig e-mailadres.";
      return fn2;
    })(),
    "invalid_url": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige URL."]);
      };
      fn2.source = "Ongeldige URL.";
      return fn2;
    })(),
    "invalid_uuid": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige UUID."]);
      };
      fn2.source = "Ongeldige UUID.";
      return fn2;
    })(),
    "invalid_regex": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige REGEX."]);
      };
      fn2.source = "Ongeldige REGEX.";
      return fn2;
    })(),
    "invalid_datetime": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige datetime."]);
      };
      fn2.source = "Ongeldige datetime.";
      return fn2;
    })(),
    "invalid_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige tekst."]);
      };
      fn2.source = "Ongeldige tekst.";
      return fn2;
    })(),
    "invalid_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Ongeldige datum."]);
      };
      fn2.source = "Ongeldige datum.";
      return fn2;
    })(),
    "too_big_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " karakters lang."]);
      };
      fn2.source = "Max. {max} karakters lang.";
      return fn2;
    })(),
    "too_big_number": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " groot."]);
      };
      fn2.source = "Max. {max} groot.";
      return fn2;
    })(),
    "too_big_array": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " elementen."]);
      };
      fn2.source = "Max. {max} elementen.";
      return fn2;
    })(),
    "too_big_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " datum."]);
      };
      fn2.source = "Max. {max} datum.";
      return fn2;
    })(),
    "too_big": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Max. ", _interpolate(_named("max")), " groot."]);
      };
      fn2.source = "Max. {max} groot.";
      return fn2;
    })(),
    "too_small_string": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named, plural: _plural } = ctx;
        return _plural([_normalize(["Dit veld is verplicht."]), _normalize(["Dit veld is verplicht."]), _normalize(["Min. ", _interpolate(_named("min")), " karakters lang."])]);
      };
      fn2.source = "Dit veld is verplicht. | Dit veld is verplicht. | Min. {min} karakters lang.";
      return fn2;
    })(),
    "too_small_number": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " groot."]);
      };
      fn2.source = "Min. {min} groot.";
      return fn2;
    })(),
    "too_small_array": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " elementen."]);
      };
      fn2.source = "Min. {min} elementen.";
      return fn2;
    })(),
    "too_small_date": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " datum."]);
      };
      fn2.source = "Min. {min} datum.";
      return fn2;
    })(),
    "too_small": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;
        return _normalize(["Min. ", _interpolate(_named("min")), " lang."]);
      };
      fn2.source = "Min. {min} lang.";
      return fn2;
    })(),
    "invalid_type_function": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een functie zijn."]);
      };
      fn2.source = "Het type moet een functie zijn.";
      return fn2;
    })(),
    "invalid_type_symbol": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een symbool zijn."]);
      };
      fn2.source = "Het type moet een symbool zijn.";
      return fn2;
    })(),
    "invalid_type_bigint": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een bigint zijn."]);
      };
      fn2.source = "Het type moet een bigint zijn.";
      return fn2;
    })(),
    "invalid_type_integer": (() => {
      const fn2 = (ctx) => {
        const { normalize: _normalize } = ctx;
        return _normalize(["Het type moet een geheel getal zijn."]);
      };
      fn2.source = "Het type moet een geheel getal zijn.";
      return fn2;
    })()
  }
};
var ExampleRoutes = /* @__PURE__ */ ((ExampleRoutes2) => {
  ExampleRoutes2["EXAMPLE_INDEX"] = "example-index";
  ExampleRoutes2["EXAMPLE_TABLE"] = "example-table";
  ExampleRoutes2["EXAMPLE_FORM"] = "example-form";
  return ExampleRoutes2;
})(ExampleRoutes || {});
var GlobalRoutes = /* @__PURE__ */ ((GlobalRoutes2) => {
  GlobalRoutes2["INDEX"] = "index";
  GlobalRoutes2["MAIN"] = "main";
  GlobalRoutes2["SIDEBAR"] = "sidebar";
  GlobalRoutes2["COMPONENT"] = "component";
  return GlobalRoutes2;
})(GlobalRoutes || {});
const routeNames = {
  ...GlobalRoutes,
  ...ExampleRoutes
};
class Subscribable {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set();
    this.subscribe = this.subscribe.bind(this);
  }
  subscribe(listener) {
    const identity2 = {
      listener
    };
    this.listeners.add(identity2);
    this.onSubscribe();
    return () => {
      this.listeners.delete(identity2);
      this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
}
const isServer = typeof window === "undefined" || "Deno" in window;
function noop$1() {
  return void 0;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function replaceEqualDeep(a2, b3) {
  if (a2 === b3) {
    return a2;
  }
  const array = isPlainArray(a2) && isPlainArray(b3);
  if (array || isPlainObject$2(a2) && isPlainObject$2(b3)) {
    const aSize = array ? a2.length : Object.keys(a2).length;
    const bItems = array ? b3 : Object.keys(b3);
    const bSize = bItems.length;
    const copy = array ? [] : {};
    let equalItems = 0;
    for (let i2 = 0; i2 < bSize; i2++) {
      const key = array ? i2 : bItems[i2];
      copy[key] = replaceEqualDeep(a2[key], b3[key]);
      if (copy[key] === a2[key]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a2 : copy;
  }
  return b3;
}
function shallowEqualObjects(a2, b3) {
  if (a2 && !b3 || b3 && !a2) {
    return false;
  }
  for (const key in a2) {
    if (a2[key] !== b3[key]) {
      return false;
    }
  }
  return true;
}
function isPlainArray(value) {
  return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject$2(o2) {
  if (!hasObjectPrototype(o2)) {
    return false;
  }
  const ctor = o2.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  const prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function sleep(timeout) {
  return new Promise((resolve2) => {
    setTimeout(resolve2, timeout);
  });
}
function scheduleMicrotask(callback) {
  sleep(0).then(callback);
}
function replaceData(prevData, data, options) {
  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {
    return prevData;
  } else if (typeof options.structuralSharing === "function") {
    return options.structuralSharing(prevData, data);
  } else if (options.structuralSharing !== false) {
    return replaceEqualDeep(prevData, data);
  }
  return data;
}
class FocusManager extends Subscribable {
  constructor() {
    super();
    this.setup = (onFocus) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onFocus();
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return () => {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((focused) => {
      if (typeof focused === "boolean") {
        this.setFocused(focused);
      } else {
        this.onFocus();
      }
    });
  }
  setFocused(focused) {
    this.focused = focused;
    if (focused) {
      this.onFocus();
    }
  }
  onFocus() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  }
}
const focusManager = new FocusManager();
const onlineEvents = ["online", "offline"];
class OnlineManager extends Subscribable {
  constructor() {
    super();
    this.setup = (onOnline) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        onlineEvents.forEach((event) => {
          window.addEventListener(event, listener, false);
        });
        return () => {
          onlineEvents.forEach((event) => {
            window.removeEventListener(event, listener);
          });
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((online) => {
      if (typeof online === "boolean") {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    this.online = online;
    if (online) {
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  }
}
const onlineManager = new OnlineManager();
function canFetch(networkMode) {
  return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
}
class CancelledError {
  constructor(options) {
    this.revert = options == null ? void 0 : options.revert;
    this.silent = options == null ? void 0 : options.silent;
  }
}
function isCancelledError(value) {
  return value instanceof CancelledError;
}
function createNotifyManager() {
  let queue2 = [];
  let transactions = 0;
  let notifyFn = (callback) => {
    callback();
  };
  let batchNotifyFn = (callback) => {
    callback();
  };
  const batch = (callback) => {
    let result;
    transactions++;
    try {
      result = callback();
    } finally {
      transactions--;
      if (!transactions) {
        flush();
      }
    }
    return result;
  };
  const schedule = (callback) => {
    if (transactions) {
      queue2.push(callback);
    } else {
      scheduleMicrotask(() => {
        notifyFn(callback);
      });
    }
  };
  const batchCalls = (callback) => {
    return (...args) => {
      schedule(() => {
        callback(...args);
      });
    };
  };
  const flush = () => {
    const originalQueue = queue2;
    queue2 = [];
    if (originalQueue.length) {
      scheduleMicrotask(() => {
        batchNotifyFn(() => {
          originalQueue.forEach((callback) => {
            notifyFn(callback);
          });
        });
      });
    }
  };
  const setNotifyFunction = (fn2) => {
    notifyFn = fn2;
  };
  const setBatchNotifyFunction = (fn2) => {
    batchNotifyFn = fn2;
  };
  return {
    batch,
    batchCalls,
    schedule,
    setNotifyFunction,
    setBatchNotifyFunction
  };
}
const notifyManager = createNotifyManager();
class QueryObserver extends Subscribable {
  constructor(client2, options) {
    super();
    this.client = client2;
    this.options = options;
    this.trackedProps = /* @__PURE__ */ new Set();
    this.selectError = null;
    this.bindMethods();
    this.setOptions(options);
  }
  bindMethods() {
    this.remove = this.remove.bind(this);
    this.refetch = this.refetch.bind(this);
  }
  onSubscribe() {
    if (this.listeners.size === 1) {
      this.currentQuery.addObserver(this);
      if (shouldFetchOnMount(this.currentQuery, this.options)) {
        this.executeFetch();
      }
      this.updateTimers();
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.destroy();
    }
  }
  shouldFetchOnReconnect() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);
  }
  shouldFetchOnWindowFocus() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);
  }
  destroy() {
    this.listeners = /* @__PURE__ */ new Set();
    this.clearStaleTimeout();
    this.clearRefetchInterval();
    this.currentQuery.removeObserver(this);
  }
  setOptions(options, notifyOptions) {
    const prevOptions = this.options;
    const prevQuery = this.currentQuery;
    this.options = this.client.defaultQueryOptions(options);
    if (typeof (options == null ? void 0 : options.isDataEqual) !== "undefined") {
      this.client.getLogger().error("The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option");
    }
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getQueryCache().notify({
        type: "observerOptionsUpdated",
        query: this.currentQuery,
        observer: this
      });
    }
    if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
      throw new Error("Expected enabled to be a boolean");
    }
    if (!this.options.queryKey) {
      this.options.queryKey = prevOptions.queryKey;
    }
    this.updateQuery();
    const mounted = this.hasListeners();
    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
      this.executeFetch();
    }
    this.updateResult(notifyOptions);
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
      this.updateStaleTimeout();
    }
    const nextRefetchInterval = this.computeRefetchInterval();
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {
      this.updateRefetchInterval(nextRefetchInterval);
    }
  }
  getOptimisticResult(options) {
    const query = this.client.getQueryCache().build(this.client, options);
    return this.createResult(query, options);
  }
  getCurrentResult() {
    return this.currentResult;
  }
  trackResult(result) {
    const trackedResult = {};
    Object.keys(result).forEach((key) => {
      Object.defineProperty(trackedResult, key, {
        configurable: false,
        enumerable: true,
        get: () => {
          this.trackedProps.add(key);
          return result[key];
        }
      });
    });
    return trackedResult;
  }
  getCurrentQuery() {
    return this.currentQuery;
  }
  remove() {
    this.client.getQueryCache().remove(this.currentQuery);
  }
  refetch({
    refetchPage,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        refetchPage
      }
    });
  }
  fetchOptimistic(options) {
    const defaultedOptions = this.client.defaultQueryOptions(options);
    const query = this.client.getQueryCache().build(this.client, defaultedOptions);
    query.isFetchingOptimistic = true;
    return query.fetch().then(() => this.createResult(query, defaultedOptions));
  }
  fetch(fetchOptions) {
    var _fetchOptions$cancelR;
    return this.executeFetch({
      ...fetchOptions,
      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true
    }).then(() => {
      this.updateResult();
      return this.currentResult;
    });
  }
  executeFetch(fetchOptions) {
    this.updateQuery();
    let promise = this.currentQuery.fetch(this.options, fetchOptions);
    if (!(fetchOptions != null && fetchOptions.throwOnError)) {
      promise = promise.catch(noop$1);
    }
    return promise;
  }
  updateStaleTimeout() {
    this.clearStaleTimeout();
    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
      return;
    }
    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
    const timeout = time + 1;
    this.staleTimeoutId = setTimeout(() => {
      if (!this.currentResult.isStale) {
        this.updateResult();
      }
    }, timeout);
  }
  computeRefetchInterval() {
    var _this$options$refetch;
    return typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;
  }
  updateRefetchInterval(nextInterval) {
    this.clearRefetchInterval();
    this.currentRefetchInterval = nextInterval;
    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {
      return;
    }
    this.refetchIntervalId = setInterval(() => {
      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
        this.executeFetch();
      }
    }, this.currentRefetchInterval);
  }
  updateTimers() {
    this.updateStaleTimeout();
    this.updateRefetchInterval(this.computeRefetchInterval());
  }
  clearStaleTimeout() {
    if (this.staleTimeoutId) {
      clearTimeout(this.staleTimeoutId);
      this.staleTimeoutId = void 0;
    }
  }
  clearRefetchInterval() {
    if (this.refetchIntervalId) {
      clearInterval(this.refetchIntervalId);
      this.refetchIntervalId = void 0;
    }
  }
  createResult(query, options) {
    const prevQuery = this.currentQuery;
    const prevOptions = this.options;
    const prevResult = this.currentResult;
    const prevResultState = this.currentResultState;
    const prevResultOptions = this.currentResultOptions;
    const queryChange = query !== prevQuery;
    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
    const {
      state
    } = query;
    let {
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      fetchStatus,
      status
    } = state;
    let isPreviousData = false;
    let isPlaceholderData = false;
    let data;
    if (options._optimisticResults) {
      const mounted = this.hasListeners();
      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
      if (fetchOnMount || fetchOptionally) {
        fetchStatus = canFetch(query.options.networkMode) ? "fetching" : "paused";
        if (!dataUpdatedAt) {
          status = "loading";
        }
      }
      if (options._optimisticResults === "isRestoring") {
        fetchStatus = "idle";
      }
    }
    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== "error") {
      data = prevQueryResult.data;
      dataUpdatedAt = prevQueryResult.dataUpdatedAt;
      status = prevQueryResult.status;
      isPreviousData = true;
    } else if (options.select && typeof state.data !== "undefined") {
      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {
        data = this.selectResult;
      } else {
        try {
          this.selectFn = options.select;
          data = options.select(state.data);
          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);
          this.selectResult = data;
          this.selectError = null;
        } catch (selectError) {
          {
            this.client.getLogger().error(selectError);
          }
          this.selectError = selectError;
        }
      }
    } else {
      data = state.data;
    }
    if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && status === "loading") {
      let placeholderData;
      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
        placeholderData = prevResult.data;
      } else {
        placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
        if (options.select && typeof placeholderData !== "undefined") {
          try {
            placeholderData = options.select(placeholderData);
            this.selectError = null;
          } catch (selectError) {
            {
              this.client.getLogger().error(selectError);
            }
            this.selectError = selectError;
          }
        }
      }
      if (typeof placeholderData !== "undefined") {
        status = "success";
        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);
        isPlaceholderData = true;
      }
    }
    if (this.selectError) {
      error = this.selectError;
      data = this.selectResult;
      errorUpdatedAt = Date.now();
      status = "error";
    }
    const isFetching = fetchStatus === "fetching";
    const isLoading = status === "loading";
    const isError = status === "error";
    const result = {
      status,
      fetchStatus,
      isLoading,
      isSuccess: status === "success",
      isError,
      isInitialLoading: isLoading && isFetching,
      data,
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      failureCount: state.fetchFailureCount,
      failureReason: state.fetchFailureReason,
      errorUpdateCount: state.errorUpdateCount,
      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
      isFetching,
      isRefetching: isFetching && !isLoading,
      isLoadingError: isError && state.dataUpdatedAt === 0,
      isPaused: fetchStatus === "paused",
      isPlaceholderData,
      isPreviousData,
      isRefetchError: isError && state.dataUpdatedAt !== 0,
      isStale: isStale(query, options),
      refetch: this.refetch,
      remove: this.remove
    };
    return result;
  }
  updateResult(notifyOptions) {
    const prevResult = this.currentResult;
    const nextResult = this.createResult(this.currentQuery, this.options);
    this.currentResultState = this.currentQuery.state;
    this.currentResultOptions = this.options;
    if (shallowEqualObjects(nextResult, prevResult)) {
      return;
    }
    this.currentResult = nextResult;
    const defaultNotifyOptions = {
      cache: true
    };
    const shouldNotifyListeners = () => {
      if (!prevResult) {
        return true;
      }
      const {
        notifyOnChangeProps
      } = this.options;
      if (notifyOnChangeProps === "all" || !notifyOnChangeProps && !this.trackedProps.size) {
        return true;
      }
      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);
      if (this.options.useErrorBoundary) {
        includedProps.add("error");
      }
      return Object.keys(this.currentResult).some((key) => {
        const typedKey = key;
        const changed = this.currentResult[typedKey] !== prevResult[typedKey];
        return changed && includedProps.has(typedKey);
      });
    };
    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {
      defaultNotifyOptions.listeners = true;
    }
    this.notify({
      ...defaultNotifyOptions,
      ...notifyOptions
    });
  }
  updateQuery() {
    const query = this.client.getQueryCache().build(this.client, this.options);
    if (query === this.currentQuery) {
      return;
    }
    const prevQuery = this.currentQuery;
    this.currentQuery = query;
    this.currentQueryInitialState = query.state;
    this.previousQueryResult = this.currentResult;
    if (this.hasListeners()) {
      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
      query.addObserver(this);
    }
  }
  onQueryUpdate(action) {
    const notifyOptions = {};
    if (action.type === "success") {
      notifyOptions.onSuccess = !action.manual;
    } else if (action.type === "error" && !isCancelledError(action.error)) {
      notifyOptions.onError = true;
    }
    this.updateResult(notifyOptions);
    if (this.hasListeners()) {
      this.updateTimers();
    }
  }
  notify(notifyOptions) {
    notifyManager.batch(() => {
      if (notifyOptions.onSuccess) {
        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;
        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);
        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);
      } else if (notifyOptions.onError) {
        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;
        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);
        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, void 0, this.currentResult.error);
      }
      if (notifyOptions.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
      if (notifyOptions.cache) {
        this.client.getQueryCache().notify({
          query: this.currentQuery,
          type: "observerResultsUpdated"
        });
      }
    });
  }
}
function shouldLoadOnMount(query, options) {
  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
  if (options.enabled !== false) {
    const value = typeof field === "function" ? field(query) : field;
    return value === "always" || value !== false && isStale(query, options);
  }
  return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
}
function isStale(query, options) {
  return query.isStaleByTime(options.staleTime);
}
const VUE_QUERY_CLIENT = "VUE_QUERY_CLIENT";
function getClientKey(key) {
  const suffix = key ? ":" + key : "";
  return "" + VUE_QUERY_CLIENT + suffix;
}
function isQueryKey(value) {
  return Array.isArray(value);
}
function updateState(state, update) {
  Object.keys(state).forEach((key) => {
    state[key] = update[key];
  });
}
function cloneDeep(value, customizer) {
  if (customizer) {
    const result = customizer(value);
    if (result !== void 0 || isRef(value)) {
      return result;
    }
  }
  if (Array.isArray(value)) {
    return value.map((val) => cloneDeep(val, customizer));
  }
  if (typeof value === "object" && isPlainObject$1(value)) {
    const entries = Object.entries(value).map(([key, val]) => [key, cloneDeep(val, customizer)]);
    return Object.fromEntries(entries);
  }
  return value;
}
function cloneDeepUnref(obj) {
  return cloneDeep(obj, (val) => {
    if (isRef(val)) {
      return cloneDeepUnref(unref(val));
    }
  });
}
function isPlainObject$1(value) {
  if (Object.prototype.toString.call(value) !== "[object Object]") {
    return false;
  }
  const prototype2 = Object.getPrototypeOf(value);
  return prototype2 === null || prototype2 === Object.prototype;
}
function useQueryClient(id2 = "") {
  var _getCurrentInstance;
  const vm = (_getCurrentInstance = getCurrentInstance()) == null ? void 0 : _getCurrentInstance.proxy;
  if (!vm) {
    throw new Error("vue-query hooks can only be used inside setup() function.");
  }
  const key = getClientKey(id2);
  const queryClient = inject(key);
  if (!queryClient) {
    throw new Error("No 'queryClient' found in Vue context, use 'VueQueryPlugin' to properly initialize the library.");
  }
  return queryClient;
}
function useBaseQuery(Observer, arg1, arg2 = {}, arg3 = {}) {
  var _options$value$queryC;
  const options = computed(() => parseQueryArgs(arg1, arg2, arg3));
  const queryClient = (_options$value$queryC = options.value.queryClient) != null ? _options$value$queryC : useQueryClient(options.value.queryClientKey);
  const defaultedOptions = computed(() => {
    const defaulted = queryClient.defaultQueryOptions(options.value);
    defaulted._optimisticResults = queryClient.isRestoring.value ? "isRestoring" : "optimistic";
    return defaulted;
  });
  const observer = new Observer(queryClient, defaultedOptions.value);
  const state = reactive(observer.getCurrentResult());
  const unsubscribe = ref(() => {
  });
  watch(queryClient.isRestoring, (isRestoring) => {
    if (!isRestoring) {
      unsubscribe.value();
      unsubscribe.value = observer.subscribe((result) => {
        updateState(state, result);
      });
    }
  }, {
    immediate: true
  });
  watch(defaultedOptions, () => {
    observer.setOptions(defaultedOptions.value);
    updateState(state, observer.getCurrentResult());
  }, {
    deep: true
  });
  onScopeDispose(() => {
    unsubscribe.value();
  });
  const suspense = () => {
    return new Promise((resolve2) => {
      let stopWatch = () => {
      };
      const run = () => {
        if (defaultedOptions.value.enabled !== false) {
          const optimisticResult = observer.getOptimisticResult(defaultedOptions.value);
          if (optimisticResult.isStale) {
            stopWatch();
            resolve2(observer.fetchOptimistic(defaultedOptions.value));
          } else {
            stopWatch();
            resolve2(optimisticResult);
          }
        }
      };
      run();
      stopWatch = watch(defaultedOptions, run, {
        deep: true
      });
    });
  };
  return {
    ...toRefs(readonly(state)),
    suspense
  };
}
function parseQueryArgs(arg1, arg2 = {}, arg3 = {}) {
  const plainArg1 = unref(arg1);
  const plainArg2 = unref(arg2);
  const plainArg3 = unref(arg3);
  let options = plainArg1;
  if (!isQueryKey(plainArg1)) {
    options = plainArg1;
  } else if (typeof plainArg2 === "function") {
    options = {
      ...plainArg3,
      queryKey: plainArg1,
      queryFn: plainArg2
    };
  } else {
    options = {
      ...plainArg2,
      queryKey: plainArg1
    };
  }
  return cloneDeepUnref(options);
}
function useQuery(arg1, arg2, arg3) {
  const result = useBaseQuery(QueryObserver, arg1, arg2, arg3);
  return {
    ...result,
    refetch: result.refetch.value,
    remove: result.remove.value
  };
}
function bind(fn2, thisArg) {
  return function wrap2() {
    return fn2.apply(thisArg, arguments);
  };
}
const { toString } = Object.prototype;
const { getPrototypeOf } = Object;
const kindOf = ((cache2) => (thing) => {
  const str = toString.call(thing);
  return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
const typeOfTest = (type) => (thing) => typeof thing === type;
const { isArray } = Array;
const isUndefined$1 = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
const isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
const isString = typeOfTest("string");
const isFunction = typeOfTest("function");
const isNumber = typeOfTest("number");
const isObject$1 = (thing) => thing !== null && typeof thing === "object";
const isBoolean = (thing) => thing === true || thing === false;
const isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype2 = getPrototypeOf(val);
  return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
const isDate = kindOfTest("Date");
const isFile = kindOfTest("File");
const isBlob = kindOfTest("Blob");
const isFileList = kindOfTest("FileList");
const isStream = (val) => isObject$1(val) && isFunction(val.pipe);
const isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
const isURLSearchParams = kindOfTest("URLSearchParams");
const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn2, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i2;
  let l2;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i2 = 0, l2 = obj.length; i2 < l2; i2++) {
      fn2.call(null, obj[i2], i2, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i2 = 0; i2 < len; i2++) {
      key = keys[i2];
      fn2.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i2 = keys.length;
  let _key;
  while (i2-- > 0) {
    _key = keys[i2];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
const _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
const isContextDefined = (context) => !isUndefined$1(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
    arguments[i2] && forEach(arguments[i2], assignValue);
  }
  return result;
}
const extend = (a2, b3, thisArg, { allOwnKeys } = {}) => {
  forEach(b3, (val, key) => {
    if (thisArg && isFunction(val)) {
      a2[key] = bind(val, thisArg);
    } else {
      a2[key] = val;
    }
  }, { allOwnKeys });
  return a2;
};
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
const inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
const toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i2;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i2 = props.length;
    while (i2-- > 0) {
      prop = props[i2];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
const toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i2 = thing.length;
  if (!isNumber(i2))
    return null;
  const arr = new Array(i2);
  while (i2-- > 0) {
    arr[i2] = thing[i2];
  }
  return arr;
};
const isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
const forEachEntry = (obj, fn2) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn2.call(obj, pair[0], pair[1]);
  }
};
const matchAll = (regExp, str) => {
  let matches2;
  const arr = [];
  while ((matches2 = regExp.exec(str)) !== null) {
    arr.push(matches2);
  }
  return arr;
};
const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer2(m2, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
const hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
const isRegExp = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
const noop = () => {
};
const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
const ALPHA = "abcdefghijklmnopqrstuvwxyz";
const DIGIT = "0123456789";
const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
const generateString = (size2 = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size2--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
const toJSONObject = (obj) => {
  const stack2 = new Array(10);
  const visit2 = (source, i2) => {
    if (isObject$1(source)) {
      if (stack2.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack2[i2] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit2(value, i2 + 1);
          !isUndefined$1(reducedValue) && (target[key] = reducedValue);
        });
        stack2[i2] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit2(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing) => thing && (isObject$1(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
const utils = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject: isObject$1,
  isPlainObject,
  isUndefined: isUndefined$1,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};
function AxiosError(message, code2, config2, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code2 && (this.code = code2);
  config2 && (this.config = config2);
  request && (this.request = request);
  response && (this.response = response);
}
utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
const prototype$1 = AxiosError.prototype;
const descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code2) => {
  descriptors[code2] = { value: code2 };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, "isAxiosError", { value: true });
AxiosError.from = (error, code2, config2, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);
  utils.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code2, config2, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
const httpAdapter = null;
function isVisitable(thing) {
  return utils.isPlainObject(thing) || utils.isArray(thing);
}
function removeBrackets(key) {
  return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i2) {
    token = removeBrackets(token);
    return !dots && i2 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new FormData();
  options = utils.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils.isSpecCompliantForm(formData);
  if (!utils.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils.isBlob(value)) {
      throw new AxiosError("Blob is not supported. Use a Buffer instead.");
    }
    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, "[]")) && (arr = utils.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el2, index) {
          !(utils.isUndefined(el2) || el2 === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el2)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack2 = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils.isUndefined(value))
      return;
    if (stack2.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack2.push(value);
    utils.forEach(value, function each(el2, key) {
      const result = !(utils.isUndefined(el2) || el2 === null) && visitor.call(
        formData,
        el2,
        utils.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el2, path ? path.concat(key) : [key]);
      }
    });
    stack2.pop();
  }
  if (!utils.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
function encode$1(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer2(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}
class InterceptorManager {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id2) {
    if (this.handlers[id2]) {
      this.handlers[id2] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn2) {
    utils.forEach(this.handlers, function forEachHandler(h2) {
      if (h2 !== null) {
        fn2(h2);
      }
    });
  }
}
const InterceptorManager$1 = InterceptorManager;
const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
const isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
})();
const isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
const platform = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: Blob$1
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ["http", "https", "file", "blob", "url", "data"]
};
function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
function parsePropPath(name) {
  return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i2;
  const len = keys.length;
  let key;
  for (i2 = 0; i2 < len; i2++) {
    key = keys[i2];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
    const obj = {};
    utils.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
const DEFAULT_CONTENT_TYPE = {
  "Content-Type": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
  transitional: transitionalDefaults,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils.isObject(data);
    if (isObjectPayload && utils.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }
    if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw AxiosError.from(e2, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e2;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
const defaults$1 = defaults;
const ignoreDuplicateOf = utils.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
const parseHeaders = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i2;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i2 = line.indexOf(":");
    key = line.substring(0, i2).trim().toLowerCase();
    val = line.substring(i2 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};
const $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils.isString(value))
    return;
  if (utils.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader2(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader2(_value, _header, _rewrite));
    if (utils.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else {
      header != null && setHeader2(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i2 = keys.length;
    let deleted = false;
    while (i2--) {
      const key = keys[i2];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format2) {
    const self2 = this;
    const headers = {};
    utils.forEach(this, (value, header) => {
      const key = utils.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format2 ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed2 = new this(first);
    targets.forEach((target) => computed2.set(target));
    return computed2;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype2 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype2, _header);
        accessors[lHeader] = true;
      }
    }
    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
}
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils.freezeMethods(AxiosHeaders.prototype);
utils.freezeMethods(AxiosHeaders);
const AxiosHeaders$1 = AxiosHeaders;
function transformData(fns, response) {
  const config2 = this || defaults$1;
  const context = response || config2;
  const headers = AxiosHeaders$1.from(context.headers);
  let data = context.data;
  utils.forEach(fns, function transform(fn2) {
    data = fn2.call(config2, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
function CanceledError(message, config2, request) {
  AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config2, request);
  this.name = "CanceledError";
}
utils.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});
function settle(resolve2, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve2(response);
  } else {
    reject(new AxiosError(
      "Request failed with status code " + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
const cookies = platform.isStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        const cookie = [];
        cookie.push(name + "=" + encodeURIComponent(value));
        if (utils.isNumber(expires)) {
          cookie.push("expires=" + new Date(expires).toGMTString());
        }
        if (utils.isString(path)) {
          cookie.push("path=" + path);
        }
        if (utils.isString(domain)) {
          cookie.push("domain=" + domain);
        }
        if (secure === true) {
          cookie.push("secure");
        }
        document.cookie = cookie.join("; ");
      },
      read: function read2(name) {
        const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove2(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    };
  }()
) : (
  // Non standard browser env (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return {
      write: function write() {
      },
      read: function read2() {
        return null;
      },
      remove: function remove2() {
      }
    };
  }()
);
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
const isURLSameOrigin = platform.isStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv2() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin2(requestURL) {
      const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv2() {
    return function isURLSameOrigin2() {
      return true;
    };
  }()
);
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}
function speedometer(samplesCount, min2) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min2 = min2 !== void 0 ? min2 : 1e3;
  return function push(chunkLength) {
    const now2 = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now2;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now2;
    let i2 = tail;
    let bytesCount = 0;
    while (i2 !== head) {
      bytesCount += bytes[i2++];
      i2 = i2 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now2 - firstSampleTS < min2) {
      return;
    }
    const passed = startedAt && now2 - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);
  return (e2) => {
    const loaded2 = e2.loaded;
    const total = e2.lengthComputable ? e2.total : void 0;
    const progressBytes = loaded2 - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded2 <= total;
    bytesNotified = loaded2;
    const data = {
      loaded: loaded2,
      total,
      progress: total ? loaded2 / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded2) / rate : void 0,
      event: e2
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
const xhrAdapter = isXHRAdapterSupported && function(config2) {
  return new Promise(function dispatchXhrRequest(resolve2, reject) {
    let requestData = config2.data;
    const requestHeaders = AxiosHeaders$1.from(config2.headers).normalize();
    const responseType = config2.responseType;
    let onCanceled;
    function done() {
      if (config2.cancelToken) {
        config2.cancelToken.unsubscribe(onCanceled);
      }
      if (config2.signal) {
        config2.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils.isFormData(requestData)) {
      if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else {
        requestHeaders.setContentType("multipart/form-data;", false);
      }
    }
    let request = new XMLHttpRequest();
    if (config2.auth) {
      const username = config2.auth.username || "";
      const password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config2.baseURL, config2.url);
    request.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
    request.timeout = config2.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders$1.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config2,
        request
      };
      settle(function _resolve(value) {
        resolve2(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config2, request));
      request = null;
    };
    request.onerror = function handleError2() {
      reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config2.transitional || transitionalDefaults;
      if (config2.timeoutErrorMessage) {
        timeoutErrorMessage = config2.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config2,
        request
      ));
      request = null;
    };
    if (platform.isStandardBrowserEnv) {
      const xsrfValue = (config2.withCredentials || isURLSameOrigin(fullPath)) && config2.xsrfCookieName && cookies.read(config2.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config2.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils.isUndefined(config2.withCredentials)) {
      request.withCredentials = !!config2.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config2.responseType;
    }
    if (typeof config2.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config2.onDownloadProgress, true));
    }
    if (typeof config2.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config2.onUploadProgress));
    }
    if (config2.cancelToken || config2.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config2, request) : cancel);
        request.abort();
        request = null;
      };
      config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
      if (config2.signal) {
        config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config2));
      return;
    }
    request.send(requestData || null);
  });
};
const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter
};
utils.forEach(knownAdapters, (fn2, value) => {
  if (fn2) {
    try {
      Object.defineProperty(fn2, "name", { value });
    } catch (e2) {
    }
    Object.defineProperty(fn2, "adapterName", { value });
  }
});
const adapters = {
  getAdapter: (adapters2) => {
    adapters2 = utils.isArray(adapters2) ? adapters2 : [adapters2];
    const { length } = adapters2;
    let nameOrAdapter;
    let adapter;
    for (let i2 = 0; i2 < length; i2++) {
      nameOrAdapter = adapters2[i2];
      if (adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError(
          `Adapter ${nameOrAdapter} is not supported by the environment`,
          "ERR_NOT_SUPPORT"
        );
      }
      throw new Error(
        utils.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
      );
    }
    if (!utils.isFunction(adapter)) {
      throw new TypeError("adapter is not a function");
    }
    return adapter;
  },
  adapters: knownAdapters
};
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new CanceledError(null, config2);
  }
}
function dispatchRequest(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = AxiosHeaders$1.from(config2.headers);
  config2.data = transformData.call(
    config2,
    config2.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
    config2.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters.getAdapter(config2.adapter || defaults$1.adapter);
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData.call(
      config2,
      config2.transformResponse,
      response
    );
    response.headers = AxiosHeaders$1.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config2,
          config2.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config3 = {};
  function getMergedValue(target, source, caseless) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge.call({ caseless }, target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b3, caseless) {
    if (!utils.isUndefined(b3)) {
      return getMergedValue(a2, b3, caseless);
    } else if (!utils.isUndefined(a2)) {
      return getMergedValue(void 0, a2, caseless);
    }
  }
  function valueFromConfig2(a2, b3) {
    if (!utils.isUndefined(b3)) {
      return getMergedValue(void 0, b3);
    }
  }
  function defaultToConfig2(a2, b3) {
    if (!utils.isUndefined(b3)) {
      return getMergedValue(void 0, b3);
    } else if (!utils.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b3, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b3);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b3) => mergeDeepProperties(headersToObject(a2), headersToObject(b3), true)
  };
  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
}
const VERSION = "1.4.0";
const validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
  validators$1[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
  };
});
const deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i2 = keys.length;
  while (i2-- > 0) {
    const opt = keys[i2];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}
const validator = {
  assertOptions,
  validators: validators$1
};
const validators = validator.validators;
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager$1(),
      response: new InterceptorManager$1()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config2) {
    if (typeof configOrUrl === "string") {
      config2 = config2 || {};
      config2.url = configOrUrl;
    } else {
      config2 = configOrUrl || {};
    }
    config2 = mergeConfig(this.defaults, config2);
    const { transitional: transitional2, paramsSerializer, headers } = config2;
    if (transitional2 !== void 0) {
      validator.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils.isFunction(paramsSerializer)) {
        config2.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }
    config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils.merge(
      headers.common,
      headers[config2.method]
    );
    contextHeaders && utils.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i2 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config2);
      while (i2 < len) {
        promise = promise.then(chain[i2++], chain[i2++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config2;
    i2 = 0;
    while (i2 < len) {
      const onFulfilled = requestInterceptorChain[i2++];
      const onRejected = requestInterceptorChain[i2++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i2 = 0;
    len = responseInterceptorChain.length;
    while (i2 < len) {
      promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
    }
    return promise;
  }
  getUri(config2) {
    config2 = mergeConfig(this.defaults, config2);
    const fullPath = buildFullPath(config2.baseURL, config2.url);
    return buildURL(fullPath, config2.params, config2.paramsSerializer);
  }
}
utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config2) {
    return this.request(mergeConfig(config2 || {}, {
      method,
      url,
      data: (config2 || {}).data
    }));
  };
});
utils.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config2) {
      return this.request(mergeConfig(config2 || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
const Axios$1 = Axios;
class CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve2) {
      resolvePromise = resolve2;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i2 = token._listeners.length;
      while (i2-- > 0) {
        token._listeners[i2](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve2) => {
        token.subscribe(resolve2);
        _resolve = resolve2;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config2, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError(message, config2, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token,
      cancel
    };
  }
}
const CancelToken$1 = CancelToken;
function spread(callback) {
  return function wrap2(arr) {
    return callback.apply(null, arr);
  };
}
function isAxiosError(payload) {
  return utils.isObject(payload) && payload.isAxiosError === true;
}
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
const HttpStatusCode$1 = HttpStatusCode;
function createInstance(defaultConfig2) {
  const context = new Axios$1(defaultConfig2);
  const instance = bind(Axios$1.prototype.request, context);
  utils.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
  utils.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig2, instanceConfig));
  };
  return instance;
}
const axios = createInstance(defaults$1);
axios.Axios = Axios$1;
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;
axios.AxiosError = AxiosError;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = (thing) => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;
const axios$1 = axios;
const axiosInstance = axios$1.create({
  baseURL: "https://cat-fact.herokuapp.com/"
});
const setHeader = (key, value) => {
  axiosInstance.defaults.headers.common[key] = value;
};
const checkResponseSchema = (response, schema) => {
  const parsed = schema.parse(response);
  return parsed;
};
const get$1 = async ({ url, schema, options }) => {
  const response = await axiosInstance.get(url, options);
  if (!schema)
    return response.data;
  const parsed = checkResponseSchema(response.data, schema);
  return parsed;
};
const post = async ({ url, schema, options, data }) => {
  const response = await axiosInstance.post(url, data, options);
  if (!schema)
    return response.data;
  const parsed = checkResponseSchema(response.data, schema);
  return parsed;
};
const put = async ({ url, schema, options, data }) => {
  const response = await axiosInstance.put(url, data, options);
  if (!schema)
    return response.data;
  const parsed = checkResponseSchema(response.data, schema);
  return parsed;
};
const http = {
  get: get$1,
  post,
  put,
  setHeader
};
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
    const filtered = {};
    for (const k2 of validKeys) {
      filtered[k2] = obj[k2];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e2) {
      return obj[e2];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator2 = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator2);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_2, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
const getParsedType = (data) => {
  const t2 = typeof data;
  switch (t2) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
const ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
const quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i2 = 0;
          while (i2 < issue.path.length) {
            const el2 = issue.path[i2];
            const terminal = i2 === issue.path.length - 1;
            if (!terminal) {
              curr[el2] = curr[el2] || { _errors: [] };
            } else {
              curr[el2] = curr[el2] || { _errors: [] };
              curr[el2]._errors.push(mapper(issue));
            }
            curr = curr[el2];
            i2++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
}
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
const errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
let overrideErrorMap = errorMap;
function setErrorMap(map2) {
  overrideErrorMap = map2;
}
function getErrorMap() {
  return overrideErrorMap;
}
const makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  let errorMessage = "";
  const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
  for (const map2 of maps) {
    errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      getErrorMap(),
      errorMap
      // then global default map
    ].filter((x2) => !!x2)
  });
  ctx.common.issues.push(issue);
}
class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s3 of results) {
      if (s3.status === "aborted")
        return INVALID;
      if (s3.status === "dirty")
        status.dirty();
      arrayValue.push(s3.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (typeof value.value !== "undefined" || pair.alwaysSet) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
const INVALID = Object.freeze({
  status: "aborted"
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x2) => x2.status === "aborted";
const isDirty = (x2) => x2.status === "dirty";
const isValid = (x2) => x2.status === "valid";
const isAsync = (x2) => typeof Promise !== "undefined" && x2 instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
}
const handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    if (typeof ctx.data === "undefined") {
      return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
    }
    return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
class ZodType {
  constructor(def2) {
    this.spa = this.safeParseAsync;
    this._def = def2;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a2;
    const ctx = {
      common: {
        issues: [],
        async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def2) {
    const defaultValueFunc = typeof def2 === "function" ? def2 : () => def2;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def2) {
    const catchValueFunc = typeof def2 === "function" ? def2 : () => def2;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
const emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
const datetimeRegex = (args) => {
  if (args.precision) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
    }
  } else if (args.precision === 0) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
    }
  } else {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
    }
  }
};
function isValidIP(ip2, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip2)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip2)) {
    return true;
  }
  return false;
}
class ZodString extends ZodType {
  constructor() {
    super(...arguments);
    this._regex = (regex2, validation, message) => this.refinement((data) => regex2.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
    this.trim = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
    this.toLowerCase = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
    this.toUpperCase = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(
        ctx2,
        {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        }
        //
      );
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a2) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex2 = datetimeRegex(check);
        if (!regex2.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a2;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a2 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a2 !== void 0 ? _a2 : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  regex(regex2, message) {
    return this._addCheck({
      kind: "regex",
      regex: regex2,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch2) => ch2.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((ch2) => ch2.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch2) => ch2.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch2) => ch2.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch2) => ch2.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch2) => ch2.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch2) => ch2.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch2) => ch2.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch2) => ch2.kind === "ip");
  }
  get minLength() {
    let min2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "min") {
        if (min2 === null || ch2.value > min2)
          min2 = ch2.value;
      }
    }
    return min2;
  }
  get maxLength() {
    let max2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "max") {
        if (max2 === null || ch2.value < max2)
          max2 = ch2.value;
      }
    }
    return max2;
  }
}
ZodString.create = (params) => {
  var _a2;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "min") {
        if (min2 === null || ch2.value > min2)
          min2 = ch2.value;
      }
    }
    return min2;
  }
  get maxValue() {
    let max2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "max") {
        if (max2 === null || ch2.value < max2)
          max2 = ch2.value;
      }
    }
    return max2;
  }
  get isInt() {
    return !!this._def.checks.find((ch2) => ch2.kind === "int" || ch2.kind === "multipleOf" && util.isInteger(ch2.value));
  }
  get isFinite() {
    let max2 = null, min2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "finite" || ch2.kind === "int" || ch2.kind === "multipleOf") {
        return true;
      } else if (ch2.kind === "min") {
        if (min2 === null || ch2.value > min2)
          min2 = ch2.value;
      } else if (ch2.kind === "max") {
        if (max2 === null || ch2.value < max2)
          max2 = ch2.value;
      }
    }
    return Number.isFinite(min2) && Number.isFinite(max2);
  }
}
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
class ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "min") {
        if (min2 === null || ch2.value > min2)
          min2 = ch2.value;
      }
    }
    return min2;
  }
  get maxValue() {
    let max2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "max") {
        if (max2 === null || ch2.value < max2)
          max2 = ch2.value;
      }
    }
    return max2;
  }
}
ZodBigInt.create = (params) => {
  var _a2;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
class ZodBoolean extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
class ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "min") {
        if (min2 === null || ch2.value > min2)
          min2 = ch2.value;
      }
    }
    return min2 != null ? new Date(min2) : null;
  }
  get maxDate() {
    let max2 = null;
    for (const ch2 of this._def.checks) {
      if (ch2.kind === "max") {
        if (max2 === null || ch2.value < max2)
          max2 = ch2.value;
      }
    }
    return max2 != null ? new Date(max2) : null;
  }
}
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
class ZodSymbol extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
class ZodUndefined extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
class ZodNull extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
class ZodAny extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
class ZodUnknown extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
class ZodNever extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
}
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
class ZodVoid extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
class ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def2 = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def2.exactLength !== null) {
      const tooBig = ctx.data.length > def2.exactLength.value;
      const tooSmall = ctx.data.length < def2.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def2.exactLength.value : void 0,
          maximum: tooBig ? def2.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def2.exactLength.message
        });
        status.dirty();
      }
    }
    if (def2.minLength !== null) {
      if (ctx.data.length < def2.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def2.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def2.minLength.message
        });
        status.dirty();
      }
    }
    if (def2.maxLength !== null) {
      if (ctx.data.length > def2.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def2.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def2.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i2) => {
        return def2.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i2) => {
      return def2.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
class ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          syncPairs.push({
            key,
            value: await pair.value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a2, _b, _c2, _d2;
          const defaultError = (_c2 = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c2 !== void 0 ? _c2 : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d2 = errorUtil.errToObj(message).message) !== null && _d2 !== void 0 ? _d2 : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
}
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
class ZodUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
}
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
const getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return Object.keys(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else {
    return null;
  }
};
class ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
}
function mergeValues(a2, b3) {
  const aType = getParsedType(a2);
  const bType = getParsedType(b3);
  if (a2 === b3) {
    return { valid: true, data: a2 };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b3);
    const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a2, ...b3 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a2[key], b3[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a2.length !== b3.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a2.length; index++) {
      const itemA = a2[index];
      const itemB = b3[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b3) {
    return { valid: true, data: a2 };
  } else {
    return { valid: false };
  }
}
class ZodIntersection extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
}
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
class ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x2) => !!x2);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
}
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
class ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}
class ZodMap extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
}
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
class ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def2 = this._def;
    if (def2.minSize !== null) {
      if (ctx.data.size < def2.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def2.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def2.minSize.message
        });
        status.dirty();
      }
    }
    if (def2.maxSize !== null) {
      if (ctx.data.size > def2.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def2.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def2.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size2, message) {
    return this.min(size2, message).max(size2, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
class ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x2) => !!x2),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x2) => !!x2),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn2 = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      return OK(async (...args) => {
        const error = new ZodError([]);
        const parsedArgs = await this._def.args.parseAsync(args, params).catch((e2) => {
          error.addIssue(makeArgsIssue(args, e2));
          throw error;
        });
        const result = await fn2(...parsedArgs);
        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e2) => {
          error.addIssue(makeReturnsIssue(result, e2));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      return OK((...args) => {
        const parsedArgs = this._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = fn2(...parsedArgs.data);
        const parsedReturns = this._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
}
class ZodLazy extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
}
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
class ZodLiteral extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
}
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
class ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values) {
    return ZodEnum.create(values);
  }
  exclude(values) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
  }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
}
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
class ZodPromise extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
}
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
class ZodEffects extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data);
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
}
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
class ZodOptional extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
class ZodNullable extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
class ZodDefault extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
class ZodCatch extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
}
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
class ZodNaN extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
}
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a2, b3) {
    return new ZodPipeline({
      in: a2,
      out: b3,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
}
const custom = (check, params = {}, fatal) => {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a2, _b;
      if (!check(data)) {
        const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a2 = p2.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b !== void 0 ? _b : true;
        const p22 = typeof p2 === "string" ? { message: p2 } : p2;
        ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
      }
    });
  return ZodAny.create();
};
const late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
const NEVER = INVALID;
var z$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});
const factSchema = z$1.object({
  status: z$1.object({
    verified: z$1.boolean(),
    sentCount: z$1.number(),
    feedback: z$1.string().optional()
  }),
  _id: z$1.string(),
  user: z$1.string(),
  text: z$1.string(),
  __v: z$1.number(),
  source: z$1.string(),
  updatedAt: z$1.string().transform((str) => new Date(str)),
  type: z$1.string().optional(),
  createdAt: z$1.string().transform((str) => new Date(str)),
  deleted: z$1.boolean(),
  used: z$1.boolean()
});
const getFacts = async () => {
  return http.get({
    url: "/facts",
    schema: factSchema.array()
  });
};
const useFacts = () => {
  return useQuery({
    queryKey: ["facts"],
    queryFn: getFacts
  });
};
var QueryKey = /* @__PURE__ */ ((QueryKey2) => {
  QueryKey2["FACTS"] = "facts";
  return QueryKey2;
})(QueryKey || {});
const queryFunctions = {
  [
    "facts"
    /* FACTS */
  ]: getFacts
};
const exampleRouter = [
  {
    component: () => __vitePreload(() => import("./ExampleApiPage-17e9138a.js"), true ? ["dist/docs/assets/ExampleApiPage-17e9138a.js","dist/docs/assets/_plugin-vue_export-helper-cc2b3d55.js"] : void 0),
    name: routeNames.EXAMPLE_INDEX,
    path: "example",
    meta: {
      prefetchRoutes: [QueryKey.FACTS]
    }
  },
  {
    component: () => __vitePreload(() => import("./ExampleFormPage-24daa01d.js"), true ? ["dist/docs/assets/ExampleFormPage-24daa01d.js","dist/docs/assets/FormInputField-29640169.js","dist/docs/assets/TransitionExpand-235cdcb0.js","dist/docs/assets/_plugin-vue_export-helper-cc2b3d55.js","dist/docs/assets/generateUuid-c290b5d9.js","dist/docs/assets/useFormInputGroupContext-74e5a7b6.js","dist/docs/assets/AppButton-d7571d98.js","dist/docs/assets/fade.transition-ff73e3ee.js","dist/docs/assets/AppIcon-5add2816.js","dist/docs/assets/CheckmarkIcon-6adcc9e8.js","dist/docs/assets/CloseIcon-ef811616.js"] : void 0),
    name: routeNames.EXAMPLE_FORM,
    path: "example-form"
  }
];
const routes = [
  {
    path: "/",
    component: () => __vitePreload(() => import("./Main-a4640c14.js"), true ? ["dist/docs/assets/Main-a4640c14.js","dist/docs/assets/_plugin-vue_export-helper-cc2b3d55.js"] : void 0),
    name: routeNames.MAIN,
    children: [
      {
        component: () => __vitePreload(() => import("./Index-bcc782c4.js"), true ? ["dist/docs/assets/Index-bcc782c4.js","dist/docs/assets/_plugin-vue_export-helper-cc2b3d55.js","dist/docs/assets/generateUuid-c290b5d9.js","dist/docs/assets/AppButton-d7571d98.js","dist/docs/assets/fade.transition-ff73e3ee.js","dist/docs/assets/AppIcon-5add2816.js","dist/docs/assets/CheckmarkIcon-6adcc9e8.js","dist/docs/assets/CloseIcon-ef811616.js"] : void 0),
        name: routeNames.INDEX,
        path: ""
      },
      {
        component: () => __vitePreload(() => import("./ComponentView-a405793b.js"), true ? ["dist/docs/assets/ComponentView-a405793b.js","dist/docs/assets/_plugin-vue_export-helper-cc2b3d55.js"] : void 0),
        name: routeNames.COMPONENT,
        path: "component/:componentName"
      },
      ...exampleRouter
    ]
  }
];
const router = createRouter({
  history: createWebHistory(),
  routes
});
const setupVue3 = defineSetupVue3(({ app }) => {
  const pinia = createPinia();
  const i18n = createI18n({
    legacy: false,
    locale: "nl",
    // set locale
    fallbackLocale: "nl",
    // set fallback locale
    messages: {
      nl: resource,
      en: resource$1
    }
  });
  app.use(pinia).use(i18n).use(router);
});
const d$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  setupVue3
}, Symbol.toStringTag, { value: "Module" }));
const l = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: "Module" }));
const RenderStory = defineComponent$1({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(props, { emit: emit2 }) {
    const sandbox = ref$1();
    let mounting = false;
    let app;
    let appHooks;
    async function unmountVariant() {
      var _a2;
      if (app) {
        await ((_a2 = app.onUnmount) == null ? void 0 : _a2.call(app));
        if (appHooks) {
          for (const hook of appHooks.onUnmount) {
            await hook();
          }
        }
        app.el.parentNode.removeChild(app.el);
        app = null;
      }
    }
    async function mountVariant() {
      var _a2;
      if (mounting)
        return;
      mounting = true;
      await unmountVariant();
      app = {
        el: document.createElement("div")
      };
      if (typeof props.variant.setupApp === "function") {
        await props.variant.setupApp({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      await ((_a2 = app.onMount) == null ? void 0 : _a2.call(app));
      appHooks = {
        onUpdate: [],
        onUnmount: []
      };
      const api = {
        el: app.el,
        state: props.variant.state,
        onUpdate: (cb) => {
          appHooks.onUpdate.push(cb);
        },
        onUnmount: (cb) => {
          appHooks.onUnmount.push(cb);
        }
      };
      const onMount = props.variant.slots()[props.slotName];
      await onMount(api);
      sandbox.value.appendChild(app.el);
      emit2("ready");
    }
    onMounted$1(async () => {
      if (props.variant.configReady) {
        await mountVariant();
      }
    });
    watch$1(() => props.variant, async (value) => {
      if (value.configReady && !mounting) {
        if (!app) {
          await mountVariant();
        }
      }
    }, {
      deep: true
    });
    watch$1(() => props.variant.state, async () => {
      if (appHooks) {
        for (const hook of appHooks.onUpdate) {
          await hook();
        }
      }
    }, {
      deep: true
    });
    onBeforeUnmount$1(() => {
      unmountVariant();
    });
    return {
      sandbox
    };
  },
  render() {
    return h$4("div", {
      ref: "sandbox"
    });
  }
});
function generateSourceCode() {
}
const client$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MountStory,
  RenderStory,
  generateSourceCode
}, Symbol.toStringTag, { value: "Module" }));
const i$1 = (s3) => s3 !== null && typeof s3 == "object";
function o$1(s3, e2 = /* @__PURE__ */ new WeakMap()) {
  const t2 = isRef(s3) ? unref(s3) : s3;
  if (typeof t2 == "symbol")
    return t2.toString();
  if (!i$1(t2))
    return t2;
  if (e2.has(t2))
    return e2.get(t2);
  if (Array.isArray(t2)) {
    const r2 = [];
    return e2.set(t2, r2), r2.push(...t2.map((n2) => o$1(n2, e2))), r2;
  } else {
    const r2 = {};
    return e2.set(t2, r2), h(t2, r2, e2), r2;
  }
}
const h = (s3, e2, t2 = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(s3).forEach((r2) => {
    e2[r2] = o$1(s3[r2], t2);
  });
};
function a(s3, e2 = /* @__PURE__ */ new WeakMap()) {
  const t2 = isRef$1(s3) ? unref$1(s3) : s3;
  if (typeof t2 == "symbol")
    return t2.toString();
  if (!i$1(t2))
    return t2;
  if (e2.has(t2))
    return e2.get(t2);
  if (Array.isArray(t2)) {
    const r2 = [];
    return e2.set(t2, r2), r2.push(...t2.map((n2) => a(n2, e2))), r2;
  } else {
    const r2 = {};
    return e2.set(t2, r2), d(t2, r2, e2), r2;
  }
}
const d = (s3, e2, t2 = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(s3).forEach((r2) => {
    e2[r2] = o$1(s3[r2], t2);
  });
};
function A$1(s3, e2) {
  let t2 = false;
  const r2 = watch$1(() => s3, (u2) => {
    u2 != null && (t2 ? t2 = false : (t2 = true, applyState(e2, a(u2))));
  }, {
    deep: true,
    immediate: true
  }), n2 = watch(() => e2, (u2) => {
    u2 != null && (t2 ? t2 = false : (t2 = true, applyState(s3, o$1(u2))));
  }, {
    deep: true,
    immediate: true
  });
  return {
    stop() {
      r2(), n2();
    }
  };
}
const v$1 = defineComponent({
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Variant",
  __histoireType: "variant",
  props: {
    initState: {
      type: Function,
      default: null
    },
    source: {
      type: String,
      default: null
    },
    responsiveDisabled: {
      type: Boolean,
      default: false
    },
    autoPropsDisabled: {
      type: Boolean,
      default: false
    },
    setupApp: {
      type: Function,
      default: null
    }
  },
  async setup(t2) {
    const e2 = useAttrs(), n2 = getCurrentInstance(), i2 = inject("implicitState");
    if (typeof t2.initState == "function") {
      const s3 = await t2.initState();
      applyState(e2.variant.state, o$1(s3));
    }
    A$1(e2.variant.state, i2());
    function a2() {
      Object.assign(e2.variant, {
        slots: () => n2.proxy.$slots,
        source: t2.source,
        responsiveDisabled: t2.responsiveDisabled,
        autoPropsDisabled: t2.autoPropsDisabled,
        setupApp: t2.setupApp,
        configReady: true
      });
    }
    return a2(), {
      updateVariant: a2
    };
  },
  render() {
    return this.updateVariant(), null;
  }
});
const R$1 = defineComponent({
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Story",
  __histoireType: "story",
  inheritAttrs: false,
  props: {
    initState: {
      type: Function,
      default: null
    }
  },
  setup() {
    const p2 = getCurrentInstance(), a2 = useAttrs(), f2 = computed(() => a2.story);
    provide("story", f2);
    const s3 = p2.parent, c2 = {
      $data: s3.data
    };
    function r2(i2, t2) {
      typeof t2 == "function" || t2 != null && t2.__file || typeof (t2 == null ? void 0 : t2.render) == "function" || typeof (t2 == null ? void 0 : t2.setup) == "function" || (c2[i2] = t2);
    }
    for (const i2 in s3.exposed)
      r2(i2, s3.exposed[i2]);
    for (const i2 in s3.devtoolsRawSetupState)
      r2(i2, s3.devtoolsRawSetupState[i2]);
    provide("implicitState", () => reactive({ ...c2 }));
    function d2() {
      Object.assign(a2.story, {
        slots: () => p2.proxy.$slots
      });
    }
    return {
      story: f2,
      updateStory: d2
    };
  },
  render() {
    this.updateStory();
    const [p2] = this.story.variants;
    if (p2.id === "_default")
      return h$3(v$1, {
        variant: p2,
        initState: this.initState,
        ...this.$attrs
      }, this.$slots);
    let a2 = 0;
    const f2 = (c2) => {
      var d2, i2, t2, y2, h2, S2;
      const r2 = [];
      for (const o2 of c2)
        if (((d2 = o2.type) == null ? void 0 : d2.__histoireType) === "variant") {
          const e2 = {};
          if (e2.variant = this.story.variants[a2], !e2.variant)
            continue;
          !((i2 = o2.props) != null && i2.initState) && !((t2 = o2.props) != null && t2["init-state"]) && (e2.initState = this.initState);
          for (const n2 in this.$attrs)
            typeof ((y2 = o2.props) == null ? void 0 : y2[n2]) > "u" && (e2[n2] = this.$attrs[n2]);
          for (const n2 in this.story)
            !omitInheritStoryProps.includes(n2) && typeof ((h2 = o2.props) == null ? void 0 : h2[n2]) > "u" && (e2[n2] = this.story[n2]);
          a2++, r2.push(cloneVNode(o2, e2));
        } else
          (S2 = o2.children) != null && S2.length && (o2.children = f2(o2.children)), r2.push(o2);
      return r2;
    };
    let s3 = this.$slots.default();
    return s3 = f2(s3), s3;
  }
});
function M(e2) {
  e2.component("Story", R$1), e2.component("Variant", v$1);
  for (const o2 in rm)
    e2.component(o2, A(rm[o2]));
}
function A(e2) {
  return defineComponent({
    name: e2.name,
    inheritAttrs: false,
    setup(o2, { attrs: n2 }) {
      const a2 = ref(), p2 = ref(), m2 = reactive$1({});
      function c2(l2) {
        Object.assign(m2, l2);
      }
      c2(n2), onBeforeUpdate(() => {
        c2(n2);
      });
      let t2 = [];
      const r2 = ref([]);
      function S2() {
        r2.value.forEach((l2, f2) => {
          const h2 = p2.value.querySelector(`[renderslotid="${f2}"]`);
          if (!h2)
            return;
          const s3 = a2.value.querySelector(`[slotid="${f2}"]`);
          for (; s3.firstChild; )
            s3.removeChild(s3.lastChild);
          s3.appendChild(h2);
        });
      }
      let i2;
      return onMounted(() => {
        i2 = createApp$1({
          mounted() {
            r2.value = t2, t2 = [];
          },
          updated() {
            r2.value = t2, t2 = [];
          },
          render() {
            return h$4(e2, {
              ...m2,
              key: "component"
            }, {
              default: (l2) => (t2.push(l2), h$4("div", {
                slotId: t2.length - 1
              }))
            });
          }
        }), i2.mount(a2.value);
      }), onUpdated(() => {
        S2();
      }), onBeforeUnmount(() => {
        i2.unmount();
      }), {
        el: a2,
        slotEl: p2,
        slotCalls: r2
      };
    },
    render() {
      return [
        h$3("div", {
          ref: "el"
        }),
        h$3("div", {
          ref: "slotEl"
        }, this.slotCalls.map((o2, n2) => h$3("div", {
          renderSlotId: n2
        }, this.$slots.default(o2))))
      ];
    }
  });
}
const n = {
  path: "/",
  name: void 0,
  redirectedFrom: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  href: "/"
}, c = defineComponent({
  name: "RouterLinkStub",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    custom: {
      type: Boolean,
      default: false
    }
  },
  render() {
    var e2, a2;
    const o2 = computed(() => n), r2 = (a2 = (e2 = this.$slots) == null ? void 0 : e2.default) == null ? void 0 : a2.call(e2, {
      route: o2,
      href: computed(() => o2.value.href),
      isActive: computed(() => false),
      isExactActive: computed(() => false),
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      navigate: async () => {
      }
    });
    return this.custom ? r2 : h$3("a", void 0, r2);
  }
});
const C$1 = defineComponent$1({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(o2) {
    const r2 = ref$1();
    let t2;
    async function u2() {
      t2 = createApp({
        name: "MountStorySubApp",
        render: () => h$3(Suspense, [
          h$3(o2.story.file.component, {
            story: o2.story
          })
        ])
      }), M(t2), t2.component("RouterLink", c), watch$1(() => o2.story.variants, () => {
        t2._instance.proxy.$forceUpdate();
      }), typeof (l == null ? void 0 : void 0) == "function" && await (void 0)({
        app: t2,
        story: o2.story,
        variant: null
      }), typeof (d$1 == null ? void 0 : setupVue3) == "function" && await setupVue3({
        app: t2,
        story: o2.story,
        variant: null
      });
      const i2 = document.createElement("div");
      r2.value.appendChild(i2), t2.mount(i2);
    }
    function a2() {
      t2 == null || t2.unmount();
    }
    return watch$1(() => o2.story.id, async () => {
      a2(), await u2();
    }), onMounted$1(async () => {
      await u2();
    }), onUnmounted$1(() => {
      a2();
    }), {
      el: r2
    };
  },
  render() {
    return h$4("div", {
      ref: "el"
    });
  }
});
var g = function() {
  return g = Object.assign || function(t2) {
    for (var n2, r2 = 1, a2 = arguments.length; r2 < a2; r2++) {
      n2 = arguments[r2];
      for (var o2 in n2)
        Object.prototype.hasOwnProperty.call(n2, o2) && (t2[o2] = n2[o2]);
    }
    return t2;
  }, g.apply(this, arguments);
};
function r(u2) {
  return u2.toLowerCase();
}
var R = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g], _ = /[^A-Z0-9]+/gi;
function o(a2, e2) {
  e2 === void 0 && (e2 = {});
  for (var r$12 = e2.splitRegexp, l2 = r$12 === void 0 ? R : r$12, i2 = e2.stripRegexp, f2 = i2 === void 0 ? _ : i2, d2 = e2.transform, g2 = d2 === void 0 ? r : d2, p2 = e2.delimiter, s3 = p2 === void 0 ? " " : p2, t2 = v(v(a2, l2, "$1\0$2"), f2, "\0"), c2 = 0, n2 = t2.length; t2.charAt(c2) === "\0"; )
    c2++;
  for (; t2.charAt(n2 - 1) === "\0"; )
    n2--;
  return t2.slice(c2, n2).split("\0").map(g2).join(s3);
}
function v(a2, e2, r2) {
  return e2 instanceof RegExp ? a2.replace(e2, r2) : e2.reduce(function(l2, i2) {
    return l2.replace(i2, r2);
  }, a2);
}
function f(r2, a2) {
  var e2 = r2.charAt(0), s3 = r2.substr(1).toLowerCase();
  return a2 > 0 && e2 >= "0" && e2 <= "9" ? "_" + e2 + s3 : "" + e2.toUpperCase() + s3;
}
function i(r2, a2) {
  return a2 === void 0 && (a2 = {}), o(r2, g({ delimiter: "", transform: f }, a2));
}
function m(a2, r2) {
  return r2 === 0 ? a2.toLowerCase() : f(a2, r2);
}
function C(a2, r2) {
  return r2 === void 0 && (r2 = {}), i(a2, g({ transform: m }, r2));
}
async function te(e2) {
  var _2, d2, y2, x2;
  const o2 = ((d2 = (_2 = e2.slots()).default) == null ? void 0 : d2.call(_2, { state: e2.state ?? {} })) ?? [], c2 = Array.isArray(o2) ? o2 : [o2], m2 = [];
  for (const a2 in c2) {
    const A3 = c2[a2];
    m2.push(...(await k(A3, (x2 = (y2 = e2.state) == null ? void 0 : y2._hPropState) == null ? void 0 : x2[a2])).lines);
  }
  return m2.join(`
`);
}
async function k(e2, o2 = null) {
  var d2;
  if (e2.type === Text)
    return {
      // @ts-ignore
      lines: [e2.children],
      isText: true
    };
  const c2 = [];
  if (typeof e2.type == "object" || typeof e2.type == "string") {
    let y2 = function(t2, s3, i2 = null) {
      let r2 = "";
      for (const T3 in s3.modifiers)
        s3.modifiers[T3] && (r2 += `.${T3}`);
      let u2 = "";
      s3.arg && (u2 = `:${s3.arg}`), i2 && (i2 = i2.replace(/^\$(setup|props|data)\./g, ""));
      const l2 = i2 ? [i2] : U(s3.value), f2 = [], L2 = `v-${t2}${u2}${r2}="`;
      l2.length > 1 ? (f2.push(`${L2}${l2[0]}`), f2.push(...l2.slice(1, l2.length - 1)), f2.push(`${l2[l2.length - 1]}"`), A3 = true) : f2.push(`${L2}${l2[0] ?? ""}"`), a2.push(f2);
    }, x2 = function(t2, s3) {
      var i2, r2, u2, l2;
      if (typeof s3 != "string" || (i2 = e2.dynamicProps) != null && i2.includes(t2)) {
        let f2 = ":";
        t2.startsWith("on") && (f2 = "@");
        const L2 = f2 === "@" ? `${t2[2].toLowerCase()}${t2.slice(3)}` : t2, M2 = [`onUpdate:${t2}`, `onUpdate:${C(t2)}`].find((p2) => {
          var $3;
          return (($3 = e2.dynamicProps) == null ? void 0 : $3.includes(p2)) || p2 in e2.props;
        });
        if (f2 === ":" && M2) {
          j2.push(M2);
          const $3 = e2.props[M2].toString();
          let V2;
          const B2 = /\(\$event\) => (.*?) = \$event/.exec($3);
          B2 && (V2 = B2[1]);
          const K2 = `${t2 === "modelValue" ? "model" : t2}Modifiers`, W3 = e2.props[K2] ?? {};
          j2.push(K2), y2("model", {
            arg: t2 === "modelValue" ? null : t2,
            modifiers: W3,
            value: s3
          }, V2);
          return;
        }
        if (typeof s3 > "u")
          return;
        let h2;
        if (typeof s3 == "string" && s3.startsWith("{{") && s3.endsWith("}}"))
          h2 = S(s3.substring(2, s3.length - 2).trim()).split(`
`);
        else if (typeof s3 == "function") {
          let p2 = S(s3.toString().replace(/'/g, "\\'").replace(/"/g, "'"));
          const $3 = /function ([^\s]+)\(/.exec(p2);
          $3 ? h2 = [$3[1]] : (p2.startsWith("($event) => ") && (p2 = p2.substring(12)), h2 = p2.split(`
`));
        } else
          h2 = U(s3);
        if (h2.length > 1) {
          A3 = true;
          const p2 = [`${f2}${L2}="${h2[0]}`];
          p2.push(...h2.slice(1, h2.length - 1)), p2.push(`${h2[h2.length - 1]}"`), a2.push(p2);
        } else
          a2.push([`${f2}${L2}="${h2[0]}"`]);
      } else
        ((l2 = (u2 = (r2 = e2.type) == null ? void 0 : r2.props) == null ? void 0 : u2[t2]) == null ? void 0 : l2.type) === Boolean ? a2.push([t2]) : a2.push([`${t2}="${s3}"`]);
    };
    (d2 = e2.type) != null && d2.__asyncLoader && !e2.type.__asyncResolved && await e2.type.__asyncLoader();
    const a2 = [];
    let A3 = false;
    const j2 = [
      "key"
    ];
    if (e2.dirs) {
      for (const t2 of e2.dirs)
        if (t2.dir === vModelText || t2.dir === vModelSelect || t2.dir === vModelRadio || t2.dir === vModelCheckbox || t2.dir === vModelDynamic) {
          const i2 = [`onUpdate:${t2.arg ?? "modelValue"}`, `onUpdate:${C(t2.arg ?? "modelValue")}`].find((l2) => e2.props[l2]), r2 = e2.props[i2];
          let u2 = null;
          if (r2) {
            j2.push(i2);
            const l2 = r2.toString(), f2 = /\(\$event\) => (.*?) = \$event/.exec(l2);
            f2 && (u2 = f2[1]);
          }
          y2("model", t2, u2);
        } else if (t2.instance._ || t2.instance.$) {
          const s3 = t2.instance.$ ?? t2.instance._;
          let i2;
          for (const r2 of [s3.directives, s3.appContext.directives]) {
            for (const u2 in r2)
              if (r2[u2] === t2.dir) {
                i2 = u2;
                break;
              }
            if (i2)
              break;
          }
          i2 && y2(i2, t2);
        }
    }
    for (const t2 in e2.props) {
      if (j2.includes(t2) || o2 && t2 in o2)
        continue;
      const s3 = e2.props[t2];
      x2(t2, s3);
    }
    if (o2)
      for (const t2 in o2)
        x2(t2, o2[t2]);
    a2.length > 1 && (A3 = true);
    const b3 = Q(e2);
    let w2 = false;
    const n2 = [];
    if (typeof e2.children == "string")
      b3 === "pre" ? n2.push(e2.children) : n2.push(...e2.children.split(`
`)), w2 = true;
    else if (Array.isArray(e2.children)) {
      let t2;
      for (const s3 of e2.children) {
        const i2 = await k(s3);
        if (i2.isText) {
          t2 === void 0 && (t2 = true);
          const r2 = i2.lines[0];
          !n2.length || /^\s/.test(r2) ? n2.push(r2.trim()) : n2[n2.length - 1] += r2;
        } else
          t2 === void 0 && (t2 = false), n2.push(...i2.lines);
      }
      t2 !== void 0 && (w2 = t2);
    }
    if (e2.children && typeof e2.children == "object" && !Array.isArray(e2.children)) {
      for (const t2 in e2.children)
        if (typeof e2.children[t2] == "function") {
          const s3 = createAutoBuildingObject((l2) => `{{ ${l2} }}`, (l2, f2) => {
            if (f2 === "__v_isRef")
              return () => false;
          }), i2 = e2.children[t2](s3.proxy), r2 = [];
          for (const l2 of i2)
            r2.push(...(await k(l2)).lines);
          const u2 = Object.keys(s3.cache);
          u2.length ? (n2.push(`<template #${t2}="{ ${u2.join(", ")} }">`), n2.push(...indent(r2)), n2.push("</template>")) : t2 === "default" ? n2.push(...r2) : (n2.push(`<template #${t2}>`), n2.push(...indent(r2)), n2.push("</template>"));
        }
    }
    const g2 = [`<${b3}`];
    if (A3) {
      for (const t2 of a2)
        g2.push(...indent(t2));
      n2.length > 0 && g2.push(">");
    } else
      a2.length === 1 && (g2[0] += ` ${a2[0]}`), n2.length > 0 && (g2[0] += ">");
    const R2 = voidElements.includes(b3.toLowerCase());
    n2.length > 0 ? n2.length === 1 && g2.length === 1 && !a2.length && w2 ? c2.push(`${g2[0]}${n2[0]}</${b3}>`) : (c2.push(...g2), c2.push(...indent(n2)), c2.push(`</${b3}>`)) : g2.length > 1 ? (c2.push(...g2), c2.push(R2 ? ">" : "/>")) : c2.push(`${g2[0]}${R2 ? "" : " /"}>`);
  } else if ((e2 == null ? void 0 : e2.shapeFlag) & 1 << 4)
    for (const y2 of e2.children)
      c2.push(...(await k(y2)).lines);
  return {
    lines: c2
  };
}
function Q(e2) {
  var o2, c2, m2, _2;
  if (typeof e2.type == "string")
    return e2.type;
  if ((o2 = e2.type) != null && o2.__asyncResolved) {
    const d2 = (c2 = e2.type) == null ? void 0 : c2.__asyncResolved;
    return d2.name ?? P(d2.__file);
  } else {
    if ((m2 = e2.type) != null && m2.name)
      return e2.type.name;
    if ((_2 = e2.type) != null && _2.__file)
      return P(e2.type.__file);
  }
  return "Anonymous";
}
function P(e2) {
  const o2 = /([^/]+)\.vue$/.exec(e2);
  return o2 ? i(o2[1]) : "Anonymous";
}
function U(e2) {
  const o2 = !!(e2 != null && e2.__autoBuildingObject), c2 = serializeJs(e2);
  return o2 ? [S(c2.__autoBuildingObjectGetKey)] : S(c2).split(`
`);
}
function S(e2) {
  return e2.replace(/\$setup\./g, "");
}
const z = defineComponent$1({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(t2, { emit: A3 }) {
    const m2 = ref$1();
    let r2, y2 = false;
    const o2 = reactive({});
    A$1(t2.variant.state, o2);
    function v3() {
      r2 && (r2.unmount(), r2 = null);
    }
    async function h2() {
      if (y2)
        return;
      y2 = true, v3();
      let i2;
      r2 = createApp({
        name: "RenderStorySubApp",
        setup() {
          onMounted(() => {
            y2 = false;
          });
        },
        render: () => {
          var u2, c2, e2, p2;
          const s3 = ((c2 = (u2 = t2.variant.slots()) == null ? void 0 : u2[t2.slotName]) == null ? void 0 : c2.call(u2, {
            state: o2
          })) ?? ((p2 = (e2 = t2.story.slots()) == null ? void 0 : e2[t2.slotName]) == null ? void 0 : p2.call(e2, {
            state: o2
          }));
          if (t2.slotName === "default" && !t2.variant.autoPropsDisabled) {
            const a2 = b3(s3), n2 = JSON.stringify(a2);
            (!i2 || i2 !== n2) && (applyState(t2.variant.state, {
              _hPropDefs: a2
            }), t2.variant.state._hPropState || applyState(t2.variant.state, {
              _hPropState: {}
            }), i2 = n2);
          }
          return s3;
        }
      }), M(r2), r2.component("RouterLink", c), typeof (l == null ? void 0 : void 0) == "function" && await (void 0)({
        app: r2,
        story: t2.story,
        variant: t2.variant
      }), typeof (d$1 == null ? void 0 : setupVue3) == "function" && await setupVue3({
        app: r2,
        story: t2.story,
        variant: t2.variant
      }), typeof t2.variant.setupApp == "function" && await t2.variant.setupApp({
        app: r2,
        story: t2.story,
        variant: t2.variant
      });
      const f2 = document.createElement("div");
      m2.value.appendChild(f2), r2.mount(f2), A3("ready");
    }
    function b3(i2) {
      var u2, c2;
      const f2 = [];
      let s3 = 0;
      for (const e2 of i2) {
        if (typeof e2.type == "object") {
          const p2 = [];
          for (const a2 in e2.type.props) {
            const n2 = e2.type.props[a2];
            let S2, g2;
            n2 && (S2 = (Array.isArray(n2.type) ? n2.type : typeof n2 == "function" ? [n2] : [n2.type]).map((w2) => {
              switch (w2) {
                case String:
                  return "string";
                case Number:
                  return "number";
                case Boolean:
                  return "boolean";
                case Object:
                  return "object";
                case Array:
                  return "array";
                default:
                  return "unknown";
              }
            }), g2 = typeof n2.default == "function" ? n2.default.toString() : n2.default), p2.push({
              name: a2,
              types: S2,
              required: n2 == null ? void 0 : n2.required,
              default: g2
            }), ((c2 = (u2 = o2 == null ? void 0 : o2._hPropState) == null ? void 0 : u2[s3]) == null ? void 0 : c2[a2]) != null && (e2.props || (e2.props = {}), e2.props[a2] = o2._hPropState[s3][a2], e2.dynamicProps || (e2.dynamicProps = []), e2.dynamicProps.includes(a2) || e2.dynamicProps.push(a2));
          }
          f2.push({
            name: Q(e2),
            index: s3,
            props: p2
          }), s3++;
        }
        Array.isArray(e2.children) && f2.push(...b3(e2.children));
      }
      return f2.filter((e2) => e2.props.length);
    }
    return onMounted$1(async () => {
      t2.variant.configReady && await h2();
    }), watch$1(() => t2.variant, async (i2) => {
      i2.configReady && !y2 && (r2 ? r2._instance.proxy.$forceUpdate() : await h2());
    }, {
      deep: true
    }), onBeforeUnmount$1(() => {
      v3();
    }), {
      sandbox: m2
    };
  },
  render() {
    return h$4("div", {
      ref: "sandbox"
    });
  }
});
const client = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MountStory: C$1,
  RenderStory: z,
  generateSourceCode: te,
  getTagName: Q
}, Symbol.toStringTag, { value: "Module" }));
const isObject = (value) => value !== null && typeof value === "object";
const isNullOrUndefined = (value) => value === null || value === void 0;
const isUndefined = (val) => val === void 0;
const isEmptyArray = (obj) => {
  for (const key in obj) {
    if (!isUndefined(obj[key]))
      return false;
  }
  return true;
};
const isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;
const baseGet = (object, updatePath) => {
  const length = updatePath.slice(0, -1).length;
  let index = 0;
  while (index < length)
    object = isUndefined(object) ? index++ : object[updatePath[index++]];
  return object;
};
const set = (object, path, value) => {
  let index = -1;
  const arrayPath = path.split(".");
  const length = arrayPath.length;
  const lastIndex = length - 1;
  while (++index < length) {
    const key = arrayPath[index];
    let newValue = value;
    if (index !== lastIndex) {
      const objValue = object[key];
      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+arrayPath[index + 1]) ? [] : {};
    }
    object[key] = newValue;
    object = object[key];
  }
  return object;
};
const get = (obj, path, defaultValue) => {
  const arrayPath = path.split(".");
  const result = arrayPath.reduce(
    (result2, key) => isNullOrUndefined(result2) ? result2 : result2[key],
    obj
  );
  if (isNullOrUndefined(obj))
    return void 0;
  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;
};
const unset = (object, path) => {
  const arrayPath = path.split(".");
  const childObject = arrayPath.length === 1 ? object : baseGet(object, arrayPath);
  const index = arrayPath.length - 1;
  const key = arrayPath[index];
  if (childObject) {
    if (Array.isArray(childObject)) {
      childObject.splice(+key, 1);
    } else if (isObject(childObject)) {
      const value = childObject[key];
      if (!Array.isArray(value))
        delete childObject[key];
    }
  }
  if (index !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject)))
    unset(object, arrayPath.slice(0, -1).join("."));
  return object;
};
const generateId = () => {
  let id2 = "";
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (let i2 = 0; i2 < 10; i2 += 1)
    id2 += chars.charAt(Math.floor(Math.random() * chars.length));
  return id2;
};
const useForm = (schema, initialData) => {
  const form = reactive({});
  const errors = ref({});
  const isSubmitting = ref(false);
  const isReady = ref(true);
  const hasAttemptedToSubmit = ref(false);
  const initialState = ref(initialData ? JSON.parse(JSON.stringify(initialData)) : null);
  if (initialData != null)
    Object.assign(form, initialData);
  let onSubmitCb = null;
  const isDirty2 = computed(() => {
    return JSON.stringify(form) !== JSON.stringify(initialState.value);
  });
  const isValid2 = computed(() => {
    return Object.keys(errors.value).length === 0;
  });
  const paths = reactive(/* @__PURE__ */ new Map());
  const trackedDepencies = reactive(/* @__PURE__ */ new Map());
  const registeredFields = reactive(/* @__PURE__ */ new Map());
  const registeredFieldArrays = reactive(/* @__PURE__ */ new Map());
  const getPathId = (path) => {
    var _a2;
    return ((_a2 = [...paths.entries()].find(([, p2]) => p2 === path)) == null ? void 0 : _a2[0]) ?? null;
  };
  const updatePaths = (path) => {
    const isArray2 = !Number.isNaN(path.split(".").pop());
    if (isArray2) {
      const index = parseInt(path.split(".").pop() ?? "0", 10);
      const parentPath = path.split(".").slice(0, -1).join(".");
      const matchingPaths = [...paths.entries()].filter(([, p2]) => p2.startsWith(parentPath));
      for (const [id2, p2] of matchingPaths) {
        if (!p2.startsWith(`${parentPath}.`))
          continue;
        const i2 = parseInt(p2.replace(`${parentPath}.`, ""), 10);
        if (i2 > index) {
          const newPath = `${parentPath}.${i2 - 1}`;
          const suffixPath = p2.slice(newPath.length);
          paths.set(id2, `${newPath}${suffixPath}`);
        } else if (i2 === index) {
          paths.delete(id2);
        }
      }
    } else {
      const id2 = getPathId(path);
      paths.delete(id2);
    }
  };
  const createField = (id2, defaultValue = null) => {
    const path = paths.get(id2);
    const value = get(form, path);
    if (value == null)
      set(form, path, defaultValue);
    const field = reactive({
      "_id": id2,
      "_path": path,
      "isDirty": false,
      "isTouched": false,
      "isChanged": false,
      "modelValue": value,
      "onUpdate:modelValue": (newValue) => {
        const valueOrNull = newValue === "" ? null : newValue;
        const currentPath = paths.get(id2) ?? null;
        if (currentPath === null)
          return;
        set(form, currentPath, valueOrNull);
      },
      "errors": void 0,
      "onBlur": () => {
        field.isTouched = true;
      },
      "onChange": () => {
        field.isChanged = true;
      },
      "setValue": (value2) => {
        field["onUpdate:modelValue"](value2);
      }
    });
    return field;
  };
  const createFieldArray = (id2) => {
    const path = paths.get(id2);
    const value = get(form, path);
    if (value == null)
      set(form, path, []);
    const fields = reactive([]);
    for (let i2 = 0; i2 < (value == null ? void 0 : value.length); i2++) {
      const fieldId = generateId();
      fields.push(fieldId);
    }
    const insert = (index, value2) => {
      fields[index] = generateId();
      register(`${path}.${index}`, value2);
    };
    const remove2 = (index) => {
      const currentPath = paths.get(id2);
      fields.splice(index, 1);
      unregister(`${currentPath}.${index}`);
    };
    const prepend = (value2) => {
      insert(0, value2);
    };
    const append2 = (value2) => {
      insert(fields.length, value2);
    };
    const pop = () => {
      remove2(fields.length - 1);
    };
    const shift2 = () => {
      remove2(0);
    };
    const move = (from, to2) => {
      [fields[from], fields[to2]] = [fields[to2], fields[from]];
      const currentPath = paths.get(id2);
      const currentValue = get(form, currentPath);
      const value2 = currentValue[from];
      currentValue[from] = currentValue[to2];
      currentValue[to2] = value2;
      set(form, currentPath, currentValue);
      const fromPath = `${currentPath}.${from}`;
      const toPath = `${currentPath}.${to2}`;
      const fromId = getPathId(fromPath);
      const toId = getPathId(toPath);
      for (const [id22, p2] of paths.entries()) {
        if (p2.startsWith(fromPath)) {
          const newPath = p2.replace(fromPath, toPath);
          paths.set(id22, newPath);
        } else if (p2.startsWith(toPath)) {
          const newPath = p2.replace(toPath, fromPath);
          paths.set(id22, newPath);
        }
      }
      paths.set(fromId, toPath);
      paths.set(toId, fromPath);
    };
    const empty = () => {
      for (let i2 = fields.length - 1; i2 >= 0; i2--)
        remove2(i2);
    };
    const setValue = (value2) => {
      empty();
      for (const arrayValue of value2)
        append2(arrayValue);
    };
    const fieldArray = reactive({
      _id: id2,
      _path: path,
      isDirty: false,
      modelValue: value,
      errors: void 0,
      append: append2,
      fields,
      insert,
      pop,
      prepend,
      remove: remove2,
      shift: shift2,
      move,
      empty,
      setValue
    });
    return fieldArray;
  };
  const trackFieldDepencies = (field) => {
    field._path = computed(() => paths.get(field._id) ?? null);
    const value = computed(() => {
      if (field._path == null)
        return null;
      return get(form, field._path);
    });
    field.modelValue = value;
    field.errors = computed(() => {
      if (field._path == null)
        return void 0;
      return get(errors.value, field._path);
    });
    field.isDirty = computed(() => {
      if (field._path == null)
        return false;
      return JSON.stringify(field.modelValue) !== JSON.stringify(get(initialState.value, field._path));
    });
    trackedDepencies.set(field._id, value);
  };
  const register = (path, value) => {
    var _a2;
    const existingId = getPathId(path);
    if (existingId != null) {
      const field2 = registeredFields.get(existingId);
      if (field2 == null)
        throw new Error(`Path ${path} is already registered as a field array`);
      const isTracked = ((_a2 = trackedDepencies.get(existingId)) == null ? void 0 : _a2.effect.active) ?? false;
      if (!isTracked)
        trackFieldDepencies(field2);
      return field2;
    }
    const id2 = generateId();
    paths.set(id2, path);
    const field = createField(id2, value);
    trackFieldDepencies(field);
    registeredFields.set(id2, field);
    const pathParts = path.split(".");
    for (let i2 = pathParts.length - 1; i2 >= 0; i2--) {
      const part = pathParts[i2];
      if (!isNaN(Number(part))) {
        const arrayPath = pathParts.slice(0, i2 + 1).join(".");
        register(arrayPath);
      }
    }
    return field;
  };
  const registerArray = (path) => {
    var _a2;
    const existingId = getPathId(path);
    if (existingId != null) {
      const fieldArray2 = registeredFieldArrays.get(existingId);
      if (fieldArray2 == null)
        throw new Error(`Path ${path} is already registered as a field`);
      const isTracked = ((_a2 = trackedDepencies.get(existingId)) == null ? void 0 : _a2.effect.active) ?? false;
      if (!isTracked)
        trackFieldDepencies(fieldArray2);
      return fieldArray2;
    }
    const id2 = generateId();
    paths.set(id2, path);
    const fieldArray = createFieldArray(id2);
    trackFieldDepencies(fieldArray);
    registeredFieldArrays.set(id2, fieldArray);
    return fieldArray;
  };
  const unregister = (path) => {
    const id2 = getPathId(path);
    if (id2 == null)
      return;
    updatePaths(path);
    unset(form, path);
    registeredFields.delete(id2);
    trackedDepencies.delete(id2);
    paths.delete(id2);
  };
  const setValues = (values) => {
    for (const path in values)
      set(form, path, values[path]);
  };
  const setErrors = (err) => {
    const mergeErrors = (existingErrors, err2) => {
      for (const key in err2) {
        if (key === "_errors") {
          existingErrors[key] = err2[key];
        } else {
          if (existingErrors[key] == null) {
            existingErrors[key] = {
              _errors: []
            };
          }
          mergeErrors(existingErrors[key], err2[key]);
        }
      }
    };
    mergeErrors(errors.value, err);
  };
  const blurAll = () => {
    for (const field of registeredFields.values())
      field.onBlur();
  };
  const submit = async () => {
    hasAttemptedToSubmit.value = true;
    blurAll();
    if (!isValid2.value)
      return;
    isSubmitting.value = true;
    if (onSubmitCb == null)
      throw new Error("Attempted to submit form but `onSubmitForm` callback is not registered");
    const customErrors = await (onSubmitCb == null ? void 0 : onSubmitCb(schema.parse(form)));
    if (errors.value != null)
      Object.assign(errors.value, customErrors);
    isSubmitting.value = false;
    initialState.value = JSON.parse(JSON.stringify(form));
  };
  const onSubmitForm = (cb) => {
    onSubmitCb = cb;
  };
  watch(form, async () => {
    try {
      await schema.parseAsync(form);
      errors.value = {};
    } catch (e2) {
      if (e2 instanceof z$1.ZodError)
        errors.value = e2.format();
    }
  }, {
    deep: true,
    immediate: true
  });
  return {
    // onInitForm,
    onSubmitForm,
    form: reactive({
      _state: readonly(form),
      errors,
      isDirty: isDirty2,
      isReady,
      isSubmitting,
      hasAttemptedToSubmit,
      isValid: isValid2,
      register,
      registerArray,
      submit,
      unregister,
      setValues,
      setErrors
    })
  };
};
let activeHead;
function getActiveHead() {
  return activeHead;
}
function resolveUnref(r2) {
  return typeof r2 === "function" ? r2() : unref(r2);
}
function resolveUnrefHeadInput(ref2, lastKey = "") {
  if (ref2 instanceof Promise)
    return ref2;
  const root = resolveUnref(ref2);
  if (!ref2 || !root)
    return root;
  if (Array.isArray(root))
    return root.map((r2) => resolveUnrefHeadInput(r2, lastKey));
  if (typeof root === "object") {
    return Object.fromEntries(
      Object.entries(root).map(([k2, v3]) => {
        if (k2 === "titleTemplate" || k2.startsWith("on"))
          return [k2, unref(v3)];
        return [k2, resolveUnrefHeadInput(v3, k2)];
      })
    );
  }
  return root;
}
const IsBrowser = typeof window !== "undefined";
const headSymbol = "usehead";
function injectHead() {
  return getCurrentInstance() && inject(headSymbol) || getActiveHead();
}
function clientUseHead(input, options = {}) {
  const head = injectHead();
  const deactivated = ref(false);
  const resolvedInput = ref({});
  watchEffect(() => {
    resolvedInput.value = deactivated.value ? {} : resolveUnrefHeadInput(input);
  });
  const entry = head.push(resolvedInput.value, options);
  watch(resolvedInput, (e2) => {
    entry.patch(e2);
  });
  const vm = getCurrentInstance();
  if (vm) {
    onBeforeUnmount(() => {
      entry.dispose();
    });
    onDeactivated(() => {
      deactivated.value = true;
    });
    onActivated(() => {
      deactivated.value = false;
    });
  }
  return entry;
}
function serverUseHead(input, options = {}) {
  const head = injectHead();
  return head.push(input, options);
}
function useHead(input, options = {}) {
  var _a2;
  const head = injectHead();
  if (head) {
    const isBrowser2 = IsBrowser || !!((_a2 = head.resolvedOptions) == null ? void 0 : _a2.document);
    if (options.mode === "server" && isBrowser2 || options.mode === "client" && !isBrowser2)
      return;
    return isBrowser2 ? clientUseHead(input, options) : serverUseHead(input, options);
  }
}
export {
  mergeProps$1 as $,
  pushScopeId$1 as A,
  popScopeId$1 as B,
  defineAsyncComponent$1 as C,
  vShow as D,
  reactive$1 as E,
  Fragment$1 as F,
  normalizeStyle$1 as G,
  useTitle as H,
  Icon as I,
  onMounted$1 as J,
  createApp$1 as K,
  createPinia$1 as L,
  plugin as M,
  parseQuery$1 as N,
  h$4 as O,
  applyState as P,
  Comp21 as Q,
  defineAsyncComponent as R,
  createRouter$1 as S,
  Transition$1 as T,
  createWebHistory$1 as U,
  createWebHashHistory as V,
  useDark as W,
  useToggle as X,
  markRaw$1 as Y,
  watchEffect$1 as Z,
  __vitePreload as _,
  unref$1 as a,
  getCurrentInstance as a$,
  resolveDynamicComponent$1 as a0,
  toRefs$1 as a1,
  unindent as a2,
  useRouter$1 as a3,
  useResizeObserver$1 as a4,
  Xg as a5,
  withModifiers$1 as a6,
  renderSlot$1 as a7,
  vModelText$1 as a8,
  onUnmounted$1 as a9,
  createVNode as aA,
  createBaseVNode as aB,
  renderSlot as aC,
  normalizeClass as aD,
  createTextVNode as aE,
  ref as aF,
  mergeProps as aG,
  createCommentVNode as aH,
  resolveDynamicComponent as aI,
  Ue$1 as aJ,
  Ge as aK,
  Ve as aL,
  he as aM,
  Se as aN,
  useMouseInElement as aO,
  createElementBlock as aP,
  RouterLink as aQ,
  useSlots as aR,
  computed as aS,
  toDisplayString$1 as aT,
  inject as aU,
  Fragment as aV,
  renderList as aW,
  TransitionGroup as aX,
  createApp as aY,
  h$3 as aZ,
  useI18n as a_,
  VTooltip as aa,
  createStaticVNode as ab,
  toRaw$1 as ac,
  Dropdown as ad,
  clone as ae,
  omit$1 as af,
  useTimeoutFn as ag,
  onClickOutside as ah,
  nextTick$1 as ai,
  Zg as aj,
  zg as ak,
  jg as al,
  Wg as am,
  shallowRef$1 as an,
  getHighlighter as ao,
  onBeforeUnmount$1 as ap,
  scrollIntoView as aq,
  useMediaQuery as ar,
  defineComponent as as,
  Q$2 as at,
  V as au,
  X as av,
  resolveComponent as aw,
  openBlock as ax,
  createBlock as ay,
  withCtx as az,
  useRoute$1 as b,
  useForm as b$,
  watch as b0,
  provide as b1,
  unref as b2,
  nextTick as b3,
  onMounted as b4,
  normalizeStyle as b5,
  xe as b6,
  Ie$1 as b7,
  Se$1 as b8,
  ge$1 as b9,
  onKeyStroke as bA,
  useElementBounding as bB,
  reactive as bC,
  je$1 as bD,
  ge$2 as bE,
  We as bF,
  Qe as bG,
  useCssVars as bH,
  cva as bI,
  mergeModels as bJ,
  useModel as bK,
  withDirectives as bL,
  vModelDynamic as bM,
  useFocus$1 as bN,
  refDebounced as bO,
  flexsearch_bundleExports as bP,
  useRouter as bQ,
  useQueryClient as bR,
  useElementVisibility as bS,
  useElementHover as bT,
  queryFunctions as bU,
  withModifiers as bV,
  useHead as bW,
  routeNames as bX,
  useRoute as bY,
  useFacts as bZ,
  z$1 as b_,
  ye as ba,
  watchDebounced as bb,
  normalizeProps as bc,
  guardReactiveProps as bd,
  Transition as be,
  Teleport as bf,
  offset as bg,
  flip as bh,
  shift as bi,
  computePosition as bj,
  ue as bk,
  ke as bl,
  we as bm,
  Ee as bn,
  Ie as bo,
  Ke as bp,
  qe as bq,
  Je as br,
  Ue$2 as bs,
  _e as bt,
  pushScopeId as bu,
  popScopeId as bv,
  useMouse as bw,
  onUnmounted as bx,
  useMousePressed as by,
  useFocus as bz,
  computed$2 as c,
  client$1 as c0,
  client as c1,
  defineComponent$1 as d,
  createElementBlock$1 as e,
  createVNode$1 as f,
  createBaseVNode$1 as g,
  createCommentVNode$1 as h,
  defineStore as i,
  useStorage as j,
  watch$1 as k,
  resolveComponent$1 as l,
  withKeys as m,
  normalizeClass$1 as n,
  openBlock$1 as o,
  renderList$1 as p,
  createBlock$1 as q,
  ref$1 as r,
  useEventListener$1 as s,
  toDisplayString$2 as t,
  useCssVars$1 as u,
  isRef$1 as v,
  withCtx$1 as w,
  resolveDirective as x,
  withDirectives$1 as y,
  createTextVNode$1 as z
};
